/*******************************************************************************
 * am_audio_codec_if.h
 *
 * History:
 *   2014-9-24 - [ypchang] created file
 *
 * Copyright (c) 2016 Ambarella, Inc.
 *
 * This file and its contents ("Software") are protected by intellectual
 * property rights including, without limitation, U.S. and/or foreign
 * copyrights. This Software is also the confidential and proprietary
 * information of Ambarella, Inc. and its licensors. You may not use, reproduce,
 * disclose, distribute, modify, or otherwise prepare derivative works of this
 * Software or any portion thereof except pursuant to a signed license agreement
 * or nondisclosure agreement with Ambarella, Inc. or its authorized affiliates.
 * In the absence of such an agreement, you agree to promptly notify and return
 * this Software to Ambarella, Inc.
 *
 * THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF NON-INFRINGEMENT,
 * MERCHANTABILITY, AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL AMBARELLA, INC. OR ITS AFFILIATES BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; COMPUTER FAILURE OR MALFUNCTION; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 ******************************************************************************/
#ifndef AM_AUDIO_CODEC_IF_H_
#define AM_AUDIO_CODEC_IF_H_

#include "am_audio_type.h"

enum AM_AUDIO_CODEC_MODE
{
  AM_AUDIO_CODEC_MODE_NONE,
  AM_AUDIO_CODEC_MODE_ENCODE,
  AM_AUDIO_CODEC_MODE_DECODE,
};

struct AM_AUDIO_INFO;
class AMIAudioCodec
{
  public:
    virtual void destroy()                               = 0;
    virtual const std::string& get_codec_name()          = 0;
    virtual AM_AUDIO_CODEC_TYPE get_codec_type()         = 0;
    virtual bool is_initialized()                        = 0;
    virtual bool initialize(AM_AUDIO_INFO *srcAudioInfo,
                            AM_AUDIO_CODEC_MODE mode)    = 0;
    virtual bool finalize()                              = 0;
    /*
     * Encoded/Decoded audio information
     */
    virtual AM_AUDIO_INFO* get_codec_audio_info()        = 0;
    virtual uint32_t get_codec_output_size()             = 0;
    /*
     * Encode required audio source parameter, is the audio codec required
     * audio parameter for encoding, this is used for setting audio
     * capture's audio parameters;
     * This API must be called before initializing audio codec to encode mode
     */
    virtual bool get_encode_required_src_parameter(AM_AUDIO_INFO &info) = 0;
    /* encode: return generated bytes,
     * generated data size is also stored in out_data_size
     */
    virtual uint32_t encode(uint8_t *input,  uint32_t in_data_size,
                            uint8_t *output, uint32_t *out_data_size)   = 0;
    /* decode: return consumed bytes,
     * generated data size is stored in out_data_size
     */
    virtual uint32_t decode(uint8_t *input,  uint32_t in_data_size,
                            uint8_t *output, uint32_t *out_data_size)   = 0;
    virtual ~AMIAudioCodec(){}
};

#ifdef __cplusplus
extern "C" {
#endif
AMIAudioCodec* get_audio_codec(const char *config);
#ifdef __cplusplus
}
#endif

typedef AMIAudioCodec* (*AudioCodecNew)(const char *config);

#define AUDIO_CODEC_NEW ((const char*)"get_audio_codec")

#endif /* AM_AUDIO_CODEC_IF_H_ */
