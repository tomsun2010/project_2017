cscope 15 $HOME/Projects/SVN/SiP/Broadcom/Android/Trunk/Wi-Fi/bcmdhd.1.28.23.x.cn -q 0000007258 0001254207
	@aiutils.c

27 
	~<bcm_cfg.h
>

28 
	~<ty≥defs.h
>

29 
	~<bcmdefs.h
>

30 
	~<o¶.h
>

31 
	~<bcmutûs.h
>

32 
	~<siutûs.h
>

33 
	~<hndsoc.h
>

34 
	~<sbchùc.h
>

35 
	~<pcicfg.h
>

37 
	~"siutûs_¥iv.h
"

39 
	#BCM47162_DMP
(Ë(0)

	)

40 
	#BCM5357_DMP
(Ë(0)

	)

41 
	#ªm≠_c‹eid
(
sih
, 
c‹eid
Ë(c‹eid)

	)

42 
	#ªm≠_c‹îev
(
sih
, 
c‹îev
Ë(c‹îev)

	)

46 
uöt32


47 
	$gë_îom_ít
(
si_t
 *
sih
, 
uöt32
 **
îom±r
, uöt32 
mask
, uöt32 
m©ch
)

49 
uöt32
 
ít
;

50 
uöt
 
öv
 = 0, 
nom
 = 0;

52 
TRUE
) {

53 
ít
 = 
	`R_REG
(
	`si_osh
(
sih
), *
îom±r
);

54 (*
îom±r
)++;

56 i‡(
mask
 == 0)

59 i‡((
ít
 & 
ER_VALID
) == 0) {

60 
öv
++;

64 i‡(
ít
 =(
ER_END
 | 
ER_VALID
))

67 i‡((
ít
 & 
mask
Ë=
m©ch
)

70 
nom
++;

73 
	`SI_VMSG
(("%s: Rëu∫ögÉ¡ 0x%08x\n", 
__FUNCTION__
, 
ít
));

74 i‡(
öv
 + 
nom
) {

75 
	`SI_VMSG
(("á·î %d invÆidánd %dÇ⁄-m©chögÉ¡rõs\n", 
öv
, 
nom
));

77  
ít
;

78 
	}
}

80 
uöt32


81 
	$gë_asd
(
si_t
 *
sih
, 
uöt32
 **
îom±r
, 
uöt
 
•
, uöà
ad
, uöà
°
, uöt32 *
addæ
, uöt32 *
addrh
,

82 
uöt32
 *
sizñ
, uöt32 *
sizeh
)

84 
uöt32
 
asd
, 
sz
, 
szd
;

86 
asd
 = 
	`gë_îom_ít
(
sih
, 
îom±r
, 
ER_VALID
, ER_VALID);

87 i‡(((
asd
 & 
ER_TAG1
Ë!
ER_ADD
) ||

88 (((
asd
 & 
AD_SP_MASK
Ë>> 
AD_SP_SHIFT
Ë!
•
) ||

89 ((
asd
 & 
AD_ST_MASK
Ë!
°
)) {

91 (*
îom±r
)--;

94 *
addæ
 = 
asd
 & 
AD_ADDR_MASK
;

95 i‡(
asd
 & 
AD_AG32
)

96 *
addrh
 = 
	`gë_îom_ít
(
sih
, 
îom±r
, 0, 0);

98 *
addrh
 = 0;

99 *
sizeh
 = 0;

100 
sz
 = 
asd
 & 
AD_SZ_MASK
;

101 i‡(
sz
 =
AD_SZ_SZD
) {

102 
szd
 = 
	`gë_îom_ít
(
sih
, 
îom±r
, 0, 0);

103 *
sizñ
 = 
szd
 & 
SD_SZ_MASK
;

104 i‡(
szd
 & 
SD_SG32
)

105 *
sizeh
 = 
	`gë_îom_ít
(
sih
, 
îom±r
, 0, 0);

107 *
sizñ
 = 
AD_SZ_BASE
 << (
sz
 >> 
AD_SZ_SHIFT
);

109 
	`SI_VMSG
((" SP %d,ád %d: st = %d, 0x%08x_0x%08x @ 0x%08x_0x%08x\n",

110 
•
, 
ad
, 
°
, *
sizeh
, *
sizñ
, *
addrh
, *
addæ
));

112  
asd
;

113 
	}
}

116 
	$ai_hwfixup
(
si_öfo_t
 *
sii
)

118 
	}
}

123 
	$ai_sˇn
(
si_t
 *
sih
, *
ªgs
, 
uöt
 
devid
)

125 
si_öfo_t
 *
sii
 = 
	`SI_INFO
(
sih
);

126 
chù¸egs_t
 *
cc
 = (chù¸egs_à*)
ªgs
;

127 
uöt32
 
îomba£
, *
îom±r
, *
îomlim
;

129 
îomba£
 = 
	`R_REG
(
sii
->
osh
, &
cc
->
îom±r
);

131 
	`BUSTYPE
(
sih
->
bu°y≥
)) {

132 
SI_BUS
:

133 
îom±r
 = (
uöt32
 *)
	`REG_MAP
(
îomba£
, 
SI_CORE_SIZE
);

136 
PCI_BUS
:

138 
sii
->
curwøp
 = (*)((
uöçå
)
ªgs
 + 
SI_CORE_SIZE
);

141 
	`OSL_PCI_WRITE_CONFIG
(
sii
->
osh
, 
PCI_BAR0_WIN
, 4, 
îomba£
);

142 
îom±r
 = 
ªgs
;

145 
SPI_BUS
:

146 
SDIO_BUS
:

147 
îom±r
 = (
uöt32
 *)(
uöçå
)
îomba£
;

150 
PCMCIA_BUS
:

152 
	`SI_ERROR
(("D⁄'àknow howÅÿdÿAXIÉnumîti⁄ o¿bu†%d\n", 
sih
->
bu°y≥
));

153 
	`ASSERT
(0);

156 
îomlim
 = 
îom±r
 + (
ER_REMAPCONTROL
 / (
uöt32
));

158 
	`SI_VMSG
(("ai_scan:Ñegs = 0x%p,Érombase = 0x%08x,Éromptr = 0x%p,Éromlim = 0x%p\n",

159 
ªgs
, 
îomba£
, 
îom±r
, 
îomlim
));

160 
îom±r
 < 
îomlim
) {

161 
uöt32
 
cü
, 
cib
, 
cid
, 
mfg
, 
¸ev
, 
nmw
, 
nsw
, 
nmp
, 
n•
;

162 
uöt32
 
mpd
, 
asd
, 
addæ
, 
addrh
, 
sizñ
, 
sizeh
;

163 
uöt
 
i
, 
j
, 
idx
;

164 
boﬁ
 
br
;

166 
br
 = 
FALSE
;

169 
cü
 = 
	`gë_îom_ít
(
sih
, &
îom±r
, 
ER_TAG
, 
ER_CI
);

170 i‡(
cü
 =(
ER_END
 | 
ER_VALID
)) {

171 
	`SI_VMSG
(("Found END o‡îomá·î %d c‹es\n", 
sii
->
numc‹es
));

172 
	`ai_hwfixup
(
sii
);

176 
cib
 = 
	`gë_îom_ít
(
sih
, &
îom±r
, 0, 0);

178 i‡((
cib
 & 
ER_TAG
Ë!
ER_CI
) {

179 
	`SI_ERROR
(("CIAÇot followed by CIB\n"));

180 
îr‹
;

183 
cid
 = (
cü
 & 
CIA_CID_MASK
Ë>> 
CIA_CID_SHIFT
;

184 
mfg
 = (
cü
 & 
CIA_MFG_MASK
Ë>> 
CIA_MFG_SHIFT
;

185 
¸ev
 = (
cib
 & 
CIB_REV_MASK
Ë>> 
CIB_REV_SHIFT
;

186 
nmw
 = (
cib
 & 
CIB_NMW_MASK
Ë>> 
CIB_NMW_SHIFT
;

187 
nsw
 = (
cib
 & 
CIB_NSW_MASK
Ë>> 
CIB_NSW_SHIFT
;

188 
nmp
 = (
cib
 & 
CIB_NMP_MASK
Ë>> 
CIB_NMP_SHIFT
;

189 
n•
 = (
cib
 & 
CIB_NSP_MASK
Ë>> 
CIB_NSP_SHIFT
;

191 #ifde‡
BCMDBG_SI


192 
	`SI_VMSG
(("Found component 0x%04x/0x%04xÑev %dátÉromáddr 0x%p, withÇmw = %d, "

194 
mfg
, 
cid
, 
¸ev
, 
îom±r
 - 1, 
nmw
, 
nsw
, 
nmp
, 
n•
));

196 
	`BCM_REFERENCE
(
¸ev
);

199 i‡(((
mfg
 =
MFGID_ARM
Ë&& (
cid
 =
DEF_AI_COMP
)Ë|| (
n•
 == 0))

201 i‡((
nmw
 + 
nsw
 == 0)) {

203 i‡(
cid
 =
OOB_ROUTER_CORE_ID
) {

204 
asd
 = 
	`gë_asd
(
sih
, &
îom±r
, 0, 0, 
AD_ST_SLAVE
,

205 &
addæ
, &
addrh
, &
sizñ
, &
sizeh
);

206 i‡(
asd
 != 0) {

207 
sii
->
oob_rouãr
 = 
addæ
;

210 i‡(
cid
 !
GMAC_COMMON_4706_CORE_ID
)

214 
idx
 = 
sii
->
numc‹es
;

216 
sii
->
cü
[
idx
] = cia;

217 
sii
->
cib
[
idx
] = cib;

218 
sii
->
c‹eid
[
idx
] = 
	`ªm≠_c‹eid
(
sih
, 
cid
);

220 
i
 = 0; i < 
nmp
; i++) {

221 
mpd
 = 
	`gë_îom_ít
(
sih
, &
îom±r
, 
ER_VALID
, ER_VALID);

222 i‡((
mpd
 & 
ER_TAG
Ë!
ER_MP
) {

223 
	`SI_ERROR
(("NŸÉnough MPÉ¡rõ†f‹ comp⁄íà0x%x\n", 
cid
));

224 
îr‹
;

226 
	`SI_VMSG
((" Ma°îÖ‹à%d, mp: %d id: %d\n", 
i
,

227 (
mpd
 & 
MPD_MP_MASK
Ë>> 
MPD_MP_SHIFT
,

228 (
mpd
 & 
MPD_MUI_MASK
Ë>> 
MPD_MUI_SHIFT
));

234 
asd
 = 
	`gë_asd
(
sih
, &
îom±r
, 0, 0, 
AD_ST_SLAVE
, &
addæ
, &
addrh
, &
sizñ
, &
sizeh
);

235 i‡(
asd
 == 0) {

238 
asd
 = 
	`gë_asd
(
sih
, &
îom±r
, 0, 0, 
AD_ST_BRIDGE
, &
addæ
, &
addrh
,

239 &
sizñ
, &
sizeh
);

240 i‡(
asd
 != 0)

241 
br
 = 
TRUE
;

243 i‡(
br
 =
TRUE
) {

246 i‡((
addrh
 !0Ë|| (
sizeh
 != 0) ||

247 (
sizñ
 !
SI_CORE_SIZE
)) {

248 
	`SI_ERROR
(("addrh = 0x%x\t sizeh = 0x%x\t size1 ="

249 "0x%x\n", 
addrh
, 
sizeh
, 
sizñ
));

250 
	`SI_ERROR
(("First Slave ASD for"

252 "(0x%08x)\n", 
cid
, 
asd
));

253 
îr‹
;

258 
sii
->
c‹esba
[
idx
] = 
addæ
;

259 
sii
->
c‹esba_size
[
idx
] = 
sizñ
;

261 
j
 = 1;

263 
asd
 = 
	`gë_asd
(
sih
, &
îom±r
, 0, 
j
, 
AD_ST_SLAVE
, &
addæ
, &
addrh
,

264 &
sizñ
, &
sizeh
);

265 i‡((
asd
 !0Ë&& (
j
 =1Ë&& (
sizñ
 =
SI_CORE_SIZE
)) {

266 
sii
->
c‹esba2
[
idx
] = 
addæ
;

267 
sii
->
c‹esba2_size
[
idx
] = 
sizñ
;

269 
j
++;

270 } 
asd
 != 0);

273 
i
 = 1; i < 
n•
; i++) {

274 
j
 = 0;

276 
asd
 = 
	`gë_asd
(
sih
, &
îom±r
, 
i
, 
j
, 
AD_ST_SLAVE
, &
addæ
, &
addrh
,

277 &
sizñ
, &
sizeh
);

279 i‡(
asd
 == 0)

281 
j
++;

283 i‡(
j
 == 0) {

284 
	`SI_ERROR
((" SP %d ha†nÿaddªs†des¸ùt‹s\n", 
i
));

285 
îr‹
;

290 
i
 = 0; i < 
nmw
; i++) {

291 
asd
 = 
	`gë_asd
(
sih
, &
îom±r
, 
i
, 0, 
AD_ST_MWRAP
, &
addæ
, &
addrh
,

292 &
sizñ
, &
sizeh
);

293 i‡(
asd
 == 0) {

294 
	`SI_ERROR
(("Missög des¸ùt‹ f‹ MW %d\n", 
i
));

295 
îr‹
;

297 i‡((
sizeh
 !0Ë|| (
sizñ
 !
SI_CORE_SIZE
)) {

298 
	`SI_ERROR
(("Ma°î wøµî %d i†nŸ 4KB\n", 
i
));

299 
îr‹
;

301 i‡(
i
 == 0)

302 
sii
->
wøpba
[
idx
] = 
addæ
;

306 
i
 = 0; i < 
nsw
; i++) {

307 
uöt
 
fwp
 = (
n•
 == 1) ? 0 : 1;

308 
asd
 = 
	`gë_asd
(
sih
, &
îom±r
, 
fwp
 + 
i
, 0, 
AD_ST_SWRAP
, &
addæ
, &
addrh
,

309 &
sizñ
, &
sizeh
);

310 i‡(
asd
 == 0) {

311 
	`SI_ERROR
(("Missög des¸ùt‹ f‹ SW %d\n", 
i
));

312 
îr‹
;

314 i‡((
sizeh
 !0Ë|| (
sizñ
 !
SI_CORE_SIZE
)) {

315 
	`SI_ERROR
(("Sœvêwøµî %d i†nŸ 4KB\n", 
i
));

316 
îr‹
;

318 i‡((
nmw
 =0Ë&& (
i
 == 0))

319 
sii
->
wøpba
[
idx
] = 
addæ
;

324 i‡(
br
)

328 
sii
->
numc‹es
++;

331 
	`SI_ERROR
(("ReachedÉnd ofÉrom without finding END"));

333 
îr‹
:

334 
sii
->
numc‹es
 = 0;

336 
	}
}

342 
	$ai_£tc‹eidx
(
si_t
 *
sih
, 
uöt
 
c‹eidx
)

344 
si_öfo_t
 *
sii
 = 
	`SI_INFO
(
sih
);

345 
uöt32
 
addr
, 
wøp
;

346 *
ªgs
;

348 i‡(
c‹eidx
 >
	`MIN
(
sii
->
numc‹es
, 
SI_MAXCORES
))

349  (
NULL
);

351 
addr
 = 
sii
->
c‹esba
[
c‹eidx
];

352 
wøp
 = 
sii
->
wøpba
[
c‹eidx
];

358 
	`ASSERT
((
sii
->
öå£«bÀd_‚
 =
NULL
Ë|| !(*(sii)->öå£«bÀd_‚)((sii)->
öå_¨g
));

360 
	`BUSTYPE
(
sih
->
bu°y≥
)) {

361 
SI_BUS
:

363 i‡(!
sii
->
ªgs
[
c‹eidx
]) {

364 
sii
->
ªgs
[
c‹eidx
] = 
	`REG_MAP
(
addr
, 
SI_CORE_SIZE
);

365 
	`ASSERT
(
	`GOODREGS
(
sii
->
ªgs
[
c‹eidx
]));

367 
sii
->
curm≠
 = 
ªgs
 = sii->ªgs[
c‹eidx
];

368 i‡(!
sii
->
wøµîs
[
c‹eidx
]) {

369 
sii
->
wøµîs
[
c‹eidx
] = 
	`REG_MAP
(
wøp
, 
SI_CORE_SIZE
);

370 
	`ASSERT
(
	`GOODREGS
(
sii
->
wøµîs
[
c‹eidx
]));

372 
sii
->
curwøp
 = sii->
wøµîs
[
c‹eidx
];

376 
SPI_BUS
:

377 
SDIO_BUS
:

378 
sii
->
curm≠
 = 
ªgs
 = (*)((
uöçå
)
addr
);

379 
sii
->
curwøp
 = (*)((
uöçå
)
wøp
);

382 
PCMCIA_BUS
:

384 
	`ASSERT
(0);

385 
ªgs
 = 
NULL
;

389 
sii
->
curm≠
 = 
ªgs
;

390 
sii
->
curidx
 = 
c‹eidx
;

392  
ªgs
;

393 
	}
}

396 
	$ai_c‹óddr•a˚X
(
si_t
 *
sih
, 
uöt
 
asidx
, 
uöt32
 *
addr
, uöt32 *
size
)

398 
si_öfo_t
 *
sii
 = 
	`SI_INFO
(
sih
);

399 
chù¸egs_t
 *
cc
 = 
NULL
;

400 
uöt32
 
îomba£
, *
îom±r
, *
îomlim
;

401 
uöt
 
i
, 
j
, 
cidx
;

402 
uöt32
 
cü
, 
cib
, 
nmp
, 
n•
;

403 
uöt32
 
asd
, 
addæ
, 
addrh
, 
sizñ
, 
sizeh
;

405 
i
 = 0; i < 
sii
->
numc‹es
; i++) {

406 i‡(
sii
->
c‹eid
[
i
] =
CC_CORE_ID
) {

407 
cc
 = (
chù¸egs_t
 *)
sii
->
ªgs
[
i
];

411 i‡(
cc
 =
NULL
)

412 
îr‹
;

414 
îomba£
 = 
	`R_REG
(
sii
->
osh
, &
cc
->
îom±r
);

415 
îom±r
 = (
uöt32
 *)
	`REG_MAP
(
îomba£
, 
SI_CORE_SIZE
);

416 
îomlim
 = 
îom±r
 + (
ER_REMAPCONTROL
 / (
uöt32
));

418 
cidx
 = 
sii
->
curidx
;

419 
cü
 = 
sii
->cü[
cidx
];

420 
cib
 = 
sii
->cib[
cidx
];

422 
nmp
 = (
cib
 & 
CIB_NMP_MASK
Ë>> 
CIB_NMP_SHIFT
;

423 
n•
 = (
cib
 & 
CIB_NSP_MASK
Ë>> 
CIB_NSP_SHIFT
;

426 
îom±r
 < 
îomlim
) {

427 i‡((
	`gë_îom_ít
(
sih
, &
îom±r
, 
ER_TAG
, 
ER_CI
Ë=
cü
) &&

428 (
	`gë_îom_ít
(
sih
, &
îom±r
, 0, 0Ë=
cib
)) {

434 
i
 = 0; i < 
nmp
; i++)

435 
	`gë_îom_ít
(
sih
, &
îom±r
, 
ER_VALID
, ER_VALID);

438 
asd
 = 
	`gë_asd
(
sih
, &
îom±r
, 0, 0, 
AD_ST_SLAVE
, &
addæ
, &
addrh
, &
sizñ
, &
sizeh
);

439 i‡(
asd
 == 0) {

441 
asd
 = 
	`gë_asd
(
sih
, &
îom±r
, 0, 0, 
AD_ST_BRIDGE
, &
addæ
, &
addrh
,

442 &
sizñ
, &
sizeh
);

445 
j
 = 1;

447 
asd
 = 
	`gë_asd
(
sih
, &
îom±r
, 0, 
j
, 
AD_ST_SLAVE
, &
addæ
, &
addrh
,

448 &
sizñ
, &
sizeh
);

449 
j
++;

450 } 
asd
 != 0);

453 
i
 = 1; i < 
n•
; i++) {

454 
j
 = 0;

456 
asd
 = 
	`gë_asd
(
sih
, &
îom±r
, 
i
, 
j
, 
AD_ST_SLAVE
, &
addæ
, &
addrh
,

457 &
sizñ
, &
sizeh
);

458 i‡(
asd
 == 0)

461 i‡(!
asidx
--) {

462 *
addr
 = 
addæ
;

463 *
size
 = 
sizñ
;

466 
j
++;

469 i‡(
j
 == 0) {

470 
	`SI_ERROR
((" SP %d ha†nÿaddªs†des¸ùt‹s\n", 
i
));

475 
îr‹
:

476 *
size
 = 0;

478 
	}
}

482 
	$ai_numaddr•a˚s
(
si_t
 *
sih
)

485 
	}
}

488 
uöt32


489 
	$ai_addr•a˚
(
si_t
 *
sih
, 
uöt
 
asidx
)

491 
si_öfo_t
 *
sii
;

492 
uöt
 
cidx
;

494 
sii
 = 
	`SI_INFO
(
sih
);

495 
cidx
 = 
sii
->
curidx
;

497 i‡(
asidx
 == 0)

498  
sii
->
c‹esba
[
cidx
];

499 i‡(
asidx
 == 1)

500  
sii
->
c‹esba2
[
cidx
];

502 
	`SI_ERROR
(("%s: NeedÅoÖarseÅheÉromágainÅo findáddr space %d\n",

503 
__FUNCTION__
, 
asidx
));

506 
	}
}

509 
uöt32


510 
	$ai_addr•a˚size
(
si_t
 *
sih
, 
uöt
 
asidx
)

512 
si_öfo_t
 *
sii
;

513 
uöt
 
cidx
;

515 
sii
 = 
	`SI_INFO
(
sih
);

516 
cidx
 = 
sii
->
curidx
;

518 i‡(
asidx
 == 0)

519  
sii
->
c‹esba_size
[
cidx
];

520 i‡(
asidx
 == 1)

521  
sii
->
c‹esba2_size
[
cidx
];

523 
	`SI_ERROR
(("%s: NeedÅoÖarseÅheÉromágainÅo findáddr space %d\n",

524 
__FUNCTION__
, 
asidx
));

527 
	}
}

529 
uöt


530 
	$ai_Êag
(
si_t
 *
sih
)

532 
si_öfo_t
 *
sii
;

533 
aidmp_t
 *
ai
;

535 
sii
 = 
	`SI_INFO
(
sih
);

536 i‡(
	`BCM47162_DMP
()) {

537 
	`SI_ERROR
(("%s: Aâem±ögÅÿªad MIPS DMPÑegi°î†⁄ 47162a0", 
__FUNCTION__
));

538  
sii
->
curidx
;

540 i‡(
	`BCM5357_DMP
()) {

541 
	`SI_ERROR
(("%s: Aâem±ögÅÿªad USB20H DMPÑegi°î†⁄ 5357b0\n", 
__FUNCTION__
));

542  
sii
->
curidx
;

544 
ai
 = 
sii
->
curwøp
;

546  (
	`R_REG
(
sii
->
osh
, &
ai
->
oob£louè30
) & 0x1f);

547 
	}
}

550 
	$ai_£töt
(
si_t
 *
sih
, 
siÊag
)

552 
	}
}

554 
uöt


555 
	$ai_wøp_ªg
(
si_t
 *
sih
, 
uöt32
 
off£t
, uöt32 
mask
, uöt32 
vÆ
)

557 
si_öfo_t
 *
sii
 = 
	`SI_INFO
(
sih
);

558 
uöt32
 *
m≠
 = (uöt32 *Ë
sii
->
curwøp
;

560 i‡(
mask
 || 
vÆ
) {

561 
uöt32
 
w
 = 
	`R_REG
(
sii
->
osh
, 
m≠
+(
off£t
/4));

562 
w
 &~
mask
;

563 
w
 |
vÆ
;

564 
	`W_REG
(
sii
->
osh
, 
m≠
+(
off£t
/4), 
vÆ
);

567  (
	`R_REG
(
sii
->
osh
, 
m≠
+(
off£t
/4)));

568 
	}
}

570 
uöt


571 
	$ai_c‹evíd‹
(
si_t
 *
sih
)

573 
si_öfo_t
 *
sii
;

574 
uöt32
 
cü
;

576 
sii
 = 
	`SI_INFO
(
sih
);

577 
cü
 = 
sii
->cü[sii->
curidx
];

578  ((
cü
 & 
CIA_MFG_MASK
Ë>> 
CIA_MFG_SHIFT
);

579 
	}
}

581 
uöt


582 
	$ai_c‹îev
(
si_t
 *
sih
)

584 
si_öfo_t
 *
sii
;

585 
uöt32
 
cib
;

587 
sii
 = 
	`SI_INFO
(
sih
);

588 
cib
 = 
sii
->cib[sii->
curidx
];

589  
	`ªm≠_c‹îev
(
sih
, (
cib
 & 
CIB_REV_MASK
Ë>> 
CIB_REV_SHIFT
);

590 
	}
}

592 
boﬁ


593 
	$ai_isc‹eup
(
si_t
 *
sih
)

595 
si_öfo_t
 *
sii
;

596 
aidmp_t
 *
ai
;

598 
sii
 = 
	`SI_INFO
(
sih
);

599 
ai
 = 
sii
->
curwøp
;

601  (((
	`R_REG
(
sii
->
osh
, &
ai
->
io˘æ
Ë& (
SICF_FGC
 | 
SICF_CLOCK_EN
)) == SICF_CLOCK_EN) &&

602 ((
	`R_REG
(
sii
->
osh
, &
ai
->
ª£t˘æ
Ë& 
AIRC_RESET
) == 0));

603 
	}
}

614 
uöt


615 
	$ai_c‹îeg
(
si_t
 *
sih
, 
uöt
 
c‹eidx
, uöà
ªgoff
, uöà
mask
, uöà
vÆ
)

617 
uöt
 
‹igidx
 = 0;

618 
uöt32
 *
r
 = 
NULL
;

619 
uöt
 
w
;

620 
uöt
 
öå_vÆ
 = 0;

621 
boﬁ
 
Á°
 = 
FALSE
;

622 
si_öfo_t
 *
sii
;

624 
sii
 = 
	`SI_INFO
(
sih
);

626 
	`ASSERT
(
	`GOODIDX
(
c‹eidx
));

627 
	`ASSERT
(
ªgoff
 < 
SI_CORE_SIZE
);

628 
	`ASSERT
((
vÆ
 & ~
mask
) == 0);

630 i‡(
c‹eidx
 >
SI_MAXCORES
)

633 i‡(
	`BUSTYPE
(
sih
->
bu°y≥
Ë=
SI_BUS
) {

635 
Á°
 = 
TRUE
;

637 i‡(!
sii
->
ªgs
[
c‹eidx
]) {

638 
sii
->
ªgs
[
c‹eidx
] = 
	`REG_MAP
(sii->
c‹esba
[coreidx],

639 
SI_CORE_SIZE
);

640 
	`ASSERT
(
	`GOODREGS
(
sii
->
ªgs
[
c‹eidx
]));

642 
r
 = (
uöt32
 *)((
uch¨
 *)
sii
->
ªgs
[
c‹eidx
] + 
ªgoff
);

643 } i‡(
	`BUSTYPE
(
sih
->
bu°y≥
Ë=
PCI_BUS
) {

646 i‡((
sii
->
c‹eid
[
c‹eidx
] =
CC_CORE_ID
Ë&& 
	`SI_FAST
(sii)) {

649 
Á°
 = 
TRUE
;

650 
r
 = (
uöt32
 *)((*)
sii
->
curm≠
 + 
PCI_16KB0_CCREGS_OFFSET
 + 
ªgoff
);

651 } i‡(
sii
->
pub
.
busc‹eidx
 =
c‹eidx
) {

655 
Á°
 = 
TRUE
;

656 i‡(
	`SI_FAST
(
sii
))

657 
r
 = (
uöt32
 *)((*)
sii
->
curm≠
 +

658 
PCI_16KB0_PCIREGS_OFFSET
 + 
ªgoff
);

660 
r
 = (
uöt32
 *)((*)
sii
->
curm≠
 +

661 ((
ªgoff
 >
SBCONFIGOFF
) ?

662 
PCI_BAR0_PCISBR_OFFSET
 : 
PCI_BAR0_PCIREGS_OFFSET
) +

663 
ªgoff
);

667 i‡(!
Á°
) {

668 
	`INTR_OFF
(
sii
, 
öå_vÆ
);

671 
‹igidx
 = 
	`si_c‹eidx
(&
sii
->
pub
);

674 
r
 = (
uöt32
*Ë((
uch¨
*Ë
	`ai_£tc‹eidx
(&
sii
->
pub
, 
c‹eidx
Ë+ 
ªgoff
);

676 
	`ASSERT
(
r
 !
NULL
);

679 i‡(
mask
 || 
vÆ
) {

680 
w
 = (
	`R_REG
(
sii
->
osh
, 
r
Ë& ~
mask
Ë| 
vÆ
;

681 
	`W_REG
(
sii
->
osh
, 
r
, 
w
);

685 
w
 = 
	`R_REG
(
sii
->
osh
, 
r
);

687 i‡(!
Á°
) {

689 i‡(
‹igidx
 !
c‹eidx
)

690 
	`ai_£tc‹eidx
(&
sii
->
pub
, 
‹igidx
);

692 
	`INTR_RESTORE
(
sii
, 
öå_vÆ
);

695  (
w
);

696 
	}
}

699 
	$ai_c‹e_dißbÀ
(
si_t
 *
sih
, 
uöt32
 
bôs
)

701 
si_öfo_t
 *
sii
;

702 vﬁ©ûê
uöt32
 
dummy
;

703 
uöt32
 
°©us
;

704 
aidmp_t
 *
ai
;

706 
sii
 = 
	`SI_INFO
(
sih
);

708 
	`ASSERT
(
	`GOODREGS
(
sii
->
curwøp
));

709 
ai
 = 
sii
->
curwøp
;

712 i‡(
	`R_REG
(
sii
->
osh
, &
ai
->
ª£t˘æ
Ë& 
AIRC_RESET
)

716 
	`SPINWAIT
(((
°©us
 = 
	`R_REG
(
sii
->
osh
, &
ai
->
ª£t°©us
)) != 0), 300);

719 i‡(
°©us
 != 0) {

722 
	`SPINWAIT
(((
°©us
 = 
	`R_REG
(
sii
->
osh
, &
ai
->
ª£t°©us
)) != 0), 10000);

727 
	`W_REG
(
sii
->
osh
, &
ai
->
io˘æ
, 
bôs
);

728 
dummy
 = 
	`R_REG
(
sii
->
osh
, &
ai
->
io˘æ
);

729 
	`BCM_REFERENCE
(
dummy
);

730 
	`OSL_DELAY
(10);

732 
	`W_REG
(
sii
->
osh
, &
ai
->
ª£t˘æ
, 
AIRC_RESET
);

733 
dummy
 = 
	`R_REG
(
sii
->
osh
, &
ai
->
ª£t˘æ
);

734 
	`BCM_REFERENCE
(
dummy
);

735 
	`OSL_DELAY
(1);

736 
	}
}

744 
	$ai_c‹e_ª£t
(
si_t
 *
sih
, 
uöt32
 
bôs
, uöt32 
ª£tbôs
)

746 
si_öfo_t
 *
sii
;

747 
aidmp_t
 *
ai
;

748 vﬁ©ûê
uöt32
 
dummy
;

750 
sii
 = 
	`SI_INFO
(
sih
);

751 
	`ASSERT
(
	`GOODREGS
(
sii
->
curwøp
));

752 
ai
 = 
sii
->
curwøp
;

757 
	`ai_c‹e_dißbÀ
(
sih
, (
bôs
 | 
ª£tbôs
));

762 
	`W_REG
(
sii
->
osh
, &
ai
->
io˘æ
, (
bôs
 | 
SICF_FGC
 | 
SICF_CLOCK_EN
));

763 
dummy
 = 
	`R_REG
(
sii
->
osh
, &
ai
->
io˘æ
);

764 
	`BCM_REFERENCE
(
dummy
);

766 
	`W_REG
(
sii
->
osh
, &
ai
->
ª£t˘æ
, 0);

767 
dummy
 = 
	`R_REG
(
sii
->
osh
, &
ai
->
ª£t˘æ
);

768 
	`BCM_REFERENCE
(
dummy
);

769 
	`OSL_DELAY
(1);

771 
	`W_REG
(
sii
->
osh
, &
ai
->
io˘æ
, (
bôs
 | 
SICF_CLOCK_EN
));

772 
dummy
 = 
	`R_REG
(
sii
->
osh
, &
ai
->
io˘æ
);

773 
	`BCM_REFERENCE
(
dummy
);

774 
	`OSL_DELAY
(1);

775 
	}
}

778 
	$ai_c‹e_cÊags_wo
(
si_t
 *
sih
, 
uöt32
 
mask
, uöt32 
vÆ
)

780 
si_öfo_t
 *
sii
;

781 
aidmp_t
 *
ai
;

782 
uöt32
 
w
;

784 
sii
 = 
	`SI_INFO
(
sih
);

786 i‡(
	`BCM47162_DMP
()) {

787 
	`SI_ERROR
(("%s: Accessing MIPS DMPÑegister (ioctrl) on 47162a0",

788 
__FUNCTION__
));

791 i‡(
	`BCM5357_DMP
()) {

792 
	`SI_ERROR
(("%s: Accessing USB20H DMPÑegister (ioctrl) on 5357\n",

793 
__FUNCTION__
));

797 
	`ASSERT
(
	`GOODREGS
(
sii
->
curwøp
));

798 
ai
 = 
sii
->
curwøp
;

800 
	`ASSERT
((
vÆ
 & ~
mask
) == 0);

802 i‡(
mask
 || 
vÆ
) {

803 
w
 = ((
	`R_REG
(
sii
->
osh
, &
ai
->
io˘æ
Ë& ~
mask
Ë| 
vÆ
);

804 
	`W_REG
(
sii
->
osh
, &
ai
->
io˘æ
, 
w
);

806 
	}
}

808 
uöt32


809 
	$ai_c‹e_cÊags
(
si_t
 *
sih
, 
uöt32
 
mask
, uöt32 
vÆ
)

811 
si_öfo_t
 *
sii
;

812 
aidmp_t
 *
ai
;

813 
uöt32
 
w
;

815 
sii
 = 
	`SI_INFO
(
sih
);

816 i‡(
	`BCM47162_DMP
()) {

817 
	`SI_ERROR
(("%s: Accessing MIPS DMPÑegister (ioctrl) on 47162a0",

818 
__FUNCTION__
));

821 i‡(
	`BCM5357_DMP
()) {

822 
	`SI_ERROR
(("%s: Accessing USB20H DMPÑegister (ioctrl) on 5357\n",

823 
__FUNCTION__
));

827 
	`ASSERT
(
	`GOODREGS
(
sii
->
curwøp
));

828 
ai
 = 
sii
->
curwøp
;

830 
	`ASSERT
((
vÆ
 & ~
mask
) == 0);

832 i‡(
mask
 || 
vÆ
) {

833 
w
 = ((
	`R_REG
(
sii
->
osh
, &
ai
->
io˘æ
Ë& ~
mask
Ë| 
vÆ
);

834 
	`W_REG
(
sii
->
osh
, &
ai
->
io˘æ
, 
w
);

837  
	`R_REG
(
sii
->
osh
, &
ai
->
io˘æ
);

838 
	}
}

840 
uöt32


841 
	$ai_c‹e_sÊags
(
si_t
 *
sih
, 
uöt32
 
mask
, uöt32 
vÆ
)

843 
si_öfo_t
 *
sii
;

844 
aidmp_t
 *
ai
;

845 
uöt32
 
w
;

847 
sii
 = 
	`SI_INFO
(
sih
);

848 i‡(
	`BCM47162_DMP
()) {

849 
	`SI_ERROR
(("%s: Accessing MIPS DMPÑegister (iostatus) on 47162a0",

850 
__FUNCTION__
));

853 i‡(
	`BCM5357_DMP
()) {

854 
	`SI_ERROR
(("%s: Accessing USB20H DMPÑegister (iostatus) on 5357\n",

855 
__FUNCTION__
));

859 
	`ASSERT
(
	`GOODREGS
(
sii
->
curwøp
));

860 
ai
 = 
sii
->
curwøp
;

862 
	`ASSERT
((
vÆ
 & ~
mask
) == 0);

863 
	`ASSERT
((
mask
 & ~
SISF_CORE_BITS
) == 0);

865 i‡(
mask
 || 
vÆ
) {

866 
w
 = ((
	`R_REG
(
sii
->
osh
, &
ai
->
io°©us
Ë& ~
mask
Ë| 
vÆ
);

867 
	`W_REG
(
sii
->
osh
, &
ai
->
io°©us
, 
w
);

870  
	`R_REG
(
sii
->
osh
, &
ai
->
io°©us
);

871 
	}
}

	@bcmevent.c

26 
	~<ty≥defs.h
>

27 
	~<bcmutûs.h
>

28 
	~<¥Ÿo/ëhî√t.h
>

29 
	~<¥Ÿo/bcmëh.h
>

30 
	~<¥Ÿo/bcmevít.h
>

32 #i‡
WLC_E_LAST
 != 107

36 c⁄° 
bcmevít_«me_t
 
	gbcmevít_«mes
[] = {

37 { 
WLC_E_SET_SSID
, "SET_SSID" },

38 { 
WLC_E_JOIN
, "JOIN" },

39 { 
WLC_E_START
, "START" },

40 { 
WLC_E_AUTH
, "AUTH" },

41 { 
WLC_E_AUTH_IND
, "AUTH_IND" },

42 { 
WLC_E_DEAUTH
, "DEAUTH" },

43 { 
WLC_E_DEAUTH_IND
, "DEAUTH_IND" },

44 { 
WLC_E_ASSOC
, "ASSOC" },

45 { 
WLC_E_ASSOC_IND
, "ASSOC_IND" },

46 { 
WLC_E_REASSOC
, "REASSOC" },

47 { 
WLC_E_REASSOC_IND
, "REASSOC_IND" },

48 { 
WLC_E_DISASSOC
, "DISASSOC" },

49 { 
WLC_E_DISASSOC_IND
, "DISASSOC_IND" },

50 { 
WLC_E_QUIET_START
, "START_QUIET" },

51 { 
WLC_E_QUIET_END
, "END_QUIET" },

52 { 
WLC_E_BEACON_RX
, "BEACON_RX" },

53 { 
WLC_E_LINK
, "LINK" },

54 { 
WLC_E_MIC_ERROR
, "MIC_ERROR" },

55 { 
WLC_E_NDIS_LINK
, "NDIS_LINK" },

56 { 
WLC_E_ROAM
, "ROAM" },

57 { 
WLC_E_TXFAIL
, "TXFAIL" },

58 { 
WLC_E_PMKID_CACHE
, "PMKID_CACHE" },

59 { 
WLC_E_RETROGRADE_TSF
, "RETROGRADE_TSF" },

60 { 
WLC_E_PRUNE
, "PRUNE" },

61 { 
WLC_E_AUTOAUTH
, "AUTOAUTH" },

62 { 
WLC_E_EAPOL_MSG
, "EAPOL_MSG" },

63 { 
WLC_E_SCAN_COMPLETE
, "SCAN_COMPLETE" },

64 { 
WLC_E_ADDTS_IND
, "ADDTS_IND" },

65 { 
WLC_E_DELTS_IND
, "DELTS_IND" },

66 { 
WLC_E_BCNSENT_IND
, "BCNSENT_IND" },

67 { 
WLC_E_BCNRX_MSG
, "BCNRX_MSG" },

68 { 
WLC_E_BCNLOST_MSG
, "BCNLOST_IND" },

69 { 
WLC_E_ROAM_PREP
, "ROAM_PREP" },

70 { 
WLC_E_PFN_NET_FOUND
, "PFNFOUND_IND" },

71 { 
WLC_E_PFN_NET_LOST
, "PFNLOST_IND" },

72 #i‡
deföed
(
IBSS_PEER_DISCOVERY_EVENT
)

73 { 
WLC_E_IBSS_ASSOC
, "IBSS_ASSOC" },

75 { 
WLC_E_RADIO
, "RADIO" },

76 { 
WLC_E_PSM_WATCHDOG
, "PSM_WATCHDOG" },

77 { 
WLC_E_PROBREQ_MSG
, "PROBE_REQ_MSG" },

78 { 
WLC_E_SCAN_CONFIRM_IND
, "SCAN_CONFIRM_IND" },

79 { 
WLC_E_PSK_SUP
, "PSK_SUP" },

80 { 
WLC_E_COUNTRY_CODE_CHANGED
, "CNTRYCODE_IND" },

81 { 
WLC_E_EXCEEDED_MEDIUM_TIME
, "EXCEEDED_MEDIUM_TIME" },

82 { 
WLC_E_ICV_ERROR
, "ICV_ERROR" },

83 { 
WLC_E_UNICAST_DECODE_ERROR
, "UNICAST_DECODE_ERROR" },

84 { 
WLC_E_MULTICAST_DECODE_ERROR
, "MULTICAST_DECODE_ERROR" },

85 { 
WLC_E_TRACE
, "TRACE" },

86 #ifde‡
WLBTAMP


87 { 
WLC_E_BTA_HCI_EVENT
, "BTA_HCI_EVENT" },

89 { 
WLC_E_IF
, "IF" },

90 #ifde‡
WLP2P


91 { 
WLC_E_P2P_DISC_LISTEN_COMPLETE
, "WLC_E_P2P_DISC_LISTEN_COMPLETE" },

93 { 
WLC_E_RSSI
, "RSSI" },

94 { 
WLC_E_PFN_SCAN_COMPLETE
, "SCAN_COMPLETE" },

95 { 
WLC_E_EXTLOG_MSG
, "EXTERNAL LOG MESSAGE" },

96 #ifde‡
WIFI_ACT_FRAME


97 { 
WLC_E_ACTION_FRAME
, "ACTION_FRAME" },

98 { 
WLC_E_ACTION_FRAME_RX
, "ACTION_FRAME_RX" },

99 { 
WLC_E_ACTION_FRAME_COMPLETE
, "ACTION_FRAME_COMPLETE" },

101 #ifde‡
BCMWAPI_WAI


102 { 
WLC_E_WAI_STA_EVENT
, "WAI_STA_EVENT" },

103 { 
WLC_E_WAI_MSG
, "WAI_MSG" },

105 #i‡0 && (
NDISVER
 >= 0x0620)

106 { 
WLC_E_PRE_ASSOC_IND
, "ASSOC_RECV" },

107 { 
WLC_E_PRE_REASSOC_IND
, "REASSOC_RECV" },

108 { 
WLC_E_CHANNEL_ADOPTED
, "CHANNEL_ADOPTED" },

109 { 
WLC_E_AP_STARTED
, "AP_STARTED" },

110 { 
WLC_E_DFS_AP_STOP
, "DFS_AP_STOP" },

111 { 
WLC_E_DFS_AP_RESUME
, "DFS_AP_RESUME" },

112 { 
WLC_E_ASSOC_IND_NDIS
, "ASSOC_IND_NDIS"},

113 { 
WLC_E_REASSOC_IND_NDIS
, "REASSOC_IND_NDIS"},

114 { 
WLC_E_ACTION_FRAME_RX_NDIS
, "WLC_E_ACTION_FRAME_RX_NDIS" },

115 { 
WLC_E_AUTH_REQ
, "WLC_E_AUTH_REQ" },

117 { 
WLC_E_ESCAN_RESULT
, "WLC_E_ESCAN_RESULT" },

118 { 
WLC_E_ACTION_FRAME_OFF_CHAN_COMPLETE
, "WLC_E_AF_OFF_CHAN_COMPLETE" },

119 #ifde‡
WLP2P


120 { 
WLC_E_PROBRESP_MSG
, "PROBE_RESP_MSG" },

121 { 
WLC_E_P2P_PROBREQ_MSG
, "P2P PROBE_REQ_MSG" },

123 #ifde‡
PROP_TXSTATUS


124 { 
WLC_E_FIFO_CREDIT_MAP
, "FIFO_CREDIT_MAP" },

126 { 
WLC_E_WAKE_EVENT
, "WAKE_EVENT" },

127 { 
WLC_E_DCS_REQUEST
, "DCS_REQUEST" },

128 { 
WLC_E_RM_COMPLETE
, "RM_COMPLETE" },

129 #ifde‡
WLMEDIA_HTSF


130 { 
WLC_E_HTSFSYNC
, "HTSF_SYNC_EVENT" },

132 { 
WLC_E_OVERLAY_REQ
, "OVERLAY_REQ_EVENT" },

133 { 
WLC_E_CSA_COMPLETE_IND
, "WLC_E_CSA_COMPLETE_IND"},

134 { 
WLC_E_EXCESS_PM_WAKE_EVENT
, "EXCESS_PM_WAKE_EVENT" },

135 { 
WLC_E_PFN_SCAN_NONE
, "PFN_SCAN_NONE" },

136 { 
WLC_E_PFN_SCAN_ALLGONE
, "PFN_SCAN_ALLGONE" },

137 #ifde‡
SOFTAP


138 { 
WLC_E_GTK_PLUMBED
, "GTK_PLUMBED" },

140 { 
WLC_E_ASSOC_REQ_IE
, "ASSOC_REQ_IE" },

141 { 
WLC_E_ASSOC_RESP_IE
, "ASSOC_RESP_IE" },

142 { 
WLC_E_ACTION_FRAME_RX_NDIS
, "WLC_E_ACTION_FRAME_RX_NDIS" },

143 #ifde‡
WLTDLS


144 { 
WLC_E_TDLS_PEER_EVENT
, "TDLS_PEER_EVENT" },

146 { 
WLC_E_SERVICE_FOUND
, "SERVICE_FOUND" },

147 { 
WLC_E_P2PO_ADD_DEVICE
, "P2PO_DEV_FOUND" },

148 { 
WLC_E_P2PO_DEL_DEVICE
, "P2PO_DEV_LOST" },

151 c⁄° 
	gbcmevít_«mes_size
 = 
ARRAYSIZE
(
bcmevít_«mes
);

	@bcmsdh.c

34 
	~<ty≥defs.h
>

35 
	~<bcmdevs.h
>

36 
	~<bcmídün.h
>

37 
	~<bcmutûs.h
>

38 
	~<hndsoc.h
>

39 
	~<siutûs.h
>

40 
	~<o¶.h
>

42 
	~<bcmsdh.h
>

43 
	~<bcmsdbus.h
>

44 
	~<sbsdio.h
>

46 
	~<sdio.h
>

48 
	#SDIOH_API_ACCESS_RETRY_LIMIT
 2

	)

49 c⁄° 
uöt
 
	gbcmsdh_msgÀvñ
 = 
BCMSDH_ERROR_VAL
;

54 
	sbcmsdh_öfo


56 
boﬁ
 
	möô_suc˚ss
;

57 *
	msdioh
;

58 
uöt32
 
	mvídevid
;

59 
o¶_t
 *
	mosh
;

60 
boﬁ
 
	mªgÁû
;

61 
uöt32
 
	msbwad
;

64 
bcmsdh_öfo_t
 * 
	gl_bcmsdh
 = 
NULL
;

66 #i‡
deföed
(
OOB_INTR_ONLY
Ë&& deföed(
HW_OOB
)

68 
sdioh_íabÀ_hw_oob_öå
(*
sdioh
, 
boﬁ
 
íabÀ
);

71 
	$bcmsdh_íabÀ_hw_oob_öå
(
bcmsdh_öfo_t
 *
sdh
, 
boﬁ
 
íabÀ
)

73 
	`sdioh_íabÀ_hw_oob_öå
(
sdh
->
sdioh
, 
íabÀ
);

74 
	}
}

77 #i‡
deföed
(
HW_OOB
)

78 
	~<sbchùc.h
>

80 
	$bcmsdh_c⁄fig_hw_oob_öå
(
bcmsdh_öfo_t
 *
sdh
, 
uöt
 
chù
)

82 
uöt32
 
gpioc⁄åﬁ
, 
addr
;

84 
	`¥ötf
("%s: E¡î\n", 
__FUNCTION__
);

85 i‡(
	`CHIPID
(
chù
Ë=
BCM43362_CHIP_ID
) {

86 
addr
 = 
SI_ENUM_BASE
 + 
	`OFFSETOF
(
chù¸egs_t
, 
gpioc⁄åﬁ
);

87 
gpioc⁄åﬁ
 = 
	`bcmsdh_ªg_ªad
(
sdh
, 
addr
, 4);

88 
gpioc⁄åﬁ
 |= 0x2;

89 
	`bcmsdh_ªg_wrôe
(
sdh
, 
addr
, 4, 
gpioc⁄åﬁ
);

90 
	`bcmsdh_cfg_wrôe
(
sdh
, 
SDIO_FUNC_1
, 0x10005, 0xf, 
NULL
);

91 
	`bcmsdh_cfg_wrôe
(
sdh
, 
SDIO_FUNC_1
, 0x10006, 0x0, 
NULL
);

92 
	`bcmsdh_cfg_wrôe
(
sdh
, 
SDIO_FUNC_1
, 0x10007, 0x2, 
NULL
);

94 
	}
}

106 
bcmsdh_öfo_t
 *

107 
	$bcmsdh_©èch
(
o¶_t
 *
osh
, *
cfghdl
, **
ªgsva
, 
uöt
 
úq
)

109 
bcmsdh_öfo_t
 *
bcmsdh
;

111 i‡((
bcmsdh
 = (
bcmsdh_öfo_t
 *)
	`MALLOC
(
osh
, (bcmsdh_öfo_t))Ë=
NULL
) {

112 
	`BCMSDH_ERROR
(("bcmsdh_©èch: ouào‡mem‹y, mÆlo˚d %d byãs\n", 
	`MALLOCED
(
osh
)));

113  
NULL
;

115 
	`bzîo
((*)
bcmsdh
, (
bcmsdh_öfo_t
));

118 
l_bcmsdh
 = 
bcmsdh
;

120 i‡(!(
bcmsdh
->
sdioh
 = 
	`sdioh_©èch
(
osh
, 
cfghdl
, 
úq
))) {

121 
	`bcmsdh_dëach
(
osh
, 
bcmsdh
);

122  
NULL
;

125 
bcmsdh
->
osh
 = osh;

126 
bcmsdh
->
öô_suc˚ss
 = 
TRUE
;

128 *
ªgsva
 = (
uöt32
 *)
SI_ENUM_BASE
;

131 
bcmsdh
->
sbwad
 = 
SI_ENUM_BASE
;

132  
bcmsdh
;

133 
	}
}

136 
	$bcmsdh_dëach
(
o¶_t
 *
osh
, *
sdh
)

138 
bcmsdh_öfo_t
 *
bcmsdh
 = (bcmsdh_öfo_à*)
sdh
;

140 i‡(
bcmsdh
 !
NULL
) {

141 i‡(
bcmsdh
->
sdioh
) {

142 
	`sdioh_dëach
(
osh
, 
bcmsdh
->
sdioh
);

143 
bcmsdh
->
sdioh
 = 
NULL
;

145 
	`MFREE
(
osh
, 
bcmsdh
, (
bcmsdh_öfo_t
));

148 
l_bcmsdh
 = 
NULL
;

150 
	}
}

153 
	$bcmsdh_iov¨_›
(*
sdh
, c⁄° *
«me
,

154 *
∑øms
, 
∂í
, *
¨g
, 
Àn
, 
boﬁ
 
£t
)

156 
bcmsdh_öfo_t
 *
bcmsdh
 = (bcmsdh_öfo_à*)
sdh
;

157  
	`sdioh_iov¨_›
(
bcmsdh
->
sdioh
, 
«me
, 
∑øms
, 
∂í
, 
¨g
, 
Àn
, 
£t
);

158 
	}
}

160 
boﬁ


161 
	$bcmsdh_öå_quîy
(*
sdh
)

163 
bcmsdh_öfo_t
 *
bcmsdh
 = (bcmsdh_öfo_à*)
sdh
;

164 
SDIOH_API_RC
 
°©us
;

165 
boﬁ
 
⁄
;

167 
	`ASSERT
(
bcmsdh
);

168 
°©us
 = 
	`sdioh_öãºu±_quîy
(
bcmsdh
->
sdioh
, &
⁄
);

169 i‡(
	`SDIOH_API_SUCCESS
(
°©us
))

170  
FALSE
;

172  
⁄
;

173 
	}
}

176 
	$bcmsdh_öå_íabÀ
(*
sdh
)

178 
bcmsdh_öfo_t
 *
bcmsdh
 = (bcmsdh_öfo_à*)
sdh
;

179 
SDIOH_API_RC
 
°©us
;

180 
	`ASSERT
(
bcmsdh
);

182 
°©us
 = 
	`sdioh_öãºu±_£t
(
bcmsdh
->
sdioh
, 
TRUE
);

183  (
	`SDIOH_API_SUCCESS
(
°©us
Ë? 0 : 
BCME_ERROR
);

184 
	}
}

187 
	$bcmsdh_öå_dißbÀ
(*
sdh
)

189 
bcmsdh_öfo_t
 *
bcmsdh
 = (bcmsdh_öfo_à*)
sdh
;

190 
SDIOH_API_RC
 
°©us
;

191 
	`ASSERT
(
bcmsdh
);

193 
°©us
 = 
	`sdioh_öãºu±_£t
(
bcmsdh
->
sdioh
, 
FALSE
);

194  (
	`SDIOH_API_SUCCESS
(
°©us
Ë? 0 : 
BCME_ERROR
);

195 
	}
}

198 
	$bcmsdh_öå_ªg
(*
sdh
, 
bcmsdh_cb_‚_t
 
‚
, *
¨gh
)

200 
bcmsdh_öfo_t
 *
bcmsdh
 = (bcmsdh_öfo_à*)
sdh
;

201 
SDIOH_API_RC
 
°©us
;

202 
	`ASSERT
(
bcmsdh
);

204 
°©us
 = 
	`sdioh_öãºu±_ªgi°î
(
bcmsdh
->
sdioh
, 
‚
, 
¨gh
);

205  (
	`SDIOH_API_SUCCESS
(
°©us
Ë? 0 : 
BCME_ERROR
);

206 
	}
}

209 
	$bcmsdh_öå_dîeg
(*
sdh
)

211 
bcmsdh_öfo_t
 *
bcmsdh
 = (bcmsdh_öfo_à*)
sdh
;

212 
SDIOH_API_RC
 
°©us
;

213 
	`ASSERT
(
bcmsdh
);

215 
°©us
 = 
	`sdioh_öãºu±_dîegi°î
(
bcmsdh
->
sdioh
);

216  (
	`SDIOH_API_SUCCESS
(
°©us
Ë? 0 : 
BCME_ERROR
);

217 
	}
}

219 #i‡
deföed
(
DHD_DEBUG
)

220 
boﬁ


221 
	$bcmsdh_öå_≥ndög
(*
sdh
)

223 
bcmsdh_öfo_t
 *
bcmsdh
 = (bcmsdh_öfo_à*)
sdh
;

225 
	`ASSERT
(
sdh
);

226  
	`sdioh_öãºu±_≥ndög
(
bcmsdh
->
sdioh
);

227 
	}
}

232 
	$bcmsdh_devªmove_ªg
(*
sdh
, 
bcmsdh_cb_‚_t
 
‚
, *
¨gh
)

234 
	`ASSERT
(
sdh
);

237  
BCME_UNSUPPORTED
;

238 
	}
}

248 
uöt8


249 
	$bcmsdh_cfg_ªad
(*
sdh
, 
uöt
 
‚c_num
, 
uöt32
 
addr
, *
îr
)

251 
bcmsdh_öfo_t
 *
bcmsdh
 = (bcmsdh_öfo_à*)
sdh
;

252 
SDIOH_API_RC
 
°©us
;

253 #ifde‡
SDIOH_API_ACCESS_RETRY_LIMIT


254 
öt32
 
ªåy
 = 0;

256 
uöt8
 
d©a
 = 0;

258 i‡(!
bcmsdh
)

259 
bcmsdh
 = 
l_bcmsdh
;

261 
	`ASSERT
(
bcmsdh
->
öô_suc˚ss
);

263 #ifde‡
SDIOH_API_ACCESS_RETRY_LIMIT


265 i‡(
ªåy
)

266 
	`OSL_DELAY
(1000);

268 
°©us
 = 
	`sdioh_cfg_ªad
(
bcmsdh
->
sdioh
, 
‚c_num
, 
addr
, (
uöt8
 *)&
d©a
);

269 #ifde‡
SDIOH_API_ACCESS_RETRY_LIMIT


270 } !
	`SDIOH_API_SUCCESS
(
°©us
Ë&& (
ªåy
++ < 
SDIOH_API_ACCESS_RETRY_LIMIT
));

272 i‡(
îr
)

273 *
îr
 = (
	`SDIOH_API_SUCCESS
(
°©us
Ë? 0 : 
BCME_SDIO_ERROR
);

275 
	`BCMSDH_INFO
(("%s:fu¿%d,ádd∏0x%x, uöt8d©®0x%x\n", 
__FUNCTION__
,

276 
‚c_num
, 
addr
, 
d©a
));

278  
d©a
;

279 
	}
}

282 
	$bcmsdh_cfg_wrôe
(*
sdh
, 
uöt
 
‚c_num
, 
uöt32
 
addr
, 
uöt8
 
d©a
, *
îr
)

284 
bcmsdh_öfo_t
 *
bcmsdh
 = (bcmsdh_öfo_à*)
sdh
;

285 
SDIOH_API_RC
 
°©us
;

286 #ifde‡
SDIOH_API_ACCESS_RETRY_LIMIT


287 
öt32
 
ªåy
 = 0;

290 i‡(!
bcmsdh
)

291 
bcmsdh
 = 
l_bcmsdh
;

293 
	`ASSERT
(
bcmsdh
->
öô_suc˚ss
);

295 #ifde‡
SDIOH_API_ACCESS_RETRY_LIMIT


297 i‡(
ªåy
)

298 
	`OSL_DELAY
(1000);

300 
°©us
 = 
	`sdioh_cfg_wrôe
(
bcmsdh
->
sdioh
, 
‚c_num
, 
addr
, (
uöt8
 *)&
d©a
);

301 #ifde‡
SDIOH_API_ACCESS_RETRY_LIMIT


302 } !
	`SDIOH_API_SUCCESS
(
°©us
Ë&& (
ªåy
++ < 
SDIOH_API_ACCESS_RETRY_LIMIT
));

304 i‡(
îr
)

305 *
îr
 = 
	`SDIOH_API_SUCCESS
(
°©us
Ë? 0 : 
BCME_SDIO_ERROR
;

307 
	`BCMSDH_INFO
(("%s:fu¿%d,ádd∏0x%x, uöt8d©®0x%x\n", 
__FUNCTION__
,

308 
‚c_num
, 
addr
, 
d©a
));

309 
	}
}

311 
uöt32


312 
	$bcmsdh_cfg_ªad_w‹d
(*
sdh
, 
uöt
 
‚c_num
, 
uöt32
 
addr
, *
îr
)

314 
bcmsdh_öfo_t
 *
bcmsdh
 = (bcmsdh_öfo_à*)
sdh
;

315 
SDIOH_API_RC
 
°©us
;

316 
uöt32
 
d©a
 = 0;

318 i‡(!
bcmsdh
)

319 
bcmsdh
 = 
l_bcmsdh
;

321 
	`ASSERT
(
bcmsdh
->
öô_suc˚ss
);

323 
°©us
 = 
	`sdioh_ªque°_w‹d
(
bcmsdh
->
sdioh
, 
SDIOH_CMD_TYPE_NORMAL
, 
SDIOH_READ
, 
‚c_num
,

324 
addr
, &
d©a
, 4);

326 i‡(
îr
)

327 *
îr
 = (
	`SDIOH_API_SUCCESS
(
°©us
Ë? 0 : 
BCME_SDIO_ERROR
);

329 
	`BCMSDH_INFO
(("%s:fu¿%d,ádd∏0x%x, uöt32d©®0x%x\n", 
__FUNCTION__
,

330 
‚c_num
, 
addr
, 
d©a
));

332  
d©a
;

333 
	}
}

336 
	$bcmsdh_cfg_wrôe_w‹d
(*
sdh
, 
uöt
 
‚c_num
, 
uöt32
 
addr
, uöt32 
d©a
, *
îr
)

338 
bcmsdh_öfo_t
 *
bcmsdh
 = (bcmsdh_öfo_à*)
sdh
;

339 
SDIOH_API_RC
 
°©us
;

341 i‡(!
bcmsdh
)

342 
bcmsdh
 = 
l_bcmsdh
;

344 
	`ASSERT
(
bcmsdh
->
öô_suc˚ss
);

346 
°©us
 = 
	`sdioh_ªque°_w‹d
(
bcmsdh
->
sdioh
, 
SDIOH_CMD_TYPE_NORMAL
, 
SDIOH_WRITE
, 
‚c_num
,

347 
addr
, &
d©a
, 4);

349 i‡(
îr
)

350 *
îr
 = (
	`SDIOH_API_SUCCESS
(
°©us
Ë? 0 : 
BCME_SDIO_ERROR
);

352 
	`BCMSDH_INFO
(("%s:fu¿%d,ádd∏0x%x, uöt32d©®0x%x\n", 
__FUNCTION__
, 
‚c_num
,

353 
addr
, 
d©a
));

354 
	}
}

358 
	$bcmsdh_cis_ªad
(*
sdh
, 
uöt
 
func
, 
uöt8
 *
cis
, uöà
Àngth
)

360 
bcmsdh_öfo_t
 *
bcmsdh
 = (bcmsdh_öfo_à*)
sdh
;

361 
SDIOH_API_RC
 
°©us
;

363 
uöt8
 *
tmp_buf
, *
tmp_±r
;

364 
uöt8
 *
±r
;

365 
boﬁ
 
ascii
 = 
func
 & ~0xf;

366 
func
 &= 0x7;

368 i‡(!
bcmsdh
)

369 
bcmsdh
 = 
l_bcmsdh
;

371 
	`ASSERT
(
bcmsdh
->
öô_suc˚ss
);

372 
	`ASSERT
(
cis
);

373 
	`ASSERT
(
Àngth
 <
SBSDIO_CIS_SIZE_LIMIT
);

375 
°©us
 = 
	`sdioh_cis_ªad
(
bcmsdh
->
sdioh
, 
func
, 
cis
, 
Àngth
);

377 i‡(
ascii
) {

379 i‡((
tmp_buf
 = (
uöt8
 *)
	`MALLOC
(
bcmsdh
->
osh
, 
Àngth
)Ë=
NULL
) {

380 
	`BCMSDH_ERROR
(("%s: ouào‡mem‹y\n", 
__FUNCTION__
));

381  
BCME_NOMEM
;

383 
	`bc›y
(
cis
, 
tmp_buf
, 
Àngth
);

384 
tmp_±r
 = 
tmp_buf
, 
±r
 = 
cis
;Öå < (ci†+ 
Àngth
 - 4);Åmp_ptr++) {

385 
±r
 +
	`¢¥ötf
((*Ìå, (
cis
 + 
Àngth
 -Ötr - 4),

386 "%.2x ", *
tmp_±r
 & 0xff);

387 i‡((((
tmp_±r
 - 
tmp_buf
) + 1) & 0xf) == 0)

388 
±r
 +
	`¢¥ötf
((*Ìå, (
cis
 + 
Àngth
 -Ötr -4), "\n");

390 
	`MFREE
(
bcmsdh
->
osh
, 
tmp_buf
, 
Àngth
);

393  (
	`SDIOH_API_SUCCESS
(
°©us
Ë? 0 : 
BCME_ERROR
);

394 
	}
}

398 
	$bcmsdhsdio_£t_sbaddr_wödow
(*
sdh
, 
uöt32
 
addªss
, 
boﬁ
 
f‹˚_£t
)

400 
îr
 = 0;

401 
uöt
 
b¨0
 = 
addªss
 & ~
SBSDIO_SB_OFT_ADDR_MASK
;

402 
bcmsdh_öfo_t
 *
bcmsdh
 = (bcmsdh_öfo_à*)
sdh
;

404 i‡(
b¨0
 !
bcmsdh
->
sbwad
 || 
f‹˚_£t
) {

405 
	`bcmsdh_cfg_wrôe
(
bcmsdh
, 
SDIO_FUNC_1
, 
SBSDIO_FUNC1_SBADDRLOW
,

406 (
addªss
 >> 8Ë& 
SBSDIO_SBADDRLOW_MASK
, &
îr
);

407 i‡(!
îr
)

408 
	`bcmsdh_cfg_wrôe
(
bcmsdh
, 
SDIO_FUNC_1
, 
SBSDIO_FUNC1_SBADDRMID
,

409 (
addªss
 >> 16Ë& 
SBSDIO_SBADDRMID_MASK
, &
îr
);

410 i‡(!
îr
)

411 
	`bcmsdh_cfg_wrôe
(
bcmsdh
, 
SDIO_FUNC_1
, 
SBSDIO_FUNC1_SBADDRHIGH
,

412 (
addªss
 >> 24Ë& 
SBSDIO_SBADDRHIGH_MASK
, &
îr
);

414 i‡(!
îr
)

415 
bcmsdh
->
sbwad
 = 
b¨0
;

418 
bcmsdh
->
sbwad
 = 0;

422  
îr
;

423 
	}
}

425 
uöt32


426 
	$bcmsdh_ªg_ªad
(*
sdh
, 
uöt32
 
addr
, 
uöt
 
size
)

428 
bcmsdh_öfo_t
 *
bcmsdh
 = (bcmsdh_öfo_à*)
sdh
;

429 
SDIOH_API_RC
 
°©us
;

430 
uöt32
 
w‹d
 = 0;

432 
	`BCMSDH_INFO
(("%s:fu¿1,ádd∏0x%x, ", 
__FUNCTION__
, 
addr
));

434 i‡(!
bcmsdh
)

435 
bcmsdh
 = 
l_bcmsdh
;

437 
	`ASSERT
(
bcmsdh
->
öô_suc˚ss
);

439 i‡(
	`bcmsdhsdio_£t_sbaddr_wödow
(
bcmsdh
, 
addr
, 
FALSE
))

442 
addr
 &
SBSDIO_SB_OFT_ADDR_MASK
;

443 i‡(
size
 == 4)

444 
addr
 |
SBSDIO_SB_ACCESS_2_4B_FLAG
;

446 
°©us
 = 
	`sdioh_ªque°_w‹d
(
bcmsdh
->
sdioh
, 
SDIOH_CMD_TYPE_NORMAL
,

447 
SDIOH_READ
, 
SDIO_FUNC_1
, 
addr
, &
w‹d
, 
size
);

449 
bcmsdh
->
ªgÁû
 = !(
	`SDIOH_API_SUCCESS
(
°©us
));

451 
	`BCMSDH_INFO
(("uöt32d©®0x%x\n", 
w‹d
));

454 i‡(
	`SDIOH_API_SUCCESS
(
°©us
)) {

455 
size
) {

456 (
uöt8
):

457  (
w‹d
 & 0xff);

458 (
uöt16
):

459  (
w‹d
 & 0xffff);

460 (
uöt32
):

461  
w‹d
;

463 
bcmsdh
->
ªgÁû
 = 
TRUE
;

469 
	`BCMSDH_ERROR
(("%s:Éº‹Ñódögádd∏0x%04x sizê%d\n", 
__FUNCTION__
, 
addr
, 
size
));

471 
	}
}

473 
uöt32


474 
	$bcmsdh_ªg_wrôe
(*
sdh
, 
uöt32
 
addr
, 
uöt
 
size
, uöt32 
d©a
)

476 
bcmsdh_öfo_t
 *
bcmsdh
 = (bcmsdh_öfo_à*)
sdh
;

477 
SDIOH_API_RC
 
°©us
;

478 
îr
 = 0;

480 
	`BCMSDH_INFO
(("%s:fun = 1,áddr = 0x%x, uint%ddata = 0x%x\n",

481 
__FUNCTION__
, 
addr
, 
size
*8, 
d©a
));

483 i‡(!
bcmsdh
)

484 
bcmsdh
 = 
l_bcmsdh
;

486 
	`ASSERT
(
bcmsdh
->
öô_suc˚ss
);

488 i‡((
îr
 = 
	`bcmsdhsdio_£t_sbaddr_wödow
(
bcmsdh
, 
addr
, 
FALSE
)))

489  
îr
;

491 
addr
 &
SBSDIO_SB_OFT_ADDR_MASK
;

492 i‡(
size
 == 4)

493 
addr
 |
SBSDIO_SB_ACCESS_2_4B_FLAG
;

494 
°©us
 = 
	`sdioh_ªque°_w‹d
(
bcmsdh
->
sdioh
, 
SDIOH_CMD_TYPE_NORMAL
, 
SDIOH_WRITE
, 
SDIO_FUNC_1
,

495 
addr
, &
d©a
, 
size
);

496 
bcmsdh
->
ªgÁû
 = !(
	`SDIOH_API_SUCCESS
(
°©us
));

498 i‡(
	`SDIOH_API_SUCCESS
(
°©us
))

501 
	`BCMSDH_ERROR
(("%s:Érror writing 0x%08xÅoáddr 0x%04x size %d\n",

502 
__FUNCTION__
, 
d©a
, 
addr
, 
size
));

504 
	}
}

506 
boﬁ


507 
	$bcmsdh_ªgÁû
(*
sdh
)

509  ((
bcmsdh_öfo_t
 *)
sdh
)->
ªgÁû
;

510 
	}
}

513 
	$bcmsdh_ªcv_buf
(*
sdh
, 
uöt32
 
addr
, 
uöt
 
‚
, uöà
Êags
,

514 
uöt8
 *
buf
, 
uöt
 
nbyãs
, *
pkt
,

515 
bcmsdh_cm∂t_‚_t
 
com∂ëe_‚
, *
h™dÀ
)

517 
bcmsdh_öfo_t
 *
bcmsdh
 = (bcmsdh_öfo_à*)
sdh
;

518 
SDIOH_API_RC
 
°©us
;

519 
uöt
 
ö¸_fix
;

520 
uöt
 
width
;

521 
îr
 = 0;

523 
	`ASSERT
(
bcmsdh
);

524 
	`ASSERT
(
bcmsdh
->
öô_suc˚ss
);

526 
	`BCMSDH_INFO
(("%s:fun = %d,áddr = 0x%x, size = %d\n",

527 
__FUNCTION__
, 
‚
, 
addr
, 
nbyãs
));

530 
	`ASSERT
(!(
Êags
 & 
SDIO_REQ_ASYNC
));

531 i‡(
Êags
 & 
SDIO_REQ_ASYNC
)

532  
BCME_UNSUPPORTED
;

534 i‡((
îr
 = 
	`bcmsdhsdio_£t_sbaddr_wödow
(
bcmsdh
, 
addr
, 
FALSE
)))

535  
îr
;

537 
addr
 &
SBSDIO_SB_OFT_ADDR_MASK
;

539 
ö¸_fix
 = (
Êags
 & 
SDIO_REQ_FIXED
Ë? 
SDIOH_DATA_FIX
 : 
SDIOH_DATA_INC
;

540 
width
 = (
Êags
 & 
SDIO_REQ_4BYTE
) ? 4 : 2;

541 i‡(
width
 == 4)

542 
addr
 |
SBSDIO_SB_ACCESS_2_4B_FLAG
;

544 
°©us
 = 
	`sdioh_ªque°_buf„r
(
bcmsdh
->
sdioh
, 
SDIOH_DATA_PIO
, 
ö¸_fix
,

545 
SDIOH_READ
, 
‚
, 
addr
, 
width
, 
nbyãs
, 
buf
, 
pkt
);

547  (
	`SDIOH_API_SUCCESS
(
°©us
Ë? 0 : 
BCME_SDIO_ERROR
);

548 
	}
}

551 
	$bcmsdh_£nd_buf
(*
sdh
, 
uöt32
 
addr
, 
uöt
 
‚
, uöà
Êags
,

552 
uöt8
 *
buf
, 
uöt
 
nbyãs
, *
pkt
,

553 
bcmsdh_cm∂t_‚_t
 
com∂ëe_‚
, *
h™dÀ
)

555 
bcmsdh_öfo_t
 *
bcmsdh
 = (bcmsdh_öfo_à*)
sdh
;

556 
SDIOH_API_RC
 
°©us
;

557 
uöt
 
ö¸_fix
;

558 
uöt
 
width
;

559 
îr
 = 0;

561 
	`ASSERT
(
bcmsdh
);

562 
	`ASSERT
(
bcmsdh
->
öô_suc˚ss
);

564 
	`BCMSDH_INFO
(("%s:fun = %d,áddr = 0x%x, size = %d\n",

565 
__FUNCTION__
, 
‚
, 
addr
, 
nbyãs
));

568 
	`ASSERT
(!(
Êags
 & 
SDIO_REQ_ASYNC
));

569 i‡(
Êags
 & 
SDIO_REQ_ASYNC
)

570  
BCME_UNSUPPORTED
;

572 i‡((
îr
 = 
	`bcmsdhsdio_£t_sbaddr_wödow
(
bcmsdh
, 
addr
, 
FALSE
)))

573  
îr
;

575 
addr
 &
SBSDIO_SB_OFT_ADDR_MASK
;

577 
ö¸_fix
 = (
Êags
 & 
SDIO_REQ_FIXED
Ë? 
SDIOH_DATA_FIX
 : 
SDIOH_DATA_INC
;

578 
width
 = (
Êags
 & 
SDIO_REQ_4BYTE
) ? 4 : 2;

579 i‡(
width
 == 4)

580 
addr
 |
SBSDIO_SB_ACCESS_2_4B_FLAG
;

582 
°©us
 = 
	`sdioh_ªque°_buf„r
(
bcmsdh
->
sdioh
, 
SDIOH_DATA_PIO
, 
ö¸_fix
,

583 
SDIOH_WRITE
, 
‚
, 
addr
, 
width
, 
nbyãs
, 
buf
, 
pkt
);

585  (
	`SDIOH_API_SUCCESS
(
°©us
Ë? 0 : 
BCME_ERROR
);

586 
	}
}

589 
	$bcmsdh_rwd©a
(*
sdh
, 
uöt
 
rw
, 
uöt32
 
addr
, 
uöt8
 *
buf
, uöà
nbyãs
)

591 
bcmsdh_öfo_t
 *
bcmsdh
 = (bcmsdh_öfo_à*)
sdh
;

592 
SDIOH_API_RC
 
°©us
;

594 
	`ASSERT
(
bcmsdh
);

595 
	`ASSERT
(
bcmsdh
->
öô_suc˚ss
);

596 
	`ASSERT
((
addr
 & 
SBSDIO_SBWINDOW_MASK
) == 0);

598 
addr
 &
SBSDIO_SB_OFT_ADDR_MASK
;

599 
addr
 |
SBSDIO_SB_ACCESS_2_4B_FLAG
;

601 
°©us
 = 
	`sdioh_ªque°_buf„r
(
bcmsdh
->
sdioh
, 
SDIOH_DATA_PIO
, 
SDIOH_DATA_INC
,

602 (
rw
 ? 
SDIOH_WRITE
 : 
SDIOH_READ
), 
SDIO_FUNC_1
,

603 
addr
, 4, 
nbyãs
, 
buf
, 
NULL
);

605  (
	`SDIOH_API_SUCCESS
(
°©us
Ë? 0 : 
BCME_ERROR
);

606 
	}
}

609 
	$bcmsdh_ab‹t
(*
sdh
, 
uöt
 
‚
)

611 
bcmsdh_öfo_t
 *
bcmsdh
 = (bcmsdh_öfo_à*)
sdh
;

613  
	`sdioh_ab‹t
(
bcmsdh
->
sdioh
, 
‚
);

614 
	}
}

617 
	$bcmsdh_°¨t
(*
sdh
, 
°age
)

619 
bcmsdh_öfo_t
 *
bcmsdh
 = (bcmsdh_öfo_à*)
sdh
;

621  
	`sdioh_°¨t
(
bcmsdh
->
sdioh
, 
°age
);

622 
	}
}

625 
	$bcmsdh_°›
(*
sdh
)

627 
bcmsdh_öfo_t
 *
bcmsdh
 = (bcmsdh_öfo_à*)
sdh
;

629  
	`sdioh_°›
(
bcmsdh
->
sdioh
);

630 
	}
}

633 
	$bcmsdh_waôlock‰ì
(*
sdh
)

635 
bcmsdh_öfo_t
 *
bcmsdh
 = (bcmsdh_öfo_à*)
sdh
;

636 i‡(!
bcmsdh
)

637 
bcmsdh
 = 
l_bcmsdh
;

639  
	`sdioh_waôlock‰ì
(
bcmsdh
->
sdioh
);

640 
	}
}

644 
	$bcmsdh_quîy_devi˚
(*
sdh
)

646 
bcmsdh_öfo_t
 *
bcmsdh
 = (bcmsdh_öfo_à*)
sdh
;

647 
bcmsdh
->
vídevid
 = (
VENDOR_BROADCOM
 << 16) | 0;

648  (
bcmsdh
->
vídevid
);

649 
	}
}

651 
uöt


652 
	$bcmsdh_quîy_io‚um
(*
sdh
)

654 
bcmsdh_öfo_t
 *
bcmsdh
 = (bcmsdh_öfo_à*)
sdh
;

656 i‡(!
bcmsdh
)

657 
bcmsdh
 = 
l_bcmsdh
;

659  (
	`sdioh_quîy_io‚um
(
bcmsdh
->
sdioh
));

660 
	}
}

663 
	$bcmsdh_ª£t
(
bcmsdh_öfo_t
 *
sdh
)

665 
bcmsdh_öfo_t
 *
bcmsdh
 = (bcmsdh_öfo_à*)
sdh
;

667  
	`sdioh_sdio_ª£t
(
bcmsdh
->
sdioh
);

668 
	}
}

670 *
	$bcmsdh_gë_sdioh
(
bcmsdh_öfo_t
 *
sdh
)

672 
	`ASSERT
(
sdh
);

673  
sdh
->
sdioh
;

674 
	}
}

677 
uöt32


678 
	$bcmsdh_gë_d°©us
(*
sdh
)

681 
	}
}

682 
uöt32


683 
	$bcmsdh_cur_sbwad
(*
sdh
)

685 
bcmsdh_öfo_t
 *
bcmsdh
 = (bcmsdh_öfo_à*)
sdh
;

687 i‡(!
bcmsdh
)

688 
bcmsdh
 = 
l_bcmsdh
;

690  (
bcmsdh
->
sbwad
);

691 
	}
}

694 
	$bcmsdh_chùöfo
(*
sdh
, 
uöt32
 
chù
, uöt32 
chùªv
)

697 
	}
}

701 
	$bcmsdh_¶ìp
(*
sdh
, 
boﬁ
 
íab
)

703 #ifde‡
SDIOH_SLEEP_ENABLED


704 
bcmsdh_öfo_t
 *
p
 = (bcmsdh_öfo_à*)
sdh
;

705 
sdioh_öfo_t
 *
sd
 = (sdioh_öfo_à*)(
p
->
sdioh
);

707  
	`sdioh_¶ìp
(
sd
, 
íab
);

709  
BCME_UNSUPPORTED
;

711 
	}
}

714 
	$bcmsdh_gpio_öô
(*
sdh
)

716 
bcmsdh_öfo_t
 *
p
 = (bcmsdh_öfo_à*)
sdh
;

717 
sdioh_öfo_t
 *
sd
 = (sdioh_öfo_à*)(
p
->
sdioh
);

719  
	`sdioh_gpio_öô
(
sd
);

720 
	}
}

722 
boﬁ


723 
	$bcmsdh_gpioö
(*
sdh
, 
uöt32
 
gpio
)

725 
bcmsdh_öfo_t
 *
p
 = (bcmsdh_öfo_à*)
sdh
;

726 
sdioh_öfo_t
 *
sd
 = (sdioh_öfo_à*)(
p
->
sdioh
);

728  
	`sdioh_gpioö
(
sd
, 
gpio
);

729 
	}
}

732 
	$bcmsdh_gpioouãn
(*
sdh
, 
uöt32
 
gpio
)

734 
bcmsdh_öfo_t
 *
p
 = (bcmsdh_öfo_à*)
sdh
;

735 
sdioh_öfo_t
 *
sd
 = (sdioh_öfo_à*)(
p
->
sdioh
);

737  
	`sdioh_gpioouãn
(
sd
, 
gpio
);

738 
	}
}

741 
	$bcmsdh_gpioout
(*
sdh
, 
uöt32
 
gpio
, 
boﬁ
 
íab
)

743 
bcmsdh_öfo_t
 *
p
 = (bcmsdh_öfo_à*)
sdh
;

744 
sdioh_öfo_t
 *
sd
 = (sdioh_öfo_à*)(
p
->
sdioh
);

746  
	`sdioh_gpioout
(
sd
, 
gpio
, 
íab
);

747 
	}
}

749 #ifde‡
BCMSDIOH_TXGLOM


751 
	$bcmsdh_glom_po°
(*
sdh
, 
uöt8
 *
‰ame
, 
uöt
 
Àn
)

753 
bcmsdh_öfo_t
 *
bcmsdh
 = (bcmsdh_öfo_à*)
sdh
;

754 
	`sdioh_glom_po°
(
bcmsdh
->
sdioh
, 
‰ame
, 
Àn
);

755 
	}
}

758 
	$bcmsdh_glom_˛ór
(*
sdh
)

760 
bcmsdh_öfo_t
 *
bcmsdh
 = (bcmsdh_öfo_à*)
sdh
;

761 
	`sdioh_glom_˛ór
(
bcmsdh
->
sdioh
);

762 
	}
}

764 
uöt


765 
	$bcmsdh_£t_mode
(*
sdh
, 
uöt
 
mode
)

767 
bcmsdh_öfo_t
 *
bcmsdh
 = (bcmsdh_öfo_à*)
sdh
;

768  (
	`sdioh_£t_mode
(
bcmsdh
->
sdioh
, 
mode
));

769 
	}
}

771 
boﬁ


772 
	$bcmsdh_glom_íabÀd
()

774  (
	`sdioh_glom_íabÀd
());

775 
	}
}

	@bcmsdh_linux.c

31 
	#__UNDEF_NO_VERSION__


	)

33 
	~<ty≥defs.h
>

34 
	~<löuxvî.h
>

36 
	~<löux/pci.h
>

37 
	~<löux/com∂ëi⁄.h
>

39 
	~<o¶.h
>

40 
	~<pcicfg.h
>

41 
	~<bcmdefs.h
>

42 
	~<bcmdevs.h
>

44 #i‡
deföed
(
OOB_INTR_ONLY
)

45 
	~<löux/úq.h
>

46 
dhdsdio_i§
(* 
¨gs
);

47 
	~<bcmutûs.h
>

48 
	~<dngl_°©s.h
>

49 
	~<dhd.h
>

56 
bcmsdh_hc
 
	tbcmsdh_hc_t
;

58 
	sbcmsdh_hc
 {

59 
bcmsdh_hc_t
 *
	m√xt
;

60 #ifde‡
BCMPLATFORM_BUS


61 
devi˚
 *
	mdev
;

63 
pci_dev
 *
	mdev
;

65 
o¶_t
 *
	mosh
;

66 *
	mªgs
;

67 
bcmsdh_öfo_t
 *
	msdh
;

68 *
	mch
;

69 
	moob_úq
;

70 
	moob_Êags
;

71 
boﬁ
 
	moob_úq_ªgi°îed
;

72 
boﬁ
 
	moob_úq_íabÀ_Êag
;

73 #i‡
deföed
(
OOB_INTR_ONLY
)

74 
•ölock_t
 
	múq_lock
;

77 
bcmsdh_hc_t
 *
	gsdhcöfo
 = 
NULL
;

80 
bcmsdh_drivî_t
 
	gdrvöfo
 = {
NULL
, NULL};

83 
	#SDLX_MSG
(
x
Ë
¥ötf
 
	)
x

88 
boﬁ


89 
	$bcmsdh_chùm©ch
(
uöt16
 
víd‹
, uöt16 
devi˚
)

93 #ifde‡
BCMSDIOH_STD


95 i‡(
víd‹
 =
VENDOR_SI_IMAGE
) {

96  (
TRUE
);

99 i‡(
devi˚
 =
BCM27XX_SDIOH_ID
 && 
víd‹
 =
VENDOR_BROADCOM
) {

100  (
TRUE
);

103 i‡(
devi˚
 =
SDIOH_FPGA_ID
 && 
víd‹
 =
VENDOR_BROADCOM
) {

104  (
TRUE
);

107 i‡(
devi˚
 =
PCIXX21_SDIOH_ID
 && 
víd‹
 =
VENDOR_TI
) {

108  (
TRUE
);

110 i‡(
devi˚
 =
PCIXX21_SDIOH0_ID
 && 
víd‹
 =
VENDOR_TI
) {

111  (
TRUE
);

114 i‡(
devi˚
 =
R5C822_SDIOH_ID
 && 
víd‹
 =
VENDOR_RICOH
) {

115  (
TRUE
);

118 i‡(
devi˚
 =
JMICRON_SDIOH_ID
 && 
víd‹
 =
VENDOR_JMICRON
) {

119  (
TRUE
);

123 #ifde‡
BCMSDIOH_SPI


125 i‡(
devi˚
 =
SPIH_FPGA_ID
 && 
víd‹
 =
VENDOR_BROADCOM
) {

126 
	`¥ötf
("Found PCI SPI Host Controller\n");

127  (
TRUE
);

132  (
FALSE
);

133 
	}
}

135 #i‡
deföed
(
BCMPLATFORM_BUS
)

136 #i‡
deföed
(
BCMLXSDMMC
)

138 
bcmsdh_¥obe
(
devi˚
 *
dev
);

139 
bcmsdh_ªmove
(
devi˚
 *
dev
);

141 
EXPORT_SYMBOL
(
bcmsdh_¥obe
);

142 
EXPORT_SYMBOL
(
bcmsdh_ªmove
);

146 
__devöô
 
bcmsdh_¥obe
(
devi˚
 *
dev
);

147 
__devexô
 
bcmsdh_ªmove
(
devi˚
 *
dev
);

150 #i‡!
deföed
(
BCMLXSDMMC
)

153 
	$bcmsdh_¥obe
(
devi˚
 *
dev
)

155 
o¶_t
 *
osh
 = 
NULL
;

156 
bcmsdh_hc_t
 *
sdhc
 = 
NULL
;

157 
ul⁄g
 
ªgs
 = 0;

158 
bcmsdh_öfo_t
 *
sdh
 = 
NULL
;

159 #i‡!
	`deföed
(
BCMLXSDMMC
Ë&& deföed(
BCMPLATFORM_BUS
)

160 
∂©f‹m_devi˚
 *
pdev
;

161 
ªsour˚
 *
r
;

163 
úq
 = 0;

164 
uöt32
 
vídevid
;

165 
úq_Êags
 = 0;

167 #i‡!
	`deföed
(
BCMLXSDMMC
Ë&& deföed(
BCMPLATFORM_BUS
)

168 
pdev
 = 
	`to_∂©f‹m_devi˚
(
dev
);

169 
r
 = 
	`∂©f‹m_gë_ªsour˚
(
pdev
, 
IORESOURCE_MEM
, 0);

170 
úq
 = 
	`∂©f‹m_gë_úq
(
pdev
, 0);

171 i‡(!
r
 || 
úq
 =
NO_IRQ
)

172  -
ENXIO
;

175 #i‡
	`deföed
(
OOB_INTR_ONLY
)

176 #ifde‡
HW_OOB


177 
úq_Êags
 =

178 
IORESOURCE_IRQ
 | 
IORESOURCE_IRQ_HIGHLEVEL
 | 
IORESOURCE_IRQ_SHAREABLE
;

180 
úq_Êags
 = 
IRQF_TRIGGER_FALLING
;

184 
úq
 = 
	`dhd_cu°omî_oob_úq_m≠
(&
úq_Êags
);

185 #if 
	`deföed
(
CONFIG_ARCH_RHEA
Ë|| deföed(
CONFIG_ARCH_CAPRI
)

187 
úq_Êags
 |
IRQF_NO_SUSPEND
;

189 i‡(
úq
 < 0) {

190 
	`SDLX_MSG
(("%s: Ho° irq i†nŸ deföed\n", 
__FUNCTION__
));

195 i‡(!(
osh
 = 
	`o¶_©èch
(
dev
, 
PCI_BUS
, 
FALSE
))) {

196 
	`SDLX_MSG
(("%s: o¶_©èch faûed\n", 
__FUNCTION__
));

197 
îr
;

199 i‡(!(
sdhc
 = 
	`MALLOC
(
osh
, (
bcmsdh_hc_t
)))) {

200 
	`SDLX_MSG
(("%s: out of memory,állocated %d bytes\n",

201 
__FUNCTION__
,

202 
	`MALLOCED
(
osh
)));

203 
îr
;

205 
	`bzîo
(
sdhc
, (
bcmsdh_hc_t
));

206 
sdhc
->
osh
 = osh;

208 
sdhc
->
dev
 = (*)dev;

210 #i‡
	`deföed
(
BCMLXSDMMC
)

211 i‡(!(
sdh
 = 
	`bcmsdh_©èch
(
osh
, (*)0,

212 (**)&
ªgs
, 
úq
))) {

213 
	`SDLX_MSG
(("%s: bcmsdh_©èch faûed\n", 
__FUNCTION__
));

214 
îr
;

217 i‡(!(
sdh
 = 
	`bcmsdh_©èch
(
osh
, (*)
r
->
°¨t
,

218 (**)&
ªgs
, 
úq
))) {

219 
	`SDLX_MSG
(("%s: bcmsdh_©èch faûed\n", 
__FUNCTION__
));

220 
îr
;

223 
sdhc
->
sdh
 = sdh;

224 
sdhc
->
oob_úq
 = 
úq
;

225 
sdhc
->
oob_Êags
 = 
úq_Êags
;

226 
sdhc
->
oob_úq_ªgi°îed
 = 
FALSE
;

227 
sdhc
->
oob_úq_íabÀ_Êag
 = 
FALSE
;

228 #i‡
	`deföed
(
OOB_INTR_ONLY
)

229 
	`•ö_lock_öô
(&
sdhc
->
úq_lock
);

233 
sdhc
->
√xt
 = 
sdhcöfo
;

234 
sdhcöfo
 = 
sdhc
;

237 
vídevid
 = 
	`bcmsdh_quîy_devi˚
(
sdh
);

239 i‡(!(
sdhc
->
ch
 = 
drvöfo
.
	`©èch
((
vídevid
 >> 16),

240 (
vídevid
 & 0xFFFF), 0, 0, 0, 0,

241 (*)
ªgs
, 
NULL
, 
sdh
))) {

242 
	`SDLX_MSG
(("%s: devi˚áâach faûed\n", 
__FUNCTION__
));

243 
îr
;

249 
îr
:

250 i‡(
sdhc
) {

251 i‡(
sdhc
->
sdh
)

252 
	`bcmsdh_dëach
(
sdhc
->
osh
, sdhc->
sdh
);

253 
	`MFREE
(
osh
, 
sdhc
, (
bcmsdh_hc_t
));

255 i‡(
osh
)

256 
	`o¶_dëach
(
osh
);

257  -
ENODEV
;

258 
	}
}

260 #i‡!
deföed
(
BCMLXSDMMC
)

263 
	$bcmsdh_ªmove
(
devi˚
 *
dev
)

265 
bcmsdh_hc_t
 *
sdhc
, *
¥ev
;

266 
o¶_t
 *
osh
;

268 
sdhc
 = 
sdhcöfo
;

269 
drvöfo
.
	`dëach
(
sdhc
->
ch
);

270 
	`bcmsdh_dëach
(
sdhc
->
osh
, sdhc->
sdh
);

273 
sdhc
 = 
sdhcöfo
, 
¥ev
 = 
NULL
; sdhc; sdh¯sdhc->
√xt
) {

274 i‡(
sdhc
->
dev
 == (*)dev) {

275 i‡(
¥ev
)

276 
¥ev
->
√xt
 = 
sdhc
->next;

278 
sdhcöfo
 = 
NULL
;

281 
¥ev
 = 
sdhc
;

283 i‡(!
sdhc
) {

284 
	`SDLX_MSG
(("%s: faûed\n", 
__FUNCTION__
));

289 
osh
 = 
sdhc
->osh;

290 
	`MFREE
(
osh
, 
sdhc
, (
bcmsdh_hc_t
));

291 
	`o¶_dëach
(
osh
);

293 #i‡!
	`deföed
(
BCMLXSDMMC
Ë|| deföed(
OOB_INTR_ONLY
)

294 
	`dev_£t_drvd©a
(
dev
, 
NULL
);

298 
	}
}

302 #i‡!
deföed
(
BCMLXSDMMC
)

304 
__devöô
 
bcmsdh_pci_¥obe
(
pci_dev
 *
pdev
, c⁄° 
pci_devi˚_id
 *
ít
);

305 
__devexô
 
bcmsdh_pci_ªmove
(
pci_dev
 *
pdev
);

310 
pci_devi˚_id
 
	gbcmsdh_pci_devid
[] 
	g__devöôd©a
 = {

311 { 
víd‹
: 
PCI_ANY_ID
,

312 
devi˚
: 
PCI_ANY_ID
,

313 
subvíd‹
: 
PCI_ANY_ID
,

314 
subdevi˚
: 
PCI_ANY_ID
,

315 
˛ass
: 0,

316 
˛ass_mask
: 0,

317 
drivî_d©a
: 0,

321 
MODULE_DEVICE_TABLE
(
pci
, 
bcmsdh_pci_devid
);

326 
pci_drivî
 
	gbcmsdh_pci_drivî
 = {

327 
node
: {},

328 
«me
: "bcmsdh",

329 
id_èbÀ
: 
bcmsdh_pci_devid
,

330 
¥obe
: 
bcmsdh_pci_¥obe
,

331 
ªmove
: 
bcmsdh_pci_ªmove
,

332 #i‡(
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2, 6, 0))

333 
ßve_°©e
: 
NULL
,

335 
su•íd
: 
NULL
,

336 
ªsume
: 
NULL
,

340 
uöt
 
sd_pci_¶Ÿ
;

349 
moduÀ_∑øm
(
sd_pci_¶Ÿ
, 
uöt
, 0);

358 
__devöô


359 
	$bcmsdh_pci_¥obe
(
pci_dev
 *
pdev
, c⁄° 
pci_devi˚_id
 *
ít
)

361 
o¶_t
 *
osh
 = 
NULL
;

362 
bcmsdh_hc_t
 *
sdhc
 = 
NULL
;

363 
ul⁄g
 
ªgs
;

364 
bcmsdh_öfo_t
 *
sdh
 = 
NULL
;

365 
rc
;

367 i‡(
sd_pci_¶Ÿ
 != 0xFFFFffff) {

368 i‡(
pdev
->
bus
->
numbî
 !(
sd_pci_¶Ÿ
>>16) ||

369 
	`PCI_SLOT
(
pdev
->
dev‚
Ë!(
sd_pci_¶Ÿ
&0xffff)) {

370 
	`SDLX_MSG
(("%s: %s: bus %X, slot %X, vend %X, dev %X\n",

371 
__FUNCTION__
,

372 
	`bcmsdh_chùm©ch
(
pdev
->
víd‹
,Ödev->
devi˚
)

375 
pdev
->
bus
->
numbî
, 
	`PCI_SLOT
’dev->
dev‚
),Ödev->
víd‹
,

376 
pdev
->
devi˚
));

377  -
ENODEV
;

379 
	`SDLX_MSG
(("%s: %s: bus %X, slot %X, vendor %X, device %X (good PCIÜocation)\n",

380 
__FUNCTION__
,

381 
	`bcmsdh_chùm©ch
(
pdev
->
víd‹
,Ödev->
devi˚
)

384 
pdev
->
bus
->
numbî
, 
	`PCI_SLOT
’dev->
dev‚
),Ödev->
víd‹
,Ödev->
devi˚
));

387 i‡((
pdev
->
víd‹
 =
VENDOR_TI
Ë&& (’dev->
devi˚
 =
PCIXX21_FLASHMEDIA_ID
) ||

388 (
pdev
->
devi˚
 =
PCIXX21_FLASHMEDIA0_ID
))) {

389 
uöt32
 
c⁄fig_ªg
;

391 
	`SDLX_MSG
(("%s: Dißblög TI FœshMedü C⁄åﬁÀr.\n", 
__FUNCTION__
));

392 i‡(!(
osh
 = 
	`o¶_©èch
(
pdev
, 
PCI_BUS
, 
FALSE
))) {

393 
	`SDLX_MSG
(("%s: o¶_©èch faûed\n", 
__FUNCTION__
));

394 
îr
;

397 
c⁄fig_ªg
 = 
	`OSL_PCI_READ_CONFIG
(
osh
, 0x4c, 4);

405 
c⁄fig_ªg
 |= 0x02;

406 
	`OSL_PCI_WRITE_CONFIG
(
osh
, 0x4c, 4, 
c⁄fig_ªg
);

407 
	`o¶_dëach
(
osh
);

411 i‡(!
	`bcmsdh_chùm©ch
(
pdev
->
víd‹
,Ödev->
devi˚
)) {

412  -
ENODEV
;

416 
	`SDLX_MSG
(("%s: FoundÖossible SDIO Host Controller: bus %d slot %d func %d irq %d\n",

417 
__FUNCTION__
,

418 
pdev
->
bus
->
numbî
, 
	`PCI_SLOT
’dev->
dev‚
),

419 
	`PCI_FUNC
(
pdev
->
dev‚
),Ödev->
úq
));

426 i‡(!(
osh
 = 
	`o¶_©èch
(
pdev
, 
PCI_BUS
, 
FALSE
))) {

427 
	`SDLX_MSG
(("%s: o¶_©èch faûed\n", 
__FUNCTION__
));

428 
îr
;

430 i‡(!(
sdhc
 = 
	`MALLOC
(
osh
, (
bcmsdh_hc_t
)))) {

431 
	`SDLX_MSG
(("%s: out of memory,állocated %d bytes\n",

432 
__FUNCTION__
,

433 
	`MALLOCED
(
osh
)));

434 
îr
;

436 
	`bzîo
(
sdhc
, (
bcmsdh_hc_t
));

437 
sdhc
->
osh
 = osh;

439 
sdhc
->
dev
 = 
pdev
;

442 
	`pci_£t_ma°î
(
pdev
);

443 
rc
 = 
	`pci_íabÀ_devi˚
(
pdev
);

444 i‡(
rc
) {

445 
	`SDLX_MSG
(("%s: C™nŸÉ«bÀ PCI devi˚\n", 
__FUNCTION__
));

446 
îr
;

448 i‡(!(
sdh
 = 
	`bcmsdh_©èch
(
osh
, (*)(
uöçå
)
	`pci_ªsour˚_°¨t
(
pdev
, 0),

449 (**)&
ªgs
, 
pdev
->
úq
))) {

450 
	`SDLX_MSG
(("%s: bcmsdh_©èch faûed\n", 
__FUNCTION__
));

451 
îr
;

454 
sdhc
->
sdh
 = sdh;

457 i‡(!(
sdhc
->
ch
 = 
drvöfo
.
	`©èch
(
VENDOR_BROADCOM
,

458 
	`bcmsdh_quîy_devi˚
(
sdh
) & 0xFFFF, 0, 0, 0, 0,

459 (*)
ªgs
, 
NULL
, 
sdh
))) {

460 
	`SDLX_MSG
(("%s: devi˚áâach faûed\n", 
__FUNCTION__
));

461 
îr
;

465 
sdhc
->
√xt
 = 
sdhcöfo
;

466 
sdhcöfo
 = 
sdhc
;

471 
îr
:

472 i‡(
sdhc
) {

473 i‡(
sdhc
->
sdh
)

474 
	`bcmsdh_dëach
(
sdhc
->
osh
, sdhc->
sdh
);

475 
	`MFREE
(
osh
, 
sdhc
, (
bcmsdh_hc_t
));

477 i‡(
osh
)

478 
	`o¶_dëach
(
osh
);

479  -
ENODEV
;

480 
	}
}

486 
__devexô


487 
	$bcmsdh_pci_ªmove
(
pci_dev
 *
pdev
)

489 
bcmsdh_hc_t
 *
sdhc
, *
¥ev
;

490 
o¶_t
 *
osh
;

493 
sdhc
 = 
sdhcöfo
, 
¥ev
 = 
NULL
; sdhc; sdh¯sdhc->
√xt
) {

494 i‡(
sdhc
->
dev
 =
pdev
) {

495 i‡(
¥ev
)

496 
¥ev
->
√xt
 = 
sdhc
->next;

498 
sdhcöfo
 = 
NULL
;

501 
¥ev
 = 
sdhc
;

503 i‡(!
sdhc
)

506 
drvöfo
.
	`dëach
(
sdhc
->
ch
);

508 
	`bcmsdh_dëach
(
sdhc
->
osh
, sdhc->
sdh
);

511 
osh
 = 
sdhc
->osh;

512 
	`MFREE
(
osh
, 
sdhc
, (
bcmsdh_hc_t
));

513 
	`o¶_dëach
(
osh
);

514 
	}
}

518 
sdio_fun˘i⁄_öô
();

520 
sdio_func_ªg_nŸify
(* 
£m≠h‹e
);

521 
sdio_func_uƒeg_nŸify
();

523 #i‡
deföed
(
BCMLXSDMMC
)

524 
	$bcmsdh_ªg_sdio_nŸify
(* 
£m≠h‹e
)

526  
	`sdio_func_ªg_nŸify
(
£m≠h‹e
);

527 
	}
}

529 
	$bcmsdh_uƒeg_sdio_nŸify
()

531 
	`sdio_func_uƒeg_nŸify
();

532 
	}
}

536 
	$bcmsdh_ªgi°î
(
bcmsdh_drivî_t
 *
drivî
)

538 
îr‹
 = 0;

540 
drvöfo
 = *
drivî
;

542 #i‡
	`deföed
(
BCMPLATFORM_BUS
)

543 
	`SDLX_MSG
(("Linux Kernel SDIO/MMC Driver\n"));

544 
îr‹
 = 
	`sdio_fun˘i⁄_öô
();

545  
îr‹
;

548 #i‡!
	`deföed
(
BCMPLATFORM_BUS
Ë&& !deföed(
BCMLXSDMMC
)

549 #i‡(
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2, 6, 0))

550 i‡(!(
îr‹
 = 
	`pci_moduÀ_öô
(&
bcmsdh_pci_drivî
)))

553 i‡(!(
îr‹
 = 
	`pci_ªgi°î_drivî
(&
bcmsdh_pci_drivî
)))

557 
	`SDLX_MSG
(("%s:Öci_moduÀ_öô faûed 0x%x\n", 
__FUNCTION__
, 
îr‹
));

560  
îr‹
;

561 
	}
}

563 
sdio_fun˘i⁄_˛ónup
();

566 
	$bcmsdh_uƒegi°î
()

568 #i‡(
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2, 6, 0))

569 i‡(
bcmsdh_pci_drivî
.
node
.
√xt
)

572 #i‡
	`deföed
(
BCMLXSDMMC
)

573 
	`sdio_fun˘i⁄_˛ónup
();

576 #i‡!
	`deföed
(
BCMPLATFORM_BUS
Ë&& !deföed(
BCMLXSDMMC
)

577 
	`pci_uƒegi°î_drivî
(&
bcmsdh_pci_drivî
);

579 
	}
}

581 
	$bcmsdh_£t_drvd©a
(* 
dhdp
)

583 
	`SDLX_MSG
(("%†E¡î \n", 
__FUNCTION__
));

585 
	`dev_£t_drvd©a
(
sdhcöfo
->
dev
, 
dhdp
);

588 
	}
}

590 #i‡
deföed
(
OOB_INTR_ONLY
)

591 
	$bcmsdh_oob_öå_£t
(
boﬁ
 
íabÀ
)

593 
boﬁ
 
cur°©e
 = 1;

594 
Êags
;

596 
	`•ö_lock_úqßve
(&
sdhcöfo
->
úq_lock
, 
Êags
);

597 i‡(
cur°©e
 !
íabÀ
) {

598 i‡(
íabÀ
)

599 
	`íabÀ_úq
(
sdhcöfo
->
oob_úq
);

601 
	`dißbÀ_úq_nosync
(
sdhcöfo
->
oob_úq
);

602 
cur°©e
 = 
íabÀ
;

604 
	`•ö_u∆ock_úqª°‹e
(&
sdhcöfo
->
úq_lock
, 
Êags
);

605 
	}
}

607 
úqªtu∫_t
 
	$wœn_oob_úq
(
úq
, *
dev_id
)

609 
dhd_pub_t
 *
dhdp
;

611 
dhdp
 = (
dhd_pub_t
 *)
	`dev_gë_drvd©a
(
sdhcöfo
->
dev
);

613 
	`bcmsdh_oob_öå_£t
(0);

615 i‡(
dhdp
 =
NULL
) {

616 
	`SDLX_MSG
(("Out of band GPIO interrupt fired wayÅooÉarly\n"));

617  
IRQ_HANDLED
;

620 
	`dhdsdio_i§
((*)
dhdp
->
bus
);

622  
IRQ_HANDLED
;

623 
	}
}

625 
	$bcmsdh_ªgi°î_oob_öå
(* 
dhdp
)

627 
îr‹
 = 0;

629 
	`SDLX_MSG
(("%†E¡î \n", 
__FUNCTION__
));

633 
	`dev_£t_drvd©a
(
sdhcöfo
->
dev
, 
dhdp
);

635 i‡(!
sdhcöfo
->
oob_úq_ªgi°îed
) {

636 
	`SDLX_MSG
(("%†IRQ=%d Ty≥=%X \n", 
__FUNCTION__
,

637 ()
sdhcöfo
->
oob_úq
, ()sdhcöfo->
oob_Êags
));

639 
îr‹
 = 
	`ªque°_úq
(
sdhcöfo
->
oob_úq
, 
wœn_oob_úq
, sdhcöfo->
oob_Êags
,

640 "bcmsdh_sdmmc", 
NULL
);

641 i‡(
îr‹
)

642  -
ENODEV
;

644 #i‡
	`deföed
(
CONFIG_ARCH_RHEA
Ë|| deföed(
CONFIG_ARCH_CAPRI
)

645 i‡(
	`devi˚_may_wakeup
(
sdhcöfo
->
dev
)) {

647 
îr‹
 = 
	`íabÀ_úq_wake
(
sdhcöfo
->
oob_úq
);

648 #i‡
	`deföed
(
CONFIG_ARCH_RHEA
Ë|| deföed(
CONFIG_ARCH_CAPRI
)

651 i‡(
îr‹
)

652 
	`SDLX_MSG
(("%†íabÀ_úq_wakêîr‹=%d \n", 
__FUNCTION__
, 
îr‹
));

653 
sdhcöfo
->
oob_úq_ªgi°îed
 = 
TRUE
;

654 
sdhcöfo
->
oob_úq_íabÀ_Êag
 = 
TRUE
;

658 
	}
}

660 
	$bcmsdh_£t_úq
(
Êag
)

662 i‡(
sdhcöfo
->
oob_úq_ªgi°îed
 && sdhcöfo->
oob_úq_íabÀ_Êag
 !
Êag
) {

663 
	`SDLX_MSG
(("%†Fœg = %d\n", 
__FUNCTION__
, 
Êag
));

664 
sdhcöfo
->
oob_úq_íabÀ_Êag
 = 
Êag
;

665 i‡(
Êag
) {

666 
	`íabÀ_úq
(
sdhcöfo
->
oob_úq
);

667 #i‡
	`deföed
(
CONFIG_ARCH_RHEA
Ë|| deföed(
CONFIG_ARCH_CAPRI
)

668 i‡(
	`devi˚_may_wakeup
(
sdhcöfo
->
dev
))

670 
	`íabÀ_úq_wake
(
sdhcöfo
->
oob_úq
);

672 #i‡
	`deföed
(
CONFIG_ARCH_RHEA
Ë|| deföed(
CONFIG_ARCH_CAPRI
)

673 i‡(
	`devi˚_may_wakeup
(
sdhcöfo
->
dev
))

675 
	`dißbÀ_úq_wake
(
sdhcöfo
->
oob_úq
);

676 
	`dißbÀ_úq
(
sdhcöfo
->
oob_úq
);

679 
	}
}

681 
	$bcmsdh_uƒegi°î_oob_öå
()

683 
	`SDLX_MSG
(("%s: E¡î\n", 
__FUNCTION__
));

685 i‡(
sdhcöfo
->
oob_úq_ªgi°îed
 =
TRUE
) {

686 
	`bcmsdh_£t_úq
(
FALSE
);

687 
	`‰ì_úq
(
sdhcöfo
->
oob_úq
, 
NULL
);

688 
sdhcöfo
->
oob_úq_ªgi°îed
 = 
FALSE
;

690 
	}
}

693 #i‡
deföed
(
BCMLXSDMMC
)

694 *
	$bcmsdh_gë_drvd©a
()

696 i‡(!
sdhcöfo
)

697  
NULL
;

698  
	`dev_gë_drvd©a
(
sdhcöfo
->
dev
);

699 
	}
}

704 
uöt
 
sd_msgÀvñ
;

705 
moduÀ_∑øm
(
sd_msgÀvñ
, 
uöt
, 0);

707 
uöt
 
sd_powî
;

708 
moduÀ_∑øm
(
sd_powî
, 
uöt
, 0);

710 
uöt
 
sd_˛ock
;

711 
moduÀ_∑øm
(
sd_˛ock
, 
uöt
, 0);

713 
uöt
 
sd_divis‹
;

714 
moduÀ_∑øm
(
sd_divis‹
, 
uöt
, 0);

716 
uöt
 
sd_sdmode
;

717 
moduÀ_∑øm
(
sd_sdmode
, 
uöt
, 0);

719 
uöt
 
sd_hiok
;

720 
moduÀ_∑øm
(
sd_hiok
, 
uöt
, 0);

722 
uöt
 
sd_f2_blocksize
;

723 
moduÀ_∑øm
(
sd_f2_blocksize
, , 0);

725 #ifde‡
BCMSDIOH_STD


726 
sd_uhsimode
;

727 
moduÀ_∑øm
(
sd_uhsimode
, , 0);

730 #ifde‡
BCMSDIOH_TXGLOM


731 
uöt
 
sd_txglom
;

732 
moduÀ_∑øm
(
sd_txglom
, 
uöt
, 0);

735 #ifde‡
BCMSDH_MODULE


736 
EXPORT_SYMBOL
(
bcmsdh_©èch
);

737 
EXPORT_SYMBOL
(
bcmsdh_dëach
);

738 
EXPORT_SYMBOL
(
bcmsdh_öå_quîy
);

739 
EXPORT_SYMBOL
(
bcmsdh_öå_íabÀ
);

740 
EXPORT_SYMBOL
(
bcmsdh_öå_dißbÀ
);

741 
EXPORT_SYMBOL
(
bcmsdh_öå_ªg
);

742 
EXPORT_SYMBOL
(
bcmsdh_öå_dîeg
);

744 #i‡
deföed
(
DHD_DEBUG
)

745 
EXPORT_SYMBOL
(
bcmsdh_öå_≥ndög
);

748 
EXPORT_SYMBOL
(
bcmsdh_devªmove_ªg
);

749 
EXPORT_SYMBOL
(
bcmsdh_cfg_ªad
);

750 
EXPORT_SYMBOL
(
bcmsdh_cfg_wrôe
);

751 
EXPORT_SYMBOL
(
bcmsdh_cis_ªad
);

752 
EXPORT_SYMBOL
(
bcmsdh_ªg_ªad
);

753 
EXPORT_SYMBOL
(
bcmsdh_ªg_wrôe
);

754 
EXPORT_SYMBOL
(
bcmsdh_ªgÁû
);

755 
EXPORT_SYMBOL
(
bcmsdh_£nd_buf
);

756 
EXPORT_SYMBOL
(
bcmsdh_ªcv_buf
);

758 
EXPORT_SYMBOL
(
bcmsdh_rwd©a
);

759 
EXPORT_SYMBOL
(
bcmsdh_ab‹t
);

760 
EXPORT_SYMBOL
(
bcmsdh_quîy_devi˚
);

761 
EXPORT_SYMBOL
(
bcmsdh_quîy_io‚um
);

762 
EXPORT_SYMBOL
(
bcmsdh_iov¨_›
);

763 
EXPORT_SYMBOL
(
bcmsdh_ªgi°î
);

764 
EXPORT_SYMBOL
(
bcmsdh_uƒegi°î
);

765 
EXPORT_SYMBOL
(
bcmsdh_chùm©ch
);

766 
EXPORT_SYMBOL
(
bcmsdh_ª£t
);

767 
EXPORT_SYMBOL
(
bcmsdh_waôlock‰ì
);

769 
EXPORT_SYMBOL
(
bcmsdh_gë_d°©us
);

770 
EXPORT_SYMBOL
(
bcmsdh_cfg_ªad_w‹d
);

771 
EXPORT_SYMBOL
(
bcmsdh_cfg_wrôe_w‹d
);

772 
EXPORT_SYMBOL
(
bcmsdh_cur_sbwad
);

773 
EXPORT_SYMBOL
(
bcmsdh_chùöfo
);

	@bcmsdh_sdmmc.c

26 
	~<ty≥defs.h
>

28 
	~<bcmdevs.h
>

29 
	~<bcmídün.h
>

30 
	~<bcmutûs.h
>

31 
	~<o¶.h
>

32 
	~<sdio.h
>

33 
	~<sdioh.h
>

34 
	~<bcmsdbus.h
>

35 
	~<sdiov¨.h
>

37 
	~<löux/mmc/c‹e.h
>

38 
	~<löux/mmc/ˇrd.h
>

39 
	~<löux/mmc/sdio_func.h
>

40 
	~<löux/mmc/sdio_ids.h
>

42 
	~<dngl_°©s.h
>

43 
	~<dhd.h
>

45 #i‡(
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2, 6, 27)Ë&& 
deföed
(
CONFIG_PM_SLEEP
)

46 
	~<löux/su•íd.h
>

47 vﬁ©ûê
boﬁ
 
dhd_mmc_su•íd
;

49 
	~"bcmsdh_sdmmc.h
"

51 #i‚de‡
BCMSDH_MODULE


52 
sdio_fun˘i⁄_öô
();

53 
sdio_fun˘i⁄_˛ónup
();

56 #i‡!
deföed
(
OOB_INTR_ONLY
)

57 
IRQH™dÀr
(
sdio_func
 *
func
);

58 
IRQH™dÀrF2
(
sdio_func
 *
func
);

60 
sdioh_sdmmc_gë_cißddr
(
sdioh_öfo_t
 *
sd
, 
uöt32
 
ªgaddr
);

61 
sdio_ª£t_comm
(
mmc_ˇrd
 *
ˇrd
);

63 
PBCMSDH_SDMMC_INSTANCE
 
gIn°™˚
;

65 
	#DEFAULT_SDIO_F2_BLKSIZE
 512

	)

66 #i‚de‡
CUSTOM_SDIO_F2_BLKSIZE


67 
	#CUSTOM_SDIO_F2_BLKSIZE
 
DEFAULT_SDIO_F2_BLKSIZE


	)

70 
uöt
 
	gsd_sdmode
 = 
SDIOH_MODE_SD4
;

71 
uöt
 
	gsd_f2_blocksize
 = 
CUSTOM_SDIO_F2_BLKSIZE
;

72 
uöt
 
	gsd_divis‹
 = 2;

74 
uöt
 
	gsd_powî
 = 1;

75 
uöt
 
	gsd_˛ock
 = 1;

76 
uöt
 
	gsd_hiok
 = 
FALSE
;

77 
uöt
 
	gsd_msgÀvñ
 = 0x01;

78 
uöt
 
	gsd_u£_dma
 = 
TRUE
;

79 
DHD_PM_RESUME_WAIT_INIT
(
sdioh_ªque°_byã_waô
);

80 
DHD_PM_RESUME_WAIT_INIT
(
sdioh_ªque°_w‹d_waô
);

81 
DHD_PM_RESUME_WAIT_INIT
(
sdioh_ªque°_∑ckë_waô
);

82 
DHD_PM_RESUME_WAIT_INIT
(
sdioh_ªque°_buf„r_waô
);

84 
	#DMA_ALIGN_MASK
 0x03

	)

85 
	#MMC_SDIO_ABORT_RETRY_LIMIT
 5

	)

87 
sdioh_sdmmc_ˇrd_ªgªad
(
sdioh_öfo_t
 *
sd
, 
func
, 
uöt32
 
ªgaddr
, 
ªgsize
, uöt32 *
d©a
);

90 
	$sdioh_sdmmc_ˇrd_íabÀfuncs
(
sdioh_öfo_t
 *
sd
)

92 
îr_ªt
;

93 
uöt32
 
fbøddr
;

94 
uöt8
 
func
;

96 
	`sd_åa˚
(("%s\n", 
__FUNCTION__
));

99 
sd
->
com_cis_±r
 = 
	`sdioh_sdmmc_gë_cißddr
(sd, 
SDIOD_CCCR_CISPTR_0
);

100 
sd
->
func_cis_±r
[0] = sd->
com_cis_±r
;

101 
	`sd_öfo
(("%s: C¨d'†Comm⁄ CIS På = 0x%x\n", 
__FUNCTION__
, 
sd
->
com_cis_±r
));

104 
fbøddr
 = 
SDIOD_FBR_STARTADDR
, 
func
 = 1;

105 
func
 <
sd
->
num_funcs
; func++, 
fbøddr
 +
SDIOD_FBR_SIZE
) {

106 
sd
->
func_cis_±r
[
func
] = 
	`sdioh_sdmmc_gë_cißddr
(sd, 
SDIOD_FBR_CISPTR_0
 + 
fbøddr
);

107 
	`sd_öfo
(("%s: Function %d CIS Ptr = 0x%x\n",

108 
__FUNCTION__
, 
func
, 
sd
->
func_cis_±r
[func]));

111 
sd
->
func_cis_±r
[0] = sd->
com_cis_±r
;

112 
	`sd_öfo
(("%s: C¨d'†Comm⁄ CIS På = 0x%x\n", 
__FUNCTION__
, 
sd
->
com_cis_±r
));

115 
	`sdio_˛aim_ho°
(
gIn°™˚
->
func
[1]);

116 
îr_ªt
 = 
	`sdio_íabÀ_func
(
gIn°™˚
->
func
[1]);

117 
	`sdio_ªÀa£_ho°
(
gIn°™˚
->
func
[1]);

118 i‡(
îr_ªt
) {

119 
	`sd_îr
(("bcmsdh_sdmmc: FaûedÅÿíabÀ F1 Eº: 0x%08x", 
îr_ªt
));

122  
FALSE
;

123 
	}
}

128 
sdioh_öfo_t
 *

129 
	$sdioh_©èch
(
o¶_t
 *
osh
, *
b¨0
, 
uöt
 
úq
)

131 
sdioh_öfo_t
 *
sd
;

132 
îr_ªt
;

134 
	`sd_åa˚
(("%s\n", 
__FUNCTION__
));

136 i‡(
gIn°™˚
 =
NULL
) {

137 
	`sd_îr
(("%s: SDIO Devi˚ÇŸÖª£¡\n", 
__FUNCTION__
));

138  
NULL
;

141 i‡((
sd
 = (
sdioh_öfo_t
 *)
	`MALLOC
(
osh
, (sdioh_öfo_t))Ë=
NULL
) {

142 
	`sd_îr
(("sdioh_©èch: ouào‡mem‹y, mÆlo˚d %d byãs\n", 
	`MALLOCED
(
osh
)));

143  
NULL
;

145 
	`bzîo
((*)
sd
, (
sdioh_öfo_t
));

146 
sd
->
osh
 = osh;

147 i‡(
	`sdioh_sdmmc_osöô
(
sd
) != 0) {

148 
	`sd_îr
(("%s:sdioh_sdmmc_osöô(ËÁûed\n", 
__FUNCTION__
));

149 
	`MFREE
(
sd
->
osh
, sd, (
sdioh_öfo_t
));

150  
NULL
;

153 
sd
->
num_funcs
 = 2;

154 
sd
->
sd_blockmode
 = 
TRUE
;

155 
sd
->
u£_˛õ¡_öts
 = 
TRUE
;

156 
sd
->
˛õ¡_block_size
[0] = 64;

157 
sd
->
u£_rxchaö
 = 
FALSE
;

159 
gIn°™˚
->
sd
 = sd;

162 i‡(
gIn°™˚
->
func
[1]) {

163 
	`sdio_˛aim_ho°
(
gIn°™˚
->
func
[1]);

165 
sd
->
˛õ¡_block_size
[1] = 64;

166 
îr_ªt
 = 
	`sdio_£t_block_size
(
gIn°™˚
->
func
[1], 64);

167 i‡(
îr_ªt
) {

168 
	`sd_îr
(("bcmsdh_sdmmc: FailedÅo set F1 blocksize\n"));

172 
	`sdio_ªÀa£_ho°
(
gIn°™˚
->
func
[1]);

174 
	`sd_îr
(("%s:gIn°™˚->func[1] i†nuŒ\n", 
__FUNCTION__
));

175 
	`MFREE
(
sd
->
osh
, sd, (
sdioh_öfo_t
));

176  
NULL
;

179 i‡(
gIn°™˚
->
func
[2]) {

181 
	`sdio_˛aim_ho°
(
gIn°™˚
->
func
[2]);

183 
sd
->
˛õ¡_block_size
[2] = 
sd_f2_blocksize
;

184 
îr_ªt
 = 
	`sdio_£t_block_size
(
gIn°™˚
->
func
[2], 
sd_f2_blocksize
);

185 i‡(
îr_ªt
) {

186 
	`sd_îr
(("bcmsdh_sdmmc: FailedÅo set F2 blocksizeÅo %d\n",

187 
sd_f2_blocksize
));

191 
	`sdio_ªÀa£_ho°
(
gIn°™˚
->
func
[2]);

193 
	`sd_îr
(("%s:gIn°™˚->func[2] i†nuŒ\n", 
__FUNCTION__
));

194 
	`MFREE
(
sd
->
osh
, sd, (
sdioh_öfo_t
));

195  
NULL
;

198 
	`sdioh_sdmmc_ˇrd_íabÀfuncs
(
sd
);

200 
	`sd_åa˚
(("%s: D⁄e\n", 
__FUNCTION__
));

201  
sd
;

202 
	}
}

205 
SDIOH_API_RC


206 
	$sdioh_dëach
(
o¶_t
 *
osh
, 
sdioh_öfo_t
 *
sd
)

208 
	`sd_åa˚
(("%s\n", 
__FUNCTION__
));

210 i‡(
sd
) {

213 
	`sdio_˛aim_ho°
(
gIn°™˚
->
func
[2]);

214 
	`sdio_dißbÀ_func
(
gIn°™˚
->
func
[2]);

215 
	`sdio_ªÀa£_ho°
(
gIn°™˚
->
func
[2]);

218 i‡(
gIn°™˚
->
func
[1]) {

219 
	`sdio_˛aim_ho°
(
gIn°™˚
->
func
[1]);

220 
	`sdio_dißbÀ_func
(
gIn°™˚
->
func
[1]);

221 
	`sdio_ªÀa£_ho°
(
gIn°™˚
->
func
[1]);

224 
gIn°™˚
->
func
[1] = 
NULL
;

225 
gIn°™˚
->
func
[2] = 
NULL
;

228 
	`sdioh_sdmmc_os‰ì
(
sd
);

230 
	`MFREE
(
sd
->
osh
, sd, (
sdioh_öfo_t
));

232  
SDIOH_API_RC_SUCCESS
;

233 
	}
}

235 #i‡
deföed
(
OOB_INTR_ONLY
Ë&& deföed(
HW_OOB
)

237 
SDIOH_API_RC


238 
	$sdioh_íabÀ_func_öå
()

240 
uöt8
 
ªg
;

241 
îr
;

243 i‡(
gIn°™˚
->
func
[0]) {

244 
	`sdio_˛aim_ho°
(
gIn°™˚
->
func
[0]);

246 
ªg
 = 
	`sdio_ªadb
(
gIn°™˚
->
func
[0], 
SDIOD_CCCR_INTEN
, &
îr
);

247 i‡(
îr
) {

248 
	`sd_îr
(("%s:Éº‹ f‹Ñód SDIO_CCCR_IENx : 0x%x\n", 
__FUNCTION__
, 
îr
));

249 
	`sdio_ªÀa£_ho°
(
gIn°™˚
->
func
[0]);

250  
SDIOH_API_RC_FAIL
;

254 
ªg
 |(
INTR_CTL_FUNC1_EN
 | 
INTR_CTL_FUNC2_EN
 | 
INTR_CTL_MASTER_EN
);

256 
	`sdio_wrôeb
(
gIn°™˚
->
func
[0], 
ªg
, 
SDIOD_CCCR_INTEN
, &
îr
);

257 
	`sdio_ªÀa£_ho°
(
gIn°™˚
->
func
[0]);

259 i‡(
îr
) {

260 
	`sd_îr
(("%s:Éº‹ f‹ wrôêSDIO_CCCR_IENx : 0x%x\n", 
__FUNCTION__
, 
îr
));

261  
SDIOH_API_RC_FAIL
;

265  
SDIOH_API_RC_SUCCESS
;

266 
	}
}

268 
SDIOH_API_RC


269 
	$sdioh_dißbÀ_func_öå
()

271 
uöt8
 
ªg
;

272 
îr
;

274 i‡(
gIn°™˚
->
func
[0]) {

275 
	`sdio_˛aim_ho°
(
gIn°™˚
->
func
[0]);

276 
ªg
 = 
	`sdio_ªadb
(
gIn°™˚
->
func
[0], 
SDIOD_CCCR_INTEN
, &
îr
);

277 i‡(
îr
) {

278 
	`sd_îr
(("%s:Éº‹ f‹Ñód SDIO_CCCR_IENx : 0x%x\n", 
__FUNCTION__
, 
îr
));

279 
	`sdio_ªÀa£_ho°
(
gIn°™˚
->
func
[0]);

280  
SDIOH_API_RC_FAIL
;

283 
ªg
 &~(
INTR_CTL_FUNC1_EN
 | 
INTR_CTL_FUNC2_EN
);

285 i‡(!(
ªg
 & 0xFE))

286 
ªg
 = 0;

287 
	`sdio_wrôeb
(
gIn°™˚
->
func
[0], 
ªg
, 
SDIOD_CCCR_INTEN
, &
îr
);

289 
	`sdio_ªÀa£_ho°
(
gIn°™˚
->
func
[0]);

290 i‡(
îr
) {

291 
	`sd_îr
(("%s:Éº‹ f‹ wrôêSDIO_CCCR_IENx : 0x%x\n", 
__FUNCTION__
, 
îr
));

292  
SDIOH_API_RC_FAIL
;

295  
SDIOH_API_RC_SUCCESS
;

296 
	}
}

300 
SDIOH_API_RC


301 
	$sdioh_öãºu±_ªgi°î
(
sdioh_öfo_t
 *
sd
, 
sdioh_cb_‚_t
 
‚
, *
¨gh
)

303 
	`sd_åa˚
(("%s: E¡îög\n", 
__FUNCTION__
));

304 i‡(
‚
 =
NULL
) {

305 
	`sd_îr
(("%s: i¡îru± h™dÀ∏i†NULL,ÇŸÑegi°îög\n", 
__FUNCTION__
));

306  
SDIOH_API_RC_FAIL
;

308 #i‡!
	`deföed
(
OOB_INTR_ONLY
)

309 
sd
->
öå_h™dÀr
 = 
‚
;

310 
sd
->
öå_h™dÀr_¨g
 = 
¨gh
;

311 
sd
->
öå_h™dÀr_vÆid
 = 
TRUE
;

314 i‡(
gIn°™˚
->
func
[2]) {

315 
	`sdio_˛aim_ho°
(
gIn°™˚
->
func
[2]);

316 
	`sdio_˛aim_úq
(
gIn°™˚
->
func
[2], 
IRQH™dÀrF2
);

317 
	`sdio_ªÀa£_ho°
(
gIn°™˚
->
func
[2]);

320 i‡(
gIn°™˚
->
func
[1]) {

321 
	`sdio_˛aim_ho°
(
gIn°™˚
->
func
[1]);

322 
	`sdio_˛aim_úq
(
gIn°™˚
->
func
[1], 
IRQH™dÀr
);

323 
	`sdio_ªÀa£_ho°
(
gIn°™˚
->
func
[1]);

325 #ñi‡
	`deföed
(
HW_OOB
)

326 
	`sdioh_íabÀ_func_öå
();

329  
SDIOH_API_RC_SUCCESS
;

330 
	}
}

332 
SDIOH_API_RC


333 
	$sdioh_öãºu±_dîegi°î
(
sdioh_öfo_t
 *
sd
)

335 
	`sd_åa˚
(("%s: E¡îög\n", 
__FUNCTION__
));

337 #i‡!
	`deföed
(
OOB_INTR_ONLY
)

338 i‡(
gIn°™˚
->
func
[1]) {

340 
	`sdio_˛aim_ho°
(
gIn°™˚
->
func
[1]);

341 
	`sdio_ªÀa£_úq
(
gIn°™˚
->
func
[1]);

342 
	`sdio_ªÀa£_ho°
(
gIn°™˚
->
func
[1]);

345 i‡(
gIn°™˚
->
func
[2]) {

347 
	`sdio_˛aim_ho°
(
gIn°™˚
->
func
[2]);

348 
	`sdio_ªÀa£_úq
(
gIn°™˚
->
func
[2]);

350 
	`sdio_ªÀa£_ho°
(
gIn°™˚
->
func
[2]);

353 
sd
->
öå_h™dÀr_vÆid
 = 
FALSE
;

354 
sd
->
öå_h™dÀr
 = 
NULL
;

355 
sd
->
öå_h™dÀr_¨g
 = 
NULL
;

356 #ñi‡
	`deföed
(
HW_OOB
)

357 
	`sdioh_dißbÀ_func_öå
();

359  
SDIOH_API_RC_SUCCESS
;

360 
	}
}

362 
SDIOH_API_RC


363 
	$sdioh_öãºu±_quîy
(
sdioh_öfo_t
 *
sd
, 
boﬁ
 *
⁄off
)

365 
	`sd_åa˚
(("%s: E¡îög\n", 
__FUNCTION__
));

366 *
⁄off
 = 
sd
->
˛õ¡_öå_íabÀd
;

367  
SDIOH_API_RC_SUCCESS
;

368 
	}
}

370 #i‡
deföed
(
DHD_DEBUG
)

371 
boﬁ


372 
	$sdioh_öãºu±_≥ndög
(
sdioh_öfo_t
 *
sd
)

375 
	}
}

378 
uöt


379 
	$sdioh_quîy_io‚um
(
sdioh_öfo_t
 *
sd
)

381  
sd
->
num_funcs
;

382 
	}
}

386 
IOV_MSGLEVEL
 = 1,

387 
IOV_BLOCKMODE
,

388 
IOV_BLOCKSIZE
,

389 
IOV_DMA
,

390 
IOV_USEINTS
,

391 
IOV_NUMINTS
,

392 
IOV_NUMLOCALINTS
,

393 
IOV_HOSTREG
,

394 
IOV_DEVREG
,

395 
IOV_DIVISOR
,

396 
IOV_SDMODE
,

397 
IOV_HISPEED
,

398 
IOV_HCIREGS
,

399 
IOV_POWER
,

400 
IOV_CLOCK
,

401 
IOV_RXCHAIN


404 c⁄° 
bcm_iov¨_t
 
	gsdioh_iov¨s
[] = {

405 {"sd_msgÀvñ", 
IOV_MSGLEVEL
, 0, 
IOVT_UINT32
, 0 },

406 {"sd_blockmode", 
IOV_BLOCKMODE
, 0, 
IOVT_BOOL
, 0 },

407 {"sd_blocksize", 
IOV_BLOCKSIZE
, 0, 
IOVT_UINT32
, 0 },

408 {"sd_dma", 
IOV_DMA
, 0, 
IOVT_BOOL
, 0 },

409 {"sd_öts", 
IOV_USEINTS
, 0, 
IOVT_BOOL
, 0 },

410 {"sd_numöts", 
IOV_NUMINTS
, 0, 
IOVT_UINT32
, 0 },

411 {"sd_numloˇlöts", 
IOV_NUMLOCALINTS
, 0, 
IOVT_UINT32
, 0 },

412 {"sd_ho°ªg", 
IOV_HOSTREG
, 0, 
IOVT_BUFFER
, (
sdªg_t
) },

413 {"sd_devªg", 
IOV_DEVREG
, 0, 
IOVT_BUFFER
, (
sdªg_t
) },

414 {"sd_divis‹", 
IOV_DIVISOR
, 0, 
IOVT_UINT32
, 0 },

415 {"sd_powî", 
IOV_POWER
, 0, 
IOVT_UINT32
, 0 },

416 {"sd_˛ock", 
IOV_CLOCK
, 0, 
IOVT_UINT32
, 0 },

417 {"sd_mode", 
IOV_SDMODE
, 0, 
IOVT_UINT32
, 100},

418 {"sd_high•ìd", 
IOV_HISPEED
, 0, 
IOVT_UINT32
, 0 },

419 {"sd_rxchaö", 
IOV_RXCHAIN
, 0, 
IOVT_BOOL
, 0 },

420 {
NULL
, 0, 0, 0, 0 }

424 
	$sdioh_iov¨_›
(
sdioh_öfo_t
 *
si
, c⁄° *
«me
,

425 *
∑øms
, 
∂í
, *
¨g
, 
Àn
, 
boﬁ
 
£t
)

427 c⁄° 
bcm_iov¨_t
 *
vi
 = 
NULL
;

428 
bcmîr‹
 = 0;

429 
vÆ_size
;

430 
öt32
 
öt_vÆ
 = 0;

431 
boﬁ
 
boﬁ_vÆ
;

432 
uöt32
 
a˘i⁄id
;

434 
	`ASSERT
(
«me
);

435 
	`ASSERT
(
Àn
 >= 0);

438 
	`ASSERT
(
£t
 || (
¨g
 && 
Àn
));

439 
	`ASSERT
(!
£t
 || (!
∑øms
 && !
∂í
));

441 
	`sd_åa˚
(("%s: E¡î (%†%s)\n", 
__FUNCTION__
, (
£t
 ? "£t" : "gë"), 
«me
));

443 i‡((
vi
 = 
	`bcm_iov¨_lookup
(
sdioh_iov¨s
, 
«me
)Ë=
NULL
) {

444 
bcmîr‹
 = 
BCME_UNSUPPORTED
;

445 
exô
;

448 i‡((
bcmîr‹
 = 
	`bcm_iov¨_Àncheck
(
vi
, 
¨g
, 
Àn
, 
£t
)) != 0)

449 
exô
;

452 i‡(
∑øms
 =
NULL
) {

453 
∑øms
 = 
¨g
;

454 
∂í
 = 
Àn
;

457 i‡(
vi
->
ty≥
 =
IOVT_VOID
)

458 
vÆ_size
 = 0;

459 i‡(
vi
->
ty≥
 =
IOVT_BUFFER
)

460 
vÆ_size
 = 
Àn
;

462 
vÆ_size
 = ();

464 i‡(
∂í
 >()(
öt_vÆ
))

465 
	`bc›y
(
∑øms
, &
öt_vÆ
, (int_val));

467 
boﬁ_vÆ
 = (
öt_vÆ
 !0Ë? 
TRUE
 : 
FALSE
;

468 
	`BCM_REFERENCE
(
boﬁ_vÆ
);

470 
a˘i⁄id
 = 
£t
 ? 
	`IOV_SVAL
(
vi
->
v¨id
Ë: 
	`IOV_GVAL
(vi->varid);

471 
a˘i⁄id
) {

472 
	`IOV_GVAL
(
IOV_MSGLEVEL
):

473 
öt_vÆ
 = (
öt32
)
sd_msgÀvñ
;

474 
	`bc›y
(&
öt_vÆ
, 
¨g
, 
vÆ_size
);

477 
	`IOV_SVAL
(
IOV_MSGLEVEL
):

478 
sd_msgÀvñ
 = 
öt_vÆ
;

481 
	`IOV_GVAL
(
IOV_BLOCKMODE
):

482 
öt_vÆ
 = (
öt32
)
si
->
sd_blockmode
;

483 
	`bc›y
(&
öt_vÆ
, 
¨g
, 
vÆ_size
);

486 
	`IOV_SVAL
(
IOV_BLOCKMODE
):

487 
si
->
sd_blockmode
 = (
boﬁ
)
öt_vÆ
;

491 
	`IOV_GVAL
(
IOV_BLOCKSIZE
):

492 i‡((
uöt32
)
öt_vÆ
 > 
si
->
num_funcs
) {

493 
bcmîr‹
 = 
BCME_BADARG
;

496 
öt_vÆ
 = (
öt32
)
si
->
˛õ¡_block_size
[int_val];

497 
	`bc›y
(&
öt_vÆ
, 
¨g
, 
vÆ_size
);

500 
	`IOV_SVAL
(
IOV_BLOCKSIZE
):

502 
uöt
 
func
 = ((
uöt32
)
öt_vÆ
 >> 16);

503 
uöt
 
blksize
 = (
uöt16
)
öt_vÆ
;

504 
uöt
 
maxsize
;

506 i‡(
func
 > 
si
->
num_funcs
) {

507 
bcmîr‹
 = 
BCME_BADARG
;

511 
func
) {

512 0: 
maxsize
 = 32; ;

513 1: 
maxsize
 = 
BLOCK_SIZE_4318
; ;

514 2: 
maxsize
 = 
BLOCK_SIZE_4328
; ;

515 : 
maxsize
 = 0;

517 i‡(
blksize
 > 
maxsize
) {

518 
bcmîr‹
 = 
BCME_BADARG
;

521 i‡(!
blksize
) {

522 
blksize
 = 
maxsize
;

526 
si
->
˛õ¡_block_size
[
func
] = 
blksize
;

531 
	`IOV_GVAL
(
IOV_RXCHAIN
):

532 
öt_vÆ
 = (
öt32
)
si
->
u£_rxchaö
;

533 
	`bc›y
(&
öt_vÆ
, 
¨g
, 
vÆ_size
);

536 
	`IOV_GVAL
(
IOV_DMA
):

537 
öt_vÆ
 = (
öt32
)
si
->
sd_u£_dma
;

538 
	`bc›y
(&
öt_vÆ
, 
¨g
, 
vÆ_size
);

541 
	`IOV_SVAL
(
IOV_DMA
):

542 
si
->
sd_u£_dma
 = (
boﬁ
)
öt_vÆ
;

545 
	`IOV_GVAL
(
IOV_USEINTS
):

546 
öt_vÆ
 = (
öt32
)
si
->
u£_˛õ¡_öts
;

547 
	`bc›y
(&
öt_vÆ
, 
¨g
, 
vÆ_size
);

550 
	`IOV_SVAL
(
IOV_USEINTS
):

551 
si
->
u£_˛õ¡_öts
 = (
boﬁ
)
öt_vÆ
;

552 i‡(
si
->
u£_˛õ¡_öts
)

553 
si
->
ötmask
 |
CLIENT_INTR
;

555 
si
->
ötmask
 &~
CLIENT_INTR
;

559 
	`IOV_GVAL
(
IOV_DIVISOR
):

560 
öt_vÆ
 = (
uöt32
)
sd_divis‹
;

561 
	`bc›y
(&
öt_vÆ
, 
¨g
, 
vÆ_size
);

564 
	`IOV_SVAL
(
IOV_DIVISOR
):

565 
sd_divis‹
 = 
öt_vÆ
;

568 
	`IOV_GVAL
(
IOV_POWER
):

569 
öt_vÆ
 = (
uöt32
)
sd_powî
;

570 
	`bc›y
(&
öt_vÆ
, 
¨g
, 
vÆ_size
);

573 
	`IOV_SVAL
(
IOV_POWER
):

574 
sd_powî
 = 
öt_vÆ
;

577 
	`IOV_GVAL
(
IOV_CLOCK
):

578 
öt_vÆ
 = (
uöt32
)
sd_˛ock
;

579 
	`bc›y
(&
öt_vÆ
, 
¨g
, 
vÆ_size
);

582 
	`IOV_SVAL
(
IOV_CLOCK
):

583 
sd_˛ock
 = 
öt_vÆ
;

586 
	`IOV_GVAL
(
IOV_SDMODE
):

587 
öt_vÆ
 = (
uöt32
)
sd_sdmode
;

588 
	`bc›y
(&
öt_vÆ
, 
¨g
, 
vÆ_size
);

591 
	`IOV_SVAL
(
IOV_SDMODE
):

592 
sd_sdmode
 = 
öt_vÆ
;

595 
	`IOV_GVAL
(
IOV_HISPEED
):

596 
öt_vÆ
 = (
uöt32
)
sd_hiok
;

597 
	`bc›y
(&
öt_vÆ
, 
¨g
, 
vÆ_size
);

600 
	`IOV_SVAL
(
IOV_HISPEED
):

601 
sd_hiok
 = 
öt_vÆ
;

604 
	`IOV_GVAL
(
IOV_NUMINTS
):

605 
öt_vÆ
 = (
öt32
)
si
->
öåcou¡
;

606 
	`bc›y
(&
öt_vÆ
, 
¨g
, 
vÆ_size
);

609 
	`IOV_GVAL
(
IOV_NUMLOCALINTS
):

610 
öt_vÆ
 = (
öt32
)0;

611 
	`bc›y
(&
öt_vÆ
, 
¨g
, 
vÆ_size
);

614 
	`IOV_GVAL
(
IOV_HOSTREG
):

616 
sdªg_t
 *
sd_±r
 = (sdªg_à*)
∑øms
;

618 i‡(
sd_±r
->
off£t
 < 
SD_SysAddr
 || sd_±r->off£à> 
SD_MaxCurC≠
) {

619 
	`sd_îr
(("%s: bad off£à0x%x\n", 
__FUNCTION__
, 
sd_±r
->
off£t
));

620 
bcmîr‹
 = 
BCME_BADARG
;

624 
	`sd_åa˚
(("%s:Ñªg%dáàoff£à%d\n", 
__FUNCTION__
,

625 (
sd_±r
->
off£t
 & 1) ? 8 : ((sd_ptr->offset & 2) ? 16 : 32),

626 
sd_±r
->
off£t
));

627 i‡(
sd_±r
->
off£t
 & 1)

628 
öt_vÆ
 = 8;

629 i‡(
sd_±r
->
off£t
 & 2)

630 
öt_vÆ
 = 16;

632 
öt_vÆ
 = 32;

634 
	`bc›y
(&
öt_vÆ
, 
¨g
, (int_val));

638 
	`IOV_SVAL
(
IOV_HOSTREG
):

640 
sdªg_t
 *
sd_±r
 = (sdªg_à*)
∑øms
;

642 i‡(
sd_±r
->
off£t
 < 
SD_SysAddr
 || sd_±r->off£à> 
SD_MaxCurC≠
) {

643 
	`sd_îr
(("%s: bad off£à0x%x\n", 
__FUNCTION__
, 
sd_±r
->
off£t
));

644 
bcmîr‹
 = 
BCME_BADARG
;

648 
	`sd_åa˚
(("%s: wªg%d vÆuê0x%08xáàoff£à%d\n", 
__FUNCTION__
, 
sd_±r
->
vÆue
,

649 (
sd_±r
->
off£t
 & 1) ? 8 : ((sd_ptr->offset & 2) ? 16 : 32),

650 
sd_±r
->
off£t
));

654 
	`IOV_GVAL
(
IOV_DEVREG
):

656 
sdªg_t
 *
sd_±r
 = (sdªg_à*)
∑øms
;

657 
uöt8
 
d©a
 = 0;

659 i‡(
	`sdioh_cfg_ªad
(
si
, 
sd_±r
->
func
, sd_±r->
off£t
, &
d©a
)) {

660 
bcmîr‹
 = 
BCME_SDIO_ERROR
;

664 
öt_vÆ
 = ()
d©a
;

665 
	`bc›y
(&
öt_vÆ
, 
¨g
, (int_val));

669 
	`IOV_SVAL
(
IOV_DEVREG
):

671 
sdªg_t
 *
sd_±r
 = (sdªg_à*)
∑øms
;

672 
uöt8
 
d©a
 = (uöt8)
sd_±r
->
vÆue
;

674 i‡(
	`sdioh_cfg_wrôe
(
si
, 
sd_±r
->
func
, sd_±r->
off£t
, &
d©a
)) {

675 
bcmîr‹
 = 
BCME_SDIO_ERROR
;

682 
bcmîr‹
 = 
BCME_UNSUPPORTED
;

685 
exô
:

687  
bcmîr‹
;

688 
	}
}

690 #i‡
deföed
(
OOB_INTR_ONLY
Ë&& deföed(
HW_OOB
)

692 
SDIOH_API_RC


693 
	$sdioh_íabÀ_hw_oob_öå
(
sdioh_öfo_t
 *
sd
, 
boﬁ
 
íabÀ
)

695 
SDIOH_API_RC
 
°©us
;

696 
uöt8
 
d©a
;

698 i‡(
íabÀ
)

699 
d©a
 = 
SDIO_SEPINT_MASK
 | 
SDIO_SEPINT_OE
 | 
SDIO_SEPINT_ACT_HI
;

701 
d©a
 = 
SDIO_SEPINT_ACT_HI
;

703 
°©us
 = 
	`sdioh_ªque°_byã
(
sd
, 
SDIOH_WRITE
, 0, 
SDIOD_CCCR_BRCM_SEPINT
, &
d©a
);

704  
°©us
;

705 
	}
}

708 
SDIOH_API_RC


709 
	$sdioh_cfg_ªad
(
sdioh_öfo_t
 *
sd
, 
uöt
 
‚c_num
, 
uöt32
 
addr
, 
uöt8
 *
d©a
)

711 
SDIOH_API_RC
 
°©us
;

713 
°©us
 = 
	`sdioh_ªque°_byã
(
sd
, 
SDIOH_READ
, 
‚c_num
, 
addr
, 
d©a
);

714  
°©us
;

715 
	}
}

717 
SDIOH_API_RC


718 
	$sdioh_cfg_wrôe
(
sdioh_öfo_t
 *
sd
, 
uöt
 
‚c_num
, 
uöt32
 
addr
, 
uöt8
 *
d©a
)

721 
SDIOH_API_RC
 
°©us
;

722 
°©us
 = 
	`sdioh_ªque°_byã
(
sd
, 
SDIOH_WRITE
, 
‚c_num
, 
addr
, 
d©a
);

723  
°©us
;

724 
	}
}

727 
	$sdioh_sdmmc_gë_cißddr
(
sdioh_öfo_t
 *
sd
, 
uöt32
 
ªgaddr
)

730 
i
;

731 
uöt32
 
s¸©ch
, 
ªgd©a
;

732 
uöt8
 *
±r
 = (uöt8 *)&
s¸©ch
;

733 
i
 = 0; i < 3; i++) {

734 i‡((
	`sdioh_sdmmc_ˇrd_ªgªad
 (
sd
, 0, 
ªgaddr
, 1, &
ªgd©a
)Ë!
SUCCESS
)

735 
	`sd_îr
(("%s: C™'àªad!\n", 
__FUNCTION__
));

737 *
±r
++ = (
uöt8
Ë
ªgd©a
;

738 
ªgaddr
++;

742 
s¸©ch
 = 
	`…oh32
(scratch);

743 
s¸©ch
 &= 0x0001FFFF;

744  (
s¸©ch
);

745 
	}
}

747 
SDIOH_API_RC


748 
	$sdioh_cis_ªad
(
sdioh_öfo_t
 *
sd
, 
uöt
 
func
, 
uöt8
 *
cisd
, 
uöt32
 
Àngth
)

750 
uöt32
 
cou¡
;

751 
off£t
;

752 
uöt32
 
foo
;

753 
uöt8
 *
cis
 = 
cisd
;

755 
	`sd_åa˚
(("%s: Fun¯%d\n", 
__FUNCTION__
, 
func
));

757 i‡(!
sd
->
func_cis_±r
[
func
]) {

758 
	`bzîo
(
cis
, 
Àngth
);

759 
	`sd_îr
(("%s:Çÿfunc_cis_±r[%d]\n", 
__FUNCTION__
, 
func
));

760  
SDIOH_API_RC_FAIL
;

763 
	`sd_îr
(("%s: func_cis_±r[%d]=0x%04x\n", 
__FUNCTION__
, 
func
, 
sd
->
func_cis_±r
[func]));

765 
cou¡
 = 0; cou¡ < 
Àngth
; count++) {

766 
off£t
 = 
sd
->
func_cis_±r
[
func
] + 
cou¡
;

767 i‡(
	`sdioh_sdmmc_ˇrd_ªgªad
 (
sd
, 0, 
off£t
, 1, &
foo
) < 0) {

768 
	`sd_îr
(("%s:Ñegªad faûed: C™'àªad CIS\n", 
__FUNCTION__
));

769  
SDIOH_API_RC_FAIL
;

772 *
cis
 = (
uöt8
)(
foo
 & 0xff);

773 
cis
++;

776  
SDIOH_API_RC_SUCCESS
;

777 
	}
}

779 
SDIOH_API_RC


780 
	$sdioh_ªque°_byã
(
sdioh_öfo_t
 *
sd
, 
uöt
 
rw
, uöà
func
, uöà
ªgaddr
, 
uöt8
 *
byã
)

782 
îr_ªt
;

783 #i‡
	`deföed
(
MMC_SDIO_ABORT
)

784 
sdio_ab‹t_ªåy
 = 
MMC_SDIO_ABORT_RETRY_LIMIT
;

786 
	`sd_öfo
(("%s:Ñw=%d, func=%d,áddr=0x%05x\n", 
__FUNCTION__
, 
rw
, 
func
, 
ªgaddr
));

788 
	`DHD_PM_RESUME_WAIT
(
sdioh_ªque°_byã_waô
);

789 
	`DHD_PM_RESUME_RETURN_ERROR
(
SDIOH_API_RC_FAIL
);

790 if(
rw
) {

791 i‡(
func
 == 0) {

795 i‡(
ªgaddr
 =
SDIOD_CCCR_IOEN
) {

796 i‡(
gIn°™˚
->
func
[2]) {

797 
	`sdio_˛aim_ho°
(
gIn°™˚
->
func
[2]);

798 i‡(*
byã
 & 
SDIO_FUNC_ENABLE_2
) {

800 
îr_ªt
 = 
	`sdio_íabÀ_func
(
gIn°™˚
->
func
[2]);

801 i‡(
îr_ªt
) {

802 
	`sd_îr
(("bcmsdh_sdmmc:Énable F2 failed:%d",

803 
îr_ªt
));

807 
îr_ªt
 = 
	`sdio_dißbÀ_func
(
gIn°™˚
->
func
[2]);

808 i‡(
îr_ªt
) {

809 
	`sd_îr
(("bcmsdh_sdmmc: Disab F2 failed:%d",

810 
îr_ªt
));

813 
	`sdio_ªÀa£_ho°
(
gIn°™˚
->
func
[2]);

816 #i‡
	`deföed
(
MMC_SDIO_ABORT
)

818 i‡(
ªgaddr
 =
SDIOD_CCCR_IOABORT
) {

823 
sdio_ab‹t_ªåy
--) {

824 i‡(
gIn°™˚
->
func
[func]) {

825 
	`sdio_˛aim_ho°
(
gIn°™˚
->
func
[func]);

831 
	`sdio_wrôeb
(
gIn°™˚
->
func
[func],

832 *
byã
, 
ªgaddr
, &
îr_ªt
);

833 
	`sdio_ªÀa£_ho°
(
gIn°™˚
->
func
[func]);

835 i‡(!
îr_ªt
)

840 i‡(
ªgaddr
 < 0xF0) {

841 
	`sd_îr
(("bcmsdh_sdmmc: F0 Wr:0x%02x: wrôêdißŒowed\n", 
ªgaddr
));

844 i‡(
gIn°™˚
->
func
[func]) {

845 
	`sdio_˛aim_ho°
(
gIn°™˚
->
func
[func]);

846 
	`sdio_f0_wrôeb
(
gIn°™˚
->
func
[func],

847 *
byã
, 
ªgaddr
, &
îr_ªt
);

848 
	`sdio_ªÀa£_ho°
(
gIn°™˚
->
func
[func]);

853 i‡(
gIn°™˚
->
func
[func]) {

854 
	`sdio_˛aim_ho°
(
gIn°™˚
->
func
[func]);

855 
	`sdio_wrôeb
(
gIn°™˚
->
func
[func], *
byã
, 
ªgaddr
, &
îr_ªt
);

856 
	`sdio_ªÀa£_ho°
(
gIn°™˚
->
func
[func]);

861 i‡(
gIn°™˚
->
func
[func]) {

862 
	`sdio_˛aim_ho°
(
gIn°™˚
->
func
[func]);

863 i‡(
func
 == 0) {

864 *
byã
 = 
	`sdio_f0_ªadb
(
gIn°™˚
->
func
[func], 
ªgaddr
, &
îr_ªt
);

866 *
byã
 = 
	`sdio_ªadb
(
gIn°™˚
->
func
[func], 
ªgaddr
, &
îr_ªt
);

868 
	`sdio_ªÀa£_ho°
(
gIn°™˚
->
func
[func]);

872 i‡(
îr_ªt
) {

873 
	`sd_îr
(("bcmsdh_sdmmc: FailedÅo %s byte F%d:@0x%05x=%02x, Err: %d\n",

874 
rw
 ? "Wrôe" : "Ród", 
func
, 
ªgaddr
, *
byã
, 
îr_ªt
));

877  ((
îr_ªt
 =0Ë? 
SDIOH_API_RC_SUCCESS
 : 
SDIOH_API_RC_FAIL
);

878 
	}
}

880 
SDIOH_API_RC


881 
	$sdioh_ªque°_w‹d
(
sdioh_öfo_t
 *
sd
, 
uöt
 
cmd_ty≥
, uöà
rw
, uöà
func
, uöà
addr
,

882 
uöt32
 *
w‹d
, 
uöt
 
nbyãs
)

884 
îr_ªt
 = 
SDIOH_API_RC_FAIL
;

885 #i‡
	`deföed
(
MMC_SDIO_ABORT
)

886 
sdio_ab‹t_ªåy
 = 
MMC_SDIO_ABORT_RETRY_LIMIT
;

889 i‡(
func
 == 0) {

890 
	`sd_îr
(("%s: O∆y CMD52áŒowedÅÿF0.\n", 
__FUNCTION__
));

891  
SDIOH_API_RC_FAIL
;

894 
	`sd_öfo
(("%s: cmd_type=%d,Ñw=%d, func=%d,áddr=0x%05x,Çbytes=%d\n",

895 
__FUNCTION__
, 
cmd_ty≥
, 
rw
, 
func
, 
addr
, 
nbyãs
));

897 
	`DHD_PM_RESUME_WAIT
(
sdioh_ªque°_w‹d_waô
);

898 
	`DHD_PM_RESUME_RETURN_ERROR
(
SDIOH_API_RC_FAIL
);

900 
	`sdio_˛aim_ho°
(
gIn°™˚
->
func
[func]);

902 if(
rw
) {

903 i‡(
nbyãs
 == 4) {

904 
	`sdio_wrôñ
(
gIn°™˚
->
func
[func], *
w‹d
, 
addr
, &
îr_ªt
);

905 } i‡(
nbyãs
 == 2) {

906 
	`sdio_wrôew
(
gIn°™˚
->
func
[func], (*
w‹d
 & 0xFFFF), 
addr
, &
îr_ªt
);

908 
	`sd_îr
(("%s: InvÆidÇbyãs: %d\n", 
__FUNCTION__
, 
nbyãs
));

911 i‡(
nbyãs
 == 4) {

912 *
w‹d
 = 
	`sdio_ªadl
(
gIn°™˚
->
func
[func], 
addr
, &
îr_ªt
);

913 } i‡(
nbyãs
 == 2) {

914 *
w‹d
 = 
	`sdio_ªadw
(
gIn°™˚
->
func
[func], 
addr
, &
îr_ªt
) & 0xFFFF;

916 
	`sd_îr
(("%s: InvÆidÇbyãs: %d\n", 
__FUNCTION__
, 
nbyãs
));

921 
	`sdio_ªÀa£_ho°
(
gIn°™˚
->
func
[func]);

923 i‡(
îr_ªt
) {

924 #i‡
	`deföed
(
MMC_SDIO_ABORT
)

926 
sdio_ab‹t_ªåy
--) {

927 i‡(
gIn°™˚
->
func
[0]) {

928 
	`sdio_˛aim_ho°
(
gIn°™˚
->
func
[0]);

934 
	`sdio_wrôeb
(
gIn°™˚
->
func
[0],

935 
func
, 
SDIOD_CCCR_IOABORT
, &
îr_ªt
);

936 
	`sdio_ªÀa£_ho°
(
gIn°™˚
->
func
[0]);

938 i‡(!
îr_ªt
)

941 i‡(
îr_ªt
)

944 
	`sd_îr
(("bcmsdh_sdmmc: FailedÅo %s word, Err: 0x%08x\n",

945 
rw
 ? "Wrôe" : "Ród", 
îr_ªt
));

949  ((
îr_ªt
 =0Ë? 
SDIOH_API_RC_SUCCESS
 : 
SDIOH_API_RC_FAIL
);

950 
	}
}

952 
SDIOH_API_RC


953 
	$sdioh_ªque°_∑ckë
(
sdioh_öfo_t
 *
sd
, 
uöt
 
fix_öc
, uöà
wrôe
, uöà
func
,

954 
uöt
 
addr
, *
pkt
)

956 
boﬁ
 
fifo
 = (
fix_öc
 =
SDIOH_DATA_FIX
);

957 
uöt32
 
SGCou¡
 = 0;

958 
îr_ªt
 = 0;

959 *
≤ext
, *
µªv
;

960 
uöt
 
âl_Àn
, 
dma_Àn
, 
l·_Àn
, 
x‰ed_Àn
, 
pkt_Àn
;

961 
uöt
 
blk_num
;

962 
blk_size
;

963 
mmc_ªque°
 
mmc_ªq
;

964 
mmc_comm™d
 
mmc_cmd
;

965 
mmc_d©a
 
mmc_d©
;

967 
	`sd_åa˚
(("%s: E¡î\n", 
__FUNCTION__
));

969 
	`ASSERT
(
pkt
);

970 
	`DHD_PM_RESUME_WAIT
(
sdioh_ªque°_∑ckë_waô
);

971 
	`DHD_PM_RESUME_RETURN_ERROR
(
SDIOH_API_RC_FAIL
);

973 
âl_Àn
 = 
x‰ed_Àn
 = 0;

975 
≤ext
 = 
pkt
;Ö√xt;Ö√xà
	`PKTNEXT
(
sd
->
osh
,Önext))

976 
âl_Àn
 +
	`PKTLEN
(
sd
->
osh
, 
≤ext
);

978 
blk_size
 = 
sd
->
˛õ¡_block_size
[
func
];

979 i‡(!
sd
->
u£_rxchaö
 || 
âl_Àn
 <
blk_size
) {

980 
blk_num
 = 0;

981 
dma_Àn
 = 0;

983 
blk_num
 = 
âl_Àn
 / 
blk_size
;

984 
dma_Àn
 = 
blk_num
 * 
blk_size
;

986 
l·_Àn
 = 
âl_Àn
 - 
dma_Àn
;

988 
	`sd_åa˚
(("%s: %s %dBÅo func%d:%08x, %d blks with DMA, %dBÜeftover\n",

989 
__FUNCTION__
, 
wrôe
 ? "W" : "R",

990 
âl_Àn
, 
func
, 
addr
, 
blk_num
, 
l·_Àn
));

992 i‡(0 !
dma_Àn
) {

993 
	`mem£t
(&
mmc_ªq
, 0, (
mmc_ªque°
));

994 
	`mem£t
(&
mmc_cmd
, 0, (
mmc_comm™d
));

995 
	`mem£t
(&
mmc_d©
, 0, (
mmc_d©a
));

998 
µªv
 = 
pkt
;

999 
≤ext
 = 
pkt
;

1000 
≤ext
 && 
dma_Àn
;

1001 
≤ext
 = 
	`PKTNEXT
(
sd
->
osh
,Önext)) {

1002 
pkt_Àn
 = 
	`PKTLEN
(
sd
->
osh
, 
≤ext
);

1004 i‡(
dma_Àn
 > 
pkt_Àn
)

1005 
dma_Àn
 -
pkt_Àn
;

1007 
pkt_Àn
 = 
x‰ed_Àn
 = 
dma_Àn
;

1008 
dma_Àn
 = 0;

1009 
pkt
 = 
≤ext
;

1012 
	`sg_£t_buf
(&
sd
->
sg_li°
[
SGCou¡
++],

1013 (
uöt8
*)
	`PKTDATA
(
sd
->
osh
, 
≤ext
),

1014 
pkt_Àn
);

1016 i‡(
SGCou¡
 >
SDIOH_SDMMC_MAX_SG_ENTRIES
) {

1017 
	`sd_îr
(("%s: sgÜistÉntriesÉxceedÜimit\n",

1018 
__FUNCTION__
));

1019  (
SDIOH_API_RC_FAIL
);

1023 
mmc_d©
.
sg
 = 
sd
->
sg_li°
;

1024 
mmc_d©
.
sg_Àn
 = 
SGCou¡
;

1025 
mmc_d©
.
blksz
 = 
blk_size
;

1026 
mmc_d©
.
blocks
 = 
blk_num
;

1027 
mmc_d©
.
Êags
 = 
wrôe
 ? 
MMC_DATA_WRITE
 : 
MMC_DATA_READ
;

1029 
mmc_cmd
.
›code
 = 53;

1030 
mmc_cmd
.
¨g
 = 
wrôe
 ? 1<<31 : 0;

1031 
mmc_cmd
.
¨g
 |(
func
 & 0x7) << 28;

1032 
mmc_cmd
.
¨g
 |= 1<<27;

1033 
mmc_cmd
.
¨g
 |
fifo
 ? 0 : 1<<26;

1034 
mmc_cmd
.
¨g
 |(
addr
 & 0x1FFFF) << 9;

1035 
mmc_cmd
.
¨g
 |
blk_num
 & 0x1FF;

1036 
mmc_cmd
.
Êags
 = 
MMC_RSP_SPI_R5
 | 
MMC_RSP_R5
 | 
MMC_CMD_ADTC
;

1038 
mmc_ªq
.
cmd
 = &
mmc_cmd
;

1039 
mmc_ªq
.
d©a
 = &
mmc_d©
;

1041 
	`sdio_˛aim_ho°
(
gIn°™˚
->
func
[func]);

1042 
	`mmc_£t_d©a_timeout
(&
mmc_d©
, 
gIn°™˚
->
func
[func]->
ˇrd
);

1043 
	`mmc_waô_f‹_ªq
(
gIn°™˚
->
func
[func]->
ˇrd
->
ho°
, &
mmc_ªq
);

1044 
	`sdio_ªÀa£_ho°
(
gIn°™˚
->
func
[func]);

1046 
îr_ªt
 = 
mmc_cmd
.
îr‹
? mmc_cmd.îr‹ : 
mmc_d©
.error;

1047 i‡(0 !
îr_ªt
) {

1048 
	`sd_îr
(("%s:CMD53 %s failed with code %d\n",

1049 
__FUNCTION__
,

1050 
wrôe
 ? "write" : "read",

1051 
îr_ªt
));

1052 
	`sd_îr
(("%s:DisablingÑxchainánd fire it with PIO\n",

1053 
__FUNCTION__
));

1054 
sd
->
u£_rxchaö
 = 
FALSE
;

1055 
pkt
 = 
µªv
;

1056 
l·_Àn
 = 
âl_Àn
;

1057 } i‡(!
fifo
) {

1058 
addr
 =ádd∏+ 
âl_Àn
 - 
l·_Àn
 - 
dma_Àn
;

1063 i‡(0 !
l·_Àn
) {

1065 
	`sdio_˛aim_ho°
(
gIn°™˚
->
func
[func]);

1066 
≤ext
 = 
pkt
;Ö√xt;Ö√xà
	`PKTNEXT
(
sd
->
osh
,Önext)) {

1067 
uöt8
 *
buf
 = (uöt8*)
	`PKTDATA
(
sd
->
osh
, 
≤ext
) +

1068 
x‰ed_Àn
;

1069 
pkt_Àn
 = 
	`PKTLEN
(
sd
->
osh
, 
≤ext
);

1070 i‡(0 !
x‰ed_Àn
) {

1071 
pkt_Àn
 -
x‰ed_Àn
;

1072 
x‰ed_Àn
 = 0;

1079 i‡(
wrôe
 =0 || 
pkt_Àn
 < 32)

1080 
pkt_Àn
 = (pkt_len + 3) & 0xFFFFFFFC;

1081 i‡(
pkt_Àn
 % 
blk_size
)

1082 
pkt_Àn
 +
blk_size
 - (pkt_len % blk_size);

1084 #ifde‡
CONFIG_MMC_MSM7X00A


1085 i‡((
pkt_Àn
 % 64) == 32) {

1086 
	`sd_åa˚
(("%s: Roundög u∞TXÖackë +=32\n", 
__FUNCTION__
));

1087 
pkt_Àn
 += 32;

1091 i‡((
wrôe
Ë&& (!
fifo
))

1092 
îr_ªt
 = 
	`sdio_mem˝y_toio
(

1093 
gIn°™˚
->
func
[func],

1094 
addr
, 
buf
, 
pkt_Àn
);

1095 i‡(
wrôe
)

1096 
îr_ªt
 = 
	`sdio_mem˝y_toio
(

1097 
gIn°™˚
->
func
[func],

1098 
addr
, 
buf
, 
pkt_Àn
);

1099 i‡(
fifo
)

1100 
îr_ªt
 = 
	`sdio_ªadsb
(

1101 
gIn°™˚
->
func
[func],

1102 
buf
, 
addr
, 
pkt_Àn
);

1104 
îr_ªt
 = 
	`sdio_mem˝y_‰omio
(

1105 
gIn°™˚
->
func
[func],

1106 
buf
, 
addr
, 
pkt_Àn
);

1108 i‡(
îr_ªt
)

1109 
	`sd_îr
(("%s: %s FAILED %p[%d],áddr=0x%05x,Ökt_len=%d, ERR=%d\n",

1110 
__FUNCTION__
,

1111 (
wrôe
) ? "TX" : "RX",

1112 
≤ext
, 
SGCou¡
, 
addr
, 
pkt_Àn
, 
îr_ªt
));

1114 
	`sd_åa˚
(("%s: %s xfr'd %p[%d],áddr=0x%05x,Üen=%d\n",

1115 
__FUNCTION__
,

1116 (
wrôe
) ? "TX" : "RX",

1117 
≤ext
, 
SGCou¡
, 
addr
, 
pkt_Àn
));

1119 i‡(!
fifo
)

1120 
addr
 +
pkt_Àn
;

1121 
SGCou¡
 ++;

1123 
	`sdio_ªÀa£_ho°
(
gIn°™˚
->
func
[func]);

1126 
	`sd_åa˚
(("%s: Exô\n", 
__FUNCTION__
));

1127  ((
îr_ªt
 =0Ë? 
SDIOH_API_RC_SUCCESS
 : 
SDIOH_API_RC_FAIL
);

1128 
	}
}

1142 
SDIOH_API_RC


1143 
	$sdioh_ªque°_buf„r
(
sdioh_öfo_t
 *
sd
, 
uöt
 
pio_dma
, uöà
fix_öc
, uöà
wrôe
, uöà
func
,

1144 
uöt
 
addr
, uöà
ªg_width
, uöà
buÊí_u
, 
uöt8
 *
buf„r
, *
pkt
)

1146 
SDIOH_API_RC
 
Sètus
;

1147 *
mypkt
 = 
NULL
;

1149 
	`sd_åa˚
(("%s: E¡î\n", 
__FUNCTION__
));

1151 
	`DHD_PM_RESUME_WAIT
(
sdioh_ªque°_buf„r_waô
);

1152 
	`DHD_PM_RESUME_RETURN_ERROR
(
SDIOH_API_RC_FAIL
);

1154 i‡(
pkt
 =
NULL
) {

1155 
	`sd_d©a
(("%s: CreatingÇew %s Packet,Üen=%d\n",

1156 
__FUNCTION__
, 
wrôe
 ? "TX" : "RX", 
buÊí_u
));

1157 #ifde‡
CONFIG_DHD_USE_STATIC_BUF


1158 i‡(!(
mypkt
 = 
	`PKTGET_STATIC
(
sd
->
osh
, 
buÊí_u
, 
wrôe
 ? 
TRUE
 : 
FALSE
)))

1160 i‡(!(
mypkt
 = 
	`PKTGET
(
sd
->
osh
, 
buÊí_u
, 
wrôe
 ? 
TRUE
 : 
FALSE
)))

1163 
	`sd_îr
(("%s: PKTGET failed:Üen %d\n",

1164 
__FUNCTION__
, 
buÊí_u
));

1165  
SDIOH_API_RC_FAIL
;

1169 i‡(
wrôe
) {

1170 
	`bc›y
(
buf„r
, 
	`PKTDATA
(
sd
->
osh
, 
mypkt
), 
buÊí_u
);

1173 
Sètus
 = 
	`sdioh_ªque°_∑ckë
(
sd
, 
fix_öc
, 
wrôe
, 
func
, 
addr
, 
mypkt
);

1176 i‡(!
wrôe
) {

1177 
	`bc›y
(
	`PKTDATA
(
sd
->
osh
, 
mypkt
), 
buf„r
, 
buÊí_u
);

1179 #ifde‡
CONFIG_DHD_USE_STATIC_BUF


1180 
	`PKTFREE_STATIC
(
sd
->
osh
, 
mypkt
, 
wrôe
 ? 
TRUE
 : 
FALSE
);

1182 
	`PKTFREE
(
sd
->
osh
, 
mypkt
, 
wrôe
 ? 
TRUE
 : 
FALSE
);

1184 } i‡(((
uöt32
)(
	`PKTDATA
(
sd
->
osh
, 
pkt
)Ë& 
DMA_ALIGN_MASK
) != 0) {

1188 
	`ASSERT
(
	`PKTNEXT
(
sd
->
osh
, 
pkt
Ë=
NULL
);

1190 
	`sd_d©a
(("%s: Creatingáligned %s Packet,Üen=%d\n",

1191 
__FUNCTION__
, 
wrôe
 ? "TX" : "RX", 
	`PKTLEN
(
sd
->
osh
, 
pkt
)));

1192 #ifde‡
CONFIG_DHD_USE_STATIC_BUF


1193 i‡(!(
mypkt
 = 
	`PKTGET_STATIC
(
sd
->
osh
, 
	`PKTLEN
(sd->osh, 
pkt
), 
wrôe
 ? 
TRUE
 : 
FALSE
)))

1195 i‡(!(
mypkt
 = 
	`PKTGET
(
sd
->
osh
, 
	`PKTLEN
(sd->osh, 
pkt
), 
wrôe
 ? 
TRUE
 : 
FALSE
)))

1198 
	`sd_îr
(("%s: PKTGET failed:Üen %d\n",

1199 
__FUNCTION__
, 
	`PKTLEN
(
sd
->
osh
, 
pkt
)));

1200  
SDIOH_API_RC_FAIL
;

1204 i‡(
wrôe
) {

1205 
	`bc›y
(
	`PKTDATA
(
sd
->
osh
, 
pkt
),

1206 
	`PKTDATA
(
sd
->
osh
, 
mypkt
),

1207 
	`PKTLEN
(
sd
->
osh
, 
pkt
));

1210 
Sètus
 = 
	`sdioh_ªque°_∑ckë
(
sd
, 
fix_öc
, 
wrôe
, 
func
, 
addr
, 
mypkt
);

1213 i‡(!
wrôe
) {

1214 
	`bc›y
(
	`PKTDATA
(
sd
->
osh
, 
mypkt
),

1215 
	`PKTDATA
(
sd
->
osh
, 
pkt
),

1216 
	`PKTLEN
(
sd
->
osh
, 
mypkt
));

1218 #ifde‡
CONFIG_DHD_USE_STATIC_BUF


1219 
	`PKTFREE_STATIC
(
sd
->
osh
, 
mypkt
, 
wrôe
 ? 
TRUE
 : 
FALSE
);

1221 
	`PKTFREE
(
sd
->
osh
, 
mypkt
, 
wrôe
 ? 
TRUE
 : 
FALSE
);

1224 
	`sd_d©a
(("%s: Aligned %s Packet, direct DMA\n",

1225 
__FUNCTION__
, 
wrôe
 ? "Tx" : "Rx"));

1226 
Sètus
 = 
	`sdioh_ªque°_∑ckë
(
sd
, 
fix_öc
, 
wrôe
, 
func
, 
addr
, 
pkt
);

1229  (
Sètus
);

1230 
	}
}

1234 
	$sdioh_ab‹t
(
sdioh_öfo_t
 *
sd
, 
uöt
 
func
)

1236 #i‡
	`deföed
(
MMC_SDIO_ABORT
)

1237 
t_func
 = (Ë
func
;

1239 
	`sd_åa˚
(("%s: E¡î\n", 
__FUNCTION__
));

1241 #i‡
	`deföed
(
MMC_SDIO_ABORT
)

1243 
	`sdioh_ªque°_byã
(
sd
, 
SD_IO_OP_WRITE
, 
SDIO_FUNC_0
, 
SDIOD_CCCR_IOABORT
, &
t_func
);

1246 
	`sd_åa˚
(("%s: Exô\n", 
__FUNCTION__
));

1247  
SDIOH_API_RC_SUCCESS
;

1248 
	}
}

1251 
	$sdioh_sdio_ª£t
(
sdioh_öfo_t
 *
si
)

1253 
	`sd_åa˚
(("%s: E¡î\n", 
__FUNCTION__
));

1254 
	`sd_åa˚
(("%s: Exô\n", 
__FUNCTION__
));

1255  
SDIOH_API_RC_SUCCESS
;

1256 
	}
}

1260 
	$sdioh_sdmmc_devöå_off
(
sdioh_öfo_t
 *
sd
)

1262 
	`sd_åa˚
(("%s: %d\n", 
__FUNCTION__
, 
sd
->
u£_˛õ¡_öts
));

1263 
sd
->
ötmask
 &~
CLIENT_INTR
;

1264 
	}
}

1268 
	$sdioh_sdmmc_devöå_⁄
(
sdioh_öfo_t
 *
sd
)

1270 
	`sd_åa˚
(("%s: %d\n", 
__FUNCTION__
, 
sd
->
u£_˛õ¡_öts
));

1271 
sd
->
ötmask
 |
CLIENT_INTR
;

1272 
	}
}

1276 
	$sdioh_sdmmc_ˇrd_ªgªad
(
sdioh_öfo_t
 *
sd
, 
func
, 
uöt32
 
ªgaddr
, 
ªgsize
, uöt32 *
d©a
)

1279 i‡((
func
 =0Ë|| (
ªgsize
 == 1)) {

1280 
uöt8
 
ãmp
 = 0;

1282 
	`sdioh_ªque°_byã
(
sd
, 
SDIOH_READ
, 
func
, 
ªgaddr
, &
ãmp
);

1283 *
d©a
 = 
ãmp
;

1284 *
d©a
 &= 0xff;

1285 
	`sd_d©a
(("%s: byteÑead data=0x%02x\n",

1286 
__FUNCTION__
, *
d©a
));

1288 
	`sdioh_ªque°_w‹d
(
sd
, 0, 
SDIOH_READ
, 
func
, 
ªgaddr
, 
d©a
, 
ªgsize
);

1289 i‡(
ªgsize
 == 2)

1290 *
d©a
 &= 0xffff;

1292 
	`sd_d©a
(("%s: wordÑead data=0x%08x\n",

1293 
__FUNCTION__
, *
d©a
));

1296  
SUCCESS
;

1297 
	}
}

1299 #i‡!
deföed
(
OOB_INTR_ONLY
)

1301 
	$IRQH™dÀr
(
sdio_func
 *
func
)

1303 
sdioh_öfo_t
 *
sd
;

1305 
	`sd_åa˚
(("bcmsdh_sdmmc: ***IRQHandler\n"));

1306 
sd
 = 
gIn°™˚
->sd;

1308 
	`ASSERT
(
sd
 !
NULL
);

1309 
	`sdio_ªÀa£_ho°
(
gIn°™˚
->
func
[0]);

1311 i‡(
sd
->
u£_˛õ¡_öts
) {

1312 
sd
->
öåcou¡
++;

1313 
	`ASSERT
(
sd
->
öå_h™dÀr
);

1314 
	`ASSERT
(
sd
->
öå_h™dÀr_¨g
);

1315 (
sd
->
öå_h™dÀr
)(sd->
öå_h™dÀr_¨g
);

1317 
	`sd_îr
(("bcmsdh_sdmmc: ***IRQHandler\n"));

1319 
	`sd_îr
(("%s: NotÑeady for intr:Énabled %d, handler %p\n",

1320 
__FUNCTION__
, 
sd
->
˛õ¡_öå_íabÀd
, sd->
öå_h™dÀr
));

1323 
	`sdio_˛aim_ho°
(
gIn°™˚
->
func
[0]);

1324 
	}
}

1327 
	$IRQH™dÀrF2
(
sdio_func
 *
func
)

1329 
sdioh_öfo_t
 *
sd
;

1331 
	`sd_åa˚
(("bcmsdh_sdmmc: ***IRQHandlerF2\n"));

1333 
sd
 = 
gIn°™˚
->sd;

1335 
	`ASSERT
(
sd
 !
NULL
);

1336 
	`BCM_REFERENCE
(
sd
);

1337 
	}
}

1340 #ifde‡
NOTUSED


1343 
	$sdioh_sdmmc_ˇrd_ªgwrôe
(
sdioh_öfo_t
 *
sd
, 
func
, 
uöt32
 
ªgaddr
, 
ªgsize
, uöt32 
d©a
)

1346 i‡((
func
 =0Ë|| (
ªgsize
 == 1)) {

1347 
uöt8
 
ãmp
;

1349 
ãmp
 = 
d©a
 & 0xff;

1350 
	`sdioh_ªque°_byã
(
sd
, 
SDIOH_READ
, 
func
, 
ªgaddr
, &
ãmp
);

1351 
	`sd_d©a
(("%s: byte write data=0x%02x\n",

1352 
__FUNCTION__
, 
d©a
));

1354 i‡(
ªgsize
 == 2)

1355 
d©a
 &= 0xffff;

1357 
	`sdioh_ªque°_w‹d
(
sd
, 0, 
SDIOH_READ
, 
func
, 
ªgaddr
, &
d©a
, 
ªgsize
);

1359 
	`sd_d©a
(("%s: word write data=0x%08x\n",

1360 
__FUNCTION__
, 
d©a
));

1363  
SUCCESS
;

1364 
	}
}

1368 
	$sdioh_°¨t
(
sdioh_öfo_t
 *
si
, 
°age
)

1370 
ªt
;

1371 
sdioh_öfo_t
 *
sd
 = 
gIn°™˚
->sd;

1373 i‡(!
sd
)  (0);

1379 i‡(
gIn°™˚
->
func
[0]) {

1380 i‡(
°age
 == 0) {

1390 i‡((
ªt
 = 
	`sdio_ª£t_comm
(
gIn°™˚
->
func
[0]->
ˇrd
))) {

1391 
	`sd_îr
(("%†Faûed,Éº‹ = %d\n", 
__FUNCTION__
, 
ªt
));

1392  
ªt
;

1395 
sd
->
num_funcs
 = 2;

1396 
sd
->
sd_blockmode
 = 
TRUE
;

1397 
sd
->
u£_˛õ¡_öts
 = 
TRUE
;

1398 
sd
->
˛õ¡_block_size
[0] = 64;

1400 i‡(
gIn°™˚
->
func
[1]) {

1402 
	`sdio_˛aim_ho°
(
gIn°™˚
->
func
[1]);

1404 
sd
->
˛õ¡_block_size
[1] = 64;

1405 i‡(
	`sdio_£t_block_size
(
gIn°™˚
->
func
[1], 64)) {

1406 
	`sd_îr
(("bcmsdh_sdmmc: FailedÅo set F1 blocksize\n"));

1410 
	`sdio_ªÀa£_ho°
(
gIn°™˚
->
func
[1]);

1413 i‡(
gIn°™˚
->
func
[2]) {

1415 
	`sdio_˛aim_ho°
(
gIn°™˚
->
func
[2]);

1417 
sd
->
˛õ¡_block_size
[2] = 
sd_f2_blocksize
;

1418 i‡(
	`sdio_£t_block_size
(
gIn°™˚
->
func
[2],

1419 
sd_f2_blocksize
)) {

1420 
	`sd_îr
(("bcmsdh_sdmmc: FailedÅo set F2 "

1421 "blocksizêtÿ%d\n", 
sd_f2_blocksize
));

1425 
	`sdio_ªÀa£_ho°
(
gIn°™˚
->
func
[2]);

1428 
	`sdioh_sdmmc_ˇrd_íabÀfuncs
(
sd
);

1431 #i‡!
	`deföed
(
OOB_INTR_ONLY
)

1432 
	`sdio_˛aim_ho°
(
gIn°™˚
->
func
[0]);

1433 i‡(
gIn°™˚
->
func
[2])

1434 
	`sdio_˛aim_úq
(
gIn°™˚
->
func
[2], 
IRQH™dÀrF2
);

1435 i‡(
gIn°™˚
->
func
[1])

1436 
	`sdio_˛aim_úq
(
gIn°™˚
->
func
[1], 
IRQH™dÀr
);

1437 
	`sdio_ªÀa£_ho°
(
gIn°™˚
->
func
[0]);

1439 #i‡
	`deföed
(
HW_OOB
)

1440 
	`sdioh_íabÀ_func_öå
();

1442 
	`bcmsdh_oob_öå_£t
(
TRUE
);

1447 
	`sd_îr
(("%†Faûed\n", 
__FUNCTION__
));

1450 
	}
}

1453 
	$sdioh_°›
(
sdioh_öfo_t
 *
si
)

1461 i‡(
gIn°™˚
->
func
[0]) {

1462 #i‡!
	`deföed
(
OOB_INTR_ONLY
)

1463 
	`sdio_˛aim_ho°
(
gIn°™˚
->
func
[0]);

1464 i‡(
gIn°™˚
->
func
[1])

1465 
	`sdio_ªÀa£_úq
(
gIn°™˚
->
func
[1]);

1466 i‡(
gIn°™˚
->
func
[2])

1467 
	`sdio_ªÀa£_úq
(
gIn°™˚
->
func
[2]);

1468 
	`sdio_ªÀa£_ho°
(
gIn°™˚
->
func
[0]);

1470 #i‡
	`deföed
(
HW_OOB
)

1471 
	`sdioh_dißbÀ_func_öå
();

1473 
	`bcmsdh_oob_öå_£t
(
FALSE
);

1477 
	`sd_îr
(("%†Faûed\n", 
__FUNCTION__
));

1479 
	}
}

1482 
	$sdioh_waôlock‰ì
(
sdioh_öfo_t
 *
sd
)

1485 
	}
}

1488 
SDIOH_API_RC


1489 
	$sdioh_gpioouãn
(
sdioh_öfo_t
 *
sd
, 
uöt32
 
gpio
)

1491  
SDIOH_API_RC_FAIL
;

1492 
	}
}

1494 
SDIOH_API_RC


1495 
	$sdioh_gpioout
(
sdioh_öfo_t
 *
sd
, 
uöt32
 
gpio
, 
boﬁ
 
íab
)

1497  
SDIOH_API_RC_FAIL
;

1498 
	}
}

1500 
boﬁ


1501 
	$sdioh_gpioö
(
sdioh_öfo_t
 *
sd
, 
uöt32
 
gpio
)

1503  
FALSE
;

1504 
	}
}

1506 
SDIOH_API_RC


1507 
	$sdioh_gpio_öô
(
sdioh_öfo_t
 *
sd
)

1509  
SDIOH_API_RC_FAIL
;

1510 
	}
}

	@bcmsdh_sdmmc_linux.c

27 
	~<ty≥defs.h
>

28 
	~<bcmutûs.h
>

29 
	~<sdio.h
>

30 
	~<bcmsdbus.h
>

31 
	~<sdiov¨.h
>

33 
	~<löux/sched.h
>

35 
	~<löux/mmc/c‹e.h
>

36 
	~<löux/mmc/ˇrd.h
>

37 
	~<löux/mmc/sdio_func.h
>

38 
	~<löux/mmc/sdio_ids.h
>

40 #i‡!
deföed
(
SDIO_VENDOR_ID_BROADCOM
)

41 
	#SDIO_VENDOR_ID_BROADCOM
 0x02d0

	)

44 
	#SDIO_DEVICE_ID_BROADCOM_DEFAULT
 0x0000

	)

46 #i‡!
deföed
(
SDIO_DEVICE_ID_BROADCOM_4325_SDGWB
)

47 
	#SDIO_DEVICE_ID_BROADCOM_4325_SDGWB
 0x0492

	)

49 #i‡!
deföed
(
SDIO_DEVICE_ID_BROADCOM_4325
)

50 
	#SDIO_DEVICE_ID_BROADCOM_4325
 0x0493

	)

52 #i‡!
deföed
(
SDIO_DEVICE_ID_BROADCOM_4329
)

53 
	#SDIO_DEVICE_ID_BROADCOM_4329
 0x4329

	)

55 #i‡!
deföed
(
SDIO_DEVICE_ID_BROADCOM_4319
)

56 
	#SDIO_DEVICE_ID_BROADCOM_4319
 0x4319

	)

58 #i‡!
deföed
(
SDIO_DEVICE_ID_BROADCOM_4330
)

59 
	#SDIO_DEVICE_ID_BROADCOM_4330
 0x4330

	)

61 #i‡!
deföed
(
SDIO_DEVICE_ID_BROADCOM_4334
)

62 
	#SDIO_DEVICE_ID_BROADCOM_4334
 0x4334

	)

64 #i‡!
deföed
(
SDIO_DEVICE_ID_BROADCOM_4324
)

65 
	#SDIO_DEVICE_ID_BROADCOM_4324
 0x4324

	)

67 #i‡!
deföed
(
SDIO_DEVICE_ID_BROADCOM_43239
)

68 
	#SDIO_DEVICE_ID_BROADCOM_43239
 43239

	)

72 
	~<bcmsdh_sdmmc.h
>

74 
	~<dhd_dbg.h
>

76 #ifde‡
WL_CFG80211


77 
wl_cfg80211_£t_∑ª¡_dev
(*
dev
);

80 
sdioh_sdmmc_devöå_off
(
sdioh_öfo_t
 *
sd
);

81 
sdioh_sdmmc_devöå_⁄
(
sdioh_öfo_t
 *
sd
);

82 
dhd_os_check_wakñock
(*
dhdp
);

83 
dhd_os_check_if_up
(*
dhdp
);

84 *
bcmsdh_gë_drvd©a
();

86 
sdio_fun˘i⁄_öô
();

87 
sdio_fun˘i⁄_˛ónup
();

89 
	#DESCRIPTION
 "bcmsdh_sdmm¯Drivî"

	)

90 
	#AUTHOR
 "Brﬂdcom C‹p‹©i⁄"

	)

93 
	g˛ockovîride
 = 0;

95 
moduÀ_∑øm
(
˛ockovîride
, , 0644);

96 
MODULE_PARM_DESC
(
˛ockovîride
, "SDIO card clock override");

98 
PBCMSDH_SDMMC_INSTANCE
 
	ggIn°™˚
;

101 
	#BCMSDH_SDMMC_MAX_DEVICES
 1

	)

103 
bcmsdh_¥obe
(
devi˚
 *
dev
);

104 
bcmsdh_ªmove
(
devi˚
 *
dev
);

105 vﬁ©ûê
boﬁ
 
dhd_mmc_su•íd
;

107 
	$bcmsdh_sdmmc_¥obe
(
sdio_func
 *
func
,

108 c⁄° 
sdio_devi˚_id
 *
id
)

110 
ªt
 = 0;

111 
sdio_func
 
sdio_func_0
;

113 i‡(
func
) {

114 
	`sd_åa˚
(("bcmsdh_sdmmc: %†E¡î\n", 
__FUNCTION__
));

115 
	`sd_åa˚
(("sdio_bcmsdh: func->˛ass=%x\n", 
func
->
˛ass
));

116 
	`sd_åa˚
(("sdio_víd‹: 0x%04x\n", 
func
->
víd‹
));

117 
	`sd_åa˚
(("sdio_devi˚: 0x%04x\n", 
func
->
devi˚
));

118 
	`sd_åa˚
(("Fun˘i⁄#: 0x%04x\n", 
func
->
num
));

120 i‡(
func
->
num
 == 1) {

121 
sdio_func_0
.
num
 = 0;

122 
sdio_func_0
.
ˇrd
 = 
func
->card;

123 
gIn°™˚
->
func
[0] = &
sdio_func_0
;

124 if(
func
->
devi˚
 == 0x4) {

125 
gIn°™˚
->
func
[2] = 
NULL
;

126 
	`sd_åa˚
(("NIC found, calling bcmsdh_probe...\n"));

127 
ªt
 = 
	`bcmsdh_¥obe
(&
func
->
dev
);

131 
gIn°™˚
->
func
[func->
num
] = func;

133 i‡(
func
->
num
 == 2) {

134 #ifde‡
WL_CFG80211


135 
	`wl_cfg80211_£t_∑ª¡_dev
(&
func
->
dev
);

137 
	`sd_åa˚
(("F2 found, calling bcmsdh_probe...\n"));

138 
ªt
 = 
	`bcmsdh_¥obe
(&
func
->
dev
);

141 
ªt
 = -
ENODEV
;

144  
ªt
;

145 
	}
}

147 
	$bcmsdh_sdmmc_ªmove
(
sdio_func
 *
func
)

149 i‡(
func
) {

150 
	`sd_åa˚
(("bcmsdh_sdmmc: %†E¡î\n", 
__FUNCTION__
));

151 
	`sd_öfo
(("sdio_bcmsdh: func->˛ass=%x\n", 
func
->
˛ass
));

152 
	`sd_öfo
(("sdio_víd‹: 0x%04x\n", 
func
->
víd‹
));

153 
	`sd_öfo
(("sdio_devi˚: 0x%04x\n", 
func
->
devi˚
));

154 
	`sd_öfo
(("Fun˘i⁄#: 0x%04x\n", 
func
->
num
));

156 i‡(
gIn°™˚
->
func
[2]) {

157 
	`sd_åa˚
(("F2 found, calling bcmsdh_remove...\n"));

158 
	`bcmsdh_ªmove
(&
func
->
dev
);

159 
gIn°™˚
->
func
[2] = 
NULL
;

161 i‡(
func
->
num
 == 1) {

162 
	`sdio_˛aim_ho°
(
func
);

163 
	`sdio_dißbÀ_func
(
func
);

164 
	`sdio_ªÀa£_ho°
(
func
);

165 
gIn°™˚
->
func
[1] = 
NULL
;

168 
	}
}

171 c⁄° 
sdio_devi˚_id
 
	gbcmsdh_sdmmc_ids
[] = {

172 { 
SDIO_DEVICE
(
SDIO_VENDOR_ID_BROADCOM
, 
SDIO_DEVICE_ID_BROADCOM_DEFAULT
) },

173 { 
SDIO_DEVICE
(
SDIO_VENDOR_ID_BROADCOM
, 
SDIO_DEVICE_ID_BROADCOM_4325_SDGWB
) },

174 { 
SDIO_DEVICE
(
SDIO_VENDOR_ID_BROADCOM
, 
SDIO_DEVICE_ID_BROADCOM_4325
) },

175 { 
SDIO_DEVICE
(
SDIO_VENDOR_ID_BROADCOM
, 
SDIO_DEVICE_ID_BROADCOM_4329
) },

176 { 
SDIO_DEVICE
(
SDIO_VENDOR_ID_BROADCOM
, 
SDIO_DEVICE_ID_BROADCOM_4319
) },

177 { 
SDIO_DEVICE
(
SDIO_VENDOR_ID_BROADCOM
, 
SDIO_DEVICE_ID_BROADCOM_4330
) },

178 { 
SDIO_DEVICE
(
SDIO_VENDOR_ID_BROADCOM
, 
SDIO_DEVICE_ID_BROADCOM_4334
) },

179 { 
SDIO_DEVICE
(
SDIO_VENDOR_ID_BROADCOM
, 
SDIO_DEVICE_ID_BROADCOM_4324
) },

180 { 
SDIO_DEVICE
(
SDIO_VENDOR_ID_BROADCOM
, 
SDIO_DEVICE_ID_BROADCOM_43239
) },

181 { 
SDIO_DEVICE_CLASS
(
SDIO_CLASS_NONE
) },

185 
MODULE_DEVICE_TABLE
(
sdio
, 
bcmsdh_sdmmc_ids
);

187 #i‡(
LINUX_VERSION_CODE
 > 
KERNEL_VERSION
(2, 6, 39)Ë&& 
deföed
(
CONFIG_PM
)

188 
	$bcmsdh_sdmmc_su•íd
(
devi˚
 *
pdev
)

190 
sdio_func
 *
func
 = 
	`dev_to_sdio_func
(
pdev
);

191 
mmc_pm_Êag_t
 
sdio_Êags
;

192 
ªt
;

194 i‡(
func
->
num
 != 2)

197 
	`sd_åa˚_hw4
(("%†E¡î\n", 
__FUNCTION__
));

199 i‡(
	`dhd_os_check_wakñock
(
	`bcmsdh_gë_drvd©a
()))

200  -
EBUSY
;

202 
sdio_Êags
 = 
	`sdio_gë_ho°_pm_ˇps
(
func
);

204 i‡(!(
sdio_Êags
 & 
MMC_PM_KEEP_POWER
)) {

205 
	`sd_îr
(("%s: c™'àkì∞powî whûêho° i†su•íded\n", 
__FUNCTION__
));

206  -
EINVAL
;

210 
ªt
 = 
	`sdio_£t_ho°_pm_Êags
(
func
, 
MMC_PM_KEEP_POWER
);

211 i‡(
ªt
) {

212 
	`sd_îr
(("%s:Éº‹ whûêåyögÅÿkì∞powî\n", 
__FUNCTION__
));

213  
ªt
;

216 #i‡
	`deföed
(
OOB_INTR_ONLY
)

217 
	`bcmsdh_oob_öå_£t
(0);

219 
dhd_mmc_su•íd
 = 
TRUE
;

220 
	`smp_mb
();

223 
	}
}

225 
	$bcmsdh_sdmmc_ªsume
(
devi˚
 *
pdev
)

227 #i‡
	`deföed
(
OOB_INTR_ONLY
)

228 
sdio_func
 *
func
 = 
	`dev_to_sdio_func
(
pdev
);

230 
	`sd_åa˚_hw4
(("%†E¡î\n", 
__FUNCTION__
));

232 
dhd_mmc_su•íd
 = 
FALSE
;

233 #i‡
	`deföed
(
OOB_INTR_ONLY
)

234 i‡((
func
->
num
 =2Ë&& 
	`dhd_os_check_if_up
(
	`bcmsdh_gë_drvd©a
()))

235 
	`bcmsdh_oob_öå_£t
(1);

237 
	`smp_mb
();

239 
	}
}

241 c⁄° 
dev_pm_›s
 
	gbcmsdh_sdmmc_pm_›s
 = {

242 .
su•íd
 = 
bcmsdh_sdmmc_su•íd
,

243 .
	gªsume
 = 
bcmsdh_sdmmc_ªsume
,

247 #i‡
deföed
(
BCMLXSDMMC
)

248 
£m≠h‹e
 *
	gnŸify_£m≠h‹e
 = 
NULL
;

250 
	$dummy_¥obe
(
sdio_func
 *
func
,

251 c⁄° 
sdio_devi˚_id
 *
id
)

253 i‡(
nŸify_£m≠h‹e
)

254 
	`up
(
nŸify_£m≠h‹e
);

256 
	}
}

258 
	$dummy_ªmove
(
sdio_func
 *
func
)

260 
	}
}

262 
sdio_drivî
 
	gdummy_sdmmc_drivî
 = {

263 .
¥obe
 = 
dummy_¥obe
,

264 .
	gªmove
 = 
dummy_ªmove
,

265 .
	g«me
 = "dummy_sdmmc",

266 .
	gid_èbÀ
 = 
bcmsdh_sdmmc_ids
,

269 
	$sdio_func_ªg_nŸify
(* 
£m≠h‹e
)

271 
nŸify_£m≠h‹e
 = 
£m≠h‹e
;

272  
	`sdio_ªgi°î_drivî
(&
dummy_sdmmc_drivî
);

273 
	}
}

275 
	$sdio_func_uƒeg_nŸify
()

277 
	`sdio_uƒegi°î_drivî
(&
dummy_sdmmc_drivî
);

278 
	}
}

282 
sdio_drivî
 
	gbcmsdh_sdmmc_drivî
 = {

283 .
¥obe
 = 
bcmsdh_sdmmc_¥obe
,

284 .
	gªmove
 = 
bcmsdh_sdmmc_ªmove
,

285 .
	g«me
 = "bcmsdh_sdmmc",

286 .
	gid_èbÀ
 = 
bcmsdh_sdmmc_ids
,

287 #i‡!
deföed
(
CONFIG_ARCH_RHEA
Ë|| !deföed(
CONFIG_ARCH_CAPRI
)

288 #i‡(
LINUX_VERSION_CODE
 > 
KERNEL_VERSION
(2, 6, 39)Ë&& 
deföed
(
CONFIG_PM
)

289 .
	gdrv
 = {

290 .
pm
 = &
bcmsdh_sdmmc_pm_›s
,

296 
	ssdos_öfo
 {

297 
sdioh_öfo_t
 *
	msd
;

298 
•ölock_t
 
	mlock
;

303 
	$sdioh_sdmmc_osöô
(
sdioh_öfo_t
 *
sd
)

305 
sdos_öfo
 *
sdos
;

307 i‡(!
sd
)

308  
BCME_BADARG
;

310 
sdos
 = (
sdos_öfo
*)
	`MALLOC
(
sd
->
osh
, (sdos_info));

311 
sd
->
sdos_öfo
 = (*)
sdos
;

312 i‡(
sdos
 =
NULL
)

313  
BCME_NOMEM
;

315 
sdos
->
sd
 = sd;

316 
	`•ö_lock_öô
(&
sdos
->
lock
);

317  
BCME_OK
;

318 
	}
}

321 
	$sdioh_sdmmc_os‰ì
(
sdioh_öfo_t
 *
sd
)

323 
sdos_öfo
 *
sdos
;

324 
	`ASSERT
(
sd
 && sd->
sdos_öfo
);

326 
sdos
 = (
sdos_öfo
 *)
sd
->sdos_info;

327 
	`MFREE
(
sd
->
osh
, 
sdos
, (
sdos_öfo
));

328 
	}
}

331 
SDIOH_API_RC


332 
	$sdioh_öãºu±_£t
(
sdioh_öfo_t
 *
sd
, 
boﬁ
 
íabÀ
)

334 
ul⁄g
 
Êags
;

335 
sdos_öfo
 *
sdos
;

337 i‡(!
sd
)

338  
BCME_BADARG
;

340 
	`sd_åa˚
(("%s: %s\n", 
__FUNCTION__
, 
íabÀ
 ? "Enabling" : "Disabling"));

342 
sdos
 = (
sdos_öfo
 *)
sd
->sdos_info;

343 
	`ASSERT
(
sdos
);

345 #i‡!
	`deföed
(
OOB_INTR_ONLY
)

346 i‡(
íabÀ
 && !(
sd
->
öå_h™dÀr
 && sd->
öå_h™dÀr_¨g
)) {

347 
	`sd_îr
(("%s:Çÿh™dÀ∏ªgi°îed, wû»nŸÉ«bÀ\n", 
__FUNCTION__
));

348  
SDIOH_API_RC_FAIL
;

353 
	`•ö_lock_úqßve
(&
sdos
->
lock
, 
Êags
);

355 
sd
->
˛õ¡_öå_íabÀd
 = 
íabÀ
;

356 i‡(
íabÀ
) {

357 
	`sdioh_sdmmc_devöå_⁄
(
sd
);

359 
	`sdioh_sdmmc_devöå_off
(
sd
);

362 
	`•ö_u∆ock_úqª°‹e
(&
sdos
->
lock
, 
Êags
);

364  
SDIOH_API_RC_SUCCESS
;

365 
	}
}

368 #ifde‡
BCMSDH_MODULE


369 
__öô


370 
	$bcmsdh_moduÀ_öô
()

372 
îr‹
 = 0;

373 
îr‹
 = 
	`sdio_fun˘i⁄_öô
();

374  
îr‹
;

375 
	}
}

377 
__exô


378 
	$bcmsdh_moduÀ_˛ónup
()

380 
	`sdio_fun˘i⁄_˛ónup
();

381 
	}
}

383 
moduÀ_öô
(
bcmsdh_moduÀ_öô
);

384 
moduÀ_exô
(
bcmsdh_moduÀ_˛ónup
);

386 
MODULE_LICENSE
("GPL v2");

387 
MODULE_DESCRIPTION
(
DESCRIPTION
);

388 
MODULE_AUTHOR
(
AUTHOR
);

394 
	$sdio_fun˘i⁄_öô
()

396 
îr‹
 = 0;

397 
	`sd_åa˚
(("bcmsdh_sdmmc: %†E¡î\n", 
__FUNCTION__
));

399 
gIn°™˚
 = 
	`kzÆloc
((
BCMSDH_SDMMC_INSTANCE
), 
GFP_KERNEL
);

400 i‡(!
gIn°™˚
)

401  -
ENOMEM
;

403 
îr‹
 = 
	`sdio_ªgi°î_drivî
(&
bcmsdh_sdmmc_drivî
);

404 i‡(
îr‹
 && 
gIn°™˚
) {

405 
	`k‰ì
(
gIn°™˚
);

406 
gIn°™˚
 = 0;

409  
îr‹
;

410 
	}
}

415 
bcmsdh_ªmove
(
devi˚
 *
dev
);

416 
	$sdio_fun˘i⁄_˛ónup
()

418 
	`sd_åa˚
(("%†E¡î\n", 
__FUNCTION__
));

421 
	`sdio_uƒegi°î_drivî
(&
bcmsdh_sdmmc_drivî
);

423 i‡(
gIn°™˚
)

424 
	`k‰ì
(
gIn°™˚
);

425 
	}
}

	@bcmutils.c

26 
	~<bcm_cfg.h
>

27 
	~<ty≥defs.h
>

28 
	~<bcmdefs.h
>

29 
	~<°d¨g.h
>

30 #ifde‡
BCMDRIVER


32 
	~<o¶.h
>

33 
	~<bcmutûs.h
>

37 
	~<°dio.h
>

38 
	~<°rög.h
>

39 
	~<bcmutûs.h
>

41 #i‡
deföed
(
BCMEXTSUP
)

42 
	~<bcm_o¶.h
>

48 
	~<bcmídün.h
>

49 
	~<bcmdevs.h
>

50 
	~<¥Ÿo/ëhî√t.h
>

51 
	~<¥Ÿo/vœn.h
>

52 
	~<¥Ÿo/bcmù.h
>

53 
	~<¥Ÿo/802.1d.h
>

54 
	~<¥Ÿo/802.11.h
>

55 *
	g_bcmutûs_dummy_‚
 = 
NULL
;

58 #ifde‡
BCMDRIVER


63 
uöt


64 
	$pktc›y
(
o¶_t
 *
osh
, *
p
, 
uöt
 
off£t
, 
Àn
, 
uch¨
 *
buf
)

66 
uöt
 
n
, 
ªt
 = 0;

68 i‡(
Àn
 < 0)

69 
Àn
 = 4096;

72 ; 
p
 && 
off£t
;Ö = 
	`PKTNEXT
(
osh
,Ö)) {

73 i‡(
off£t
 < (
uöt
)
	`PKTLEN
(
osh
, 
p
))

75 
off£t
 -
	`PKTLEN
(
osh
, 
p
);

78 i‡(!
p
)

82 ; 
p
 && 
Àn
;Ö = 
	`PKTNEXT
(
osh
,Ö)) {

83 
n
 = 
	`MIN
((
uöt
)
	`PKTLEN
(
osh
, 
p
Ë- 
off£t
, (uöt)
Àn
);

84 
	`bc›y
(
	`PKTDATA
(
osh
, 
p
Ë+ 
off£t
, 
buf
, 
n
);

85 
buf
 +
n
;

86 
Àn
 -
n
;

87 
ªt
 +
n
;

88 
off£t
 = 0;

91  
ªt
;

92 
	}
}

95 
uöt


96 
	$pkt‰ombuf
(
o¶_t
 *
osh
, *
p
, 
uöt
 
off£t
, 
Àn
, 
uch¨
 *
buf
)

98 
uöt
 
n
, 
ªt
 = 0;

101 ; 
p
 && 
off£t
;Ö = 
	`PKTNEXT
(
osh
,Ö)) {

102 i‡(
off£t
 < (
uöt
)
	`PKTLEN
(
osh
, 
p
))

104 
off£t
 -
	`PKTLEN
(
osh
, 
p
);

107 i‡(!
p
)

111 ; 
p
 && 
Àn
;Ö = 
	`PKTNEXT
(
osh
,Ö)) {

112 
n
 = 
	`MIN
((
uöt
)
	`PKTLEN
(
osh
, 
p
Ë- 
off£t
, (uöt)
Àn
);

113 
	`bc›y
(
buf
, 
	`PKTDATA
(
osh
, 
p
Ë+ 
off£t
, 
n
);

114 
buf
 +
n
;

115 
Àn
 -
n
;

116 
ªt
 +
n
;

117 
off£t
 = 0;

120  
ªt
;

121 
	}
}

126 
uöt
 
BCMFASTPATH


127 
	$pkâŸÀn
(
o¶_t
 *
osh
, *
p
)

129 
uöt
 
tŸÆ
;

130 
Àn
;

132 
tŸÆ
 = 0;

133 ; 
p
;Ö = 
	`PKTNEXT
(
osh
,Ö)) {

134 
Àn
 = 
	`PKTLEN
(
osh
, 
p
);

135 
tŸÆ
 +
Àn
;

138  (
tŸÆ
);

139 
	}
}

143 
	$pkéa°
(
o¶_t
 *
osh
, *
p
)

145 ; 
	`PKTNEXT
(
osh
, 
p
);Ö = PKTNEXT(osh,Ö))

148  (
p
);

149 
	}
}

152 
uöt
 
BCMFASTPATH


153 
	$pkt£g˙t
(
o¶_t
 *
osh
, *
p
)

155 
uöt
 
˙t
;

157 
˙t
 = 0; 
p
;Ö = 
	`PKTNEXT
(
osh
,Ö))

158 
˙t
++;

160  
˙t
;

161 
	}
}

165 
uöt
 
BCMFASTPATH


166 
	$pkt£g˙t_w¨
(
o¶_t
 *
osh
, *
p
)

168 
uöt
 
˙t
;

169 
uöt8
 *
pktd©a
;

170 
uöt
 
Àn
, 
ªmaö
, 
Æign64
;

172 
˙t
 = 0; 
p
;Ö = 
	`PKTNEXT
(
osh
,Ö)) {

173 
˙t
++;

174 
Àn
 = 
	`PKTLEN
(
osh
, 
p
);

175 i‡(
Àn
 > 128) {

176 
pktd©a
 = (
uöt8
 *)
	`PKTDATA
(
osh
, 
p
);

178 i‡(((
uöçå
)
pktd©a
 & ~0x7ffË!((uöçå)’ktd©a+
Àn
) & ~0x7ff))

179 
˙t
++;

181 
Æign64
 = (
uöt
)((
uöçå
)
pktd©a
 & 0x3f);

182 
Æign64
 = (64 -álign64) & 0x3f;

183 
Àn
 -
Æign64
;

185 
ªmaö
 = 
Àn
 % 128;

186 i‡(
ªmaö
 > 0 &&Ñemain <= 4)

187 
˙t
++;

191  
˙t
;

192 
	}
}

194 
uöt8
 * 
BCMFASTPATH


195 
	$pktoff£t
(
o¶_t
 *
osh
, *
p
, 
uöt
 
off£t
)

197 
uöt
 
tŸÆ
 = 
	`pkâŸÀn
(
osh
, 
p
);

198 
uöt
 
pkt_off
 = 0, 
Àn
 = 0;

199 
uöt8
 *
pd©a
 = (uöt8 *Ë
	`PKTDATA
(
osh
, 
p
);

201 i‡(
off£t
 > 
tŸÆ
)

202  
NULL
;

204 ; 
p
;Ö = 
	`PKTNEXT
(
osh
,Ö)) {

205 
pd©a
 = (
uöt8
 *Ë
	`PKTDATA
(
osh
, 
p
);

206 
pkt_off
 = 
off£t
 - 
Àn
;

207 
Àn
 +
	`PKTLEN
(
osh
, 
p
);

208 i‡(
Àn
 > 
off£t
)

211  (
uöt8
*Ë(
pd©a
+
pkt_off
);

212 
	}
}

218 * 
BCMFASTPATH


219 
	$pktq_≥nq
(
pktq
 *
pq
, 
¥ec
, *
p
)

221 
pktq_¥ec
 *
q
;

223 
	`ASSERT
(
¥ec
 >0 &&Öª¯< 
pq
->
num_¥ec
);

224 
	`ASSERT
(
	`PKTLINK
(
p
Ë=
NULL
);

226 
	`ASSERT
(!
	`pktq_fuŒ
(
pq
));

227 
	`ASSERT
(!
	`pktq_pfuŒ
(
pq
, 
¥ec
));

229 
q
 = &
pq
->q[
¥ec
];

231 i‡(
q
->
hód
)

232 
	`PKTSETLINK
(
q
->
èû
, 
p
);

234 
q
->
hód
 = 
p
;

236 
q
->
èû
 = 
p
;

237 
q
->
Àn
++;

239 
pq
->
Àn
++;

241 i‡(
pq
->
hi_¥ec
 < 
¥ec
)

242 
pq
->
hi_¥ec
 = (
uöt8
)
¥ec
;

244  
p
;

245 
	}
}

247 * 
BCMFASTPATH


248 
	$pktq_≥nq_hód
(
pktq
 *
pq
, 
¥ec
, *
p
)

250 
pktq_¥ec
 *
q
;

252 
	`ASSERT
(
¥ec
 >0 &&Öª¯< 
pq
->
num_¥ec
);

253 
	`ASSERT
(
	`PKTLINK
(
p
Ë=
NULL
);

255 
	`ASSERT
(!
	`pktq_fuŒ
(
pq
));

256 
	`ASSERT
(!
	`pktq_pfuŒ
(
pq
, 
¥ec
));

258 
q
 = &
pq
->q[
¥ec
];

260 i‡(
q
->
hód
 =
NULL
)

261 
q
->
èû
 = 
p
;

263 
	`PKTSETLINK
(
p
, 
q
->
hód
);

264 
q
->
hód
 = 
p
;

265 
q
->
Àn
++;

267 
pq
->
Àn
++;

269 i‡(
pq
->
hi_¥ec
 < 
¥ec
)

270 
pq
->
hi_¥ec
 = (
uöt8
)
¥ec
;

272  
p
;

273 
	}
}

275 * 
BCMFASTPATH


276 
	$pktq_pdeq
(
pktq
 *
pq
, 
¥ec
)

278 
pktq_¥ec
 *
q
;

279 *
p
;

281 
	`ASSERT
(
¥ec
 >0 &&Öª¯< 
pq
->
num_¥ec
);

283 
q
 = &
pq
->q[
¥ec
];

285 i‡((
p
 = 
q
->
hód
Ë=
NULL
)

286  
NULL
;

288 i‡((
q
->
hód
 = 
	`PKTLINK
(
p
)Ë=
NULL
)

289 
q
->
èû
 = 
NULL
;

291 
q
->
Àn
--;

293 
pq
->
Àn
--;

295 
	`PKTSETLINK
(
p
, 
NULL
);

297  
p
;

298 
	}
}

300 * 
BCMFASTPATH


301 
	$pktq_pdeq_¥ev
(
pktq
 *
pq
, 
¥ec
, *
¥ev_p
)

303 
pktq_¥ec
 *
q
;

304 *
p
;

306 
	`ASSERT
(
¥ec
 >0 &&Öª¯< 
pq
->
num_¥ec
);

308 
q
 = &
pq
->q[
¥ec
];

310 i‡(
¥ev_p
 =
NULL
)

311  
NULL
;

313 i‡((
p
 = 
	`PKTLINK
(
¥ev_p
)Ë=
NULL
)

314  
NULL
;

316 
q
->
Àn
--;

318 
pq
->
Àn
--;

320 
	`PKTSETLINK
(
¥ev_p
, 
	`PKTLINK
(
p
));

321 
	`PKTSETLINK
(
p
, 
NULL
);

323  
p
;

324 
	}
}

326 * 
BCMFASTPATH


327 
	$pktq_pdeq_èû
(
pktq
 *
pq
, 
¥ec
)

329 
pktq_¥ec
 *
q
;

330 *
p
, *
¥ev
;

332 
	`ASSERT
(
¥ec
 >0 &&Öª¯< 
pq
->
num_¥ec
);

334 
q
 = &
pq
->q[
¥ec
];

336 i‡((
p
 = 
q
->
hód
Ë=
NULL
)

337  
NULL
;

339 
¥ev
 = 
NULL
; 
p
 !
q
->
èû
;Ö = 
	`PKTLINK
(p))

340 
¥ev
 = 
p
;

342 i‡(
¥ev
)

343 
	`PKTSETLINK
(
¥ev
, 
NULL
);

345 
q
->
hód
 = 
NULL
;

347 
q
->
èû
 = 
¥ev
;

348 
q
->
Àn
--;

350 
pq
->
Àn
--;

352  
p
;

353 
	}
}

356 
	$pktq_pÊush
(
o¶_t
 *
osh
, 
pktq
 *
pq
, 
¥ec
, 
boﬁ
 
dú
, 
iÂkt_cb_t
 
‚
, 
¨g
)

358 
pktq_¥ec
 *
q
;

359 *
p
, *
¥ev
 = 
NULL
;

361 
q
 = &
pq
->q[
¥ec
];

362 
p
 = 
q
->
hód
;

363 
p
) {

364 i‡(
‚
 =
NULL
 || (*‚)(
p
, 
¨g
)) {

365 
boﬁ
 
hód
 = (
p
 =
q
->head);

366 i‡(
hód
)

367 
q
->
hód
 = 
	`PKTLINK
(
p
);

369 
	`PKTSETLINK
(
¥ev
, 
	`PKTLINK
(
p
));

370 
	`PKTSETLINK
(
p
, 
NULL
);

371 
	`PKTFREE
(
osh
, 
p
, 
dú
);

372 
q
->
Àn
--;

373 
pq
->
Àn
--;

374 
p
 = (
hód
 ? 
q
->hód : 
	`PKTLINK
(
¥ev
));

376 
¥ev
 = 
p
;

377 
p
 = 
	`PKTLINK
(p);

381 i‡(
q
->
hód
 =
NULL
) {

382 
	`ASSERT
(
q
->
Àn
 == 0);

383 
q
->
èû
 = 
NULL
;

385 
	}
}

387 
boﬁ
 
BCMFASTPATH


388 
	$pktq_pdñ
(
pktq
 *
pq
, *
pktbuf
, 
¥ec
)

390 
pktq_¥ec
 *
q
;

391 *
p
;

393 
	`ASSERT
(
¥ec
 >0 &&Öª¯< 
pq
->
num_¥ec
);

395 i‡(!
pktbuf
)

396  
FALSE
;

398 
q
 = &
pq
->q[
¥ec
];

400 i‡(
q
->
hód
 =
pktbuf
) {

401 i‡((
q
->
hód
 = 
	`PKTLINK
(
pktbuf
)Ë=
NULL
)

402 
q
->
èû
 = 
NULL
;

404 
p
 = 
q
->
hód
;Ö && 
	`PKTLINK
’Ë!
pktbuf
;Ö = PKTLINK(p))

406 i‡(
p
 =
NULL
)

407  
FALSE
;

409 
	`PKTSETLINK
(
p
, 
	`PKTLINK
(
pktbuf
));

410 i‡(
q
->
èû
 =
pktbuf
)

411 
q
->
èû
 = 
p
;

414 
q
->
Àn
--;

415 
pq
->
Àn
--;

416 
	`PKTSETLINK
(
pktbuf
, 
NULL
);

417  
TRUE
;

418 
	}
}

421 
	$pktq_öô
(
pktq
 *
pq
, 
num_¥ec
, 
max_Àn
)

423 
¥ec
;

425 
	`ASSERT
(
num_¥ec
 > 0 &&Çum_¥e¯<
PKTQ_MAX_PREC
);

428 
	`bzîo
(
pq
, 
	`OFFSETOF
(
pktq
, 
q
Ë+ ((
pktq_¥ec
Ë* 
num_¥ec
));

430 
pq
->
num_¥ec
 = (
uöt16
)num_prec;

432 
pq
->
max
 = (
uöt16
)
max_Àn
;

434 
¥ec
 = 0;Öª¯< 
num_¥ec
;Örec++)

435 
pq
->
q
[
¥ec
].
max
 =Öq->max;

436 
	}
}

439 
	$pktq_£t_max_∂í
(
pktq
 *
pq
, 
¥ec
, 
max_Àn
)

441 
	`ASSERT
(
¥ec
 >0 &&Öª¯< 
pq
->
num_¥ec
);

443 i‡(
¥ec
 < 
pq
->
num_¥ec
)

444 
pq
->
q
[
¥ec
].
max
 = (
uöt16
)
max_Àn
;

445 
	}
}

447 * 
BCMFASTPATH


448 
	$pktq_deq
(
pktq
 *
pq
, *
¥ec_out
)

450 
pktq_¥ec
 *
q
;

451 *
p
;

452 
¥ec
;

454 i‡(
pq
->
Àn
 == 0)

455  
NULL
;

457 (
¥ec
 = 
pq
->
hi_¥ec
Ë> 0 &&Öq->
q
[¥ec].
hód
 =
NULL
)

458 
pq
->
hi_¥ec
--;

460 
q
 = &
pq
->q[
¥ec
];

462 i‡((
p
 = 
q
->
hód
Ë=
NULL
)

463  
NULL
;

465 i‡((
q
->
hód
 = 
	`PKTLINK
(
p
)Ë=
NULL
)

466 
q
->
èû
 = 
NULL
;

468 
q
->
Àn
--;

470 
pq
->
Àn
--;

472 i‡(
¥ec_out
)

473 *
¥ec_out
 = 
¥ec
;

475 
	`PKTSETLINK
(
p
, 
NULL
);

477  
p
;

478 
	}
}

480 * 
BCMFASTPATH


481 
	$pktq_deq_èû
(
pktq
 *
pq
, *
¥ec_out
)

483 
pktq_¥ec
 *
q
;

484 *
p
, *
¥ev
;

485 
¥ec
;

487 i‡(
pq
->
Àn
 == 0)

488  
NULL
;

490 
¥ec
 = 0;Öª¯< 
pq
->
hi_¥ec
;Örec++)

491 i‡(
pq
->
q
[
¥ec
].
hód
)

494 
q
 = &
pq
->q[
¥ec
];

496 i‡((
p
 = 
q
->
hód
Ë=
NULL
)

497  
NULL
;

499 
¥ev
 = 
NULL
; 
p
 !
q
->
èû
;Ö = 
	`PKTLINK
(p))

500 
¥ev
 = 
p
;

502 i‡(
¥ev
)

503 
	`PKTSETLINK
(
¥ev
, 
NULL
);

505 
q
->
hód
 = 
NULL
;

507 
q
->
èû
 = 
¥ev
;

508 
q
->
Àn
--;

510 
pq
->
Àn
--;

512 i‡(
¥ec_out
)

513 *
¥ec_out
 = 
¥ec
;

515 
	`PKTSETLINK
(
p
, 
NULL
);

517  
p
;

518 
	}
}

521 
	$pktq_≥ek
(
pktq
 *
pq
, *
¥ec_out
)

523 
¥ec
;

525 i‡(
pq
->
Àn
 == 0)

526  
NULL
;

528 (
¥ec
 = 
pq
->
hi_¥ec
Ë> 0 &&Öq->
q
[¥ec].
hód
 =
NULL
)

529 
pq
->
hi_¥ec
--;

531 i‡(
¥ec_out
)

532 *
¥ec_out
 = 
¥ec
;

534  (
pq
->
q
[
¥ec
].
hód
);

535 
	}
}

538 
	$pktq_≥ek_èû
(
pktq
 *
pq
, *
¥ec_out
)

540 
¥ec
;

542 i‡(
pq
->
Àn
 == 0)

543  
NULL
;

545 
¥ec
 = 0;Öª¯< 
pq
->
hi_¥ec
;Örec++)

546 i‡(
pq
->
q
[
¥ec
].
hód
)

549 i‡(
¥ec_out
)

550 *
¥ec_out
 = 
¥ec
;

552  (
pq
->
q
[
¥ec
].
èû
);

553 
	}
}

556 
	$pktq_Êush
(
o¶_t
 *
osh
, 
pktq
 *
pq
, 
boﬁ
 
dú
, 
iÂkt_cb_t
 
‚
, 
¨g
)

558 
¥ec
;

563 i‡(
pq
->
Àn
 == 0) {

567 
¥ec
 = 0;Öª¯< 
pq
->
num_¥ec
;Örec++)

568 
	`pktq_pÊush
(
osh
, 
pq
, 
¥ec
, 
dú
, 
‚
, 
¨g
);

569 i‡(
‚
 =
NULL
)

570 
	`ASSERT
(
pq
->
Àn
 == 0);

571 
	}
}

575 
	$pktq_mÀn
(
pktq
 *
pq
, 
uöt
 
¥ec_bmp
)

577 
¥ec
, 
Àn
;

579 
Àn
 = 0;

581 
¥ec
 = 0;Öª¯<
pq
->
hi_¥ec
;Örec++)

582 i‡(
¥ec_bmp
 & (1 << 
¥ec
))

583 
Àn
 +
pq
->
q
[
¥ec
].len;

585  
Àn
;

586 
	}
}

589 * 
BCMFASTPATH


590 
	$pktq_m≥ek
(
pktq
 *
pq
, 
uöt
 
¥ec_bmp
, *
¥ec_out
)

592 
pktq_¥ec
 *
q
;

593 *
p
;

594 
¥ec
;

596 i‡(
pq
->
Àn
 == 0)

598  
NULL
;

600 (
¥ec
 = 
pq
->
hi_¥ec
Ë> 0 &&Öq->
q
[¥ec].
hód
 =
NULL
)

601 
pq
->
hi_¥ec
--;

603 (
¥ec_bmp
 & (1 << 
¥ec
)Ë=0 || 
pq
->
q
[¥ec].
hód
 =
NULL
)

604 i‡(
¥ec
-- == 0)

605  
NULL
;

607 
q
 = &
pq
->q[
¥ec
];

609 i‡((
p
 = 
q
->
hód
Ë=
NULL
)

610  
NULL
;

612 i‡(
¥ec_out
)

613 *
¥ec_out
 = 
¥ec
;

615  
p
;

616 
	}
}

618 * 
BCMFASTPATH


619 
	$pktq_mdeq
(
pktq
 *
pq
, 
uöt
 
¥ec_bmp
, *
¥ec_out
)

621 
pktq_¥ec
 *
q
;

622 *
p
;

623 
¥ec
;

625 i‡(
pq
->
Àn
 == 0)

626  
NULL
;

628 (
¥ec
 = 
pq
->
hi_¥ec
Ë> 0 &&Öq->
q
[¥ec].
hód
 =
NULL
)

629 
pq
->
hi_¥ec
--;

631 (
pq
->
q
[
¥ec
].
hód
 =
NULL
Ë|| ((
¥ec_bmp
 & (1 <<Örec)) == 0))

632 i‡(
¥ec
-- == 0)

633  
NULL
;

635 
q
 = &
pq
->q[
¥ec
];

637 i‡((
p
 = 
q
->
hód
Ë=
NULL
)

638  
NULL
;

640 i‡((
q
->
hód
 = 
	`PKTLINK
(
p
)Ë=
NULL
)

641 
q
->
èû
 = 
NULL
;

643 
q
->
Àn
--;

645 i‡(
¥ec_out
)

646 *
¥ec_out
 = 
¥ec
;

648 
pq
->
Àn
--;

650 
	`PKTSETLINK
(
p
, 
NULL
);

652  
p
;

653 
	}
}

657 c⁄° 
	gbcm_˘y≥
[] = {

659 
_BCM_C
,_BCM_C,_BCM_C,_BCM_C,_BCM_C,_BCM_C,_BCM_C,_BCM_C,

660 
_BCM_C
, _BCM_C|
_BCM_S
, _BCM_C|_BCM_S, _BCM_C|_BCM_S, _BCM_C|_BCM_S, _BCM_C|_BCM_S, _BCM_C,

661 
_BCM_C
,

662 
_BCM_C
,_BCM_C,_BCM_C,_BCM_C,_BCM_C,_BCM_C,_BCM_C,_BCM_C,

663 
_BCM_C
,_BCM_C,_BCM_C,_BCM_C,_BCM_C,_BCM_C,_BCM_C,_BCM_C,

664 
_BCM_S
|
_BCM_SP
,
_BCM_P
,_BCM_P,_BCM_P,_BCM_P,_BCM_P,_BCM_P,_BCM_P,

665 
_BCM_P
,_BCM_P,_BCM_P,_BCM_P,_BCM_P,_BCM_P,_BCM_P,_BCM_P,

666 
_BCM_D
,_BCM_D,_BCM_D,_BCM_D,_BCM_D,_BCM_D,_BCM_D,_BCM_D,

667 
_BCM_D
,_BCM_D,
_BCM_P
,_BCM_P,_BCM_P,_BCM_P,_BCM_P,_BCM_P,

668 
_BCM_P
, 
_BCM_U
|
_BCM_X
, _BCM_U|_BCM_X, _BCM_U|_BCM_X, _BCM_U|_BCM_X, _BCM_U|_BCM_X,

669 
_BCM_U
|
_BCM_X
, _BCM_U,

670 
_BCM_U
,_BCM_U,_BCM_U,_BCM_U,_BCM_U,_BCM_U,_BCM_U,_BCM_U,

671 
_BCM_U
,_BCM_U,_BCM_U,_BCM_U,_BCM_U,_BCM_U,_BCM_U,_BCM_U,

672 
_BCM_U
,_BCM_U,_BCM_U,
_BCM_P
,_BCM_P,_BCM_P,_BCM_P,_BCM_P,

673 
_BCM_P
, 
_BCM_L
|
_BCM_X
, _BCM_L|_BCM_X, _BCM_L|_BCM_X, _BCM_L|_BCM_X, _BCM_L|_BCM_X,

674 
_BCM_L
|
_BCM_X
, _BCM_L,

675 
_BCM_L
,_BCM_L,_BCM_L,_BCM_L,_BCM_L,_BCM_L,_BCM_L,_BCM_L,

676 
_BCM_L
,_BCM_L,_BCM_L,_BCM_L,_BCM_L,_BCM_L,_BCM_L,_BCM_L,

677 
_BCM_L
,_BCM_L,_BCM_L,
_BCM_P
,_BCM_P,_BCM_P,_BCM_P,
_BCM_C
,

680 
_BCM_S
|
_BCM_SP
, 
_BCM_P
, _BCM_P, _BCM_P, _BCM_P, _BCM_P, _BCM_P, _BCM_P, _BCM_P, _BCM_P,

681 
_BCM_P
, _BCM_P, _BCM_P, _BCM_P, _BCM_P, _BCM_P,

682 
_BCM_P
, _BCM_P, _BCM_P, _BCM_P, _BCM_P, _BCM_P, _BCM_P, _BCM_P, _BCM_P, _BCM_P, _BCM_P,

683 
_BCM_P
, _BCM_P, _BCM_P, _BCM_P, _BCM_P,

684 
_BCM_U
, _BCM_U, _BCM_U, _BCM_U, _BCM_U, _BCM_U, _BCM_U, _BCM_U, _BCM_U, _BCM_U, _BCM_U,

685 
_BCM_U
, _BCM_U, _BCM_U, _BCM_U, _BCM_U,

686 
_BCM_U
, _BCM_U, _BCM_U, _BCM_U, _BCM_U, _BCM_U, _BCM_U, 
_BCM_P
, _BCM_U, _BCM_U, _BCM_U,

687 
_BCM_U
, _BCM_U, _BCM_U, _BCM_U, 
_BCM_L
,

688 
_BCM_L
, _BCM_L, _BCM_L, _BCM_L, _BCM_L, _BCM_L, _BCM_L, _BCM_L, _BCM_L, _BCM_L, _BCM_L,

689 
_BCM_L
, _BCM_L, _BCM_L, _BCM_L, _BCM_L,

690 
_BCM_L
, _BCM_L, _BCM_L, _BCM_L, _BCM_L, _BCM_L, _BCM_L, 
_BCM_P
, _BCM_L, _BCM_L, _BCM_L,

691 
_BCM_L
, _BCM_L, _BCM_L, _BCM_L, _BCM_L

694 
ul⁄g


695 
	$bcm_°πoul
(c⁄° *
˝
, **
ídp
, 
uöt
 
ba£
)

697 
ul⁄g
 
ªsu…
, 
œ°_ªsu…
 = 0, 
vÆue
;

698 
boﬁ
 
möus
;

700 
möus
 = 
FALSE
;

702 
	`bcm_is•a˚
(*
˝
))

703 
˝
++;

705 i‡(
˝
[0] == '+')

706 
˝
++;

707 i‡(
˝
[0] == '-') {

708 
möus
 = 
TRUE
;

709 
˝
++;

712 i‡(
ba£
 == 0) {

713 i‡(
˝
[0] == '0') {

714 i‡((
˝
[1] == 'x') || (cp[1] == 'X')) {

715 
ba£
 = 16;

716 
˝
 = &cp[2];

718 
ba£
 = 8;

719 
˝
 = &cp[1];

722 
ba£
 = 10;

723 } i‡(
ba£
 =16 && (
˝
[0] == '0') && ((cp[1] == 'x') || (cp[1] == 'X'))) {

724 
˝
 = &cp[2];

727 
ªsu…
 = 0;

729 
	`bcm_isxdigô
(*
˝
) &&

730 (
vÆue
 = 
	`bcm_isdigô
(*
˝
Ë? *˝-'0' : 
	`bcm_touµî
(*˝)-'A'+10Ë< 
ba£
) {

731 
ªsu…
 =Ñesu…*
ba£
 + 
vÆue
;

733 i‡(
ªsu…
 < 
œ°_ªsu…
 && !
möus
)

734  (
ul⁄g
)-1;

735 
œ°_ªsu…
 = 
ªsu…
;

736 
˝
++;

739 i‡(
möus
)

740 
ªsu…
 = (
ul⁄g
)(-()result);

742 i‡(
ídp
)

743 *
ídp
 = 
	`DISCARD_QUAL
(
˝
, );

745  (
ªsu…
);

746 
	}
}

749 
	$bcm_©oi
(c⁄° *
s
)

751  ()
	`bcm_°πoul
(
s
, 
NULL
, 10);

752 
	}
}

756 
	$bcm°r°r
(c⁄° *
hay°ack
, c⁄° *
√edÀ
)

758 
Àn
, 
∆í
;

759 
i
;

761 i‡((
hay°ack
 =
NULL
Ë|| (
√edÀ
 == NULL))

762  
	`DISCARD_QUAL
(
hay°ack
, );

764 
∆í
 = 
	`°æí
(
√edÀ
);

765 
Àn
 = 
	`°æí
(
hay°ack
Ë- 
∆í
 + 1;

767 
i
 = 0; i < 
Àn
; i++)

768 i‡(
	`memcmp
(
√edÀ
, &
hay°ack
[
i
], 
∆í
) == 0)

769  
	`DISCARD_QUAL
(&
hay°ack
[
i
], );

770  (
NULL
);

771 
	}
}

774 
	$bcm°rˇt
(*
de°
, c⁄° *
§c
)

776 *
p
;

778 
p
 = 
de°
 + 
	`°æí
(dest);

780 (*
p
++ = *
§c
++) != '\0')

783  (
de°
);

784 
	}
}

787 
	$bcm°∫ˇt
(*
de°
, c⁄° *
§c
, 
uöt
 
size
)

789 *
ídp
;

790 *
p
;

792 
p
 = 
de°
 + 
	`°æí
(dest);

793 
ídp
 = 
p
 + 
size
;

795 
p
 !
ídp
 && (*p++ = *
§c
++) != '\0')

798  (
de°
);

799 
	}
}

822 
	$bcm°πok
(**
°rög
, c⁄° *
dñimôîs
, *
tokdñim
)

824 *
°r
;

825 
m≠
[8];

826 
cou¡
;

827 *
√xtokí
;

829 i‡(
tokdñim
 !
NULL
) {

831 *
tokdñim
 = '\0';

835 
cou¡
 = 0; count < 8; count++) {

836 
m≠
[
cou¡
] = 0;

841 
m≠
[*
dñimôîs
 >> 5] |= (1 << (*delimiters & 31));

843 *
dñimôîs
++);

845 
°r
 = (*)*
°rög
;

851 ((
m≠
[*
°r
 >> 5] & (1 << (*str & 31))) && *str) || (*str == ' ')) {

852 
°r
++;

855 
√xtokí
 = (*)
°r
;

860 ; *
°r
; str++) {

861 i‡(
m≠
[*
°r
 >> 5] & (1 << (*str & 31))) {

862 i‡(
tokdñim
 !
NULL
) {

863 *
tokdñim
 = *
°r
;

866 *
°r
++ = '\0';

871 *
°rög
 = (*)
°r
;

874 i‡(
√xtokí
 =(*Ë
°r
) {

875  
NULL
;

878  
√xtokí
;

880 
	}
}

883 
	#xToLowî
(
C
) \

884 ((
C
 >'A' && C <'Z'Ë? ()(()C - ()'A' + ()'a'Ë: C)

	)

900 
	$bcm°ricmp
(c⁄° *
s1
, c⁄° *
s2
)

902 
dc
, 
sc
;

904 *
s2
 && *
s1
) {

905 
dc
 = 
	`xToLowî
(*
s1
);

906 
sc
 = 
	`xToLowî
(*
s2
);

907 i‡(
dc
 < 
sc
)  -1;

908 i‡(
dc
 > 
sc
)  1;

909 
s1
++;

910 
s2
++;

913 i‡(*
s1
 && !*
s2
)  1;

914 i‡(!*
s1
 && *
s2
)  -1;

916 
	}
}

934 
	$bcm°∫icmp
(c⁄° * 
s1
, c⁄° * 
s2
, 
˙t
)

936 
dc
, 
sc
;

938 *
s2
 && *
s1
 && 
˙t
) {

939 
dc
 = 
	`xToLowî
(*
s1
);

940 
sc
 = 
	`xToLowî
(*
s2
);

941 i‡(
dc
 < 
sc
)  -1;

942 i‡(
dc
 > 
sc
)  1;

943 
s1
++;

944 
s2
++;

945 
˙t
--;

948 i‡(!
˙t
)  0;

949 i‡(*
s1
 && !*
s2
)  1;

950 i‡(!*
s1
 && *
s2
)  -1;

952 
	}
}

956 
	$bcm_ëhî_©€
(c⁄° *
p
, 
ëhî_addr
 *
ó
)

958 
i
 = 0;

959 *
ï
;

962 
ó
->
o˘ë
[
i
++] = (Ë
	`bcm_°πoul
(
p
, &
ï
, 16);

963 
p
 = 
ï
;

964 i‡(!*
p
++ || 
i
 == 6)

968  (
i
 == 6);

969 
	}
}

972 #i‡
deföed
(
CONFIG_USBRNDIS_RETAIL
Ë|| deföed(
NDIS_MINIPORT_DRIVER
)

977 
ul⁄g


978 
	$wch¨2ascii
(*
abuf
, 
ush‹t
 *
wbuf
, ush‹à
wbuÊí
, 
ul⁄g
 
abuÊí
)

980 
ul⁄g
 
c›y˘
 = 1;

981 
ush‹t
 
i
;

983 i‡(
abuÊí
 == 0)

987 
wbuÊí
 /(
ush‹t
);

989 
i
 = 0; i < 
wbuÊí
; ++i) {

990 i‡(--
abuÊí
 == 0)

992 *
abuf
++ = (Ë*
wbuf
++;

993 ++
c›y˘
;

995 *
abuf
 = '\0';

997  
c›y˘
;

998 
	}
}

1002 
	$bcm_ëhî_¡ﬂ
(c⁄° 
ëhî_addr
 *
ó
, *
buf
)

1004 c⁄° 
hex
[] =

1009 c⁄° 
uöt8
 *
o˘ë
 = 
ó
->octet;

1010 *
p
 = 
buf
;

1011 
i
;

1013 
i
 = 0; i < 6; i++, 
o˘ë
++) {

1014 *
p
++ = 
hex
[(*
o˘ë
 >> 4) & 0xf];

1015 *
p
++ = 
hex
[*
o˘ë
 & 0xf];

1016 *
p
++ = ':';

1019 *(
p
-1) = '\0';

1021  (
buf
);

1022 
	}
}

1025 
	$bcm_ù_¡ﬂ
(
ùv4_addr
 *
ü
, *
buf
)

1027 
	`¢¥ötf
(
buf
, 16, "%d.%d.%d.%d",

1028 
ü
->
addr
[0], ia->addr[1], ia->addr[2], ia->addr[3]);

1029  (
buf
);

1030 
	}
}

1032 #ifde‡
BCMDRIVER


1035 
	$bcm_mdñay
(
uöt
 
ms
)

1037 
uöt
 
i
;

1039 
i
 = 0; i < 
ms
; i++) {

1040 
	`OSL_DELAY
(1000);

1042 
	}
}

1048 #i‡
deföed
(
DHD_DEBUG
)

1051 
	$¥pkt
(c⁄° *
msg
, 
o¶_t
 *
osh
, *
p0
)

1053 *
p
;

1055 i‡(
msg
 && (msg[0] != '\0'))

1056 
	`¥ötf
("%s:\n", 
msg
);

1058 
p
 = 
p0
;Ö;Ö = 
	`PKTNEXT
(
osh
,Ö))

1059 
	`¥hex
(
NULL
, 
	`PKTDATA
(
osh
, 
p
), 
	`PKTLEN
(osh,Ö));

1060 
	}
}

1067 
uöt
 
BCMFASTPATH


1068 
	$pkt£çrio
(*
pkt
, 
boﬁ
 
upd©e_vèg
)

1070 
ëhî_hódî
 *
eh
;

1071 
ëhîvœn_hódî
 *
evh
;

1072 
uöt8
 *
pktd©a
;

1073 
¥i‹ôy
 = 0;

1074 
rc
 = 0;

1076 
pktd©a
 = (
uöt8
 *)
	`PKTDATA
(
NULL
, 
pkt
);

1077 
	`ASSERT
(
	`ISALIGNED
((
uöçå
)
pktd©a
, (
uöt16
)));

1079 
eh
 = (
ëhî_hódî
 *Ë
pktd©a
;

1081 i‡(
	`¡oh16
(
eh
->
ëhî_ty≥
Ë=
ETHER_TYPE_8021Q
) {

1082 
uöt16
 
vœn_èg
;

1083 
vœn_¥io
, 
ds˝_¥io
 = 0;

1085 
evh
 = (
ëhîvœn_hódî
 *)
eh
;

1087 
vœn_èg
 = 
	`¡oh16
(
evh
->vlan_tag);

1088 
vœn_¥io
 = (Ë(
vœn_èg
 >> 
VLAN_PRI_SHIFT
Ë& 
VLAN_PRI_MASK
;

1090 i‡(
	`¡oh16
(
evh
->
ëhî_ty≥
Ë=
ETHER_TYPE_IP
) {

1091 
uöt8
 *
ù_body
 = 
pktd©a
 + (
ëhîvœn_hódî
);

1092 
uöt8
 
tos_tc
 = 
	`IP_TOS46
(
ù_body
);

1093 
ds˝_¥io
 = ()(
tos_tc
 >> 
IPV4_TOS_PREC_SHIFT
);

1097 i‡(
ds˝_¥io
 != 0) {

1098 
¥i‹ôy
 = 
ds˝_¥io
;

1099 
rc
 |
PKTPRIO_VDSCP
;

1101 
¥i‹ôy
 = 
vœn_¥io
;

1102 
rc
 |
PKTPRIO_VLAN
;

1111 i‡(
upd©e_vèg
 && (
¥i‹ôy
 !
vœn_¥io
)) {

1112 
vœn_èg
 &~(
VLAN_PRI_MASK
 << 
VLAN_PRI_SHIFT
);

1113 
vœn_èg
 |(
uöt16
)
¥i‹ôy
 << 
VLAN_PRI_SHIFT
;

1114 
evh
->
vœn_èg
 = 
	`ht⁄16
(vlan_tag);

1115 
rc
 |
PKTPRIO_UPD
;

1117 } i‡(
	`¡oh16
(
eh
->
ëhî_ty≥
Ë=
ETHER_TYPE_IP
) {

1118 
uöt8
 *
ù_body
 = 
pktd©a
 + (
ëhî_hódî
);

1119 
uöt8
 
tos_tc
 = 
	`IP_TOS46
(
ù_body
);

1120 
¥i‹ôy
 = ()(
tos_tc
 >> 
IPV4_TOS_PREC_SHIFT
);

1121 
rc
 |
PKTPRIO_DSCP
;

1124 
	`ASSERT
(
¥i‹ôy
 >0 &&Öri‹ôy <
MAXPRIO
);

1125 
	`PKTSETPRIO
(
pkt
, 
¥i‹ôy
);

1126  (
rc
 | 
¥i‹ôy
);

1127 
	}
}

1130 
	gbcm_unde„º°r
[32];

1131 c⁄° *
	gbcmîr‹°πabÀ
[] = 
BCMERRSTRINGTABLE
;

1135 
	$bcmîr‹°r
(
bcmîr‹
)

1138 
	`ASSERT
(
	`ABS
(
BCME_LAST
Ë=(
	`ARRAYSIZE
(
bcmîr‹°πabÀ
) - 1));

1140 i‡(
bcmîr‹
 > 0 || bcmîr‹ < 
BCME_LAST
) {

1141 
	`¢¥ötf
(
bcm_unde„º°r
, (bcm_unde„º°r), "UndeföedÉº‹ %d", 
bcmîr‹
);

1142  
bcm_unde„º°r
;

1145 
	`ASSERT
(
	`°æí
(
bcmîr‹°πabÀ
[-
bcmîr‹
]Ë< 
BCME_STRLEN
);

1147  
bcmîr‹°πabÀ
[-
bcmîr‹
];

1148 
	}
}

1153 c⁄° 
bcm_iov¨_t
*

1154 
	$bcm_iov¨_lookup
(c⁄° 
bcm_iov¨_t
 *
èbÀ
, c⁄° *
«me
)

1156 c⁄° 
bcm_iov¨_t
 *
vi
;

1157 c⁄° *
lookup_«me
;

1160 
lookup_«me
 = 
	`°ºchr
(
«me
, ':');

1161 i‡(
lookup_«me
 !
NULL
)

1162 
lookup_«me
++;

1164 
lookup_«me
 = 
«me
;

1166 
	`ASSERT
(
èbÀ
 !
NULL
);

1168 
vi
 = 
èbÀ
; vi->
«me
; vi++) {

1169 i‡(!
	`°rcmp
(
vi
->
«me
, 
lookup_«me
))

1170  
vi
;

1174  
NULL
;

1175 
	}
}

1178 
	$bcm_iov¨_Àncheck
(c⁄° 
bcm_iov¨_t
 *
vi
, *
¨g
, 
Àn
, 
boﬁ
 
£t
)

1180 
bcmîr‹
 = 0;

1183 
vi
->
ty≥
) {

1184 
IOVT_BOOL
:

1185 
IOVT_INT8
:

1186 
IOVT_INT16
:

1187 
IOVT_INT32
:

1188 
IOVT_UINT8
:

1189 
IOVT_UINT16
:

1190 
IOVT_UINT32
:

1192 i‡(
Àn
 < ()()) {

1193 
bcmîr‹
 = 
BCME_BUFTOOSHORT
;

1197 
IOVT_BUFFER
:

1199 i‡(
Àn
 < 
vi
->
möÀn
) {

1200 
bcmîr‹
 = 
BCME_BUFTOOSHORT
;

1204 
IOVT_VOID
:

1205 i‡(!
£t
) {

1207 
bcmîr‹
 = 
BCME_UNSUPPORTED
;

1208 } i‡(
Àn
) {

1210 
bcmîr‹
 = 
BCME_BUFTOOLONG
;

1216 
	`ASSERT
(0);

1217 
bcmîr‹
 = 
BCME_UNSUPPORTED
;

1220  
bcmîr‹
;

1221 
	}
}

1248 c⁄° 
uöt8
 
	g¸c8_èbÀ
[256] = {

1283 
	#CRC_INNER_LOOP
(
n
, 
c
, 
x
) \

1284 (
c
Ë((cË>> 8Ë^ 
¸c
##
n
##
_èbÀ
[((cË^ (
x
)Ë& 0xff]

	)

1286 
uöt8


1287 
	$hnd¸c8
(

1288 
uöt8
 *
pd©a
,

1289 
uöt
 
nbyãs
,

1290 
uöt8
 
¸c


1296 
nbyãs
-- > 0)

1297 
¸c
 = 
¸c8_èbÀ
[(¸¯^ *
pd©a
++) & 0xff];

1299  
¸c
;

1300 
	}
}

1324 c⁄° 
uöt16
 
	g¸c16_èbÀ
[256] = {

1359 
uöt16


1360 
	$hnd¸c16
(

1361 
uöt8
 *
pd©a
,

1362 
uöt
 
nbyãs
,

1363 
uöt16
 
¸c


1366 
nbyãs
-- > 0)

1367 
	`CRC_INNER_LOOP
(16, 
¸c
, *
pd©a
++);

1368  
¸c
;

1369 
	}
}

1371 c⁄° 
uöt32
 
	g¸c32_èbÀ
[256] = {

1442 
uöt32


1443 
	$hnd¸c32
(
uöt8
 *
pd©a
, 
uöt
 
nbyãs
, 
uöt32
 
¸c
)

1445 
uöt8
 *
≥nd
;

1446 
≥nd
 = 
pd©a
 + 
nbyãs
;

1447 
pd©a
 < 
≥nd
)

1448 
	`CRC_INNER_LOOP
(32, 
¸c
, *
pd©a
++);

1450  
¸c
;

1451 
	}
}

1453 #ifde‡
nŸdef


1454 
	#CLEN
 1499

	)

1455 
	#CBUFSIZ
 (
CLEN
+4)

	)

1456 
	#CNBUFS
 5

	)

1459 
	$ã°¸c32
()

1461 
uöt
 
j
, 
k
, 
l
;

1462 
uöt8
 *
buf
;

1463 
uöt
 
Àn
[
CNBUFS
];

1464 
uöt32
 
¸¸
;

1465 
uöt32
 
¸c32tv
[
CNBUFS
] =

1468 
	`ASSERT
((
buf
 = 
	`MALLOC
(
CBUFSIZ
*
CNBUFS
)Ë!
NULL
);

1471 
l
 = 0;Ü <= 4;Ü++) {

1472 
j
 = 0; j < 
CNBUFS
; j++) {

1473 
Àn
[
j
] = 
CLEN
;

1474 
k
 = 0; k < 
Àn
[
j
]; k++)

1475 *(
buf
 + 
j
*
CBUFSIZ
 + (
k
+
l
)) = (j+k) & 0xff;

1478 
j
 = 0; j < 
CNBUFS
; j++) {

1479 
¸¸
 = 
	`¸c32
(
buf
 + 
j
*
CBUFSIZ
 + 
l
, 
Àn
[j], 
CRC32_INIT_VALUE
);

1480 
	`ASSERT
(
¸¸
 =
¸c32tv
[
j
]);

1484 
	`MFREE
(
buf
, 
CBUFSIZ
*
CNBUFS
);

1486 
	}
}

1497 
bcm_év_t
 *

1498 
	$bcm_√xt_év
(
bcm_év_t
 *
ñt
, *
buÊí
)

1500 
Àn
;

1503 i‡(!
	`bcm_vÆid_év
(
ñt
, *
buÊí
))

1504  
NULL
;

1507 
Àn
 = 
ñt
->len;

1508 
ñt
 = (
bcm_év_t
*)”…->
d©a
 + 
Àn
);

1509 *
buÊí
 -(
TLV_HDR_LEN
 + 
Àn
);

1512 i‡(!
	`bcm_vÆid_év
(
ñt
, *
buÊí
))

1513  
NULL
;

1515  
ñt
;

1516 
	}
}

1523 
bcm_év_t
 *

1524 
	$bcm_∑r£_évs
(*
buf
, 
buÊí
, 
uöt
 
key
)

1526 
bcm_év_t
 *
ñt
;

1527 
tŸÀn
;

1529 
ñt
 = (
bcm_év_t
*)
buf
;

1530 
tŸÀn
 = 
buÊí
;

1533 
tŸÀn
 >
TLV_HDR_LEN
) {

1534 
Àn
 = 
ñt
->len;

1537 i‡((
ñt
->
id
 =
key
) &&

1538 (
tŸÀn
 >(
Àn
 + 
TLV_HDR_LEN
)))

1539  (
ñt
);

1541 
ñt
 = (
bcm_év_t
*)((
uöt8
*Î… + (
Àn
 + 
TLV_HDR_LEN
));

1542 
tŸÀn
 -(
Àn
 + 
TLV_HDR_LEN
);

1545  
NULL
;

1546 
	}
}

1554 
bcm_év_t
 *

1555 
	$bcm_∑r£_‹dîed_évs
(*
buf
, 
buÊí
, 
uöt
 
key
)

1557 
bcm_év_t
 *
ñt
;

1558 
tŸÀn
;

1560 
ñt
 = (
bcm_év_t
*)
buf
;

1561 
tŸÀn
 = 
buÊí
;

1564 
tŸÀn
 >
TLV_HDR_LEN
) {

1565 
uöt
 
id
 = 
ñt
->id;

1566 
Àn
 = 
ñt
->len;

1569 i‡(
id
 > 
key
)

1570  (
NULL
);

1573 i‡((
id
 =
key
) &&

1574 (
tŸÀn
 >(
Àn
 + 
TLV_HDR_LEN
)))

1575  (
ñt
);

1577 
ñt
 = (
bcm_év_t
*)((
uöt8
*Î… + (
Àn
 + 
TLV_HDR_LEN
));

1578 
tŸÀn
 -(
Àn
 + 
TLV_HDR_LEN
);

1580  
NULL
;

1581 
	}
}

1583 #i‡
deföed
(
WLMSG_PRHDRS
Ë|| deföed(
WLMSG_PRPKT
Ë|| deföed(
WLMSG_ASSOC
) || \

1584 
	$deföed
(
DHD_DEBUG
)

1586 
	$bcm_f‹m©_Êags
(c⁄° 
bcm_bô_desc_t
 *
bd
, 
uöt32
 
Êags
, * 
buf
, 
Àn
)

1588 
i
;

1589 * 
p
 = 
buf
;

1590 
hex°r
[16];

1591 
¶í
 = 0, 
∆í
 = 0;

1592 
uöt32
 
bô
;

1593 c⁄° * 
«me
;

1595 i‡(
Àn
 < 2 || !
buf
)

1598 
buf
[0] = '\0';

1600 
i
 = 0; 
Êags
 != 0; i++) {

1601 
bô
 = 
bd
[
i
].bit;

1602 
«me
 = 
bd
[
i
].name;

1603 i‡(
bô
 =0 && 
Êags
 != 0) {

1605 
	`¢¥ötf
(
hex°r
, 16, "0x%X", 
Êags
);

1606 
«me
 = 
hex°r
;

1607 
Êags
 = 0;

1608 } i‡((
Êags
 & 
bô
) == 0)

1610 
Êags
 &~
bô
;

1611 
∆í
 = 
	`°æí
(
«me
);

1612 
¶í
 +
∆í
;

1614 i‡(
Êags
 != 0)

1615 
¶í
 += 1;

1617 i‡(
Àn
 <
¶í
)

1620 
	`°∫˝y
(
p
, 
«me
, 
∆í
 + 1);

1621 
p
 +
∆í
;

1623 i‡(
Êags
 != 0)

1624 
p
 +
	`¢¥ötf
(p, 2, " ");

1628 i‡(
Êags
 != 0) {

1629 i‡(
Àn
 < 2)

1630 
p
 -2 - 
Àn
;

1631 
p
 +
	`¢¥ötf
(p, 2, ">");

1634  ()(
p
 - 
buf
);

1635 
	}
}

1639 
	$bcm_f‹m©_hex
(*
°r
, c⁄° *
byãs
, 
Àn
)

1641 
i
;

1642 *
p
 = 
°r
;

1643 c⁄° 
uöt8
 *
§c
 = (c⁄° uöt8*)
byãs
;

1645 
i
 = 0; i < 
Àn
; i++) {

1646 
p
 +
	`¢¥ötf
’, 3, "%02X", *
§c
);

1647 
§c
++;

1649  ()(
p
 - 
°r
);

1650 
	}
}

1655 
	$¥hex
(c⁄° *
msg
, 
uch¨
 *
buf
, 
uöt
 
nbyãs
)

1657 
löe
[128], *
p
;

1658 
Àn
 = (
löe
);

1659 
nch¨
;

1660 
uöt
 
i
;

1662 i‡(
msg
 && (msg[0] != '\0'))

1663 
	`¥ötf
("%s:\n", 
msg
);

1665 
p
 = 
löe
;

1666 
i
 = 0; i < 
nbyãs
; i++) {

1667 i‡(
i
 % 16 == 0) {

1668 
nch¨
 = 
	`¢¥ötf
(
p
, 
Àn
, " %04d: ", 
i
);

1669 
p
 +
nch¨
;

1670 
Àn
 -
nch¨
;

1672 i‡(
Àn
 > 0) {

1673 
nch¨
 = 
	`¢¥ötf
(
p
, 
Àn
, "%02x ", 
buf
[
i
]);

1674 
p
 +
nch¨
;

1675 
Àn
 -
nch¨
;

1678 i‡(
i
 % 16 == 15) {

1679 
	`¥ötf
("%s\n", 
löe
);

1680 
p
 = 
löe
;

1681 
Àn
 = (
löe
);

1686 i‡(
p
 !
löe
)

1687 
	`¥ötf
("%s\n", 
löe
);

1688 
	}
}

1690 c⁄° *
	g¸y±o_Ægo_«mes
[] = {

1702 #ifde‡
BCMWAPI_WPI


1709 
	$bcm_¸y±o_Ægo_«me
(
uöt
 
Ægo
)

1711  (
Ægo
 < 
	`ARRAYSIZE
(
¸y±o_Ægo_«mes
)) ? crypto_algo_names[algo] : "ERR";

1712 
	}
}

1716 
	$bcm_chù«me
(
uöt
 
chùid
, *
buf
, uöà
Àn
)

1718 c⁄° *
fmt
;

1720 
fmt
 = ((
chùid
 > 0xa000) || (chipid < 0x4000)) ? "%d" : "%x";

1721 
	`¢¥ötf
(
buf
, 
Àn
, 
fmt
, 
chùid
);

1722  
buf
;

1723 
	}
}

1727 
	$bcm_bªv_°r
(
uöt32
 
bªv
, *
buf
)

1729 i‡(
bªv
 < 0x100)

1730 
	`¢¥ötf
(
buf
, 8, "%d.%d", (
bªv
 & 0xf0) >> 4, brev & 0xf);

1732 
	`¢¥ötf
(
buf
, 8, "%c%03x", ((
bªv
 & 0xf000) == 0x1000) ? 'P' : 'A', brev & 0xfff);

1734  (
buf
);

1735 
	}
}

1737 
	#BUFSIZE_TODUMP_ATONCE
 512

	)

1741 
	$¥ötbig
(*
buf
)

1743 
uöt
 
Àn
, 
max_Àn
;

1744 
c
;

1746 
Àn
 = 
	`°æí
(
buf
);

1748 
max_Àn
 = 
BUFSIZE_TODUMP_ATONCE
;

1750 
Àn
 > 
max_Àn
) {

1751 
c
 = 
buf
[
max_Àn
];

1752 
buf
[
max_Àn
] = '\0';

1753 
	`¥ötf
("%s", 
buf
);

1754 
buf
[
max_Àn
] = 
c
;

1756 
buf
 +
max_Àn
;

1757 
Àn
 -
max_Àn
;

1760 
	`¥ötf
("%s\n", 
buf
);

1762 
	}
}

1765 
uöt


1766 
	$bcmdumpfõlds
(
bcmué_rdªg_πn
 
ªad_πn
, *
¨g0
, 
uöt
 
¨g1
, 
fõlddesc
 *
fõlddesc_¨øy
,

1767 *
buf
, 
uöt32
 
bufsize
)

1769 
uöt
 
fûÀd_Àn
;

1770 
Àn
;

1771 
fõlddesc
 *
cur_±r
;

1773 
fûÀd_Àn
 = 0;

1774 
cur_±r
 = 
fõlddesc_¨øy
;

1776 
bufsize
 > 1) {

1777 i‡(
cur_±r
->
«móndfmt
 =
NULL
)

1779 
Àn
 = 
	`¢¥ötf
(
buf
, 
bufsize
, 
cur_±r
->
«móndfmt
,

1780 
	`ªad_πn
(
¨g0
, 
¨g1
, 
cur_±r
->
off£t
));

1782 i‡(
Àn
 < 0 || (
uöt32
Óí >
bufsize
)

1783 
Àn
 = 
bufsize
 - 1;

1784 
buf
 +
Àn
;

1785 
bufsize
 -
Àn
;

1786 
fûÀd_Àn
 +
Àn
;

1787 
cur_±r
++;

1789  
fûÀd_Àn
;

1790 
	}
}

1792 
uöt


1793 
	$bcm_mkiov¨
(*
«me
, *
d©a
, 
uöt
 
d©Æí
, *
buf
, uöà
buÊí
)

1795 
uöt
 
Àn
;

1797 
Àn
 = 
	`°æí
(
«me
) + 1;

1799 i‡((
Àn
 + 
d©Æí
Ë> 
buÊí
)

1802 
	`°∫˝y
(
buf
, 
«me
, 
buÊí
);

1805 
	`mem˝y
(&
buf
[
Àn
], 
d©a
, 
d©Æí
);

1806 
Àn
 +
d©Æí
;

1808  
Àn
;

1809 
	}
}

1817 
	#QDBM_OFFSET
 153

	)

1818 
	#QDBM_TABLE_LEN
 40

	)

1823 
	#QDBM_TABLE_LOW_BOUND
 6493

	)

1829 
	#QDBM_TABLE_HIGH_BOUND
 64938

	)

1831 c⁄° 
uöt16
 
	gnqdBm_to_mW_m≠
[
QDBM_TABLE_LEN
] = {

1840 
uöt16


1841 
	$bcm_qdbm_to_mw
(
uöt8
 
qdbm
)

1843 
uöt
 
Á˘‹
 = 1;

1844 
idx
 = 
qdbm
 - 
QDBM_OFFSET
;

1846 i‡(
idx
 >
QDBM_TABLE_LEN
) {

1854 
idx
 < 0) {

1855 
idx
 += 40;

1856 
Á˘‹
 *= 10;

1862  ((
nqdBm_to_mW_m≠
[
idx
] + 
Á˘‹
/2) / factor);

1863 
	}
}

1865 
uöt8


1866 
	$bcm_mw_to_qdbm
(
uöt16
 
mw
)

1868 
uöt8
 
qdbm
;

1869 
off£t
;

1870 
uöt
 
mw_uöt
 = 
mw
;

1871 
uöt
 
bound¨y
;

1874 i‡(
mw_uöt
 <= 1)

1877 
off£t
 = 
QDBM_OFFSET
;

1880 
mw_uöt
 < 
QDBM_TABLE_LOW_BOUND
) {

1881 
mw_uöt
 *= 10;

1882 
off£t
 -= 40;

1885 
qdbm
 = 0; qdbm < 
QDBM_TABLE_LEN
-1; qdbm++) {

1886 
bound¨y
 = 
nqdBm_to_mW_m≠
[
qdbm
] + (nqdBm_to_mW_map[qdbm+1] -

1887 
nqdBm_to_mW_m≠
[
qdbm
])/2;

1888 i‡(
mw_uöt
 < 
bound¨y
) ;

1891 
qdbm
 +(
uöt8
)
off£t
;

1893  (
qdbm
);

1894 
	}
}

1897 
uöt


1898 
	$bcm_bôcou¡
(
uöt8
 *
bôm≠
, 
uöt
 
Àngth
)

1900 
uöt
 
bôcou¡
 = 0, 
i
;

1901 
uöt8
 
tmp
;

1902 
i
 = 0; i < 
Àngth
; i++) {

1903 
tmp
 = 
bôm≠
[
i
];

1904 
tmp
) {

1905 
bôcou¡
++;

1906 
tmp
 &= (tmp - 1);

1909  
bôcou¡
;

1910 
	}
}

1912 #ifde‡
BCMDRIVER


1916 
	$bcm_böô
(
bcm°rbuf
 *
b
, *
buf
, 
uöt
 
size
)

1918 
b
->
‹igsize
 = b->
size
 = size;

1919 
b
->
‹igbuf
 = b->
buf
 = buf;

1920 
	}
}

1924 
	$bcm_b¥ötf
(
bcm°rbuf
 *
b
, c⁄° *
fmt
, ...)

1926 
va_li°
 
≠
;

1927 
r
;

1929 
	`va_°¨t
(
≠
, 
fmt
);

1931 
r
 = 
	`v¢¥ötf
(
b
->
buf
, b->
size
, 
fmt
, 
≠
);

1940 i‡((
r
 =-1Ë|| (∏>()
b
->
size
)) {

1941 
b
->
size
 = 0;

1943 
b
->
size
 -
r
;

1944 
b
->
buf
 +
r
;

1947 
	`va_íd
(
≠
);

1949  
r
;

1950 
	}
}

1953 
	$bcm_b¥hex
(
bcm°rbuf
 *
b
, c⁄° *
msg
, 
boﬁ
 
√wlöe
, 
uöt8
 *
buf
, 
Àn
)

1955 
i
;

1957 i‡(
msg
 !
NULL
 && msg[0] != '\0')

1958 
	`bcm_b¥ötf
(
b
, "%s", 
msg
);

1959 
i
 = 0; i < 
Àn
; i ++)

1960 
	`bcm_b¥ötf
(
b
, "%02X", 
buf
[
i
]);

1961 i‡(
√wlöe
)

1962 
	`bcm_b¥ötf
(
b
, "\n");

1963 
	}
}

1966 
	$bcm_öc_byãs
(
uch¨
 *
num
, 
num_byãs
, 
uöt8
 
amou¡
)

1968 
i
;

1970 
i
 = 0; i < 
num_byãs
; i++) {

1971 
num
[
i
] +
amou¡
;

1972 i‡(
num
[
i
] >
amou¡
)

1974 
amou¡
 = 1;

1976 
	}
}

1979 
	$bcm_cmp_byãs
(c⁄° 
uch¨
 *
¨g1
, c⁄° uch¨ *
¨g2
, 
uöt8
 
nbyãs
)

1981 
i
;

1983 
i
 = 
nbyãs
 - 1; i >= 0; i--) {

1984 i‡(
¨g1
[
i
] !
¨g2
[i])

1985  (
¨g1
[
i
] - 
¨g2
[i]);

1988 
	}
}

1991 
	$bcm_¥öt_byãs
(c⁄° *
«me
, c⁄° 
uch¨
 *
d©a
, 
Àn
)

1993 
i
;

1994 
≥r_löe
 = 0;

1996 
	`¥ötf
("%s: %d \n", 
«me
 ?Çamê: "", 
Àn
);

1997 
i
 = 0; i < 
Àn
; i++) {

1998 
	`¥ötf
("%02x ", *
d©a
++);

1999 
≥r_löe
++;

2000 i‡(
≥r_löe
 == 16) {

2001 
≥r_löe
 = 0;

2002 
	`¥ötf
("\n");

2005 
	`¥ötf
("\n");

2006 
	}
}

2007 #i‡
deföed
(
WLTINYDUMP
Ë|| deföed(
WLMSG_INFORM
Ë|| deföed(
WLMSG_ASSOC
) || \

2008 
deföed
(
WLMSG_PRPKT
Ë|| 
	$deföed
(
WLMSG_WSEC
)

2009 
	#SSID_FMT_BUF_LEN
 ((4 * 
DOT11_MAX_SSID_LEN
Ë+ 1)

	)

2012 
	$bcm_f‹m©_ssid
(* 
buf
, c⁄° 
uch¨
 
ssid
[], 
uöt
 
ssid_Àn
)

2014 
uöt
 
i
, 
c
;

2015 *
p
 = 
buf
;

2016 *
ídp
 = 
buf
 + 
SSID_FMT_BUF_LEN
;

2018 i‡(
ssid_Àn
 > 
DOT11_MAX_SSID_LEN
) ssid_len = DOT11_MAX_SSID_LEN;

2020 
i
 = 0; i < 
ssid_Àn
; i++) {

2021 
c
 = (
uöt
)
ssid
[
i
];

2022 i‡(
c
 == '\\') {

2023 *
p
++ = '\\';

2024 *
p
++ = '\\';

2025 } i‡(
	`bcm_i•röt
((
uch¨
)
c
)) {

2026 *
p
++ = ()
c
;

2028 
p
 +
	`¢¥ötf
’, (
ídp
 -Ö), "\\x%02X", 
c
);

2031 *
p
 = '\0';

2032 
	`ASSERT
(
p
 < 
ídp
);

2034  ()(
p
 - 
buf
);

2035 
	}
}

2048 
	$¥o˚ss_nvøm_v¨s
(*
v¨buf
, 
Àn
)

2050 *
dp
;

2051 
boﬁ
 
födNewlöe
;

2052 
cﬁumn
;

2053 
buf_Àn
, 
n
;

2054 
∑d
 = 0;

2056 
dp
 = 
v¨buf
;

2058 
födNewlöe
 = 
FALSE
;

2059 
cﬁumn
 = 0;

2061 
n
 = 0;Ç < 
Àn
;Ç++) {

2062 i‡(
v¨buf
[
n
] == '\r')

2064 i‡(
födNewlöe
 && 
v¨buf
[
n
] != '\n')

2066 
födNewlöe
 = 
FALSE
;

2067 i‡(
v¨buf
[
n
] == '#') {

2068 
födNewlöe
 = 
TRUE
;

2071 i‡(
v¨buf
[
n
] == '\n') {

2072 i‡(
cﬁumn
 == 0)

2074 *
dp
++ = 0;

2075 
cﬁumn
 = 0;

2078 *
dp
++ = 
v¨buf
[
n
];

2079 
cﬁumn
++;

2081 
buf_Àn
 = ()(
dp
 - 
v¨buf
);

2082 i‡(
buf_Àn
 % 4) {

2083 
∑d
 = 4 - 
buf_Àn
 % 4;

2084 i‡(
∑d
 && (
buf_Àn
 +Öad <
Àn
)) {

2085 
buf_Àn
 +
∑d
;

2089 
dp
 < 
v¨buf
 + 
n
)

2090 *
dp
++ = 0;

2092  
buf_Àn
;

2093 
	}
}

	@bcmwifi_channels.c

28 
	~<bcm_cfg.h
>

29 
	~<ty≥defs.h
>

31 #ifde‡
BCMDRIVER


32 
	~<o¶.h
>

33 
	~<bcmutûs.h
>

34 
	#°πoul
(
≈å
, 
íd±r
, 
ba£
Ë
	`bcm_°πoul
(“±r), (íd±r), (ba£))

	)

35 
	#tﬁowî
(
c
Ë(
	`bcm_isuµî
((c)Ë? ((cË+ 'a' - 'A'Ë: (c))

	)

37 
	~<°dio.h
>

38 
	~<°dlib.h
>

39 
	~<˘y≥.h
>

40 #i‚de‡
ASSERT


41 
	#ASSERT
(
exp
)

	)

45 #ifde‡
_bcmwifi_c_


47 
	~<bcmwifi.h
>

49 
	~<bcmwifi_ch™√ls.h
>

52 #i‡
deföed
(
WIN32
Ë&& (deföed(
BCMDLL
Ë|| deföed(
WLMDLL
))

53 
	~<bcm°dlib.h
>

56 #i‚de‡
D11AC_IOTYPES


92 
	$wf_ch•ec_¡ﬂ
(
ch™•ec_t
 
ch•ec
, *
buf
)

94 c⁄° *
b™d
, *
bw
, *
sb
;

95 
uöt
 
ch™√l
;

97 
b™d
 = "";

98 
bw
 = "";

99 
sb
 = "";

100 
ch™√l
 = 
	`CHSPEC_CHANNEL
(
ch•ec
);

102 i‡((
	`CHSPEC_IS2G
(
ch•ec
Ë&& 
ch™√l
 > 
CH_MAX_2G_CHANNEL
) ||

103 (
	`CHSPEC_IS5G
(
ch•ec
Ë&& 
ch™√l
 <
CH_MAX_2G_CHANNEL
))

104 
b™d
 = (
	`CHSPEC_IS2G
(
ch•ec
)) ? "b" : "a";

105 i‡(
	`CHSPEC_IS40
(
ch•ec
)) {

106 i‡(
	`CHSPEC_SB_UPPER
(
ch•ec
)) {

107 
sb
 = "u";

108 
ch™√l
 +
CH_10MHZ_APART
;

110 
sb
 = "l";

111 
ch™√l
 -
CH_10MHZ_APART
;

113 } i‡(
	`CHSPEC_IS10
(
ch•ec
)) {

114 
bw
 = "n";

118 
	`¢¥ötf
(
buf
, 6, "%d%s%s%s", 
ch™√l
, 
b™d
, 
bw
, 
sb
);

119  (
buf
);

120 
	}
}

125 
ch™•ec_t


126 
	$wf_ch•ec_©⁄
(c⁄° *
a
)

128 *
ídp
 = 
NULL
;

129 
uöt
 
ch™√l
, 
b™d
, 
bw
, 
˘l_sb
;

130 
c
;

132 
ch™√l
 = 
	`°πoul
(
a
, &
ídp
, 10);

135 i‡(
ídp
 =
a
)

138 i‡(
ch™√l
 > 
MAXCHANNEL
)

141 
b™d
 = ((
ch™√l
 <
CH_MAX_2G_CHANNEL
Ë? 
WL_CHANSPEC_BAND_2G
 : 
WL_CHANSPEC_BAND_5G
);

142 
bw
 = 
WL_CHANSPEC_BW_20
;

143 
˘l_sb
 = 
WL_CHANSPEC_CTL_SB_NONE
;

145 
a
 = 
ídp
;

147 
c
 = 
	`tﬁowî
(
a
[0]);

148 i‡(
c
 == '\0')

149 
d⁄e
;

152 i‡(
c
 == 'a' || c == 'b') {

153 
b™d
 = (
c
 ='a'Ë? 
WL_CHANSPEC_BAND_5G
 : 
WL_CHANSPEC_BAND_2G
;

154 
a
++;

155 
c
 = 
	`tﬁowî
(
a
[0]);

156 i‡(
c
 == '\0')

157 
d⁄e
;

161 i‡(
c
 == 'n') {

162 
bw
 = 
WL_CHANSPEC_BW_10
;

163 } i‡(
c
 == 'l') {

164 
bw
 = 
WL_CHANSPEC_BW_40
;

165 
˘l_sb
 = 
WL_CHANSPEC_CTL_SB_LOWER
;

167 i‡(
ch™√l
 <(
MAXCHANNEL
 - 
CH_20MHZ_APART
))

168 
ch™√l
 +
CH_10MHZ_APART
;

171 } i‡(
c
 == 'u') {

172 
bw
 = 
WL_CHANSPEC_BW_40
;

173 
˘l_sb
 = 
WL_CHANSPEC_CTL_SB_UPPER
;

175 i‡(
ch™√l
 > 
CH_20MHZ_APART
)

176 
ch™√l
 -
CH_10MHZ_APART
;

183 
d⁄e
:

184  (
ch™√l
 | 
b™d
 | 
bw
 | 
˘l_sb
);

185 
	}
}

193 
boﬁ


194 
	$wf_ch•ec_mÆf‹med
(
ch™•ec_t
 
ch™•ec
)

197 i‡(!
	`CHSPEC_IS5G
(
ch™•ec
Ë&& !
	`CHSPEC_IS2G
(chanspec))

198  
TRUE
;

200 i‡(!
	`CHSPEC_IS40
(
ch™•ec
Ë&& !
	`CHSPEC_IS20
(chanspec))

201  
TRUE
;

204 i‡(
	`CHSPEC_IS20
(
ch™•ec
)) {

205 i‡(!
	`CHSPEC_SB_NONE
(
ch™•ec
))

206  
TRUE
;

208 i‡(!
	`CHSPEC_SB_UPPER
(
ch™•ec
Ë&& !
	`CHSPEC_SB_LOWER
(chanspec))

209  
TRUE
;

212  
FALSE
;

213 
	}
}

220 
uöt8


221 
	$wf_ch•ec_˘lch™
(
ch™•ec_t
 
ch•ec
)

223 
uöt8
 
˘l_ch™
;

226 i‡(
	`CHSPEC_CTL_SB
(
ch•ec
Ë=
WL_CHANSPEC_CTL_SB_NONE
) {

227  
	`CHSPEC_CHANNEL
(
ch•ec
);

230 
	`ASSERT
(
	`CHSPEC_BW
(
ch•ec
Ë=
WL_CHANSPEC_BW_40
);

234 i‡(
	`CHSPEC_CTL_SB
(
ch•ec
Ë=
WL_CHANSPEC_CTL_SB_UPPER
) {

236 
˘l_ch™
 = 
	`UPPER_20_SB
(
	`CHSPEC_CHANNEL
(
ch•ec
));

238 
	`ASSERT
(
	`CHSPEC_CTL_SB
(
ch•ec
Ë=
WL_CHANSPEC_CTL_SB_LOWER
);

240 
˘l_ch™
 = 
	`LOWER_20_SB
(
	`CHSPEC_CHANNEL
(
ch•ec
));

244  
˘l_ch™
;

245 
	}
}

247 
ch™•ec_t


248 
	$wf_ch•ec_˘lch•ec
(
ch™•ec_t
 
ch•ec
)

250 
ch™•ec_t
 
˘l_ch•ec
 = 0;

251 
uöt8
 
ch™√l
;

253 
	`ASSERT
(!
	`wf_ch•ec_mÆf‹med
(
ch•ec
));

256 i‡(
	`CHSPEC_CTL_SB
(
ch•ec
Ë=
WL_CHANSPEC_CTL_SB_NONE
) {

257  
ch•ec
;

259 i‡(
	`CHSPEC_CTL_SB
(
ch•ec
Ë=
WL_CHANSPEC_CTL_SB_UPPER
) {

260 
ch™√l
 = 
	`UPPER_20_SB
(
	`CHSPEC_CHANNEL
(
ch•ec
));

262 
ch™√l
 = 
	`LOWER_20_SB
(
	`CHSPEC_CHANNEL
(
ch•ec
));

264 
˘l_ch•ec
 = 
ch™√l
 | 
WL_CHANSPEC_BW_20
 | 
WL_CHANSPEC_CTL_SB_NONE
;

265 
˘l_ch•ec
 |
	`CHSPEC_BAND
(
ch•ec
);

267  
˘l_ch•ec
;

268 
	}
}

340 c⁄° *
	gwf_ch•ec_bw_°r
[] =

352 c⁄° 
uöt8
 
	gwf_ch•ec_bw_mhz
[] =

355 
	#WF_NUM_BW
 \

356 ((
wf_ch•ec_bw_mhz
)/(
uöt8
))

	)

359 c⁄° 
uöt8
 
	gwf_5g_40m_ch™s
[] =

361 
	#WF_NUM_5G_40M_CHANS
 \

362 ((
wf_5g_40m_ch™s
)/(
uöt8
))

	)

365 c⁄° 
uöt8
 
	gwf_5g_80m_ch™s
[] =

367 
	#WF_NUM_5G_80M_CHANS
 \

368 ((
wf_5g_80m_ch™s
)/(
uöt8
))

	)

371 c⁄° 
uöt8
 
	gwf_5g_160m_ch™s
[] =

373 
	#WF_NUM_5G_160M_CHANS
 \

374 ((
wf_5g_160m_ch™s
)/(
uöt8
))

	)

378 
uöt


379 
	$bw_ch•ec_to_mhz
(
ch™•ec_t
 
ch•ec
)

381 
uöt
 
bw
;

383 
bw
 = (
ch•ec
 & 
WL_CHANSPEC_BW_MASK
Ë>> 
WL_CHANSPEC_BW_SHIFT
;

384  (
bw
 >
WF_NUM_BW
 ? 0 : 
wf_ch•ec_bw_mhz
[bw]);

385 
	}
}

390 
uöt8


391 
	$˚¡î_ch™_to_edge
(
uöt
 
bw
)

397  (
uöt8
)(((
bw
 - 20) / 2) / 5);

398 
	}
}

403 
uöt8


404 
	$ch™√l_low_edge
(
uöt
 
˚¡î_ch
, uöà
bw
)

406  (
uöt8
)(
˚¡î_ch
 - 
	`˚¡î_ch™_to_edge
(
bw
));

407 
	}
}

413 
	$ch™√l_to_sb
(
uöt
 
˚¡î_ch
, uöà
˘l_ch
, uöà
bw
)

415 
uöt
 
lowe°
 = 
	`ch™√l_low_edge
(
˚¡î_ch
, 
bw
);

416 
uöt
 
sb
;

418 i‡((
˘l_ch
 - 
lowe°
) % 4) {

423 
sb
 = ((
˘l_ch
 - 
lowe°
) / 4);

426 i‡(
sb
 >(
bw
 / 20)) {

431  
sb
;

432 
	}
}

435 
uöt8


436 
	$ch™√l_to_˘l_ch™
(
uöt
 
˚¡î_ch
, uöà
bw
, uöà
sb
)

438  (
uöt8
)(
	`ch™√l_low_edge
(
˚¡î_ch
, 
bw
Ë+ 
sb
 * 4);

439 
	}
}

445 
	$ch™√l_80mhz_to_id
(
uöt
 
ch
)

447 
uöt
 
i
;

448 
i
 = 0; i < 
WF_NUM_5G_80M_CHANS
; i ++) {

449 i‡(
ch
 =
wf_5g_80m_ch™s
[
i
])

450  
i
;

454 
	}
}

462 
	$wf_ch•ec_¡ﬂ
(
ch™•ec_t
 
ch•ec
, *
buf
)

464 c⁄° *
b™d
;

465 
uöt
 
˘l_ch™
;

467 i‡(
	`wf_ch•ec_mÆf‹med
(
ch•ec
))

468  
NULL
;

470 
b™d
 = "";

473 i‡((
	`CHSPEC_IS2G
(
ch•ec
Ë&& 
	`CHSPEC_CHANNEL
(ch•ecË> 
CH_MAX_2G_CHANNEL
) ||

474 (
	`CHSPEC_IS5G
(
ch•ec
Ë&& 
	`CHSPEC_CHANNEL
(ch•ecË<
CH_MAX_2G_CHANNEL
))

475 
b™d
 = (
	`CHSPEC_IS2G
(
ch•ec
)) ? "2g" : "5g";

478 
˘l_ch™
 = 
	`wf_ch•ec_˘lch™
(
ch•ec
);

481 i‡(
	`CHSPEC_IS20
(
ch•ec
)) {

482 
	`¢¥ötf
(
buf
, 
CHANSPEC_STR_LEN
, "%s%d", 
b™d
, 
˘l_ch™
);

483 } i‡(!
	`CHSPEC_IS8080
(
ch•ec
)) {

484 c⁄° *
bw
;

485 c⁄° *
sb
 = "";

487 
bw
 = 
wf_ch•ec_bw_°r
[(
ch•ec
 & 
WL_CHANSPEC_BW_MASK
Ë>> 
WL_CHANSPEC_BW_SHIFT
];

489 #ifde‡
CHANSPEC_NEW_40MHZ_FORMAT


491 i‡(
	`CHSPEC_IS40
(
ch•ec
Ë&& 
	`CHSPEC_IS2G
(chspec)) {

492 
sb
 = 
	`CHSPEC_SB_UPPER
(
ch•ec
) ? "u" : "l";

495 
	`¢¥ötf
(
buf
, 
CHANSPEC_STR_LEN
, "%s%d/%s%s", 
b™d
, 
˘l_ch™
, 
bw
, 
sb
);

498 i‡(
	`CHSPEC_IS40
(
ch•ec
)) {

499 
sb
 = 
	`CHSPEC_SB_UPPER
(
ch•ec
) ? "u" : "l";

500 
	`¢¥ötf
(
buf
, 
CHANSPEC_STR_LEN
, "%s%d%s", 
b™d
, 
˘l_ch™
, 
sb
);

502 
	`¢¥ötf
(
buf
, 
CHANSPEC_STR_LEN
, "%s%d/%s", 
b™d
, 
˘l_ch™
, 
bw
);

508 
uöt
 
ch™1
 = (
ch•ec
 & 
WL_CHANSPEC_CHAN1_MASK
Ë>> 
WL_CHANSPEC_CHAN1_SHIFT
;

509 
uöt
 
ch™2
 = (
ch•ec
 & 
WL_CHANSPEC_CHAN2_MASK
Ë>> 
WL_CHANSPEC_CHAN2_SHIFT
;

512 
ch™1
 = (ch™1 < 
WF_NUM_5G_80M_CHANS
Ë? 
wf_5g_80m_ch™s
[chan1] : 0;

513 
ch™2
 = (ch™2 < 
WF_NUM_5G_80M_CHANS
Ë? 
wf_5g_80m_ch™s
[chan2] : 0;

516 
	`¢¥ötf
(
buf
, 
CHANSPEC_STR_LEN
, "%d/80+80/%d-%d", 
˘l_ch™
, 
ch™1
, 
ch™2
);

519  (
buf
);

520 
	}
}

523 
	$ªad_uöt
(c⁄° **
p
, *
num
)

525 
vÆ
;

526 *
ídp
 = 
NULL
;

528 
vÆ
 = 
	`°πoul
(*
p
, &
ídp
, 10);

530 i‡(
ídp
 =*
p
)

534 *
p
 = 
ídp
;

536 *
num
 = ()
vÆ
;

539 
	}
}

544 
ch™•ec_t


545 
	$wf_ch•ec_©⁄
(c⁄° *
a
)

547 
ch™•ec_t
 
ch•ec
;

548 
uöt
 
ch•ec_ch
, 
ch•ec_b™d
, 
bw
, 
ch•ec_bw
, 
ch•ec_sb
;

549 
uöt
 
num
, 
˘l_ch
;

550 
uöt
 
ch1
, 
ch2
;

551 
c
, 
sb_ul
 = '\0';

552 
i
;

554 
bw
 = 20;

555 
ch•ec_sb
 = 0;

556 
ch•ec_ch
 = 
ch1
 = 
ch2
 = 0;

559 i‡(!
	`ªad_uöt
(&
a
, &
num
))

563 
c
 = 
	`tﬁowî
(
a
[0]);

564 i‡(
c
 == 'g') {

565 
a
 ++;

568 i‡(
num
 == 2)

569 
ch•ec_b™d
 = 
WL_CHANSPEC_BAND_2G
;

570 i‡(
num
 == 5)

571 
ch•ec_b™d
 = 
WL_CHANSPEC_BAND_5G
;

576 i‡(!
	`ªad_uöt
(&
a
, &
˘l_ch
))

579 
c
 = 
	`tﬁowî
(
a
[0]);

583 
˘l_ch
 = 
num
;

584 
ch•ec_b™d
 = ((
˘l_ch
 <
CH_MAX_2G_CHANNEL
) ?

585 
WL_CHANSPEC_BAND_2G
 : 
WL_CHANSPEC_BAND_5G
);

588 i‡(
c
 == '\0') {

590 
ch•ec_bw
 = 
WL_CHANSPEC_BW_20
;

591 
d⁄e_ªad
;

594 
a
 ++;

597 i‡(
c
 == 'u' || c == 'l') {

598 
sb_ul
 = 
c
;

599 
ch•ec_bw
 = 
WL_CHANSPEC_BW_40
;

600 
d⁄e_ªad
;

604 i‡(
c
 != '/')

608 i‡(!
	`ªad_uöt
(&
a
, &
bw
))

612 i‡(
bw
 == 20) {

613 
ch•ec_bw
 = 
WL_CHANSPEC_BW_20
;

614 } i‡(
bw
 == 40) {

615 
ch•ec_bw
 = 
WL_CHANSPEC_BW_40
;

616 } i‡(
bw
 == 80) {

617 
ch•ec_bw
 = 
WL_CHANSPEC_BW_80
;

618 } i‡(
bw
 == 160) {

619 
ch•ec_bw
 = 
WL_CHANSPEC_BW_160
;

629 
c
 = 
	`tﬁowî
(
a
[0]);

632 i‡(
ch•ec_b™d
 =
WL_CHANSPEC_BAND_2G
 && 
bw
 == 40) {

633 i‡(
c
 == 'u' || c == 'l') {

634 
a
 ++;

635 
sb_ul
 = 
c
;

636 
d⁄e_ªad
;

641 i‡(
c
 == '+') {

643 c⁄° *
∂us80
 = "80/";

648 
ch•ec_bw
 = 
WL_CHANSPEC_BW_8080
;

650 
a
 ++;

653 
i
 = 0; i < 3; i++) {

654 i‡(*
a
++ !*
∂us80
++) {

660 i‡(!
	`ªad_uöt
(&
a
, &
ch1
))

664 i‡(
a
[0] != '-')

666 
a
 ++;

669 i‡(!
	`ªad_uöt
(&
a
, &
ch2
))

673 
d⁄e_ªad
:

675 
a
[0] == ' ') {

676 
a
 ++;

680 i‡(
a
[0] != '\0')

693 i‡(
sb_ul
 != '\0') {

694 i‡(
sb_ul
 == 'l') {

695 
ch•ec_ch
 = 
	`UPPER_20_SB
(
˘l_ch
);

696 
ch•ec_sb
 = 
WL_CHANSPEC_CTL_SB_LLL
;

697 } i‡(
sb_ul
 == 'u') {

698 
ch•ec_ch
 = 
	`LOWER_20_SB
(
˘l_ch
);

699 
ch•ec_sb
 = 
WL_CHANSPEC_CTL_SB_LLU
;

703 i‡(
ch•ec_bw
 =
WL_CHANSPEC_BW_20
) {

704 
ch•ec_ch
 = 
˘l_ch
;

705 
ch•ec_sb
 = 0;

710 i‡(
ch•ec_bw
 !
WL_CHANSPEC_BW_8080
) {

712 c⁄° 
uöt8
 *
˚¡î_ch
 = 
NULL
;

713 
num_ch
 = 0;

714 
sb
 = -1;

716 i‡(
ch•ec_bw
 =
WL_CHANSPEC_BW_40
) {

717 
˚¡î_ch
 = 
wf_5g_40m_ch™s
;

718 
num_ch
 = 
WF_NUM_5G_40M_CHANS
;

719 } i‡(
ch•ec_bw
 =
WL_CHANSPEC_BW_80
) {

720 
˚¡î_ch
 = 
wf_5g_80m_ch™s
;

721 
num_ch
 = 
WF_NUM_5G_80M_CHANS
;

722 } i‡(
ch•ec_bw
 =
WL_CHANSPEC_BW_160
) {

723 
˚¡î_ch
 = 
wf_5g_160m_ch™s
;

724 
num_ch
 = 
WF_NUM_5G_160M_CHANS
;

729 
i
 = 0; i < 
num_ch
; i ++) {

730 
sb
 = 
	`ch™√l_to_sb
(
˚¡î_ch
[
i
], 
˘l_ch
, 
bw
);

731 i‡(
sb
 >= 0) {

732 
ch•ec_ch
 = 
˚¡î_ch
[
i
];

733 
ch•ec_sb
 = 
sb
 << 
WL_CHANSPEC_CTL_SB_SHIFT
;

739 i‡(
sb
 < 0) {

745 
ch1_id
 = 0, 
ch2_id
 = 0;

746 
sb
;

748 
ch1_id
 = 
	`ch™√l_80mhz_to_id
(
ch1
);

749 
ch2_id
 = 
	`ch™√l_80mhz_to_id
(
ch2
);

752 i‡(
ch1
 >
ch2
 || 
ch1_id
 < 0 || 
ch2_id
 < 0)

756 
ch•ec_ch
 = (((
uöt16
)
ch1_id
 << 
WL_CHANSPEC_CHAN1_SHIFT
) |

757 ((
uöt16
)
ch2_id
 << 
WL_CHANSPEC_CHAN2_SHIFT
));

762 
sb
 = 
	`ch™√l_to_sb
(
ch1
, 
˘l_ch
, 
bw
);

763 i‡(
sb
 < 0) {

765 
sb
 = 
	`ch™√l_to_sb
(
ch2
, 
˘l_ch
, 
bw
);

766 i‡(
sb
 < 0) {

773 
sb
 += 4;

776 
ch•ec_sb
 = 
sb
 << 
WL_CHANSPEC_CTL_SB_SHIFT
;

779 
ch•ec
 = (
ch•ec_ch
 | 
ch•ec_b™d
 | 
ch•ec_bw
 | 
ch•ec_sb
);

781 i‡(
	`wf_ch•ec_mÆf‹med
(
ch•ec
))

784  
ch•ec
;

785 
	}
}

793 
boﬁ


794 
	$wf_ch•ec_mÆf‹med
(
ch™•ec_t
 
ch™•ec
)

796 
uöt
 
ch•ec_bw
 = 
	`CHSPEC_BW
(
ch™•ec
);

797 
uöt
 
ch•ec_ch
 = 
	`CHSPEC_CHANNEL
(
ch™•ec
);

800 i‡(
	`CHSPEC_IS2G
(
ch™•ec
)) {

802 i‡(
ch•ec_bw
 !
WL_CHANSPEC_BW_20
 &&

803 
ch•ec_bw
 !
WL_CHANSPEC_BW_40
) {

804  
TRUE
;

806 } i‡(
	`CHSPEC_IS5G
(
ch™•ec
)) {

807 i‡(
ch•ec_bw
 =
WL_CHANSPEC_BW_8080
) {

808 
uöt
 
ch1_id
, 
ch2_id
;

811 
ch1_id
 = 
	`CHSPEC_CHAN1
(
ch™•ec
);

812 
ch2_id
 = 
	`CHSPEC_CHAN2
(
ch™•ec
);

813 i‡(
ch1_id
 >
WF_NUM_5G_80M_CHANS
 || 
ch2_id
 >= WF_NUM_5G_80M_CHANS)

814  
TRUE
;

817 i‡(
ch2_id
 <
ch1_id
)

818  
TRUE
;

819 } i‡(
ch•ec_bw
 =
WL_CHANSPEC_BW_20
 || ch•ec_bw =
WL_CHANSPEC_BW_40
 ||

820 
ch•ec_bw
 =
WL_CHANSPEC_BW_80
 || ch•ec_bw =
WL_CHANSPEC_BW_160
) {

822 i‡(
ch•ec_ch
 > 
MAXCHANNEL
) {

823  
TRUE
;

827  
TRUE
;

831  
TRUE
;

835 i‡(
ch•ec_bw
 =
WL_CHANSPEC_BW_20
) {

836 i‡(
	`CHSPEC_CTL_SB
(
ch™•ec
Ë!
WL_CHANSPEC_CTL_SB_LLL
)

837  
TRUE
;

838 } i‡(
ch•ec_bw
 =
WL_CHANSPEC_BW_40
) {

839 i‡(
	`CHSPEC_CTL_SB
(
ch™•ec
Ë> 
WL_CHANSPEC_CTL_SB_LLU
)

840  
TRUE
;

841 } i‡(
ch•ec_bw
 =
WL_CHANSPEC_BW_80
) {

842 i‡(
	`CHSPEC_CTL_SB
(
ch™•ec
Ë> 
WL_CHANSPEC_CTL_SB_LUU
)

843  
TRUE
;

846  
FALSE
;

847 
	}
}

853 
boﬁ


854 
	$wf_ch•ec_vÆid
(
ch™•ec_t
 
ch™•ec
)

856 
uöt
 
ch•ec_bw
 = 
	`CHSPEC_BW
(
ch™•ec
);

857 
uöt
 
ch•ec_ch
 = 
	`CHSPEC_CHANNEL
(
ch™•ec
);

859 i‡(
	`wf_ch•ec_mÆf‹med
(
ch™•ec
))

860  
FALSE
;

862 i‡(
	`CHSPEC_IS2G
(
ch™•ec
)) {

864 i‡(
ch•ec_bw
 =
WL_CHANSPEC_BW_20
) {

865 i‡(
ch•ec_ch
 >= 1 && chspec_ch <= 14)

866  
TRUE
;

867 } i‡(
ch•ec_bw
 =
WL_CHANSPEC_BW_40
) {

868 i‡(
ch•ec_ch
 >= 3 && chspec_ch <= 11)

869  
TRUE
;

871 } i‡(
	`CHSPEC_IS5G
(
ch™•ec
)) {

872 i‡(
ch•ec_bw
 =
WL_CHANSPEC_BW_8080
) {

873 
uöt16
 
ch1
, 
ch2
;

875 
ch1
 = 
wf_5g_80m_ch™s
[
	`CHSPEC_CHAN1
(
ch™•ec
)];

876 
ch2
 = 
wf_5g_80m_ch™s
[
	`CHSPEC_CHAN2
(
ch™•ec
)];

881 i‡(
ch2
 > 
ch1
 + 
CH_80MHZ_APART
)

882  
TRUE
;

884 c⁄° 
uöt8
 *
˚¡î_ch
;

885 
uöt
 
num_ch
, 
i
;

887 i‡(
ch•ec_bw
 =
WL_CHANSPEC_BW_20
 || ch•ec_bw =
WL_CHANSPEC_BW_40
) {

888 
˚¡î_ch
 = 
wf_5g_40m_ch™s
;

889 
num_ch
 = 
WF_NUM_5G_40M_CHANS
;

890 } i‡(
ch•ec_bw
 =
WL_CHANSPEC_BW_80
) {

891 
˚¡î_ch
 = 
wf_5g_80m_ch™s
;

892 
num_ch
 = 
WF_NUM_5G_80M_CHANS
;

893 } i‡(
ch•ec_bw
 =
WL_CHANSPEC_BW_160
) {

894 
˚¡î_ch
 = 
wf_5g_160m_ch™s
;

895 
num_ch
 = 
WF_NUM_5G_160M_CHANS
;

898  
FALSE
;

902 i‡(
ch•ec_bw
 =
WL_CHANSPEC_BW_20
) {

907 
i
 = 0; i < 
num_ch
; i ++) {

908 i‡(
ch•ec_ch
 =(
uöt
)
	`LOWER_20_SB
(
˚¡î_ch
[
i
]) ||

909 
ch•ec_ch
 =(
uöt
)
	`UPPER_20_SB
(
˚¡î_ch
[
i
]))

913 i‡(
i
 =
num_ch
) {

915 i‡(
ch•ec_ch
 == 34 || chspec_ch == 38 ||

916 
ch•ec_ch
 == 42 || chspec_ch == 46)

917 
i
 = 0;

921 
i
 = 0; i < 
num_ch
; i ++) {

922 i‡(
ch•ec_ch
 =
˚¡î_ch
[
i
])

927 i‡(
i
 < 
num_ch
) {

929  
TRUE
;

934  
FALSE
;

935 
	}
}

942 
uöt8


943 
	$wf_ch•ec_˘lch™
(
ch™•ec_t
 
ch•ec
)

945 
uöt
 
˚¡î_ch™
;

946 
uöt
 
bw_mhz
;

947 
uöt
 
sb
;

949 
	`ASSERT
(!
	`wf_ch•ec_mÆf‹med
(
ch•ec
));

952 i‡(
	`CHSPEC_IS20
(
ch•ec
)) {

953  
	`CHSPEC_CHANNEL
(
ch•ec
);

955 
sb
 = 
	`CHSPEC_CTL_SB
(
ch•ec
Ë>> 
WL_CHANSPEC_CTL_SB_SHIFT
;

957 i‡(
	`CHSPEC_IS8080
(
ch•ec
)) {

958 
bw_mhz
 = 80;

960 i‡(
sb
 < 4) {

961 
˚¡î_ch™
 = 
	`CHSPEC_CHAN1
(
ch•ec
);

964 
˚¡î_ch™
 = 
	`CHSPEC_CHAN2
(
ch•ec
);

965 
sb
 -= 4;

969 
˚¡î_ch™
 = 
wf_5g_80m_ch™s
[center_chan];

972 
bw_mhz
 = 
	`bw_ch•ec_to_mhz
(
ch•ec
);

973 
˚¡î_ch™
 = 
	`CHSPEC_CHANNEL
(
ch•ec
Ë>> 
WL_CHANSPEC_CHAN_SHIFT
;

976  (
	`ch™√l_to_˘l_ch™
(
˚¡î_ch™
, 
bw_mhz
, 
sb
));

978 
	}
}

983 
ch™•ec_t


984 
	$wf_ch•ec_˘lch•ec
(
ch™•ec_t
 
ch•ec
)

986 
ch™•ec_t
 
˘l_ch•ec
 = 
ch•ec
;

987 
uöt8
 
˘l_ch™
;

989 
	`ASSERT
(!
	`wf_ch•ec_mÆf‹med
(
ch•ec
));

992 i‡(!
	`CHSPEC_IS20
(
ch•ec
)) {

993 
˘l_ch™
 = 
	`wf_ch•ec_˘lch™
(
ch•ec
);

994 
˘l_ch•ec
 = 
˘l_ch™
 | 
WL_CHANSPEC_BW_20
;

995 
˘l_ch•ec
 |
	`CHSPEC_BAND
(
ch•ec
);

997  
˘l_ch•ec
;

998 
	}
}

1003 
uöt16


1004 
	$wf_ch™√l2ch•ec
(
uöt
 
˘l_ch
, uöà
bw
)

1006 
uöt16
 
ch•ec
;

1007 c⁄° 
uöt8
 *
˚¡î_ch
 = 
NULL
;

1008 
num_ch
 = 0;

1009 
sb
 = -1;

1010 
i
 = 0;

1012 
ch•ec
 = ((
˘l_ch
 <
CH_MAX_2G_CHANNEL
Ë? 
WL_CHANSPEC_BAND_2G
 : 
WL_CHANSPEC_BAND_5G
);

1014 
ch•ec
 |
bw
;

1016 i‡(
bw
 =
WL_CHANSPEC_BW_40
) {

1017 
˚¡î_ch
 = 
wf_5g_40m_ch™s
;

1018 
num_ch
 = 
WF_NUM_5G_40M_CHANS
;

1019 
bw
 = 40;

1020 } i‡(
bw
 =
WL_CHANSPEC_BW_80
) {

1021 
˚¡î_ch
 = 
wf_5g_80m_ch™s
;

1022 
num_ch
 = 
WF_NUM_5G_80M_CHANS
;

1023 
bw
 = 80;

1024 } i‡(
bw
 =
WL_CHANSPEC_BW_160
) {

1025 
˚¡î_ch
 = 
wf_5g_160m_ch™s
;

1026 
num_ch
 = 
WF_NUM_5G_160M_CHANS
;

1027 
bw
 = 160;

1028 } i‡(
bw
 =
WL_CHANSPEC_BW_20
) {

1029 
ch•ec
 |
˘l_ch
;

1030  
ch•ec
;

1035 
i
 = 0; i < 
num_ch
; i ++) {

1036 
sb
 = 
	`ch™√l_to_sb
(
˚¡î_ch
[
i
], 
˘l_ch
, 
bw
);

1037 i‡(
sb
 >= 0) {

1038 
ch•ec
 |
˚¡î_ch
[
i
];

1039 
ch•ec
 |(
sb
 << 
WL_CHANSPEC_CTL_SB_SHIFT
);

1045 i‡(
sb
 < 0) {

1049  
ch•ec
;

1050 
	}
}

1058 
ch™•ec_t
 
	$wf_ch•ec_¥im¨y40_ch•ec
(
ch™•ec_t
 
ch•ec
)

1060 
ch™•ec_t
 
ch•ec40
 = 
ch•ec
;

1061 
uöt
 
˚¡î_ch™
;

1062 
uöt
 
sb
;

1064 
	`ASSERT
(!
	`wf_ch•ec_mÆf‹med
(
ch•ec
));

1066 i‡(
	`CHSPEC_IS80
(
ch•ec
)) {

1067 
˚¡î_ch™
 = 
	`CHSPEC_CHANNEL
(
ch•ec
);

1068 
sb
 = 
	`CHSPEC_CTL_SB
(
ch•ec
);

1070 i‡(
sb
 =
WL_CHANSPEC_CTL_SB_UL
) {

1072 
sb
 = 
WL_CHANSPEC_CTL_SB_L
;

1073 
˚¡î_ch™
 +
CH_20MHZ_APART
;

1074 } i‡(
sb
 =
WL_CHANSPEC_CTL_SB_UU
) {

1076 
sb
 = 
WL_CHANSPEC_CTL_SB_U
;

1077 
˚¡î_ch™
 +
CH_20MHZ_APART
;

1081 
˚¡î_ch™
 -
CH_20MHZ_APART
;

1085 
ch•ec40
 = (
WL_CHANSPEC_BAND_5G
 | 
WL_CHANSPEC_BW_40
 |

1086 
sb
 | 
˚¡î_ch™
);

1089  
ch•ec40
;

1090 
	}
}

1112 
	$wf_mhz2ch™√l
(
uöt
 
‰eq
, uöà
°¨t_Á˘‹
)

1114 
ch
 = -1;

1115 
uöt
 
ba£
;

1116 
off£t
;

1119 i‡(
°¨t_Á˘‹
 == 0) {

1120 i‡(
‰eq
 >= 2400 && freq <= 2500)

1121 
°¨t_Á˘‹
 = 
WF_CHAN_FACTOR_2_4_G
;

1122 i‡(
‰eq
 >= 5000 && freq <= 6000)

1123 
°¨t_Á˘‹
 = 
WF_CHAN_FACTOR_5_G
;

1126 i‡(
‰eq
 =2484 && 
°¨t_Á˘‹
 =
WF_CHAN_FACTOR_2_4_G
)

1129 
ba£
 = 
°¨t_Á˘‹
 / 2;

1132 i‡((
‰eq
 < 
ba£
) || (freq > base + 1000))

1135 
off£t
 = 
‰eq
 - 
ba£
;

1136 
ch
 = 
off£t
 / 5;

1139 i‡(
off£t
 !(
ch
 * 5))

1143 i‡(
°¨t_Á˘‹
 =
WF_CHAN_FACTOR_2_4_G
 && (
ch
 < 1 || ch > 13))

1146  
ch
;

1147 
	}
}

1166 
	$wf_ch™√l2mhz
(
uöt
 
ch
, uöà
°¨t_Á˘‹
)

1168 
‰eq
;

1170 i‡((
°¨t_Á˘‹
 =
WF_CHAN_FACTOR_2_4_G
 && (
ch
 < 1 || ch > 14)) ||

1171 (
ch
 > 200))

1172 
‰eq
 = -1;

1173 i‡((
°¨t_Á˘‹
 =
WF_CHAN_FACTOR_2_4_G
Ë&& (
ch
 == 14))

1174 
‰eq
 = 2484;

1176 
‰eq
 = 
ch
 * 5 + 
°¨t_Á˘‹
 / 2;

1178  
‰eq
;

1179 
	}
}

	@dhd_bta.c

26 #i‚de‡
WLBTAMP


30 
	~<ty≥defs.h
>

31 
	~<o¶.h
>

32 
	~<bcmcdc.h
>

33 
	~<bcmutûs.h
>

34 
	~<bcmídün.h
>

35 
	~<¥Ÿo/802.11.h
>

36 
	~<¥Ÿo/802.11_bè.h
>

37 
	~<¥Ÿo/bt_amp_hci.h
>

38 
	~<dngl_°©s.h
>

39 
	~<dhd.h
>

40 
	~<dhd_bus.h
>

41 
	~<dhd_¥Ÿo.h
>

42 
	~<dhdio˘l.h
>

43 
	~<dhd_dbg.h
>

45 
	~<dhd_bè.h
>

48 #ifde‡
SEND_HCI_CMD_VIA_IOCTL


49 
	#BTA_HCI_CMD_MAX_LEN
 
HCI_CMD_PREAMBLE_SIZE
 + 
HCI_CMD_DATA_SIZE


	)

53 
	$dhd_bè_docmd
(
dhd_pub_t
 *
pub
, *
cmd_buf
, 
uöt
 
cmd_Àn
)

55 
amp_hci_cmd_t
 *
cmd
 = (amp_hci_cmd_à*)
cmd_buf
;

56 
uöt8
 
buf
[
BTA_HCI_CMD_MAX_LEN
 + 16];

57 
uöt
 
Àn
 = (
buf
);

58 
wl_io˘l_t
 
ioc
;

60 i‡(
cmd_Àn
 < 
HCI_CMD_PREAMBLE_SIZE
)

61  
BCME_BADLEN
;

63 i‡((
uöt
)
cmd
->
∂í
 + 
HCI_CMD_PREAMBLE_SIZE
 > 
cmd_Àn
)

64  
BCME_BADLEN
;

66 
Àn
 = 
	`bcm_mkiov¨
("HCI_cmd",

67 (*)
cmd
, (
uöt
)cmd->
∂í
 + 
HCI_CMD_PREAMBLE_SIZE
, (*)
buf
, 
Àn
);

70 
	`mem£t
(&
ioc
, 0, (ioc));

72 
ioc
.
cmd
 = 
WLC_SET_VAR
;

73 
ioc
.
buf
 = buf;

74 
ioc
.
Àn
 =Üen;

75 
ioc
.
£t
 = 
TRUE
;

77  
	`dhd_wl_io˘l
(
pub
, &
ioc
, ioc.
buf
, ioc.
Àn
);

78 
	}
}

82 
	$dhd_bè_Êush_hcid©a
(
dhd_pub_t
 *
pub
, 
uöt16
 
Œh
)

84 
¥ec
;

85 
pktq
 *
q
;

86 
uöt
 
cou¡
 = 0;

88 
q
 = 
	`dhd_bus_txq
(
pub
->
bus
);

89 i‡(
q
 =
NULL
)

92 
	`DHD_BTA
(("dhd: flushög HCI ACL d©®f‹Üogiˇ»lök %u...\n", 
Œh
));

94 
	`dhd_os_sdlock_txq
(
pub
);

97 
	`PKTQ_PREC_ITER
(
q
, 
¥ec
) {

98 *
hód_pkt
 = 
NULL
;

100 
	`pktq_µìk
(
q
, 
¥ec
Ë!
hód_pkt
) {

101 *
pkt
 = 
	`pktq_pdeq
(
q
, 
¥ec
);

102 
ifidx
;

104 
	`PKTPULL
(
pub
->
osh
, 
pkt
, 
	`dhd_bus_hdæí
’ub->
bus
));

105 
	`dhd_¥Ÿ_hdΩuŒ
(
pub
, &
ifidx
, 
pkt
, 
NULL
, NULL);

107 i‡(
	`PKTLEN
(
pub
->
osh
, 
pkt
Ë>
RFC1042_HDR_LEN
) {

108 
ëhî_hódî
 *
eh
 =

109 (
ëhî_hódî
 *)
	`PKTDATA
(
pub
->
osh
, 
pkt
);

111 i‡(
	`¡oh16
(
eh
->
ëhî_ty≥
Ë< 
ETHER_TYPE_MIN
) {

112 
dŸ11_Œc_¢≠_hódî
 *
lsh
 =

113 (
dŸ11_Œc_¢≠_hódî
 *)&
eh
[1];

115 i‡(
	`bcmp
(
lsh
, 
BT_SIG_SNAP_MPROT
,

116 
DOT11_LLC_SNAP_HDR_LEN
 - 2) == 0 &&

117 
	`¡oh16
(
lsh
->
ty≥
Ë=
BTA_PROT_L2CAP
) {

118 
amp_hci_ACL_d©a_t
 *
ACL_d©a
 =

119 (
amp_hci_ACL_d©a_t
 *)&
lsh
[1];

120 
uöt16
 
h™dÀ
 = 
	`…oh16
(
ACL_d©a
->handle);

122 i‡(
	`HCI_ACL_DATA_HANDLE
(
h™dÀ
Ë=
Œh
) {

123 
	`PKTFREE
(
pub
->
osh
, 
pkt
, 
TRUE
);

124 
cou¡
 ++;

131 
	`dhd_¥Ÿ_hdΩush
(
pub
, 
ifidx
, 
pkt
);

132 
	`PKTPUSH
(
pub
->
osh
, 
pkt
, 
	`dhd_bus_hdæí
’ub->
bus
));

134 i‡(
hód_pkt
 =
NULL
)

135 
hód_pkt
 = 
pkt
;

136 
	`pktq_≥nq
(
q
, 
¥ec
, 
pkt
);

140 
	`dhd_os_sdu∆ock_txq
(
pub
);

142 
	`DHD_BTA
(("dhd: flushed %uÖackë(sËf‹Üogiˇ»lök %u...\n", 
cou¡
, 
Œh
));

143 
	}
}

151 
	$_dhd_bè_docmd
(
dhd_pub_t
 *
pub
, 
amp_hci_cmd_t
 *
cmd
)

153 
°©us
 = 0;

155 
	`…oh16_ua
((
uöt8
 *)&
cmd
->
›code
)) {

156 
HCI_Enh™˚d_Flush
: {

157 
eÊush_cmd_∑rms_t
 *
cmd∑rms
 = (eÊush_cmd_∑rms_à*)
cmd
->
∑rms
;

158 
	`dhd_bè_Êush_hcid©a
(
pub
, 
	`…oh16_ua
(
cmd∑rms
->
Œh
));

165  
°©us
;

166 
	}
}

170 
	$dhd_bè_docmd
(
dhd_pub_t
 *
pub
, *
cmd_buf
, 
uöt
 
cmd_Àn
)

172 
amp_hci_cmd_t
 *
cmd
 = (amp_hci_cmd_à*)
cmd_buf
;

173 
ëhî_hódî
 *
eh
;

174 
dŸ11_Œc_¢≠_hódî
 *
lsh
;

175 
o¶_t
 *
osh
 = 
pub
->osh;

176 
uöt
 
Àn
;

177 *
p
;

178 
°©us
;

180 i‡(
cmd_Àn
 < 
HCI_CMD_PREAMBLE_SIZE
) {

181 
	`DHD_ERROR
(("dhd_bè_docmd: sh‹àcomm™d, cmd_À¿%u\n", 
cmd_Àn
));

182  
BCME_BADLEN
;

185 i‡((
Àn
 = (
uöt
)
cmd
->
∂í
 + 
HCI_CMD_PREAMBLE_SIZE
Ë> 
cmd_Àn
) {

186 
	`DHD_ERROR
(("dhd_bta_docmd: malformed command,Üen %u cmd_len %u\n",

187 
Àn
, 
cmd_Àn
));

191 
p
 = 
	`PKTGET
(
osh
, 
pub
->
hdæí
 + 
RFC1042_HDR_LEN
 + 
Àn
, 
TRUE
);

192 i‡(
p
 =
NULL
) {

193 
	`DHD_ERROR
(("dhd_bta_docmd: out of memory\n"));

194  
BCME_NOMEM
;

199 i‡((
°©us
 = 
	`_dhd_bè_docmd
(
pub
, 
cmd
)) > 0)

201 i‡(
°©us
 < 0)

202  
°©us
;

205 
	`PKTPULL
(
osh
, 
p
, 
pub
->
hdæí
 + 
RFC1042_HDR_LEN
);

206 
	`bc›y
(
cmd
, 
	`PKTDATA
(
osh
, 
p
), 
Àn
);

209 
	`PKTPUSH
(
osh
, 
p
, 
RFC1042_HDR_LEN
);

210 
eh
 = (
ëhî_hódî
 *)
	`PKTDATA
(
osh
, 
p
);

211 
	`bzîo
(
eh
->
ëhî_dho°
, 
ETHER_ADDR_LEN
);

212 
	`ETHER_SET_LOCALADDR
(
eh
->
ëhî_dho°
);

213 
	`bc›y
(&
pub
->
mac
, 
eh
->
ëhî_sho°
, 
ETHER_ADDR_LEN
);

214 
eh
->
ëhî_ty≥
 = 
	`ht⁄16
(
Àn
 + 
DOT11_LLC_SNAP_HDR_LEN
);

215 
lsh
 = (
dŸ11_Œc_¢≠_hódî
 *)&
eh
[1];

216 
	`bc›y
(
BT_SIG_SNAP_MPROT
, 
lsh
, 
DOT11_LLC_SNAP_HDR_LEN
 - 2);

217 
lsh
->
ty≥
 = 0;

219  
	`dhd_£ndpkt
(
pub
, 0, 
p
);

220 
	}
}

225 
	$dhd_bè_tx_hcid©a
(
dhd_pub_t
 *
pub
, *
d©a_buf
, 
uöt
 
d©a_Àn
)

227 
amp_hci_ACL_d©a_t
 *
d©a
 = (amp_hci_ACL_d©a_à*)
d©a_buf
;

228 
ëhî_hódî
 *
eh
;

229 
dŸ11_Œc_¢≠_hódî
 *
lsh
;

230 
o¶_t
 *
osh
 = 
pub
->osh;

231 
uöt
 
Àn
;

232 *
p
;

234 i‡(
d©a_Àn
 < 
HCI_ACL_DATA_PREAMBLE_SIZE
) {

235 
	`DHD_ERROR
(("dhd_bè_tx_hcid©a: sh‹àd©a_buf, d©a_À¿%u\n", 
d©a_Àn
));

236  
BCME_BADLEN
;

239 i‡((
Àn
 = (
uöt
)
	`…oh16
(
d©a
->
dÀn
Ë+ 
HCI_ACL_DATA_PREAMBLE_SIZE
Ë> 
d©a_Àn
) {

240 
	`DHD_ERROR
(("dhd_bta_tx_hcidata: malformed hci data,Üen %u data_len %u\n",

241 
Àn
, 
d©a_Àn
));

245 
p
 = 
	`PKTGET
(
osh
, 
pub
->
hdæí
 + 
RFC1042_HDR_LEN
 + 
Àn
, 
TRUE
);

246 i‡(
p
 =
NULL
) {

247 
	`DHD_ERROR
(("dhd_bta_tx_hcidata: out of memory\n"));

248  
BCME_NOMEM
;

253 
	`PKTPULL
(
osh
, 
p
, 
pub
->
hdæí
 + 
RFC1042_HDR_LEN
);

254 
	`bc›y
(
d©a
, 
	`PKTDATA
(
osh
, 
p
), 
Àn
);

257 
	`PKTPUSH
(
osh
, 
p
, 
RFC1042_HDR_LEN
);

258 
eh
 = (
ëhî_hódî
 *)
	`PKTDATA
(
osh
, 
p
);

259 
	`bzîo
(
eh
->
ëhî_dho°
, 
ETHER_ADDR_LEN
);

260 
	`bc›y
(&
pub
->
mac
, 
eh
->
ëhî_sho°
, 
ETHER_ADDR_LEN
);

261 
eh
->
ëhî_ty≥
 = 
	`ht⁄16
(
Àn
 + 
DOT11_LLC_SNAP_HDR_LEN
);

262 
lsh
 = (
dŸ11_Œc_¢≠_hódî
 *)&
eh
[1];

263 
	`bc›y
(
BT_SIG_SNAP_MPROT
, 
lsh
, 
DOT11_LLC_SNAP_HDR_LEN
 - 2);

264 
lsh
->
ty≥
 = 
	`HTON16
(
BTA_PROT_L2CAP
);

266  
	`dhd_£ndpkt
(
pub
, 0, 
p
);

267 
	}
}

271 
	$dhd_bè_tx_hcid©a_com∂ëe
(
dhd_pub_t
 *
dhdp
, *
txp
, 
boﬁ
 
suc˚ss
)

273 
uöt8
 *
pktd©a
 = (uöt8 *)
	`PKTDATA
(
dhdp
->
osh
, 
txp
);

274 
amp_hci_ACL_d©a_t
 *
ACL_d©a
 = (amp_hci_ACL_d©a_à*)(
pktd©a
 + 
RFC1042_HDR_LEN
);

275 
uöt16
 
h™dÀ
 = 
	`…oh16
(
ACL_d©a
->handle);

276 
uöt16
 
Œh
 = 
	`HCI_ACL_DATA_HANDLE
(
h™dÀ
);

278 
wl_evít_msg_t
 
evít
;

279 
uöt8
 
d©a
[
HCI_EVT_PREAMBLE_SIZE
 + (
num_com∂ëed_d©a_blocks_evt_∑rms_t
)];

280 
amp_hci_evít_t
 *
evt
;

281 
num_com∂ëed_d©a_blocks_evt_∑rms_t
 *
∑rms
;

283 
uöt16
 
Àn
 = 
HCI_EVT_PREAMBLE_SIZE
 + (
num_com∂ëed_d©a_blocks_evt_∑rms_t
);

286 
	`mem£t
(&
evít
, 0, (event));

287 
evít
.
vîsi⁄
 = 
	`ht⁄16
(
BCM_EVENT_MSG_VERSION
);

288 
evít
.
evít_ty≥
 = 
	`ht⁄32
(
WLC_E_BTA_HCI_EVENT
);

289 
evít
.
°©us
 = 0;

290 
evít
.
ªas⁄
 = 0;

291 
evít
.
auth_ty≥
 = 0;

292 
evít
.
d©Æí
 = 
	`ht⁄32
(
Àn
);

293 
evít
.
Êags
 = 0;

296 
evt
 = (
amp_hci_evít_t
 *)
d©a
;

297 
evt
->
ecode
 = 
HCI_Numbî_of_Com∂ëed_D©a_Blocks
;

298 
evt
->
∂í
 = (
num_com∂ëed_d©a_blocks_evt_∑rms_t
);

300 
∑rms
 = (
num_com∂ëed_d©a_blocks_evt_∑rms_t
 *)
evt
->parms;

301 
	`htﬁ16_ua_°‹e
(
dhdp
->
maxd©ablks
, (
uöt8
 *)&
∑rms
->
num_blocks
);

302 
∑rms
->
num_h™dÀs
 = 1;

303 
	`htﬁ16_ua_°‹e
(
Œh
, (
uöt8
 *)&
∑rms
->
com∂ëed
[0].
h™dÀ
);

304 
∑rms
->
com∂ëed
[0].
pkts
 = 1;

305 
∑rms
->
com∂ëed
[0].
blocks
 = 1;

307 
	`dhd_£ndup_evít_comm⁄
(
dhdp
, &
evít
, 
d©a
);

308 
	}
}

312 
	$dhd_bè_d€vt
(
dhd_pub_t
 *
dhdp
, *
d©a_buf
, 
uöt
 
d©a_Àn
)

314 
amp_hci_evít_t
 *
evt
 = (amp_hci_evít_à*)
d©a_buf
;

316 
evt
->
ecode
) {

317 
HCI_Comm™d_Com∂ëe
: {

318 
cmd_com∂ëe_∑rms_t
 *
∑rms
 = (cmd_com∂ëe_∑rms_à*)
evt
->parms;

319 
	`…oh16_ua
((
uöt8
 *)&
∑rms
->
›code
)) {

320 
HCI_Ród_D©a_Block_Size
: {

321 
ªad_d©a_block_size_evt_∑rms_t
 *
∑rms2
 =

322 (
ªad_d©a_block_size_evt_∑rms_t
 *)
∑rms
->parms;

323 
dhdp
->
maxd©ablks
 = 
	`…oh16_ua
((
uöt8
 *)&
∑rms2
->
d©a_block_num
);

330 
HCI_Flush_Occuºed
: {

331 
Êush_occuºed_evt_∑rms_t
 *
evt_∑rms
 = (Êush_occuºed_evt_∑rms_à*)
evt
->
∑rms
;

332 
	`dhd_bè_Êush_hcid©a
(
dhdp
, 
	`…oh16_ua
((
uöt8
 *)&
evt_∑rms
->
h™dÀ
));

338 
	}
}

	@dhd_cdc.c

31 
	~<ty≥defs.h
>

32 
	~<o¶.h
>

34 
	~<bcmutûs.h
>

35 
	~<bcmcdc.h
>

36 
	~<bcmídün.h
>

38 
	~<dngl_°©s.h
>

39 
	~<dhd.h
>

40 
	~<dhd_¥Ÿo.h
>

41 
	~<dhd_bus.h
>

42 
	~<dhd_dbg.h
>

45 #ifde‡
PROP_TXSTATUS


46 
	~<wlfc_¥Ÿo.h
>

47 
	~<dhd_wlfc.h
>

51 
	#RETRIES
 2

	)

52 
	#BUS_HEADER_LEN
 (24+
DHD_SDALIGN
Ë

	)

56 
	#ROUND_UP_MARGIN
 2048

	)

60 
	#BUS_RETRIES
 1

	)

62 #ifde‡
PROP_TXSTATUS


63 
	sdhd_wlfc_commô_öfo
 {

64 
uöt8
 
	m√eds_hdr
;

65 
uöt8
 
	mac_fifo_¸edô_•ít
;

66 
ewlfc_∑ckë_°©e_t
 
	mpkt_ty≥
;

67 
wlfc_mac_des¸ùt‹_t
* 
	mmac_íåy
;

68 * 
	mp
;

69 } 
	tdhd_wlfc_commô_öfo_t
;

73 
	sdhd_¥Ÿ
 {

74 
uöt16
 
	mªqid
;

75 
uöt8
 
	m≥ndög
;

76 
uöt32
 
	mœ°cmd
;

77 
uöt8
 
	mbus_hódî
[
BUS_HEADER_LEN
];

78 
cdc_io˘l_t
 
	mmsg
;

79 
	mbuf
[
WLC_IOCTL_MAXLEN
 + 
ROUND_UP_MARGIN
];

80 } 
	tdhd_¥Ÿ_t
;

84 
	$dhdcdc_msg
(
dhd_pub_t
 *
dhd
)

86 
îr
 = 0;

87 
dhd_¥Ÿ_t
 *
¥Ÿ
 = 
dhd
->prot;

88 
Àn
 = 
	`…oh32
(
¥Ÿ
->
msg
.ÀnË+ (
cdc_io˘l_t
);

90 
	`DHD_TRACE
(("%s: E¡î\n", 
__FUNCTION__
));

92 
	`DHD_OS_WAKE_LOCK
(
dhd
);

98 i‡(
Àn
 > 
CDC_MAX_MSG_SIZE
)

99 
Àn
 = 
CDC_MAX_MSG_SIZE
;

102 
îr
 = 
	`dhd_bus_tx˘l
(
dhd
->
bus
, (
uch¨
*)&
¥Ÿ
->
msg
, 
Àn
);

104 
	`DHD_OS_WAKE_UNLOCK
(
dhd
);

105  
îr
;

106 
	}
}

109 
	$dhdcdc_cm∂t
(
dhd_pub_t
 *
dhd
, 
uöt32
 
id
, uöt32 
Àn
)

111 
ªt
;

112 
cdc_Àn
 = 
Àn
 + (
cdc_io˘l_t
);

113 
dhd_¥Ÿ_t
 *
¥Ÿ
 = 
dhd
->prot;

115 
	`DHD_TRACE
(("%s: E¡î\n", 
__FUNCTION__
));

118 
ªt
 = 
	`dhd_bus_rx˘l
(
dhd
->
bus
, (
uch¨
*)&
¥Ÿ
->
msg
, 
cdc_Àn
);

119 i‡(
ªt
 < 0)

121 } 
	`CDC_IOC_ID
(
	`…oh32
(
¥Ÿ
->
msg
.
Êags
)Ë!
id
);

123  
ªt
;

124 
	}
}

127 
	$dhdcdc_quîy_io˘l
(
dhd_pub_t
 *
dhd
, 
ifidx
, 
uöt
 
cmd
, *
buf
, uöà
Àn
, 
uöt8
 
a˘i⁄
)

129 
dhd_¥Ÿ_t
 *
¥Ÿ
 = 
dhd
->prot;

130 
cdc_io˘l_t
 *
msg
 = &
¥Ÿ
->msg;

131 *
öfo
;

132 
ªt
 = 0, 
ªåõs
 = 0;

133 
uöt32
 
id
, 
Êags
 = 0;

135 
	`DHD_TRACE
(("%s: E¡î\n", 
__FUNCTION__
));

136 
	`DHD_CTL
(("%s: cmd %dÜí %d\n", 
__FUNCTION__
, 
cmd
, 
Àn
));

140 i‡(
cmd
 =
WLC_GET_VAR
 && 
buf
)

142 i‡(!
	`°rcmp
((*)
buf
, "bcmerrorstr"))

144 
	`°∫˝y
((*)
buf
, 
	`bcmîr‹°r
(
dhd
->
d⁄gÀ_îr‹
), 
BCME_STRLEN
);

145 
d⁄e
;

147 i‡(!
	`°rcmp
((*)
buf
, "bcmerror"))

149 *(*)
buf
 = 
dhd
->
d⁄gÀ_îr‹
;

150 
d⁄e
;

154 
	`mem£t
(
msg
, 0, (
cdc_io˘l_t
));

156 
msg
->
cmd
 = 
	`htﬁ32
(cmd);

157 
msg
->
Àn
 = 
	`htﬁ32
(len);

158 
msg
->
Êags
 = (++
¥Ÿ
->
ªqid
 << 
CDCF_IOC_ID_SHIFT
);

159 
	`CDC_SET_IF_IDX
(
msg
, 
ifidx
);

161 
a˘i⁄
 &
WL_IOCTL_ACTION_MASK
;

162 
msg
->
Êags
 |(
a˘i⁄
 << 
CDCF_IOC_ACTION_SHIFT
);

163 
msg
->
Êags
 = 
	`htﬁ32
(msg->flags);

165 i‡(
buf
)

166 
	`mem˝y
(
¥Ÿ
->
buf
, buf, 
Àn
);

168 i‡((
ªt
 = 
	`dhdcdc_msg
(
dhd
)) < 0) {

169 i‡(!
dhd
->
h™g_was_£¡
)

170 
	`DHD_ERROR
(("dhdcdc_quîy_io˘l: dhdcdc_msg faûed w/°©u†%d\n", 
ªt
));

171 
d⁄e
;

174 
ªåy
:

176 i‡((
ªt
 = 
	`dhdcdc_cm∂t
(
dhd
, 
¥Ÿ
->
ªqid
, 
Àn
)) < 0)

177 
d⁄e
;

179 
Êags
 = 
	`…oh32
(
msg
->flags);

180 
id
 = (
Êags
 & 
CDCF_IOC_ID_MASK
Ë>> 
CDCF_IOC_ID_SHIFT
;

182 i‡((
id
 < 
¥Ÿ
->
ªqid
Ë&& (++
ªåõs
 < 
RETRIES
))

183 
ªåy
;

184 i‡(
id
 !
¥Ÿ
->
ªqid
) {

185 
	`DHD_ERROR
(("%s: %s: unexpectedÑequest id %d (expected %d)\n",

186 
	`dhd_i‚ame
(
dhd
, 
ifidx
), 
__FUNCTION__
, 
id
, 
¥Ÿ
->
ªqid
));

187 
ªt
 = -
EINVAL
;

188 
d⁄e
;

192 
öfo
 = (*)&
msg
[1];

195 i‡(
buf
)

197 i‡(
ªt
 < ()
Àn
)

198 
Àn
 = 
ªt
;

199 
	`mem˝y
(
buf
, 
öfo
, 
Àn
);

203 i‡(
Êags
 & 
CDCF_IOC_ERROR
)

205 
ªt
 = 
	`…oh32
(
msg
->
°©us
);

207 
dhd
->
d⁄gÀ_îr‹
 = 
ªt
;

210 
d⁄e
:

211  
ªt
;

212 
	}
}

215 
	$dhdcdc_£t_io˘l
(
dhd_pub_t
 *
dhd
, 
ifidx
, 
uöt
 
cmd
, *
buf
, uöà
Àn
, 
uöt8
 
a˘i⁄
)

217 
dhd_¥Ÿ_t
 *
¥Ÿ
 = 
dhd
->prot;

218 
cdc_io˘l_t
 *
msg
 = &
¥Ÿ
->msg;

219 
ªt
 = 0;

220 
uöt32
 
Êags
, 
id
;

222 
	`DHD_TRACE
(("%s: E¡î\n", 
__FUNCTION__
));

223 
	`DHD_CTL
(("%s: cmd %dÜí %d\n", 
__FUNCTION__
, 
cmd
, 
Àn
));

225 i‡(
dhd
->
bus°©e
 =
DHD_BUS_DOWN
) {

226 
	`DHD_ERROR
(("%†: bu†i†down. wêhavênŸhögÅÿdo\n", 
__FUNCTION__
));

227  -
EIO
;

231 i‡(
dhd
->
h™g_was_£¡
) {

232 
	`DHD_ERROR
(("%s: HANG was sent upÉarlier. NotÅalkingÅoÅhe chip\n",

233 
__FUNCTION__
));

234  -
EIO
;

237 
	`mem£t
(
msg
, 0, (
cdc_io˘l_t
));

239 
msg
->
cmd
 = 
	`htﬁ32
(cmd);

240 
msg
->
Àn
 = 
	`htﬁ32
(len);

241 
msg
->
Êags
 = (++
¥Ÿ
->
ªqid
 << 
CDCF_IOC_ID_SHIFT
);

242 
	`CDC_SET_IF_IDX
(
msg
, 
ifidx
);

244 
a˘i⁄
 &
WL_IOCTL_ACTION_MASK
;

245 
msg
->
Êags
 |(
a˘i⁄
 << 
CDCF_IOC_ACTION_SHIFT
Ë| 
CDCF_IOC_SET
;

246 
msg
->
Êags
 = 
	`htﬁ32
(msg->flags);

248 i‡(
buf
)

249 
	`mem˝y
(
¥Ÿ
->
buf
, buf, 
Àn
);

251 i‡((
ªt
 = 
	`dhdcdc_msg
(
dhd
)) < 0) {

252 
	`DHD_ERROR
(("%s: dhdcdc_msg faûed w/°©u†%d\n", 
__FUNCTION__
, 
ªt
));

253 
d⁄e
;

256 i‡((
ªt
 = 
	`dhdcdc_cm∂t
(
dhd
, 
¥Ÿ
->
ªqid
, 
Àn
)) < 0)

257 
d⁄e
;

259 
Êags
 = 
	`…oh32
(
msg
->flags);

260 
id
 = (
Êags
 & 
CDCF_IOC_ID_MASK
Ë>> 
CDCF_IOC_ID_SHIFT
;

262 i‡(
id
 !
¥Ÿ
->
ªqid
) {

263 
	`DHD_ERROR
(("%s: %s: unexpectedÑequest id %d (expected %d)\n",

264 
	`dhd_i‚ame
(
dhd
, 
ifidx
), 
__FUNCTION__
, 
id
, 
¥Ÿ
->
ªqid
));

265 
ªt
 = -
EINVAL
;

266 
d⁄e
;

270 i‡(
Êags
 & 
CDCF_IOC_ERROR
)

272 
ªt
 = 
	`…oh32
(
msg
->
°©us
);

274 
dhd
->
d⁄gÀ_îr‹
 = 
ªt
;

277 
d⁄e
:

278  
ªt
;

279 
	}
}

283 
	$dhd_¥Ÿ_io˘l
(
dhd_pub_t
 *
dhd
, 
ifidx
, 
wl_io˘l_t
 * 
ioc
, * 
buf
, 
Àn
)

285 
dhd_¥Ÿ_t
 *
¥Ÿ
 = 
dhd
->prot;

286 
ªt
 = -1;

287 
uöt8
 
a˘i⁄
;

288 #i‡
	`deföed
(
NDIS630
)

289 
boﬁ
 
acquúed
 = 
FALSE
;

292 i‡((
dhd
->
bus°©e
 =
DHD_BUS_DOWN
Ë|| dhd->
h™g_was_£¡
) {

293 
	`DHD_ERROR
(("%†: bu†i†down. wêhavênŸhögÅÿdo\n", 
__FUNCTION__
));

294 
d⁄e
;

296 #i‡
	`deföed
(
NDIS630
)

297 i‡(
	`dhd_os_¥Ÿo_block
(
dhd
))

299 
acquúed
 = 
TRUE
;

304 
ªt
 = -1;

305  
ªt
;

309 
	`DHD_TRACE
(("%s: E¡î\n", 
__FUNCTION__
));

311 
	`ASSERT
(
Àn
 <
WLC_IOCTL_MAXLEN
);

313 i‡(
Àn
 > 
WLC_IOCTL_MAXLEN
)

314 
d⁄e
;

316 i‡(
¥Ÿ
->
≥ndög
 =
TRUE
) {

317 
	`DHD_ERROR
(("CDCÖacket isÖending!!!! cmd=0x%x (%lu)Üastcmd=0x%x (%lu)\n",

318 
ioc
->
cmd
, ()ioc->cmd, 
¥Ÿ
->
œ°cmd
,

319 ()
¥Ÿ
->
œ°cmd
));

320 i‡((
ioc
->
cmd
 =
WLC_SET_VAR
Ë|| (ioc->cmd =
WLC_GET_VAR
)) {

321 
	`DHD_TRACE
(("iov¨ cmd=%s\n", (*)
buf
));

323 
d⁄e
;

326 
¥Ÿ
->
≥ndög
 = 
TRUE
;

327 
¥Ÿ
->
œ°cmd
 = 
ioc
->
cmd
;

328 
a˘i⁄
 = 
ioc
->
£t
;

329 i‡(
a˘i⁄
 & 
WL_IOCTL_ACTION_SET
)

330 
ªt
 = 
	`dhdcdc_£t_io˘l
(
dhd
, 
ifidx
, 
ioc
->
cmd
, 
buf
, 
Àn
, 
a˘i⁄
);

332 
ªt
 = 
	`dhdcdc_quîy_io˘l
(
dhd
, 
ifidx
, 
ioc
->
cmd
, 
buf
, 
Àn
, 
a˘i⁄
);

333 i‡(
ªt
 > 0)

334 
ioc
->
u£d
 = 
ªt
 - (
cdc_io˘l_t
);

338 i‡(
ªt
 >= 0)

339 
ªt
 = 0;

341 
cdc_io˘l_t
 *
msg
 = &
¥Ÿ
->msg;

342 
ioc
->
√eded
 = 
	`…oh32
(
msg
->
Àn
);

346 i‡((!
ªt
Ë&& (
ioc
->
cmd
 =
WLC_SET_VAR
Ë&& (!
	`°rcmp
(
buf
, "wme_dp"))) {

347 
¶í
, 
vÆ
 = 0;

349 
¶í
 = 
	`°æí
("wme_dp") + 1;

350 i‡(
Àn
 >()(
¶í
 + ()))

351 
	`bc›y
(((*)
buf
 + 
¶í
), &
vÆ
, ());

352 
dhd
->
wme_dp
 = (
uöt8
Ë
	`…oh32
(
vÆ
);

355 
¥Ÿ
->
≥ndög
 = 
FALSE
;

357 
d⁄e
:

358 #i‡
	`deföed
(
NDIS630
)

359 i‡(
acquúed
)

360 
	`dhd_os_¥Ÿo_unblock
(
dhd
);

362  
ªt
;

363 
	}
}

366 
	$dhd_¥Ÿ_iov¨_›
(
dhd_pub_t
 *
dhdp
, c⁄° *
«me
,

367 *
∑øms
, 
∂í
, *
¨g
, 
Àn
, 
boﬁ
 
£t
)

369  
BCME_UNSUPPORTED
;

370 
	}
}

372 #ifde‡
PROP_TXSTATUS


374 
	$dhd_wlfc_dump
(
dhd_pub_t
 *
dhdp
, 
bcm°rbuf
 *
°rbuf
)

376 
i
;

377 
uöt8
* 
ó
;

378 
©ho°_wl_°©us_öfo_t
* 
wlfc
 = (athost_wl_status_info_t*)

379 
dhdp
->
wlfc_°©e
;

380 
wlfc_h™gî_t
* 
h
;

381 
wlfc_mac_des¸ùt‹_t
* 
mac_èbÀ
;

382 
wlfc_mac_des¸ùt‹_t
* 
öãrÁ˚s
;

383 * 
i·y≥s
[] = {"STA", "AP", "WDS", "p2pGO", "p2pCL"};

385 i‡(
wlfc
 =
NULL
) {

386 
	`bcm_b¥ötf
(
°rbuf
, "wlfcÇot initialized yet\n");

389 
h
 = (
wlfc_h™gî_t
*)
wlfc
->
h™gî
;

390 i‡(
h
 =
NULL
) {

391 
	`bcm_b¥ötf
(
°rbuf
, "wlfc-hangerÇot initialized yet\n");

394 
mac_èbÀ
 = 
wlfc
->
de°ö©i⁄_íåõs
.
nodes
;

395 
öãrÁ˚s
 = 
wlfc
->
de°ö©i⁄_íåõs
.interfaces;

396 
	`bcm_b¥ötf
(
°rbuf
, "---- wlfc stats ----\n");

397 i‡(
h
) {

398 
	`bcm_b¥ötf
(
°rbuf
, "wlfc hanger (pushed,popped,f_push,"

400 
h
->
pushed
,

401 
h
->
p›≥d
,

402 
h
->
Áûed_to_push
,

403 
h
->
Áûed_to_p›
,

404 
h
->
Áûed_¶Ÿföd
,

405 (
h
->
pushed
 - h->
p›≥d
));

408 
	`bcm_b¥ötf
(
°rbuf
, "wlfc fail(tlv,credit_rqst,mac_update,psmode_update), "

410 
wlfc
->
°©s
.
év_∑r£_Áûed
,

411 
wlfc
->
°©s
.
¸edô_ªque°_Áûed
,

412 
wlfc
->
°©s
.
mac_upd©e_Áûed
,

413 
wlfc
->
°©s
.
psmode_upd©e_Áûed
,

414 
wlfc
->
°©s
.
dñayq_fuŒ_îr‹
,

415 
wlfc
->
°©s
.
£ndq_fuŒ_îr‹
,

416 
wlfc
->
°©s
.
rﬁlback_Áûed
);

418 
	`bcm_b¥ötf
(
°rbuf
, "SENDQ (len,credit,sent) "

420 
wlfc
->
SENDQ
.
q
[0].
Àn
, wlfc->
FIFO_¸edô
[0], wlfc->
°©s
.
£ndq_pkts
[0],

421 
wlfc
->
SENDQ
.
q
[1].
Àn
, wlfc->
FIFO_¸edô
[1], wlfc->
°©s
.
£ndq_pkts
[1],

422 
wlfc
->
SENDQ
.
q
[2].
Àn
, wlfc->
FIFO_¸edô
[2], wlfc->
°©s
.
£ndq_pkts
[2],

423 
wlfc
->
SENDQ
.
q
[3].
Àn
, wlfc->
FIFO_¸edô
[3], wlfc->
°©s
.
£ndq_pkts
[3],

424 
wlfc
->
SENDQ
.
q
[4].
Àn
, wlfc->
FIFO_¸edô
[4], wlfc->
°©s
.
£ndq_pkts
[4]);

426 #ifde‡
PROP_TXSTATUS_DEBUG


427 
	`bcm_b¥ötf
(
°rbuf
, "SENDQ dropped: AC[0-3]:(%d,%d,%d,%d), (bcmc,atim):(%d,%d)\n",

428 
wlfc
->
°©s
.
dr›≥d_qfuŒ
[0], wlfc->stats.dropped_qfull[1],

429 
wlfc
->
°©s
.
dr›≥d_qfuŒ
[2], wlfc->stats.dropped_qfull[3],

430 
wlfc
->
°©s
.
dr›≥d_qfuŒ
[4], wlfc->stats.dropped_qfull[5]);

433 
	`bcm_b¥ötf
(
°rbuf
, "\n");

434 
i
 = 0; i < 
WLFC_MAX_IFNUM
; i++) {

435 i‡(
öãrÁ˚s
[
i
].
occupõd
) {

436 * 
i·y≥_desc
;

438 i‡(
öãrÁ˚s
[
i
].
i·y≥
 > 
WLC_E_IF_ROLE_P2P_CLIENT
)

439 
i·y≥_desc
 = "<Unknown";

441 
i·y≥_desc
 = 
i·y≥s
[
öãrÁ˚s
[
i
].
i·y≥
];

443 
ó
 = 
öãrÁ˚s
[
i
].ea;

444 
	`bcm_b¥ötf
(
°rbuf
, "INTERFACE[%d].ea = "

446 "√tif_Êow_c⁄åﬁ:%s\n", 
i
,

447 
ó
[0],Éa[1],Éa[2],Éa[3],Éa[4],Éa[5],

448 
öãrÁ˚s
[
i
].
öãrÁ˚_id
,

449 
i·y≥_desc
, ((
wlfc
->
ho°if_Êow_°©e
[
i
] =
OFF
)

452 
	`bcm_b¥ötf
(
°rbuf
, "INTERFACE[%d].DELAYQ(len,state,credit)"

454 
i
,

455 
öãrÁ˚s
[
i
].
psq
.
Àn
,

456 ((
öãrÁ˚s
[
i
].
°©e
 ==

457 
WLFC_STATE_OPEN
) ? " OPEN":"CLOSE"),

458 
öãrÁ˚s
[
i
].
ªque°ed_¸edô
);

460 
	`bcm_b¥ötf
(
°rbuf
, "INTERFACE[%d].DELAYQ"

463 
i
,

464 
öãrÁ˚s
[
i
].
psq
.
q
[0].
Àn
,

465 
öãrÁ˚s
[
i
].
psq
.
q
[1].
Àn
,

466 
öãrÁ˚s
[
i
].
psq
.
q
[2].
Àn
,

467 
öãrÁ˚s
[
i
].
psq
.
q
[3].
Àn
,

468 
öãrÁ˚s
[
i
].
psq
.
q
[4].
Àn
,

469 
öãrÁ˚s
[
i
].
psq
.
q
[5].
Àn
,

470 
öãrÁ˚s
[
i
].
psq
.
q
[6].
Àn
,

471 
öãrÁ˚s
[
i
].
psq
.
q
[7].
Àn
);

475 
	`bcm_b¥ötf
(
°rbuf
, "\n");

476 
i
 = 0; i < 
WLFC_MAC_DESC_TABLE_SIZE
; i++) {

477 i‡(
mac_èbÀ
[
i
].
occupõd
) {

478 
ó
 = 
mac_èbÀ
[
i
].ea;

479 
	`bcm_b¥ötf
(
°rbuf
, "MAC_table[%d].ea = "

480 "[%02x:%02x:%02x:%02x:%02x:%02x], if:%d \n", 
i
,

481 
ó
[0],Éa[1],Éa[2],Éa[3],Éa[4],Éa[5],

482 
mac_èbÀ
[
i
].
öãrÁ˚_id
);

484 
	`bcm_b¥ötf
(
°rbuf
, "MAC_table[%d].DELAYQ(len,state,credit)"

486 
i
,

487 
mac_èbÀ
[
i
].
psq
.
Àn
,

488 ((
mac_èbÀ
[
i
].
°©e
 ==

489 
WLFC_STATE_OPEN
) ? " OPEN":"CLOSE"),

490 
mac_èbÀ
[
i
].
ªque°ed_¸edô
);

491 #ifde‡
PROP_TXSTATUS_DEBUG


492 
	`bcm_b¥ötf
(
°rbuf
, "MAC_table[%d]: (opened, closed) = (%d, %d)\n",

493 
i
, 
mac_èbÀ
[i].
›íed_˘
, mac_èbÀ[i].
˛o£d_˘
);

495 
	`bcm_b¥ötf
(
°rbuf
, "MAC_table[%d].DELAYQ"

498 
i
,

499 
mac_èbÀ
[
i
].
psq
.
q
[0].
Àn
,

500 
mac_èbÀ
[
i
].
psq
.
q
[1].
Àn
,

501 
mac_èbÀ
[
i
].
psq
.
q
[2].
Àn
,

502 
mac_èbÀ
[
i
].
psq
.
q
[3].
Àn
,

503 
mac_èbÀ
[
i
].
psq
.
q
[4].
Àn
,

504 
mac_èbÀ
[
i
].
psq
.
q
[5].
Àn
,

505 
mac_èbÀ
[
i
].
psq
.
q
[6].
Àn
,

506 
mac_èbÀ
[
i
].
psq
.
q
[7].
Àn
);

510 #ifde‡
PROP_TXSTATUS_DEBUG


512 
avg
;

513 
movög_avg
 = 0;

514 
movög_ßm∂es
;

516 i‡(
wlfc
->
°©s
.
œãncy_ßm∂e_cou¡
) {

517 
movög_ßm∂es
 = (
wlfc
->
°©s
.
dñès
)/(
uöt32
);

519 
i
 = 0; i < 
movög_ßm∂es
; i++)

520 
movög_avg
 +
wlfc
->
°©s
.
dñès
[
i
];

521 
movög_avg
 /
movög_ßm∂es
;

523 
avg
 = (100 * 
wlfc
->
°©s
.
tŸÆ_°©us_œãncy
) /

524 
wlfc
->
°©s
.
œãncy_ßm∂e_cou¡
;

525 
	`bcm_b¥ötf
(
°rbuf
, "txstatusÜatency (average,Üast, moving[%d]) = "

527 
movög_ßm∂es
, 
avg
/100, (avg - (avg/100)*100),

528 
wlfc
->
°©s
.
œãncy_mo°_ª˚¡
,

529 
movög_avg
);

533 
	`bcm_b¥ötf
(
°rbuf
, "wlfc- fifo[0-5] credit stats: sent = (%d,%d,%d,%d,%d,%d), "

535 
wlfc
->
°©s
.
fifo_¸edôs_£¡
[0],

536 
wlfc
->
°©s
.
fifo_¸edôs_£¡
[1],

537 
wlfc
->
°©s
.
fifo_¸edôs_£¡
[2],

538 
wlfc
->
°©s
.
fifo_¸edôs_£¡
[3],

539 
wlfc
->
°©s
.
fifo_¸edôs_£¡
[4],

540 
wlfc
->
°©s
.
fifo_¸edôs_£¡
[5],

542 
wlfc
->
°©s
.
fifo_¸edôs_back
[0],

543 
wlfc
->
°©s
.
fifo_¸edôs_back
[1],

544 
wlfc
->
°©s
.
fifo_¸edôs_back
[2],

545 
wlfc
->
°©s
.
fifo_¸edôs_back
[3],

546 
wlfc
->
°©s
.
fifo_¸edôs_back
[4],

547 
wlfc
->
°©s
.
fifo_¸edôs_back
[5]);

549 
uöt32
 
fifo_¸_£¡
 = 0;

550 
uöt32
 
fifo_¸_acked
 = 0;

551 
uöt32
 
ªque°_¸_£¡
 = 0;

552 
uöt32
 
ªque°_¸_ack
 = 0;

553 
uöt32
 
bc_mc_¸_ack
 = 0;

555 
i
 = 0; i < (
wlfc
->
°©s
.
fifo_¸edôs_£¡
)/(
uöt32
); i++) {

556 
fifo_¸_£¡
 +
wlfc
->
°©s
.
fifo_¸edôs_£¡
[
i
];

559 
i
 = 0; i < (
wlfc
->
°©s
.
fifo_¸edôs_back
)/(
uöt32
); i++) {

560 
fifo_¸_acked
 +
wlfc
->
°©s
.
fifo_¸edôs_back
[
i
];

563 
i
 = 0; i < 
WLFC_MAC_DESC_TABLE_SIZE
; i++) {

564 i‡(
wlfc
->
de°ö©i⁄_íåõs
.
nodes
[
i
].
occupõd
) {

565 
ªque°_¸_£¡
 +=

566 
wlfc
->
de°ö©i⁄_íåõs
.
nodes
[
i
].
d°n¸edô_£¡_∑ckës
;

569 
i
 = 0; i < 
WLFC_MAX_IFNUM
; i++) {

570 i‡(
wlfc
->
de°ö©i⁄_íåõs
.
öãrÁ˚s
[
i
].
occupõd
) {

571 
ªque°_¸_£¡
 +=

572 
wlfc
->
de°ö©i⁄_íåõs
.
öãrÁ˚s
[
i
].
d°n¸edô_£¡_∑ckës
;

575 
i
 = 0; i < 
WLFC_MAC_DESC_TABLE_SIZE
; i++) {

576 i‡(
wlfc
->
de°ö©i⁄_íåõs
.
nodes
[
i
].
occupõd
) {

577 
ªque°_¸_ack
 +=

578 
wlfc
->
de°ö©i⁄_íåõs
.
nodes
[
i
].
d°n¸edô_acks
;

581 
i
 = 0; i < 
WLFC_MAX_IFNUM
; i++) {

582 i‡(
wlfc
->
de°ö©i⁄_íåõs
.
öãrÁ˚s
[
i
].
occupõd
) {

583 
ªque°_¸_ack
 +=

584 
wlfc
->
de°ö©i⁄_íåõs
.
öãrÁ˚s
[
i
].
d°n¸edô_acks
;

587 
	`bcm_b¥ötf
(
°rbuf
, "wlfc- (sent, status) =>Öq(%d,%d), vq(%d,%d),"

589 
fifo_¸_£¡
, 
fifo_¸_acked
,

590 
ªque°_¸_£¡
, 
ªque°_¸_ack
,

591 
wlfc
->
de°ö©i⁄_íåõs
.
Ÿhî
.
d°n¸edô_acks
,

592 
bc_mc_¸_ack
,

593 
wlfc
->
°©s
.
sig«l_⁄ly_pkts_£¡
, wlfc->°©s.
sig«l_⁄ly_pkts_‰ìd
);

596 
	`bcm_b¥ötf
(
°rbuf
, "\n");

597 
	`bcm_b¥ötf
(
°rbuf
, "wlfc-Ökt((in,2bus,txstats,hdrpull),(dropped,hdr_only,wlc_tossed)"

600 
wlfc
->
°©s
.
pktö
,

601 
wlfc
->
°©s
.
pkt2bus
,

602 
wlfc
->
°©s
.
tx°©us_ö
,

603 
wlfc
->
°©s
.
dhd_hdΩuŒs
,

605 
wlfc
->
°©s
.
pktdr›≥d
,

606 
wlfc
->
°©s
.
wlfc_hódî_⁄ly_pkt
,

607 
wlfc
->
°©s
.
wlc_tos£d_pkts
,

609 
wlfc
->
°©s
.
pkt_‰ìd
,

610 
wlfc
->
°©s
.
pkt_‰ì_îr
, wlfc->°©s.
rﬁlback
);

612 
	`bcm_b¥ötf
(
°rbuf
, "wlfc- suppress((d11,wlc,err),enq(d11,wl,hq,mac?),retx(d11,wlc,hq)) = "

615 
wlfc
->
°©s
.
d11_suµªss
,

616 
wlfc
->
°©s
.
wl_suµªss
,

617 
wlfc
->
°©s
.
bad_suµªss
,

619 
wlfc
->
°©s
.
psq_d11sup_íq
,

620 
wlfc
->
°©s
.
psq_wlsup_íq
,

621 
wlfc
->
°©s
.
psq_ho°q_íq
,

622 
wlfc
->
°©s
.
mac_h™dÀ_nŸfound
,

624 
wlfc
->
°©s
.
psq_d11sup_ªtx
,

625 
wlfc
->
°©s
.
psq_wlsup_ªtx
,

626 
wlfc
->
°©s
.
psq_ho°q_ªtx
);

628 
	}
}

636 
	$dhd_wlfc_h™gî_¸óã
(
o¶_t
 *
osh
, 
max_ôems
)

638 
i
;

639 
wlfc_h™gî_t
* 
h™gî
;

642 
	`ASSERT
(
max_ôems
 =
WLFC_HANGER_MAXITEMS
);

644 i‡((
h™gî
 = (
wlfc_h™gî_t
*)
	`MALLOC
(
osh
, 
	`WLFC_HANGER_SIZE
(
max_ôems
))Ë=
NULL
)

645  
NULL
;

647 
	`mem£t
(
h™gî
, 0, 
	`WLFC_HANGER_SIZE
(
max_ôems
));

648 
h™gî
->
max_ôems
 = max_items;

650 
i
 = 0; i < 
h™gî
->
max_ôems
; i++) {

651 
h™gî
->
ôems
[
i
].
°©e
 = 
WLFC_HANGER_ITEM_STATE_FREE
;

653  
h™gî
;

654 
	}
}

657 
	$dhd_wlfc_h™gî_dñëe
(
o¶_t
 *
osh
, * 
h™gî
)

659 
wlfc_h™gî_t
* 
h
 = (wlfc_h™gî_t*)
h™gî
;

661 i‡(
h
) {

662 
	`MFREE
(
osh
, 
h
, 
	`WLFC_HANGER_SIZE
(h->
max_ôems
));

663  
BCME_OK
;

665  
BCME_BADARG
;

666 
	}
}

668 
uöt16


669 
	$dhd_wlfc_h™gî_gë_‰ì_¶Ÿ
(* 
h™gî
)

671 
uöt32
 
i
;

672 
wlfc_h™gî_t
* 
h
 = (wlfc_h™gî_t*)
h™gî
;

674 i‡(
h
) {

675 
i
 = (
h
->
¶Ÿ_pos
 + 1); i != h->slot_pos;) {

676 i‡(
h
->
ôems
[
i
].
°©e
 =
WLFC_HANGER_ITEM_STATE_FREE
) {

677 
h
->
¶Ÿ_pos
 = 
i
;

678  (
uöt16
)
i
;

680 (
i
 =
h
->
max_ôems
)? i = 0 : i++;

682 
h
->
Áûed_¶Ÿföd
++;

684  
WLFC_HANGER_MAXITEMS
;

685 
	}
}

688 
	$dhd_wlfc_h™gî_gë_gíbô
(* 
h™gî
, * 
pkt
, 
uöt32
 
¶Ÿ_id
, * 
gí
)

690 
rc
 = 
BCME_OK
;

691 
wlfc_h™gî_t
* 
h
 = (wlfc_h™gî_t*)
h™gî
;

693 *
gí
 = 0xff;

696 i‡(
¶Ÿ_id
 =
WLFC_HANGER_MAXITEMS
)

697  
BCME_NOTFOUND
;

699 i‡(
h
) {

700 i‡((
h
->
ôems
[
¶Ÿ_id
].
°©e
 =
WLFC_HANGER_ITEM_STATE_INUSE
) ||

701 (
h
->
ôems
[
¶Ÿ_id
].
°©e
 =
WLFC_HANGER_ITEM_STATE_INUSE_SUPPRESSED
)) {

702 *
gí
 = 
h
->
ôems
[
¶Ÿ_id
].gen;

705 
rc
 = 
BCME_NOTFOUND
;

709 
rc
 = 
BCME_BADARG
;

710  
rc
;

711 
	}
}

714 
	$dhd_wlfc_h™gî_pushpkt
(* 
h™gî
, * 
pkt
, 
uöt32
 
¶Ÿ_id
)

716 
rc
 = 
BCME_OK
;

717 
wlfc_h™gî_t
* 
h
 = (wlfc_h™gî_t*)
h™gî
;

719 i‡(
h
 && (
¶Ÿ_id
 < 
WLFC_HANGER_MAXITEMS
)) {

720 i‡(
h
->
ôems
[
¶Ÿ_id
].
°©e
 =
WLFC_HANGER_ITEM_STATE_FREE
) {

721 
h
->
ôems
[
¶Ÿ_id
].
°©e
 = 
WLFC_HANGER_ITEM_STATE_INUSE
;

722 
h
->
ôems
[
¶Ÿ_id
].
pkt
 =Ökt;

723 
h
->
ôems
[
¶Ÿ_id
].
idítifõr
 = slot_id;

724 
h
->
pushed
++;

727 
h
->
Áûed_to_push
++;

728 
rc
 = 
BCME_NOTFOUND
;

732 
rc
 = 
BCME_BADARG
;

733  
rc
;

734 
	}
}

737 
	$dhd_wlfc_h™gî_p›pkt
(* 
h™gî
, 
uöt32
 
¶Ÿ_id
, ** 
pktout
, 
ªmove_‰om_h™gî
)

739 
rc
 = 
BCME_OK
;

740 
wlfc_h™gî_t
* 
h
 = (wlfc_h™gî_t*)
h™gî
;

743 i‡(
¶Ÿ_id
 =
WLFC_HANGER_MAXITEMS
)

744  
BCME_NOTFOUND
;

746 i‡(
h
) {

747 i‡(
h
->
ôems
[
¶Ÿ_id
].
°©e
 !
WLFC_HANGER_ITEM_STATE_FREE
) {

748 *
pktout
 = 
h
->
ôems
[
¶Ÿ_id
].
pkt
;

749 i‡(
ªmove_‰om_h™gî
) {

750 
h
->
ôems
[
¶Ÿ_id
].
°©e
 =

751 
WLFC_HANGER_ITEM_STATE_FREE
;

752 
h
->
ôems
[
¶Ÿ_id
].
pkt
 = 
NULL
;

753 
h
->
ôems
[
¶Ÿ_id
].
idítifõr
 = 0;

754 
h
->
ôems
[
¶Ÿ_id
].
gí
 = 0xff;

755 
h
->
p›≥d
++;

759 
h
->
Áûed_to_p›
++;

760 
rc
 = 
BCME_NOTFOUND
;

764 
rc
 = 
BCME_BADARG
;

765  
rc
;

766 
	}
}

769 
	$dhd_wlfc_h™gî_m¨k_suµªs£d
(* 
h™gî
, 
uöt32
 
¶Ÿ_id
, 
uöt8
 
gí
)

771 
rc
 = 
BCME_OK
;

772 
wlfc_h™gî_t
* 
h
 = (wlfc_h™gî_t*)
h™gî
;

775 i‡(
¶Ÿ_id
 =
WLFC_HANGER_MAXITEMS
)

776  
BCME_NOTFOUND
;

777 i‡(
h
) {

778 
h
->
ôems
[
¶Ÿ_id
].
gí
 = gen;

779 i‡(
h
->
ôems
[
¶Ÿ_id
].
°©e
 =
WLFC_HANGER_ITEM_STATE_INUSE
) {

780 
h
->
ôems
[
¶Ÿ_id
].
°©e
 = 
WLFC_HANGER_ITEM_STATE_INUSE_SUPPRESSED
;

783 
rc
 = 
BCME_BADARG
;

786 
rc
 = 
BCME_BADARG
;

788  
rc
;

789 
	}
}

792 
	$_dhd_wlfc_pushhódî
(
©ho°_wl_°©us_öfo_t
* 
˘x
, * 
p
, 
boﬁ
 
tim_sig«l
,

793 
uöt8
 
tim_bmp
, uöt8 
mac_h™dÀ
, 
uöt32
 
htodèg
)

795 
uöt32
 
wl_pktöfo
 = 0;

796 
uöt8
* 
wlh
;

797 
uöt8
 
d©aOff£t
;

798 
uöt8
 
fûÀrs
;

799 
uöt8
 
tim_sig«l_Àn
 = 0;

801 
bdc_hódî
 *
h
;

803 i‡(
tim_sig«l
) {

804 
tim_sig«l_Àn
 = 1 + 1 + 
WLFC_CTL_VALUE_LEN_PENDING_TRAFFIC_BMP
;

808 
d©aOff£t
 = 
WLFC_CTL_VALUE_LEN_PKTTAG
 + 2 + 
tim_sig«l_Àn
;

809 
fûÀrs
 = 
	`ROUNDUP
(
d©aOff£t
, 4) - dataOffset;

810 
d©aOff£t
 +
fûÀrs
;

812 
	`PKTPUSH
(
˘x
->
osh
, 
p
, 
d©aOff£t
);

813 
wlh
 = (
uöt8
*Ë
	`PKTDATA
(
˘x
->
osh
, 
p
);

815 
wl_pktöfo
 = 
	`htﬁ32
(
htodèg
);

817 
wlh
[0] = 
WLFC_CTL_TYPE_PKTTAG
;

818 
wlh
[1] = 
WLFC_CTL_VALUE_LEN_PKTTAG
;

819 
	`mem˝y
(&
wlh
[2], &
wl_pktöfo
, (
uöt32
));

821 i‡(
tim_sig«l_Àn
) {

822 
wlh
[
d©aOff£t
 - 
fûÀrs
 - 
tim_sig«l_Àn
 ] =

823 
WLFC_CTL_TYPE_PENDING_TRAFFIC_BMP
;

824 
wlh
[
d©aOff£t
 - 
fûÀrs
 - 
tim_sig«l_Àn
 + 1] =

825 
WLFC_CTL_VALUE_LEN_PENDING_TRAFFIC_BMP
;

826 
wlh
[
d©aOff£t
 - 
fûÀrs
 - 
tim_sig«l_Àn
 + 2] = 
mac_h™dÀ
;

827 
wlh
[
d©aOff£t
 - 
fûÀrs
 - 
tim_sig«l_Àn
 + 3] = 
tim_bmp
;

829 i‡(
fûÀrs
)

830 
	`mem£t
(&
wlh
[
d©aOff£t
 - 
fûÀrs
], 
WLFC_CTL_TYPE_FILLER
, fillers);

832 
	`PKTPUSH
(
˘x
->
osh
, 
p
, 
BDC_HEADER_LEN
);

833 
h
 = (
bdc_hódî
 *)
	`PKTDATA
(
˘x
->
osh
, 
p
);

834 
h
->
Êags
 = (
BDC_PROTO_VER
 << 
BDC_FLAG_VER_SHIFT
);

835 i‡(
	`PKTSUMNEEDED
(
p
))

836 
h
->
Êags
 |
BDC_FLAG_SUM_NEEDED
;

839 
h
->
¥i‹ôy
 = (
	`PKTPRIO
(
p
Ë& 
BDC_PRIORITY_MASK
);

840 
h
->
Êags2
 = 0;

841 
h
->
d©aOff£t
 = dataOffset >> 2;

842 
	`BDC_SET_IF_IDX
(
h
, 
	`DHD_PKTTAG_IF
(
	`PKTTAG
(
p
)));

843  
BCME_OK
;

844 
	}
}

847 
	$_dhd_wlfc_puŒhódî
(
©ho°_wl_°©us_öfo_t
* 
˘x
, * 
pktbuf
)

849 
bdc_hódî
 *
h
;

851 i‡(
	`PKTLEN
(
˘x
->
osh
, 
pktbuf
Ë< 
BDC_HEADER_LEN
) {

852 
	`WLFC_DBGMESG
(("%s:Ñx d©®toÿsh‹à(%d < %d)\n", 
__FUNCTION__
,

853 
	`PKTLEN
(
˘x
->
osh
, 
pktbuf
), 
BDC_HEADER_LEN
));

854  
BCME_ERROR
;

856 
h
 = (
bdc_hódî
 *)
	`PKTDATA
(
˘x
->
osh
, 
pktbuf
);

859 
	`PKTPULL
(
˘x
->
osh
, 
pktbuf
, 
BDC_HEADER_LEN
);

861 i‡(
	`PKTLEN
(
˘x
->
osh
, 
pktbuf
Ë< (
h
->
d©aOff£t
 << 2)) {

862 
	`WLFC_DBGMESG
(("%s:Ñx d©®toÿsh‹à(%d < %d)\n", 
__FUNCTION__
,

863 
	`PKTLEN
(
˘x
->
osh
, 
pktbuf
), (
h
->
d©aOff£t
 << 2)));

864  
BCME_ERROR
;

867 
	`PKTPULL
(
˘x
->
osh
, 
pktbuf
, (
h
->
d©aOff£t
 << 2));

868  
BCME_OK
;

869 
	}
}

871 
wlfc_mac_des¸ùt‹_t
*

872 
	$_dhd_wlfc_föd_èbÀ_íåy
(
©ho°_wl_°©us_öfo_t
* 
˘x
, * 
p
)

874 
i
;

875 
wlfc_mac_des¸ùt‹_t
* 
èbÀ
 = 
˘x
->
de°ö©i⁄_íåõs
.
nodes
;

876 
uöt8
 
ifid
 = 
	`DHD_PKTTAG_IF
(
	`PKTTAG
(
p
));

877 
uöt8
* 
d°n
 = 
	`DHD_PKTTAG_DSTN
(
	`PKTTAG
(
p
));

879 i‡(((
˘x
->
de°ö©i⁄_íåõs
.
öãrÁ˚s
[
ifid
].
i·y≥
 =
WLC_E_IF_ROLE_STA
) ||

880 
	`ETHER_ISMULTI
(
d°n
) ||

881 (
˘x
->
de°ö©i⁄_íåõs
.
öãrÁ˚s
[
ifid
].
i·y≥
 =
WLC_E_IF_ROLE_P2P_CLIENT
)) &&

882 (
˘x
->
de°ö©i⁄_íåõs
.
öãrÁ˚s
[
ifid
].
occupõd
)) {

883  &
˘x
->
de°ö©i⁄_íåõs
.
öãrÁ˚s
[
ifid
];

886 
i
 = 0; i < 
WLFC_MAC_DESC_TABLE_SIZE
; i++) {

887 i‡(
èbÀ
[
i
].
occupõd
) {

888 i‡(
èbÀ
[
i
].
öãrÁ˚_id
 =
ifid
) {

889 i‡(!
	`memcmp
(
èbÀ
[
i
].
ó
, 
d°n
, 
ETHER_ADDR_LEN
))

890  &
èbÀ
[
i
];

894  &
˘x
->
de°ö©i⁄_íåõs
.
Ÿhî
;

895 
	}
}

898 
	$_dhd_wlfc_rﬁlback_∑ckë_toq
(
©ho°_wl_°©us_öfo_t
* 
˘x
,

899 * 
p
, 
ewlfc_∑ckë_°©e_t
 
pkt_ty≥
, 
uöt32
 
h¶Ÿ
)

911 
wlfc_mac_des¸ùt‹_t
* 
íåy
;

912 * 
pktout
;

913 
rc
 = 
BCME_OK
;

914 
¥ec
;

916 
íåy
 = 
	`_dhd_wlfc_föd_èbÀ_íåy
(
˘x
, 
p
);

917 
¥ec
 = 
	`DHD_PKTTAG_FIFO
(
	`PKTTAG
(
p
));

918 i‡(
íåy
 !
NULL
) {

919 i‡(
pkt_ty≥
 =
eWLFC_PKTTYPE_SUPPRESSED
) {

921 i‡(
	`WLFC_PKTQ_PENQ_HEAD
(&
íåy
->
psq
, ((
¥ec
 << 1Ë+ 1), 
p
Ë=
NULL
) {

922 
	`WLFC_DBGMESG
(("Eº‹: %s():%d\n", 
__FUNCTION__
, 
__LINE__
));

923 
rc
 = 
BCME_ERROR
;

928 
rc
 = 
	`_dhd_wlfc_puŒhódî
(
˘x
, 
p
);

929 i‡(
rc
 !
BCME_OK
) {

930 
	`WLFC_DBGMESG
(("Eº‹: %s():%d\n", 
__FUNCTION__
, 
__LINE__
));

932 
	`dhd_wlfc_h™gî_p›pkt
(
˘x
->
h™gî
, 
h¶Ÿ
, &
pktout
, 1);

933 
	`PKTFREE
(
˘x
->
osh
, 
p
, 
TRUE
);

934 
rc
 = 
BCME_ERROR
;

935  
rc
;

938 i‡(
pkt_ty≥
 =
eWLFC_PKTTYPE_DELAYED
) {

940 i‡(
	`WLFC_PKTQ_PENQ_HEAD
(&
íåy
->
psq
, (
¥ec
 << 1), 
p
Ë=
NULL
) {

941 
	`WLFC_DBGMESG
(("Eº‹: %s():%d\n", 
__FUNCTION__
, 
__LINE__
));

942 
rc
 = 
BCME_ERROR
;

947 i‡(
	`WLFC_PKTQ_PENQ_HEAD
(&
˘x
->
SENDQ
, 
¥ec
, 
p
Ë=
NULL
) {

948 
	`WLFC_DBGMESG
(("Eº‹: %s():%d\n", 
__FUNCTION__
, 
__LINE__
));

949 
rc
 = 
BCME_ERROR
;

953 
	`dhd_wlfc_h™gî_p›pkt
(
˘x
->
h™gî
, 
h¶Ÿ
, &
pktout
, 1);

956 
	`WLFC_DECR_SEQCOUNT
(
íåy
, 
¥ec
);

962 i‡(!
	`DHD_PKTTAG_CREDITCHECK
(
	`PKTTAG
(
p
))) {

963 
íåy
->
ªque°ed_¸edô
++;

967 
	`WLFC_DBGMESG
(("Eº‹: %s():%d\n", 
__FUNCTION__
, 
__LINE__
));

968 
rc
 = 
BCME_ERROR
;

970 i‡(
rc
 !
BCME_OK
)

971 
˘x
->
°©s
.
rﬁlback_Áûed
++;

973 
˘x
->
°©s
.
rﬁlback
++;

975  
rc
;

976 
	}
}

979 
	$_dhd_wlfc_Êow_c⁄åﬁ_check
(
©ho°_wl_°©us_öfo_t
* 
˘x
, 
pktq
* 
pq
, 
uöt8
 
if_id
)

981 i‡((
pq
->
Àn
 <
WLFC_FLOWCONTROL_LOWATER
Ë&& (
˘x
->
ho°if_Êow_°©e
[
if_id
] =
ON
)) {

983 
˘x
->
ho°if_Êow_°©e
[
if_id
] = 
OFF
;

988 
	`WLFC_DBGMESG
(("F"));

989 
	`dhd_txÊowc⁄åﬁ
(
˘x
->
dhdp
, 
if_id
, 
OFF
);

990 
˘x
->
toggÀ_ho°_if
 = 0;

992 i‡((
pq
->
Àn
 >
WLFC_FLOWCONTROL_HIWATER
Ë&& (
˘x
->
ho°if_Êow_°©e
[
if_id
] =
OFF
)) {

994 
˘x
->
ho°if_Êow_°©e
[
if_id
] = 
ON
;

999 
	`WLFC_DBGMESG
(("N"));

1000 
	`dhd_txÊowc⁄åﬁ
(
˘x
->
dhdp
, 
if_id
, 
ON
);

1001 
˘x
->
ho°_ifidx
 = 
if_id
;

1002 
˘x
->
toggÀ_ho°_if
 = 1;

1005 
	}
}

1008 
	$_dhd_wlfc_£nd_sig«l⁄ly_∑ckë
(
©ho°_wl_°©us_öfo_t
* 
˘x
, 
wlfc_mac_des¸ùt‹_t
* 
íåy
,

1009 
uöt8
 
è_bmp
)

1011 
rc
 = 
BCME_OK
;

1012 * 
p
 = 
NULL
;

1013 
dummyÀn
 = ((
dhd_pub_t
 *)
˘x
->
dhdp
)->
hdæí
+ 12;

1016 
p
 = 
	`PKTGET
(
˘x
->
osh
, 
dummyÀn
, 
TRUE
);

1017 i‡(
p
) {

1018 
	`PKTPULL
(
˘x
->
osh
, 
p
, 
dummyÀn
);

1019 
	`DHD_PKTTAG_SET_H2DTAG
(
	`PKTTAG
(
p
), 0);

1020 
	`_dhd_wlfc_pushhódî
(
˘x
, 
p
, 
TRUE
, 
è_bmp
, 
íåy
->
mac_h™dÀ
, 0);

1021 
	`DHD_PKTTAG_SETSIGNALONLY
(
	`PKTTAG
(
p
), 1);

1022 #ifde‡
PROP_TXSTATUS_DEBUG


1023 
˘x
->
°©s
.
sig«l_⁄ly_pkts_£¡
++;

1025 
rc
 = 
	`dhd_bus_txd©a
(((
dhd_pub_t
 *)
˘x
->
dhdp
)->
bus
, 
p
);

1026 i‡(
rc
 !
BCME_OK
) {

1027 
	`PKTFREE
(
˘x
->
osh
, 
p
, 
TRUE
);

1031 
	`DHD_ERROR
(("%s: couldn'tállocateÇew %d-byteÖacket\n",

1032 
__FUNCTION__
, 
dummyÀn
));

1033 
rc
 = 
BCME_NOMEM
;

1035  
rc
;

1036 
	}
}

1039 
boﬁ


1040 
	$_dhd_wlfc_åaffic_≥ndög_check
(
©ho°_wl_°©us_öfo_t
* 
˘x
, 
wlfc_mac_des¸ùt‹_t
* 
íåy
,

1041 
¥ec
)

1043 
boﬁ
 
rc
 = 
FALSE
;

1045 i‡(
íåy
->
°©e
 =
WLFC_STATE_CLOSE
) {

1046 i‡((
	`pktq_∂í
(&
íåy
->
psq
, (
¥ec
 << 1)) == 0) &&

1047 (
	`pktq_∂í
(&
íåy
->
psq
, ((
¥ec
 << 1) + 1)) == 0)) {

1049 i‡(
íåy
->
åaffic_≥ndög_bmp
 & 
	`NBITVAL
(
¥ec
)) {

1050 
rc
 = 
TRUE
;

1051 
íåy
->
åaffic_≥ndög_bmp
 =

1052 
íåy
->
åaffic_≥ndög_bmp
 & ~ 
	`NBITVAL
(
¥ec
);

1056 i‡(!(
íåy
->
åaffic_≥ndög_bmp
 & 
	`NBITVAL
(
¥ec
))) {

1057 
rc
 = 
TRUE
;

1058 
íåy
->
åaffic_≥ndög_bmp
 =

1059 
íåy
->
åaffic_≥ndög_bmp
 | 
	`NBITVAL
(
¥ec
);

1063 i‡(
rc
) {

1065 i‡(
íåy
->
åaffic_œ°ªp‹ãd_bmp
 !íåy->
åaffic_≥ndög_bmp
) {

1066 
íåy
->
£nd_tim_sig«l
 = 1;

1067 
	`_dhd_wlfc_£nd_sig«l⁄ly_∑ckë
(
˘x
, 
íåy
,É¡ry->
åaffic_≥ndög_bmp
);

1068 
íåy
->
åaffic_œ°ªp‹ãd_bmp
 =É¡ry->
åaffic_≥ndög_bmp
;

1069 
íåy
->
£nd_tim_sig«l
 = 0;

1072 
rc
 = 
FALSE
;

1075  
rc
;

1076 
	}
}

1079 
	$_dhd_wlfc_íque_suµªs£d
(
©ho°_wl_°©us_öfo_t
* 
˘x
, 
¥ec
, * 
p
)

1081 
wlfc_mac_des¸ùt‹_t
* 
íåy
;

1083 
íåy
 = 
	`_dhd_wlfc_föd_èbÀ_íåy
(
˘x
, 
p
);

1084 i‡(
íåy
 =
NULL
) {

1085 
	`WLFC_DBGMESG
(("Eº‹: %s():%d\n", 
__FUNCTION__
, 
__LINE__
));

1086  
BCME_NOTFOUND
;

1093 i‡(
	`WLFC_PKTQ_PENQ
(&
íåy
->
psq
, ((
¥ec
 << 1Ë+ 1), 
p
Ë=
NULL
) {

1094 
˘x
->
°©s
.
dñayq_fuŒ_îr‹
++;

1096 
	`WLFC_DBGMESG
(("s"));

1097  
BCME_ERROR
;

1100 
	`_dhd_wlfc_åaffic_≥ndög_check
(
˘x
, 
íåy
, 
¥ec
);

1101 
	`_dhd_wlfc_Êow_c⁄åﬁ_check
(
˘x
, &
íåy
->
psq
, 
	`DHD_PKTTAG_IF
(
	`PKTTAG
(
p
)));

1102  
BCME_OK
;

1103 
	}
}

1106 
	$_dhd_wlfc_¥ëx_pkçro˚ss
(
©ho°_wl_°©us_öfo_t
* 
˘x
,

1107 
wlfc_mac_des¸ùt‹_t
* 
íåy
, * 
p
, 
hódî_√eded
, 
uöt32
* 
¶Ÿ
)

1109 
rc
 = 
BCME_OK
;

1110 
h¶Ÿ
 = 
WLFC_HANGER_MAXITEMS
;

1111 
boﬁ
 
£nd_tim_upd©e
 = 
FALSE
;

1112 
uöt32
 
htod
 = 0;

1113 
uöt8
 
‰ì_˘r
;

1115 *
¶Ÿ
 = 
h¶Ÿ
;

1117 i‡(
íåy
 =
NULL
) {

1118 
íåy
 = 
	`_dhd_wlfc_föd_èbÀ_íåy
(
˘x
, 
p
);

1121 i‡(
íåy
 =
NULL
) {

1122 
	`WLFC_DBGMESG
(("Eº‹: %s():%d\n", 
__FUNCTION__
, 
__LINE__
));

1123  
BCME_ERROR
;

1125 i‡(
íåy
->
£nd_tim_sig«l
) {

1126 
£nd_tim_upd©e
 = 
TRUE
;

1127 
íåy
->
£nd_tim_sig«l
 = 0;

1128 
íåy
->
åaffic_œ°ªp‹ãd_bmp
 =É¡ry->
åaffic_≥ndög_bmp
;

1130 i‡(
hódî_√eded
) {

1131 
h¶Ÿ
 = 
	`dhd_wlfc_h™gî_gë_‰ì_¶Ÿ
(
˘x
->
h™gî
);

1132 
‰ì_˘r
 = 
	`WLFC_SEQCOUNT
(
íåy
, 
	`DHD_PKTTAG_FIFO
(
	`PKTTAG
(
p
)));

1133 
	`DHD_PKTTAG_SET_H2DTAG
(
	`PKTTAG
(
p
), 
htod
);

1134 
	`WLFC_PKTFLAG_SET_GENERATION
(
htod
, 
íåy
->
gíî©i⁄
);

1135 
íåy
->
å™sô_cou¡
++;

1138 
h¶Ÿ
 = 
	`WLFC_PKTID_HSLOT_GET
(
	`DHD_PKTTAG_H2DTAG
(
	`PKTTAG
(
p
)));

1139 
‰ì_˘r
 = 
	`WLFC_PKTID_FREERUNCTR_GET
(
	`DHD_PKTTAG_H2DTAG
(
	`PKTTAG
(
p
)));

1141 
	`WLFC_PKTID_HSLOT_SET
(
htod
, 
h¶Ÿ
);

1142 
	`WLFC_PKTID_FREERUNCTR_SET
(
htod
, 
‰ì_˘r
);

1143 
	`DHD_PKTTAG_SETPKTDIR
(
	`PKTTAG
(
p
), 1);

1144 
	`WL_TXSTATUS_SET_FLAGS
(
htod
, 
WLFC_PKTFLAG_PKTFROMHOST
);

1145 
	`WL_TXSTATUS_SET_FIFO
(
htod
, 
	`DHD_PKTTAG_FIFO
(
	`PKTTAG
(
p
)));

1147 i‡(!
	`DHD_PKTTAG_CREDITCHECK
(
	`PKTTAG
(
p
))) {

1152 
	`WLFC_PKTFLAG_SET_PKTREQUESTED
(
htod
);

1155 
	`WLFC_PKTFLAG_CLR_PKTREQUESTED
(
htod
);

1157 i‡(
hódî_√eded
) {

1158 
rc
 = 
	`_dhd_wlfc_pushhódî
(
˘x
, 
p
, 
£nd_tim_upd©e
,

1159 
íåy
->
åaffic_œ°ªp‹ãd_bmp
,É¡ry->
mac_h™dÀ
, 
htod
);

1160 i‡(
rc
 =
BCME_OK
) {

1161 
	`DHD_PKTTAG_SET_H2DTAG
(
	`PKTTAG
(
p
), 
htod
);

1167 
rc
 = 
	`dhd_wlfc_h™gî_pushpkt
(
˘x
->
h™gî
, 
p
, 
h¶Ÿ
);

1168 i‡(
rc
 =
BCME_OK
) {

1170 
	`WLFC_INCR_SEQCOUNT
(
íåy
, 
	`DHD_PKTTAG_FIFO
(
	`PKTTAG
(
p
)));

1171 #ifde‡
PROP_TXSTATUS_DEBUG


1172 ((
wlfc_h™gî_t
*)(
˘x
->
h™gî
))->
ôems
[
h¶Ÿ
].
push_time
 =

1173 
	`OSL_SYSUPTIME
();

1177 
	`WLFC_DBGMESG
(("%s() hanger_pushpkt() failed,Ñc: %d\n",

1178 
__FUNCTION__
, 
rc
));

1183 
gí
;

1186 
rc
 = 
	`_dhd_wlfc_puŒhódî
(
˘x
, 
p
);

1187 i‡(
rc
 =
BCME_OK
) {

1188 
h¶Ÿ
 = 
	`WLFC_PKTID_HSLOT_GET
(
	`DHD_PKTTAG_H2DTAG
(
	`PKTTAG
(
p
)));

1189 
	`dhd_wlfc_h™gî_gë_gíbô
(
˘x
->
h™gî
, 
p
, 
h¶Ÿ
, &
gí
);

1191 
	`WLFC_PKTFLAG_SET_GENERATION
(
htod
, 
gí
);

1192 
‰ì_˘r
 = 
	`WLFC_PKTID_FREERUNCTR_GET
(
	`DHD_PKTTAG_H2DTAG
(
	`PKTTAG
(
p
)));

1194 
	`_dhd_wlfc_pushhódî
(
˘x
, 
p
, 
£nd_tim_upd©e
,

1195 
íåy
->
åaffic_œ°ªp‹ãd_bmp
,É¡ry->
mac_h™dÀ
, 
htod
);

1198 *
¶Ÿ
 = 
h¶Ÿ
;

1199  
rc
;

1200 
	}
}

1203 
	$_dhd_wlfc_is_de°ö©i⁄_˛o£d
(
©ho°_wl_°©us_öfo_t
* 
˘x
,

1204 
wlfc_mac_des¸ùt‹_t
* 
íåy
, 
¥ec
)

1206 i‡(
˘x
->
de°ö©i⁄_íåõs
.
öãrÁ˚s
[
íåy
->
öãrÁ˚_id
].
i·y≥
 ==

1207 
WLC_E_IF_ROLE_P2P_GO
) {

1214 i‡((
íåy
->
°©e
 =
WLFC_STATE_CLOSE
Ë&& (íåy->
ªque°ed_¸edô
 == 0) &&

1215 (
íåy
->
ªque°ed_∑ckë
 == 0))

1219 i‡(((
íåy
->
°©e
 =
WLFC_STATE_CLOSE
Ë&& (íåy->
ªque°ed_¸edô
 == 0) &&

1220 (
íåy
->
ªque°ed_∑ckë
 == 0)) ||

1221 (!(
íåy
->
ac_bôm≠
 & (1 << 
¥ec
))))

1225 
	}
}

1228 
	$_dhd_wlfc_deque_dñayedq
(
©ho°_wl_°©us_öfo_t
* 
˘x
,

1229 
¥ec
, 
uöt8
* 
ac_¸edô_•ít
, uöt8* 
√eds_hdr
, 
wlfc_mac_des¸ùt‹_t
** 
íåy_out
)

1231 
wlfc_mac_des¸ùt‹_t
* 
íåy
;

1232 
wlfc_mac_des¸ùt‹_t
* 
èbÀ
;

1233 
uöt8
 
tokí_pos
;

1234 
tŸÆ_íåõs
;

1235 * 
p
 = 
NULL
;

1236 
pout
;

1237 
i
;

1239 *
íåy_out
 = 
NULL
;

1240 
tokí_pos
 = 
˘x
->tokí_pos[
¥ec
];

1242 *
ac_¸edô_•ít
 = 1;

1243 *
√eds_hdr
 = 1;

1246 
èbÀ
 = (
wlfc_mac_des¸ùt‹_t
*)&
˘x
->
de°ö©i⁄_íåõs
;

1247 
tŸÆ_íåõs
 = (
˘x
->
de°ö©i⁄_íåõs
)/(
wlfc_mac_des¸ùt‹_t
);

1249 
i
 = 0; i < 
tŸÆ_íåõs
; i++) {

1250 
íåy
 = &
èbÀ
[(
tokí_pos
 + 
i
Ë% 
tŸÆ_íåõs
];

1251 i‡(
íåy
->
occupõd
) {

1252 i‡(!
	`_dhd_wlfc_is_de°ö©i⁄_˛o£d
(
˘x
, 
íåy
, 
¥ec
)) {

1253 
p
 = 
	`pktq_mdeq
(&
íåy
->
psq
,

1257 
	`NBITVAL
((
¥ec
 << 1Ë+ 1), &
pout
);

1258 *
√eds_hdr
 = 0;

1260 i‡(
p
 =
NULL
) {

1261 i‡(
íåy
->
suµªs£d
 =
TRUE
) {

1262 i‡((
íåy
->
suµr_å™sô_cou¡
 <=

1263 
íåy
->
suµªss_cou¡
)) {

1264 
íåy
->
suµªs£d
 = 
FALSE
;

1266  
NULL
;

1270 
p
 = 
	`pktq_mdeq
(&
íåy
->
psq
,

1271 
	`NBITVAL
((
¥ec
 << 1)),

1272 &
pout
);

1273 *
√eds_hdr
 = 1;

1276 i‡(
p
 !
NULL
) {

1278 i‡(
íåy
->
ªque°ed_¸edô
 > 0) {

1279 
íåy
->
ªque°ed_¸edô
--;

1280 #ifde‡
PROP_TXSTATUS_DEBUG


1281 
íåy
->
d°n¸edô_£¡_∑ckës
++;

1291 i‡(
íåy
->
°©e
 =
WLFC_STATE_CLOSE
)

1292 *
ac_¸edô_•ít
 = 0;

1294 i‡(
íåy
->
ªque°ed_∑ckë
 > 0) {

1295 
íåy
->
ªque°ed_∑ckë
--;

1296 
	`DHD_PKTTAG_SETONETIMEPKTRQST
(
	`PKTTAG
(
p
));

1297 i‡(
íåy
->
°©e
 =
WLFC_STATE_CLOSE
)

1298 *
ac_¸edô_•ít
 = 0;

1301 
˘x
->
tokí_pos
[
¥ec
] =

1302 (
tokí_pos
 + 
i
 + 1Ë% 
tŸÆ_íåõs
;

1303 *
íåy_out
 = 
íåy
;

1304 
	`_dhd_wlfc_Êow_c⁄åﬁ_check
(
˘x
, &
íåy
->
psq
,

1305 
	`DHD_PKTTAG_IF
(
	`PKTTAG
(
p
)));

1310 
	`_dhd_wlfc_åaffic_≥ndög_check
(
˘x
, 
íåy
, 
¥ec
);

1311  
p
;

1316  
NULL
;

1317 
	}
}

1320 
	$_dhd_wlfc_deque_£ndq
(
©ho°_wl_°©us_öfo_t
* 
˘x
, 
¥ec
)

1322 
wlfc_mac_des¸ùt‹_t
* 
íåy
;

1323 * 
p
;

1326 
p
 = 
	`pktq_pdeq
(&
˘x
->
SENDQ
, 
¥ec
);

1327 i‡(
p
 !
NULL
) {

1328 i‡(
	`ETHER_ISMULTI
(
	`DHD_PKTTAG_DSTN
(
	`PKTTAG
(
p
))))

1330  
p
;

1332 
íåy
 = 
	`_dhd_wlfc_föd_èbÀ_íåy
(
˘x
, 
p
);

1334 i‡(
íåy
 =
NULL
) {

1335 
	`WLFC_DBGMESG
(("Eº‹: %s():%d\n", 
__FUNCTION__
, 
__LINE__
));

1336  
p
;

1339 (
p
 !
NULL
)) {

1345 i‡(
	`WLFC_PKTQ_PENQ
(&
íåy
->
psq
, (
¥ec
 << 1), 
p
Ë=
NULL
) {

1346 
	`WLFC_DBGMESG
(("D"));

1348 
	`PKTFREE
(
˘x
->
osh
, 
p
, 
TRUE
);

1349 
˘x
->
°©s
.
dñayq_fuŒ_îr‹
++;

1355 
	`_dhd_wlfc_åaffic_≥ndög_check
(
˘x
, 
íåy
, 
¥ec
);

1357 
p
 = 
	`pktq_pdeq
(&
˘x
->
SENDQ
, 
¥ec
);

1358 i‡(
p
 =
NULL
)

1361 
íåy
 = 
	`_dhd_wlfc_föd_èbÀ_íåy
(
˘x
, 
p
);

1363 i‡((
íåy
 =
NULL
Ë|| (
	`ETHER_ISMULTI
(
	`DHD_PKTTAG_DSTN
(
	`PKTTAG
(
p
))))) {

1364  
p
;

1368  
p
;

1369 
	}
}

1372 
	$_dhd_wlfc_mac_íåy_upd©e
(
©ho°_wl_°©us_öfo_t
* 
˘x
, 
wlfc_mac_des¸ùt‹_t
* 
íåy
,

1373 
ewlfc_mac_íåy_a˘i⁄_t
 
a˘i⁄
, 
uöt8
 
ifid
, uöt8 
i·y≥
, uöt8* 
ó
)

1375 
rc
 = 
BCME_OK
;

1377 i‡(
a˘i⁄
 =
eWLFC_MAC_ENTRY_ACTION_ADD
) {

1378 
íåy
->
occupõd
 = 1;

1379 
íåy
->
°©e
 = 
WLFC_STATE_OPEN
;

1380 
íåy
->
ªque°ed_¸edô
 = 0;

1381 
íåy
->
öãrÁ˚_id
 = 
ifid
;

1382 
íåy
->
i·y≥
 = iftype;

1383 
íåy
->
ac_bôm≠
 = 0xff;

1385 i‡(
ó
 !
NULL
)

1386 
	`mem˝y
(&
íåy
->
ó
[0],Éa, 
ETHER_ADDR_LEN
);

1387 
	`pktq_öô
(&
íåy
->
psq
, 
WLFC_PSQ_PREC_COUNT
, 
WLFC_PSQ_LEN
);

1389 i‡(
a˘i⁄
 =
eWLFC_MAC_ENTRY_ACTION_UPDATE
) {

1390 
íåy
->
occupõd
 = 1;

1391 
íåy
->
°©e
 = 
WLFC_STATE_OPEN
;

1392 
íåy
->
ªque°ed_¸edô
 = 0;

1393 
íåy
->
öãrÁ˚_id
 = 
ifid
;

1394 
íåy
->
i·y≥
 = iftype;

1395 
íåy
->
ac_bôm≠
 = 0xff;

1397 i‡(
ó
 !
NULL
)

1398 
	`mem˝y
(&
íåy
->
ó
[0],Éa, 
ETHER_ADDR_LEN
);

1400 i‡(
a˘i⁄
 =
eWLFC_MAC_ENTRY_ACTION_DEL
) {

1401 
íåy
->
occupõd
 = 0;

1402 
íåy
->
°©e
 = 
WLFC_STATE_CLOSE
;

1403 
íåy
->
ªque°ed_¸edô
 = 0;

1408  
rc
;

1409 
	}
}

1412 
	$_dhd_wlfc_b‹row_¸edô
(
©ho°_wl_°©us_öfo_t
* 
˘x
, 
uöt8
 
avaûabÀ_¸edô_m≠
, 
b‹rowî_ac
)

1414 
Àndî_ac
;

1415 
rc
 = 
BCME_ERROR
;

1417 i‡(
˘x
 =
NULL
 || 
avaûabÀ_¸edô_m≠
 == 0) {

1418 
	`WLFC_DBGMESG
(("Eº‹: %s():%d\n", 
__FUNCTION__
, 
__LINE__
));

1419  
BCME_BADARG
;

1423 
Àndî_ac
 = 0;Üídî_a¯<
AC_COUNT
;Üender_ac++) {

1424 i‡((
avaûabÀ_¸edô_m≠
 && (1 << 
Àndî_ac
)) &&

1425 (
˘x
->
FIFO_¸edô
[
Àndî_ac
] > 0)) {

1426 
˘x
->
¸edôs_b‹rowed
[
b‹rowî_ac
][
Àndî_ac
]++;

1427 
˘x
->
FIFO_¸edô
[
Àndî_ac
]--;

1428 
rc
 = 
BCME_OK
;

1433  
rc
;

1434 
	}
}

1437 
	$dhd_wlfc_öãrÁ˚_íåy_upd©e
(* 
°©e
,

1438 
ewlfc_mac_íåy_a˘i⁄_t
 
a˘i⁄
, 
uöt8
 
ifid
, uöt8 
i·y≥
, uöt8* 
ó
)

1440 
©ho°_wl_°©us_öfo_t
* 
˘x
 = (©ho°_wl_°©us_öfo_t*)
°©e
;

1441 
wlfc_mac_des¸ùt‹_t
* 
íåy
;

1443 i‡(
ifid
 >
WLFC_MAX_IFNUM
)

1444  
BCME_BADARG
;

1446 
íåy
 = &
˘x
->
de°ö©i⁄_íåõs
.
öãrÁ˚s
[
ifid
];

1447  
	`_dhd_wlfc_mac_íåy_upd©e
(
˘x
, 
íåy
, 
a˘i⁄
, 
ifid
, 
i·y≥
, 
ó
);

1448 
	}
}

1451 
	$dhd_wlfc_FIFO¸edôm≠_upd©e
(* 
°©e
, 
uöt8
* 
¸edôs
)

1453 
©ho°_wl_°©us_öfo_t
* 
˘x
 = (©ho°_wl_°©us_öfo_t*)
°©e
;

1456 
˘x
->
FIFO_¸edô
[0] = 
¸edôs
[0];

1457 
˘x
->
FIFO_¸edô
[1] = 
¸edôs
[1];

1458 
˘x
->
FIFO_¸edô
[2] = 
¸edôs
[2];

1459 
˘x
->
FIFO_¸edô
[3] = 
¸edôs
[3];

1461 
˘x
->
FIFO_¸edô
[4] = 
¸edôs
[4];

1463 
˘x
->
FIFO_¸edô
[5] = 0;

1464  
BCME_OK
;

1465 
	}
}

1468 
	$dhd_wlfc_íque_£ndq
(* 
°©e
, 
¥ec
, * 
p
)

1470 
©ho°_wl_°©us_öfo_t
* 
˘x
 = (©ho°_wl_°©us_öfo_t*)
°©e
;

1472 i‡((
°©e
 =
NULL
) ||

1474 (
¥ec
 > 
AC_COUNT
) ||

1475 (
p
 =
NULL
)) {

1476 
	`WLFC_DBGMESG
(("Eº‹: %s():%d\n", 
__FUNCTION__
, 
__LINE__
));

1477  
BCME_BADARG
;

1479 i‡(
FALSE
 =
	`dhd_¥ec_íq
(
˘x
->
dhdp
, &˘x->
SENDQ
, 
p
, 
¥ec
)) {

1480 
˘x
->
°©s
.
£ndq_fuŒ_îr‹
++;

1485 
	`WLFC_HOST_FIFO_DROPPEDCTR_INC
(
˘x
, 
¥ec
);

1486 
	`WLFC_DBGMESG
(("Q"));

1487 
	`PKTFREE
(
˘x
->
osh
, 
p
, 
TRUE
);

1488  
BCME_ERROR
;

1490 
˘x
->
°©s
.
pktö
++;

1492  
BCME_OK
;

1493 
	}
}

1496 
	$_dhd_wlfc_h™dÀ_∑ckë_commô
(
©ho°_wl_°©us_öfo_t
* 
˘x
, 
ac
,

1497 
dhd_wlfc_commô_öfo_t
 *
commô_öfo
, 
f_commôpkt_t
 
fcommô
, * 
commô_˘x
)

1499 
uöt32
 
h¶Ÿ
;

1500 
rc
;

1515 
	`DHD_PKTTAG_SETCREDITCHECK
(
	`PKTTAG
(
commô_öfo
->
p
), commô_öfo->
ac_fifo_¸edô_•ít
);

1516 
rc
 = 
	`_dhd_wlfc_¥ëx_pkçro˚ss
(
˘x
, 
commô_öfo
->
mac_íåy
, commô_öfo->
p
,

1517 
commô_öfo
->
√eds_hdr
, &
h¶Ÿ
);

1519 i‡(
rc
 =
BCME_OK
)

1520 
rc
 = 
	`fcommô
(
commô_˘x
, 
commô_öfo
->
p
);

1522 
˘x
->
°©s
.
gíîic_îr‹
++;

1524 i‡(
rc
 =
BCME_OK
) {

1525 
˘x
->
°©s
.
pkt2bus
++;

1526 i‡(
commô_öfo
->
ac_fifo_¸edô_•ít
) {

1527 
˘x
->
°©s
.
£ndq_pkts
[
ac
]++;

1528 
	`WLFC_HOST_FIFO_CREDIT_INC_SENTCTRS
(
˘x
, 
ac
);

1530 } i‡(
rc
 =
BCME_NORESOURCE
)

1531 
rc
 = 
BCME_ERROR
;

1538 
rc
 = 
	`_dhd_wlfc_rﬁlback_∑ckë_toq
(
˘x
, 
commô_öfo
->
p
,

1539 (
commô_öfo
->
pkt_ty≥
), 
h¶Ÿ
);

1540 i‡(
rc
 !
BCME_OK
)

1541 
˘x
->
°©s
.
rﬁlback_Áûed
++;

1543 
rc
 = 
BCME_ERROR
;

1546  
rc
;

1547 
	}
}

1550 
	$dhd_wlfc_commô_∑ckës
(* 
°©e
, 
f_commôpkt_t
 
fcommô
, * 
commô_˘x
)

1552 
ac
;

1553 
¸edô
;

1554 
rc
;

1555 
dhd_wlfc_commô_öfo_t
 
commô_öfo
;

1556 
©ho°_wl_°©us_öfo_t
* 
˘x
 = (©ho°_wl_°©us_öfo_t*)
°©e
;

1557 
¸edô_cou¡
 = 0;

1558 
bus_ªåy_cou¡
 = 0;

1559 
uöt8
 
ac_avaûabÀ
 = 0;

1561 i‡((
°©e
 =
NULL
) ||

1562 (
fcommô
 =
NULL
)) {

1563 
	`WLFC_DBGMESG
(("Eº‹: %s():%d\n", 
__FUNCTION__
, 
__LINE__
));

1564  
BCME_BADARG
;

1567 
	`mem£t
(&
commô_öfo
, 0, (commit_info));

1582 
ac
 = 
AC_COUNT
;ác >= 0;ác--) {

1584 
öôül_¸edô_cou¡
 = 
˘x
->
FIFO_¸edô
[
ac
];

1587 
commô_öfo
.
√eds_hdr
 = 1;

1588 
commô_öfo
.
mac_íåy
 = 
NULL
;

1589 
commô_öfo
.
pkt_ty≥
 = 
eWLFC_PKTTYPE_NEW
;

1592 
commô_öfo
.
p
 = 
	`_dhd_wlfc_deque_£ndq
(
˘x
, 
ac
);

1593 i‡(
commô_öfo
.
p
 =
NULL
)

1595 i‡(
	`ETHER_ISMULTI
(
	`DHD_PKTTAG_DSTN
(
	`PKTTAG
(
commô_öfo
.
p
)))) {

1596 
	`ASSERT
(
ac
 =
AC_COUNT
);

1598 i‡(
˘x
->
FIFO_¸edô
[
ac
]) {

1599 
rc
 = 
	`_dhd_wlfc_h™dÀ_∑ckë_commô
(
˘x
, 
ac
, &
commô_öfo
,

1600 
fcommô
, 
commô_˘x
);

1603 i‡(
rc
 =
BCME_OK
) {

1604 i‡(
commô_öfo
.
ac_fifo_¸edô_•ít
) {

1605 (Ë
	`_dhd_wlfc_b‹row_¸edô
(
˘x
,

1606 
ac_avaûabÀ
, 
ac
);

1607 
¸edô_cou¡
--;

1610 
bus_ªåy_cou¡
++;

1611 i‡(
bus_ªåy_cou¡
 >
BUS_RETRIES
) {

1612 
	`DHD_ERROR
((" %s: busÉrror\n",

1613 
__FUNCTION__
));

1614  
rc
;

1620 } 
commô_öfo
.
p
);

1622 
¸edô
 = 0; cªdô < 
˘x
->
FIFO_¸edô
[
ac
];) {

1623 
commô_öfo
.
p
 = 
	`_dhd_wlfc_deque_dñayedq
(
˘x
, 
ac
,

1624 &(
commô_öfo
.
ac_fifo_¸edô_•ít
),

1625 &(
commô_öfo
.
√eds_hdr
),

1626 &(
commô_öfo
.
mac_íåy
));

1628 i‡(
commô_öfo
.
p
 =
NULL
)

1631 
commô_öfo
.
pkt_ty≥
 = (commô_öfo.
√eds_hdr
Ë? 
eWLFC_PKTTYPE_DELAYED
 :

1632 
eWLFC_PKTTYPE_SUPPRESSED
;

1634 
rc
 = 
	`_dhd_wlfc_h™dÀ_∑ckë_commô
(
˘x
, 
ac
, &
commô_öfo
,

1635 
fcommô
, 
commô_˘x
);

1638 i‡(
rc
 =
BCME_OK
) {

1639 i‡(
commô_öfo
.
ac_fifo_¸edô_•ít
) {

1640 
¸edô
++;

1644 
bus_ªåy_cou¡
++;

1645 i‡(
bus_ªåy_cou¡
 >
BUS_RETRIES
) {

1646 
	`DHD_ERROR
(("dhd_wlfc_commit_packets(): busÉrror\n"));

1647 
˘x
->
FIFO_¸edô
[
ac
] -
¸edô
;

1648  
rc
;

1653 
˘x
->
FIFO_¸edô
[
ac
] -
¸edô
;

1659 i‡(
öôül_¸edô_cou¡
 =
˘x
->
FIFO_¸edô
[
ac
]) {

1660 
ac_avaûabÀ
 |(1 << 
ac
);

1661 
¸edô_cou¡
 +
˘x
->
FIFO_¸edô
[
ac
];

1675 i‡((
ac_avaûabÀ
 & 
WLFC_AC_BE_TRAFFIC_ONLY
) == WLFC_AC_BE_TRAFFIC_ONLY) {

1677 i‡(
˘x
->
Ælow_¸edô_b‹row
) {

1678 
ac
 = 1;

1681 
dñè
;

1682 
cuº_t
 = 
	`OSL_SYSUPTIME
();

1684 i‡(
cuº_t
 > 
˘x
->
b‹row_de„r_time°amp
)

1685 
dñè
 = 
cuº_t
 - 
˘x
->
b‹row_de„r_time°amp
;

1687 
dñè
 = 0xfffffff‡+ 
cuº_t
 - 
˘x
->
b‹row_de„r_time°amp
;

1689 i‡(
dñè
 >
WLFC_BORROW_DEFER_PERIOD_MS
) {

1691 
˘x
->
Ælow_¸edô_b‹row
 = 
TRUE
;

1692 
˘x
->
b‹row_de„r_time°amp
 = 0;

1694  
BCME_OK
;

1699 
˘x
->
Ælow_¸edô_b‹row
 = 
FALSE
;

1700 
˘x
->
b‹row_de„r_time°amp
 = 
	`OSL_SYSUPTIME
();

1701  
BCME_OK
;

1707 ; (
¸edô_cou¡
 > 0);) {

1709 
commô_öfo
.
p
 = 
	`_dhd_wlfc_deque_dñayedq
(
˘x
, 
ac
,

1710 &(
commô_öfo
.
ac_fifo_¸edô_•ít
),

1711 &(
commô_öfo
.
√eds_hdr
),

1712 &(
commô_öfo
.
mac_íåy
));

1713 i‡(
commô_öfo
.
p
 =
NULL
)

1716 
commô_öfo
.
pkt_ty≥
 = (commô_öfo.
√eds_hdr
Ë? 
eWLFC_PKTTYPE_DELAYED
 :

1717 
eWLFC_PKTTYPE_SUPPRESSED
;

1719 
rc
 = 
	`_dhd_wlfc_h™dÀ_∑ckë_commô
(
˘x
, 
ac
, &
commô_öfo
,

1720 
fcommô
, 
commô_˘x
);

1723 i‡(
rc
 =
BCME_OK
) {

1724 i‡(
commô_öfo
.
ac_fifo_¸edô_•ít
) {

1725 (Ë
	`_dhd_wlfc_b‹row_¸edô
(
˘x
, 
ac_avaûabÀ
, 
ac
);

1726 
¸edô_cou¡
--;

1730 
bus_ªåy_cou¡
++;

1731 i‡(
bus_ªåy_cou¡
 >
BUS_RETRIES
) {

1732 
	`DHD_ERROR
(("dhd_wlfc_commit_packets(): busÉrror\n"));

1733  
rc
;

1738  
BCME_OK
;

1739 
	}
}

1741 
uöt8


1742 
	$dhd_wlfc_föd_mac_desc_id_‰om_mac
(
dhd_pub_t
 *
dhdp
, 
uöt8
* 
ó
)

1744 
wlfc_mac_des¸ùt‹_t
* 
èbÀ
 =

1745 ((
©ho°_wl_°©us_öfo_t
*)
dhdp
->
wlfc_°©e
)->
de°ö©i⁄_íåõs
.
nodes
;

1746 
uöt8
 
èbÀ_ödex
;

1748 i‡(
ó
 !
NULL
) {

1749 
èbÀ_ödex
 = 0;ÅabÀ_ödex < 
WLFC_MAC_DESC_TABLE_SIZE
;Åable_index++) {

1750 i‡((
	`memcmp
(
ó
, &
èbÀ
[
èbÀ_ödex
].ó[0], 
ETHER_ADDR_LEN
) == 0) &&

1751 
èbÀ
[
èbÀ_ödex
].
occupõd
)

1752  
èbÀ_ödex
;

1755  
WLFC_MAC_DESC_ID_INVALID
;

1756 
	}
}

1759 
	$dhd_wlfc_txcom∂ëe
(
dhd_pub_t
 *
dhd
, *
txp
, 
boﬁ
 
suc˚ss
)

1761 
©ho°_wl_°©us_öfo_t
* 
wlfc
 = (athost_wl_status_info_t*)

1762 
dhd
->
wlfc_°©e
;

1763 * 
p
;

1764 
fifo_id
;

1766 
	`dhd_os_wlfc_block
(
dhd
);

1768 i‡(
	`DHD_PKTTAG_SIGNALONLY
(
	`PKTTAG
(
txp
))) {

1769 #ifde‡
PROP_TXSTATUS_DEBUG


1770 
wlfc
->
°©s
.
sig«l_⁄ly_pkts_‰ìd
++;

1772 i‡(
suc˚ss
)

1774 
	`PKTFREE
(
wlfc
->
osh
, 
txp
, 
TRUE
);

1775 
	`dhd_os_wlfc_unblock
(
dhd
);

1778 i‡(!
suc˚ss
) {

1779 
	`WLFC_DBGMESG
(("At: %s():%d, bus_complete() failure for %p, htod_tag:0x%08x\n",

1780 
__FUNCTION__
, 
__LINE__
, 
txp
, 
	`DHD_PKTTAG_H2DTAG
(
	`PKTTAG
(txp))));

1781 
	`dhd_wlfc_h™gî_p›pkt
(
wlfc
->
h™gî
, 
	`WLFC_PKTID_HSLOT_GET
(
DHD_PKTTAG_H2DTAG


1782 (
	`PKTTAG
(
txp
))), &
p
, 1);

1785 
	`dhd_txcom∂ëe
(
dhd
, 
txp
, 
FALSE
);

1788 i‡(
	`DHD_PKTTAG_CREDITCHECK
(
	`PKTTAG
(
txp
))) {

1789 
Àndî
, 
¸edô_ªtu∫ed
 = 0;

1791 
fifo_id
 = 
	`DHD_PKTTAG_FIFO
(
	`PKTTAG
(
txp
));

1794 
Àndî
 = 
AC_COUNT
;Üender >= 0;Üender--) {

1795 i‡(
wlfc
->
¸edôs_b‹rowed
[
fifo_id
][
Àndî
] > 0) {

1796 
wlfc
->
FIFO_¸edô
[
Àndî
]++;

1797 
wlfc
->
¸edôs_b‹rowed
[
fifo_id
][
Àndî
]--;

1798 
¸edô_ªtu∫ed
 = 1;

1803 i‡(!
¸edô_ªtu∫ed
) {

1804 
wlfc
->
FIFO_¸edô
[
fifo_id
]++;

1808 
	`PKTFREE
(
wlfc
->
osh
, 
txp
, 
TRUE
);

1810 
	`dhd_os_wlfc_unblock
(
dhd
);

1812 
	}
}

1815 
	$dhd_wlfc_com¥es£d_tx°©us_upd©e
(
dhd_pub_t
 *
dhd
, 
uöt8
* 
pkt_öfo
, uöt8 
Àn
)

1817 
uöt8
 
°©us_Êag
;

1818 
uöt32
 
°©us
;

1819 
ªt
;

1820 
ªmove_‰om_h™gî
 = 1;

1821 * 
pktbuf
;

1822 
uöt8
 
fifo_id
;

1823 
uöt8
 
cou¡
 = 0;

1824 
uöt32
 
°©us_g
;

1825 
uöt32
 
h¶Ÿ
, 
h˙t
;

1826 
wlfc_mac_des¸ùt‹_t
* 
íåy
 = 
NULL
;

1827 
©ho°_wl_°©us_öfo_t
* 
wlfc
 = (athost_wl_status_info_t*)

1828 
dhd
->
wlfc_°©e
;

1830 
	`mem˝y
(&
°©us
, 
pkt_öfo
, (
uöt32
));

1831 
°©us_Êag
 = 
	`WL_TXSTATUS_GET_FLAGS
(
°©us
);

1832 
°©us_g
 = 
°©us
 & 0xff000000;

1833 
h¶Ÿ
 = (
°©us
 & 0x00ffff00) >> 8;

1834 
h˙t
 = 
°©us
 & 0xff;

1835 
Àn
 = 
pkt_öfo
[4];

1837 
wlfc
->
°©s
.
tx°©us_ö
++;

1839 i‡(
°©us_Êag
 =
WLFC_CTL_PKTFLAG_DISCARD
) {

1840 
wlfc
->
°©s
.
pkt_‰ìd
++;

1843 i‡(
°©us_Êag
 =
WLFC_CTL_PKTFLAG_D11SUPPRESS
) {

1844 
wlfc
->
°©s
.
d11_suµªss
++;

1845 
ªmove_‰om_h™gî
 = 0;

1848 i‡(
°©us_Êag
 =
WLFC_CTL_PKTFLAG_WLSUPPRESS
) {

1849 
wlfc
->
°©s
.
wl_suµªss
++;

1850 
ªmove_‰om_h™gî
 = 0;

1853 i‡(
°©us_Êag
 =
WLFC_CTL_PKTFLAG_TOSSED_BYWLC
) {

1854 
wlfc
->
°©s
.
wlc_tos£d_pkts
++;

1856 
cou¡
 < 
Àn
) {

1857 
°©us
 = (
°©us_g
 << 24Ë| (
h¶Ÿ
 << 8Ë| (
h˙t
);

1858 
cou¡
++;

1859 
h¶Ÿ
++;

1860 
h˙t
++;

1862 
ªt
 = 
	`dhd_wlfc_h™gî_p›pkt
(
wlfc
->
h™gî
,

1863 
	`WLFC_PKTID_HSLOT_GET
(
°©us
), &
pktbuf
, 
ªmove_‰om_h™gî
);

1864 i‡(
ªt
 !
BCME_OK
) {

1869 
íåy
 = 
	`_dhd_wlfc_föd_èbÀ_íåy
(
wlfc
, 
pktbuf
);

1871 i‡(!
ªmove_‰om_h™gî
) {

1873 i‡(!
íåy
->
suµªs£d
 ||É¡ry->
gíî©i⁄
 !
	`WLFC_PKTID_GEN
(
°©us
)) {

1874 
íåy
->
suµªs£d
 = 
TRUE
;

1875 
íåy
->
suµªss_cou¡
 = 
	`pktq_mÀn
(&íåy->
psq
,

1876 
	`NBITVAL
((
	`WL_TXSTATUS_GET_FIFO
(
°©us
) << 1) + 1));

1877 
íåy
->
suµr_å™sô_cou¡
 =É¡ry->
å™sô_cou¡
;

1879 
íåy
->
gíî©i⁄
 = 
	`WLFC_PKTID_GEN
(
°©us
);

1882 #ifde‡
PROP_TXSTATUS_DEBUG


1884 
uöt32
 
√w_t
 = 
	`OSL_SYSUPTIME
();

1885 
uöt32
 
ﬁd_t
;

1886 
uöt32
 
dñè
;

1887 
ﬁd_t
 = ((
wlfc_h™gî_t
*)(
wlfc
->
h™gî
))->
ôems
[

1888 
	`WLFC_PKTID_HSLOT_GET
(
°©us
)].
push_time
;

1891 
wlfc
->
°©s
.
œãncy_ßm∂e_cou¡
++;

1892 i‡(
√w_t
 > 
ﬁd_t
)

1893 
dñè
 = 
√w_t
 - 
ﬁd_t
;

1895 
dñè
 = 0xfffffff‡+ 
√w_t
 - 
ﬁd_t
;

1896 
wlfc
->
°©s
.
tŸÆ_°©us_œãncy
 +
dñè
;

1897 
wlfc
->
°©s
.
œãncy_mo°_ª˚¡
 = 
dñè
;

1899 
wlfc
->
°©s
.
dñès
[wlfc->°©s.
idx_dñè
++] = 
dñè
;

1900 i‡(
wlfc
->
°©s
.
idx_dñè
 =(wlfc->°©s.
dñès
)/(
uöt32
))

1901 
wlfc
->
°©s
.
idx_dñè
 = 0;

1905 
fifo_id
 = 
	`DHD_PKTTAG_FIFO
(
	`PKTTAG
(
pktbuf
));

1908 i‡(
	`DHD_PKTTAG_CREDITCHECK
(
	`PKTTAG
(
pktbuf
))) {

1909 i‡(
wlfc
->
¥›tx°©us_mode
 =
WLFC_FCMODE_IMPLIED_CREDIT
) {

1911 
Àndî
, 
¸edô_ªtu∫ed
 = 0;

1914 
Àndî
 = 
AC_COUNT
;Üender >= 0;Üender--) {

1915 i‡(
wlfc
->
¸edôs_b‹rowed
[
fifo_id
][
Àndî
] > 0) {

1916 
wlfc
->
FIFO_¸edô
[
Àndî
]++;

1917 
wlfc
->
¸edôs_b‹rowed
[
fifo_id
][
Àndî
]--;

1918 
¸edô_ªtu∫ed
 = 1;

1923 i‡(!
¸edô_ªtu∫ed
) {

1924 
wlfc
->
FIFO_¸edô
[
fifo_id
]++;

1933 i‡(!
íåy
) {

1935 
íåy
 = 
	`_dhd_wlfc_föd_èbÀ_íåy
(
wlfc
, 
pktbuf
);

1937 i‡(!
	`DHD_PKTTAG_ONETIMEPKTRQST
(
	`PKTTAG
(
pktbuf
)))

1938 
íåy
->
ªque°ed_¸edô
++;

1939 #ifde‡
PROP_TXSTATUS_DEBUG


1940 
íåy
->
d°n¸edô_acks
++;

1943 i‡((
°©us_Êag
 =
WLFC_CTL_PKTFLAG_D11SUPPRESS
) ||

1944 (
°©us_Êag
 =
WLFC_CTL_PKTFLAG_WLSUPPRESS
)) {

1946 
ªt
 = 
	`_dhd_wlfc_íque_suµªs£d
(
wlfc
, 
fifo_id
, 
pktbuf
);

1947 i‡(
ªt
 !
BCME_OK
) {

1949 
	`dhd_wlfc_h™gî_p›pkt
(
wlfc
->
h™gî
, 
	`WLFC_PKTID_HSLOT_GET
(
°©us
),

1950 &
pktbuf
, 1);

1953 
	`dhd_txcom∂ëe
(
dhd
, 
pktbuf
, 
FALSE
);

1954 
íåy
->
å™sô_cou¡
--;

1958 i‡(
íåy
->
suµªs£d
) {

1959 
íåy
->
suµr_å™sô_cou¡
--;

1961 
	`PKTFREE
(
wlfc
->
osh
, 
pktbuf
, 
TRUE
);

1965 
	`dhd_wlfc_h™gî_m¨k_suµªs£d
(
wlfc
->
h™gî
,

1966 
	`WLFC_PKTID_HSLOT_GET
(
°©us
), 
	`WLFC_PKTID_GEN
(status));

1967 
íåy
->
suµªss_cou¡
++;

1971 
	`dhd_txcom∂ëe
(
dhd
, 
pktbuf
, 
TRUE
);

1972 
íåy
->
å™sô_cou¡
--;

1977 i‡(
íåy
->
suµªs£d
) {

1978 
íåy
->
suµr_å™sô_cou¡
--;

1981 
	`PKTFREE
(
wlfc
->
osh
, 
pktbuf
, 
TRUE
);

1984  
BCME_OK
;

1985 
	}
}

1989 
	$dhd_wlfc_tx°©us_upd©e
(
dhd_pub_t
 *
dhd
, 
uöt8
* 
pkt_öfo
)

1991 
uöt8
 
°©us_Êag
;

1992 
uöt32
 
°©us
;

1993 
ªt
;

1994 
ªmove_‰om_h™gî
 = 1;

1995 * 
pktbuf
;

1996 
uöt8
 
fifo_id
;

1997 
wlfc_mac_des¸ùt‹_t
* 
íåy
 = 
NULL
;

1998 
©ho°_wl_°©us_öfo_t
* 
wlfc
 = (athost_wl_status_info_t*)

1999 
dhd
->
wlfc_°©e
;

2001 
	`mem˝y
(&
°©us
, 
pkt_öfo
, (
uöt32
));

2002 
°©us_Êag
 = 
	`WL_TXSTATUS_GET_FLAGS
(
°©us
);

2003 
wlfc
->
°©s
.
tx°©us_ö
++;

2005 i‡(
°©us_Êag
 =
WLFC_CTL_PKTFLAG_DISCARD
) {

2006 
wlfc
->
°©s
.
pkt_‰ìd
++;

2009 i‡(
°©us_Êag
 =
WLFC_CTL_PKTFLAG_D11SUPPRESS
) {

2010 
wlfc
->
°©s
.
d11_suµªss
++;

2011 
ªmove_‰om_h™gî
 = 0;

2014 i‡(
°©us_Êag
 =
WLFC_CTL_PKTFLAG_WLSUPPRESS
) {

2015 
wlfc
->
°©s
.
wl_suµªss
++;

2016 
ªmove_‰om_h™gî
 = 0;

2019 i‡(
°©us_Êag
 =
WLFC_CTL_PKTFLAG_TOSSED_BYWLC
) {

2020 
wlfc
->
°©s
.
wlc_tos£d_pkts
++;

2023 
ªt
 = 
	`dhd_wlfc_h™gî_p›pkt
(
wlfc
->
h™gî
,

2024 
	`WLFC_PKTID_HSLOT_GET
(
°©us
), &
pktbuf
, 
ªmove_‰om_h™gî
);

2025 i‡(
ªt
 !
BCME_OK
) {

2027  
ªt
;

2030 
íåy
 = 
	`_dhd_wlfc_föd_èbÀ_íåy
(
wlfc
, 
pktbuf
);

2032 i‡(!
ªmove_‰om_h™gî
) {

2034 i‡(!
íåy
->
suµªs£d
 ||É¡ry->
gíî©i⁄
 !
	`WLFC_PKTID_GEN
(
°©us
)) {

2035 
íåy
->
suµªs£d
 = 
TRUE
;

2036 
íåy
->
suµªss_cou¡
 = 
	`pktq_mÀn
(&íåy->
psq
,

2037 
	`NBITVAL
((
	`WL_TXSTATUS_GET_FIFO
(
°©us
) << 1) + 1));

2038 
íåy
->
suµr_å™sô_cou¡
 =É¡ry->
å™sô_cou¡
;

2040 
íåy
->
gíî©i⁄
 = 
	`WLFC_PKTID_GEN
(
°©us
);

2043 #ifde‡
PROP_TXSTATUS_DEBUG


2045 
uöt32
 
√w_t
 = 
	`OSL_SYSUPTIME
();

2046 
uöt32
 
ﬁd_t
;

2047 
uöt32
 
dñè
;

2048 
ﬁd_t
 = ((
wlfc_h™gî_t
*)(
wlfc
->
h™gî
))->
ôems
[

2049 
	`WLFC_PKTID_HSLOT_GET
(
°©us
)].
push_time
;

2052 
wlfc
->
°©s
.
œãncy_ßm∂e_cou¡
++;

2053 i‡(
√w_t
 > 
ﬁd_t
)

2054 
dñè
 = 
√w_t
 - 
ﬁd_t
;

2056 
dñè
 = 0xfffffff‡+ 
√w_t
 - 
ﬁd_t
;

2057 
wlfc
->
°©s
.
tŸÆ_°©us_œãncy
 +
dñè
;

2058 
wlfc
->
°©s
.
œãncy_mo°_ª˚¡
 = 
dñè
;

2060 
wlfc
->
°©s
.
dñès
[wlfc->°©s.
idx_dñè
++] = 
dñè
;

2061 i‡(
wlfc
->
°©s
.
idx_dñè
 =(wlfc->°©s.
dñès
)/(
uöt32
))

2062 
wlfc
->
°©s
.
idx_dñè
 = 0;

2066 
fifo_id
 = 
	`DHD_PKTTAG_FIFO
(
	`PKTTAG
(
pktbuf
));

2069 i‡(
	`DHD_PKTTAG_CREDITCHECK
(
	`PKTTAG
(
pktbuf
))) {

2070 i‡(
wlfc
->
¥›tx°©us_mode
 =
WLFC_FCMODE_IMPLIED_CREDIT
) {

2072 
Àndî
, 
¸edô_ªtu∫ed
 = 0;

2075 
Àndî
 = 
AC_COUNT
;Üender >= 0;Üender--) {

2076 i‡(
wlfc
->
¸edôs_b‹rowed
[
fifo_id
][
Àndî
] > 0) {

2077 
wlfc
->
FIFO_¸edô
[
Àndî
]++;

2078 
wlfc
->
¸edôs_b‹rowed
[
fifo_id
][
Àndî
]--;

2079 
¸edô_ªtu∫ed
 = 1;

2084 i‡(!
¸edô_ªtu∫ed
) {

2085 
wlfc
->
FIFO_¸edô
[
fifo_id
]++;

2094 i‡(!
íåy
) {

2096 
íåy
 = 
	`_dhd_wlfc_föd_èbÀ_íåy
(
wlfc
, 
pktbuf
);

2098 i‡(!
	`DHD_PKTTAG_ONETIMEPKTRQST
(
	`PKTTAG
(
pktbuf
)))

2099 
íåy
->
ªque°ed_¸edô
++;

2100 #ifde‡
PROP_TXSTATUS_DEBUG


2101 
íåy
->
d°n¸edô_acks
++;

2104 i‡((
°©us_Êag
 =
WLFC_CTL_PKTFLAG_D11SUPPRESS
) ||

2105 (
°©us_Êag
 =
WLFC_CTL_PKTFLAG_WLSUPPRESS
)) {

2107 
ªt
 = 
	`_dhd_wlfc_íque_suµªs£d
(
wlfc
, 
fifo_id
, 
pktbuf
);

2108 i‡(
ªt
 !
BCME_OK
) {

2110 
	`dhd_wlfc_h™gî_p›pkt
(
wlfc
->
h™gî
, 
	`WLFC_PKTID_HSLOT_GET
(
°©us
),

2111 &
pktbuf
, 1);

2114 
	`dhd_txcom∂ëe
(
dhd
, 
pktbuf
, 
FALSE
);

2115 
íåy
->
å™sô_cou¡
--;

2119 i‡(
íåy
->
suµªs£d
) {

2120 
íåy
->
suµr_å™sô_cou¡
--;

2122 
	`PKTFREE
(
wlfc
->
osh
, 
pktbuf
, 
TRUE
);

2125 
	`dhd_wlfc_h™gî_m¨k_suµªs£d
(
wlfc
->
h™gî
,

2126 
	`WLFC_PKTID_HSLOT_GET
(
°©us
), 
	`WLFC_PKTID_GEN
(status));

2127 
íåy
->
suµªss_cou¡
++;

2131 
	`dhd_txcom∂ëe
(
dhd
, 
pktbuf
, 
TRUE
);

2132 
íåy
->
å™sô_cou¡
--;

2135 i‡(
íåy
->
suµªs£d
) {

2136 
íåy
->
suµr_å™sô_cou¡
--;

2139 
	`PKTFREE
(
wlfc
->
osh
, 
pktbuf
, 
TRUE
);

2141  
BCME_OK
;

2142 
	}
}

2145 
	$dhd_wlfc_fifo¸edôback_ödiˇã
(
dhd_pub_t
 *
dhd
, 
uöt8
* 
¸edôs
)

2147 
i
;

2148 
©ho°_wl_°©us_öfo_t
* 
wlfc
 = (athost_wl_status_info_t*)

2149 
dhd
->
wlfc_°©e
;

2150 
i
 = 0; i < 
WLFC_CTL_VALUE_LEN_FIFO_CREDITBACK
; i++) {

2151 #ifde‡
PROP_TXSTATUS_DEBUG


2152 
wlfc
->
°©s
.
fifo_¸edôs_back
[
i
] +
¸edôs
[i];

2155 i‡(
wlfc
->
¥›tx°©us_mode
 =
WLFC_FCMODE_EXPLICIT_CREDIT
)

2157 
Àndî
;

2160 
Àndî
 = 
AC_COUNT
; (Àndî >0Ë&& (
¸edôs
[
i
] > 0);Üender--) {

2161 i‡(
wlfc
->
¸edôs_b‹rowed
[
i
][
Àndî
] > 0) {

2162 i‡(
¸edôs
[
i
] >
wlfc
->
¸edôs_b‹rowed
[i][
Àndî
]) {

2163 
¸edôs
[
i
] -
wlfc
->
¸edôs_b‹rowed
[i][
Àndî
];

2164 
wlfc
->
FIFO_¸edô
[
Àndî
] +=

2165 
wlfc
->
¸edôs_b‹rowed
[
i
][
Àndî
];

2166 
wlfc
->
¸edôs_b‹rowed
[
i
][
Àndî
] = 0;

2169 
wlfc
->
¸edôs_b‹rowed
[
i
][
Àndî
] -
¸edôs
[i];

2170 
wlfc
->
FIFO_¸edô
[
Àndî
] +
¸edôs
[
i
];

2171 
¸edôs
[
i
] = 0;

2177 i‡(
¸edôs
[
i
] > 0) {

2178 
wlfc
->
FIFO_¸edô
[
i
] +
¸edôs
[i];

2183  
BCME_OK
;

2184 
	}
}

2187 
	$dhd_wlfc_dbg_£num_check
(
dhd_pub_t
 *
dhd
, 
uöt8
 *
vÆue
)

2189 
uöt32
 
time°amp
;

2191 ()
dhd
;

2193 
	`bc›y
(&
vÆue
[2], &
time°amp
, (
uöt32
));

2194 
	`DHD_INFO
(("RXPKT: SEQ: %d,Åime°am∞%d\n", 
vÆue
[1], 
time°amp
));

2195  
BCME_OK
;

2196 
	}
}

2200 
	$dhd_wlfc_rssi_ödiˇã
(
dhd_pub_t
 *
dhd
, 
uöt8
* 
rssi
)

2202 ()
dhd
;

2203 ()
rssi
;

2204  
BCME_OK
;

2205 
	}
}

2208 
	$dhd_wlfc_mac_èbÀ_upd©e
(
dhd_pub_t
 *
dhd
, 
uöt8
* 
vÆue
, uöt8 
ty≥
)

2210 
rc
;

2211 
©ho°_wl_°©us_öfo_t
* 
wlfc
 = (athost_wl_status_info_t*)

2212 
dhd
->
wlfc_°©e
;

2213 
wlfc_mac_des¸ùt‹_t
* 
èbÀ
;

2214 
uöt8
 
exi°ög_ödex
;

2215 
uöt8
 
èbÀ_ödex
;

2216 
uöt8
 
ifid
;

2217 
uöt8
* 
ó
;

2219 
	`WLFC_DBGMESG
(("%s(), mac [%02x:%02x:%02x:%02x:%02x:%02x],%s,idx:%d,id:0x%02x\n",

2220 
__FUNCTION__
, 
vÆue
[2], value[3], value[4], value[5], value[6], value[7],

2221 ((
ty≥
 =
WLFC_CTL_TYPE_MACDESC_ADD
) ? "ADD":"DEL"),

2222 
	`WLFC_MAC_DESC_GET_LOOKUP_INDEX
(
vÆue
[0]), value[0]));

2224 
èbÀ
 = 
wlfc
->
de°ö©i⁄_íåõs
.
nodes
;

2225 
èbÀ_ödex
 = 
	`WLFC_MAC_DESC_GET_LOOKUP_INDEX
(
vÆue
[0]);

2226 
ifid
 = 
vÆue
[1];

2227 
ó
 = &
vÆue
[2];

2229 i‡(
ty≥
 =
WLFC_CTL_TYPE_MACDESC_ADD
) {

2230 
exi°ög_ödex
 = 
	`dhd_wlfc_föd_mac_desc_id_‰om_mac
(
dhd
, &
vÆue
[2]);

2231 i‡(
exi°ög_ödex
 =
WLFC_MAC_DESC_ID_INVALID
) {

2233 i‡(!
èbÀ
[
èbÀ_ödex
].
occupõd
) {

2234 
èbÀ
[
èbÀ_ödex
].
mac_h™dÀ
 = 
vÆue
[0];

2235 
rc
 = 
	`_dhd_wlfc_mac_íåy_upd©e
(
wlfc
, &
èbÀ
[
èbÀ_ödex
],

2236 
eWLFC_MAC_ENTRY_ACTION_ADD
, 
ifid
,

2237 
wlfc
->
de°ö©i⁄_íåõs
.
öãrÁ˚s
[
ifid
].
i·y≥
,

2238 
ó
);

2242 
wlfc
->
°©s
.
mac_upd©e_Áûed
++;

2250 i‡(
exi°ög_ödex
 !
èbÀ_ödex
) {

2252 
èbÀ
[
exi°ög_ödex
].
occupõd
 = 0;

2253 
èbÀ
[
exi°ög_ödex
].
°©e
 = 
WLFC_STATE_CLOSE
;

2254 
èbÀ
[
exi°ög_ödex
].
ªque°ed_¸edô
 = 0;

2255 
èbÀ
[
exi°ög_ödex
].
öãrÁ˚_id
 = 0;

2262 i‡(
ty≥
 =
WLFC_CTL_TYPE_MACDESC_DEL
) {

2263 i‡(
èbÀ
[
èbÀ_ödex
].
occupõd
) {

2264 
rc
 = 
	`_dhd_wlfc_mac_íåy_upd©e
(
wlfc
, &
èbÀ
[
èbÀ_ödex
],

2265 
eWLFC_MAC_ENTRY_ACTION_DEL
, 
ifid
,

2266 
wlfc
->
de°ö©i⁄_íåõs
.
öãrÁ˚s
[
ifid
].
i·y≥
,

2267 
ó
);

2271 
wlfc
->
°©s
.
mac_upd©e_Áûed
++;

2274 
	`BCM_REFERENCE
(
rc
);

2275  
BCME_OK
;

2276 
	}
}

2279 
	$dhd_wlfc_psmode_upd©e
(
dhd_pub_t
 *
dhd
, 
uöt8
* 
vÆue
, uöt8 
ty≥
)

2282 
©ho°_wl_°©us_öfo_t
* 
wlfc
 = (athost_wl_status_info_t*)

2283 
dhd
->
wlfc_°©e
;

2284 
wlfc_mac_des¸ùt‹_t
* 
èbÀ
;

2285 
wlfc_mac_des¸ùt‹_t
* 
desc
;

2286 
uöt8
 
mac_h™dÀ
 = 
vÆue
[0];

2287 
i
;

2289 
èbÀ
 = 
wlfc
->
de°ö©i⁄_íåõs
.
nodes
;

2290 
desc
 = &
èbÀ
[
	`WLFC_MAC_DESC_GET_LOOKUP_INDEX
(
mac_h™dÀ
)];

2291 i‡(
desc
->
occupõd
) {

2293 
desc
->
ªque°ed_¸edô
 = 0;

2294 i‡(
ty≥
 =
WLFC_CTL_TYPE_MAC_OPEN
) {

2295 
desc
->
°©e
 = 
WLFC_STATE_OPEN
;

2296 
	`DHD_WLFC_CTRINC_MAC_OPEN
(
desc
);

2299 
desc
->
°©e
 = 
WLFC_STATE_CLOSE
;

2300 
	`DHD_WLFC_CTRINC_MAC_CLOSE
(
desc
);

2304 
i
 = 
AC_BE
; i < 
AC_COUNT
; i++) {

2305 
	`_dhd_wlfc_åaffic_≥ndög_check
(
wlfc
, 
desc
, 
i
);

2310 
wlfc
->
°©s
.
psmode_upd©e_Áûed
++;

2312  
BCME_OK
;

2313 
	}
}

2316 
	$dhd_wlfc_öãrÁ˚_upd©e
(
dhd_pub_t
 *
dhd
, 
uöt8
* 
vÆue
, uöt8 
ty≥
)

2319 
©ho°_wl_°©us_öfo_t
* 
wlfc
 = (athost_wl_status_info_t*)

2320 
dhd
->
wlfc_°©e
;

2321 
wlfc_mac_des¸ùt‹_t
* 
èbÀ
;

2322 
uöt8
 
if_id
 = 
vÆue
[0];

2324 i‡(
if_id
 < 
WLFC_MAX_IFNUM
) {

2325 
èbÀ
 = 
wlfc
->
de°ö©i⁄_íåõs
.
öãrÁ˚s
;

2326 i‡(
èbÀ
[
if_id
].
occupõd
) {

2327 i‡(
ty≥
 =
WLFC_CTL_TYPE_INTERFACE_OPEN
) {

2328 
èbÀ
[
if_id
].
°©e
 = 
WLFC_STATE_OPEN
;

2332 
èbÀ
[
if_id
].
°©e
 = 
WLFC_STATE_CLOSE
;

2335  
BCME_OK
;

2338 
wlfc
->
°©s
.
öãrÁ˚_upd©e_Áûed
++;

2340  
BCME_OK
;

2341 
	}
}

2344 
	$dhd_wlfc_¸edô_ªque°
(
dhd_pub_t
 *
dhd
, 
uöt8
* 
vÆue
)

2346 
©ho°_wl_°©us_öfo_t
* 
wlfc
 = (athost_wl_status_info_t*)

2347 
dhd
->
wlfc_°©e
;

2348 
wlfc_mac_des¸ùt‹_t
* 
èbÀ
;

2349 
wlfc_mac_des¸ùt‹_t
* 
desc
;

2350 
uöt8
 
mac_h™dÀ
;

2351 
uöt8
 
¸edô
;

2353 
èbÀ
 = 
wlfc
->
de°ö©i⁄_íåõs
.
nodes
;

2354 
mac_h™dÀ
 = 
vÆue
[1];

2355 
¸edô
 = 
vÆue
[0];

2357 
desc
 = &
èbÀ
[
	`WLFC_MAC_DESC_GET_LOOKUP_INDEX
(
mac_h™dÀ
)];

2358 i‡(
desc
->
occupõd
) {

2359 
desc
->
ªque°ed_¸edô
 = 
¸edô
;

2361 
desc
->
ac_bôm≠
 = 
vÆue
[2];

2364 
wlfc
->
°©s
.
¸edô_ªque°_Áûed
++;

2366  
BCME_OK
;

2367 
	}
}

2370 
	$dhd_wlfc_∑ckë_ªque°
(
dhd_pub_t
 *
dhd
, 
uöt8
* 
vÆue
)

2372 
©ho°_wl_°©us_öfo_t
* 
wlfc
 = (athost_wl_status_info_t*)

2373 
dhd
->
wlfc_°©e
;

2374 
wlfc_mac_des¸ùt‹_t
* 
èbÀ
;

2375 
wlfc_mac_des¸ùt‹_t
* 
desc
;

2376 
uöt8
 
mac_h™dÀ
;

2377 
uöt8
 
∑ckë_cou¡
;

2379 
èbÀ
 = 
wlfc
->
de°ö©i⁄_íåõs
.
nodes
;

2380 
mac_h™dÀ
 = 
vÆue
[1];

2381 
∑ckë_cou¡
 = 
vÆue
[0];

2383 
desc
 = &
èbÀ
[
	`WLFC_MAC_DESC_GET_LOOKUP_INDEX
(
mac_h™dÀ
)];

2384 i‡(
desc
->
occupõd
) {

2385 
desc
->
ªque°ed_∑ckë
 = 
∑ckë_cou¡
;

2387 
desc
->
ac_bôm≠
 = 
vÆue
[2];

2390 
wlfc
->
°©s
.
∑ckë_ªque°_Áûed
++;

2392  
BCME_OK
;

2393 
	}
}

2396 
	$dhd_wlfc_ª‹dîöfo_ödiˇã
(
uöt8
 *
vÆ
, uöt8 
Àn
, 
uch¨
 *
öfo_buf
, 
uöt
 *
öfo_Àn
)

2398 i‡(
öfo_Àn
) {

2399 i‡(
öfo_buf
) {

2400 
	`bc›y
(
vÆ
, 
öfo_buf
, 
Àn
);

2401 *
öfo_Àn
 = 
Àn
;

2404 *
öfo_Àn
 = 0;

2406 
	}
}

2409 
	$dhd_wlfc_∑r£_hódî_öfo
(
dhd_pub_t
 *
dhd
, * 
pktbuf
, 
év_hdr_Àn
, 
uch¨
 *
ª‹dî_öfo_buf
,

2410 
uöt
 *
ª‹dî_öfo_Àn
)

2412 
uöt8
 
ty≥
, 
Àn
;

2413 
uöt8
* 
vÆue
;

2414 
uöt8
* 
tmpbuf
;

2415 
uöt16
 
ªmaödî
 = 
év_hdr_Àn
;

2416 
uöt16
 
¥o˚s£d
 = 0;

2417 
©ho°_wl_°©us_öfo_t
* 
wlfc
 = (athost_wl_status_info_t*)

2418 
dhd
->
wlfc_°©e
;

2419 
tmpbuf
 = (
uöt8
*)
	`PKTDATA
(
dhd
->
osh
, 
pktbuf
);

2420 i‡(
ªmaödî
) {

2421 (
¥o˚s£d
 < (
WLFC_MAX_PENDING_DATALEN
 * 2)Ë&& (
ªmaödî
 > 0)) {

2422 
ty≥
 = 
tmpbuf
[
¥o˚s£d
];

2423 i‡(
ty≥
 =
WLFC_CTL_TYPE_FILLER
) {

2424 
ªmaödî
 -= 1;

2425 
¥o˚s£d
 += 1;

2429 
Àn
 = 
tmpbuf
[
¥o˚s£d
 + 1];

2430 
vÆue
 = &
tmpbuf
[
¥o˚s£d
 + 2];

2432 i‡(
ªmaödî
 < (2 + 
Àn
))

2435 
ªmaödî
 -2 + 
Àn
;

2436 
¥o˚s£d
 +2 + 
Àn
;

2437 i‡(
ty≥
 =
WLFC_CTL_TYPE_TXSTATUS
)

2438 
	`dhd_wlfc_tx°©us_upd©e
(
dhd
, 
vÆue
);

2439 i‡(
ty≥
 =
WLFC_CTL_TYPE_COMP_TXSTATUS
)

2440 
	`dhd_wlfc_com¥es£d_tx°©us_upd©e
(
dhd
, 
vÆue
, 
Àn
);

2442 i‡(
ty≥
 =
WLFC_CTL_TYPE_HOST_REORDER_RXPKTS
)

2443 
	`dhd_wlfc_ª‹dîöfo_ödiˇã
(
vÆue
, 
Àn
, 
ª‹dî_öfo_buf
,

2444 
ª‹dî_öfo_Àn
);

2445 i‡(
ty≥
 =
WLFC_CTL_TYPE_FIFO_CREDITBACK
)

2446 
	`dhd_wlfc_fifo¸edôback_ödiˇã
(
dhd
, 
vÆue
);

2448 i‡(
ty≥
 =
WLFC_CTL_TYPE_RSSI
)

2449 
	`dhd_wlfc_rssi_ödiˇã
(
dhd
, 
vÆue
);

2451 i‡(
ty≥
 =
WLFC_CTL_TYPE_MAC_REQUEST_CREDIT
)

2452 
	`dhd_wlfc_¸edô_ªque°
(
dhd
, 
vÆue
);

2454 i‡(
ty≥
 =
WLFC_CTL_TYPE_MAC_REQUEST_PACKET
)

2455 
	`dhd_wlfc_∑ckë_ªque°
(
dhd
, 
vÆue
);

2457 i‡((
ty≥
 =
WLFC_CTL_TYPE_MAC_OPEN
) ||

2458 (
ty≥
 =
WLFC_CTL_TYPE_MAC_CLOSE
))

2459 
	`dhd_wlfc_psmode_upd©e
(
dhd
, 
vÆue
, 
ty≥
);

2461 i‡((
ty≥
 =
WLFC_CTL_TYPE_MACDESC_ADD
) ||

2462 (
ty≥
 =
WLFC_CTL_TYPE_MACDESC_DEL
))

2463 
	`dhd_wlfc_mac_èbÀ_upd©e
(
dhd
, 
vÆue
, 
ty≥
);

2465 i‡(
ty≥
 =
WLFC_CTL_TYPE_TRANS_ID
)

2466 
	`dhd_wlfc_dbg_£num_check
(
dhd
, 
vÆue
);

2468 i‡((
ty≥
 =
WLFC_CTL_TYPE_INTERFACE_OPEN
) ||

2469 (
ty≥
 =
WLFC_CTL_TYPE_INTERFACE_CLOSE
)) {

2470 
	`dhd_wlfc_öãrÁ˚_upd©e
(
dhd
, 
vÆue
, 
ty≥
);

2473 i‡(
ªmaödî
 != 0) {

2475 
wlfc
->
°©s
.
év_∑r£_Áûed
++;

2478  
BCME_OK
;

2479 
	}
}

2482 
	$dhd_wlfc_öô
(
dhd_pub_t
 *
dhd
)

2484 
iovbuf
[12];

2486 
uöt32
 
év
 = 
dhd
->
wlfc_íabÀd
?

2487 
WLFC_FLAGS_RSSI_SIGNALS
 |

2488 
WLFC_FLAGS_XONXOFF_SIGNALS
 |

2489 
WLFC_FLAGS_CREDIT_STATUS_SIGNALS
 |

2490 
WLFC_FLAGS_HOST_PROPTXSTATUS_ACTIVE
 |

2491 
WLFC_FLAGS_HOST_RXRERODER_ACTIVE
 : 0;

2501 
	`bcm_mkiov¨
("év", (*)&
év
, 4, 
iovbuf
, (iovbuf));

2502 i‡(
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_SET_VAR
, 
iovbuf
, (iovbuf), 
TRUE
, 0) < 0) {

2503 
	`DHD_ERROR
(("dhd_wlfc_init(): failedÅoÉnable/disable bdcv2Ålv signaling\n"));

2510 
	`DHD_ERROR
(("dhd_wlfc_init(): successfully %s bdcv2Ålv signaling, %d\n",

2511 
dhd
->
wlfc_íabÀd
?"íabÀd":"dißbÀd", 
év
));

2513  
BCME_OK
;

2514 
	}
}

2517 
	$dhd_wlfc_íabÀ
(
dhd_pub_t
 *
dhd
)

2519 
i
;

2520 
©ho°_wl_°©us_öfo_t
* 
wlfc
;

2522 
	`DHD_TRACE
(("E¡î %s\n", 
__FUNCTION__
));

2524 i‡(!
dhd
->
wlfc_íabÀd
 || dhd->
wlfc_°©e
)

2525  
BCME_OK
;

2528 
dhd
->
wlfc_°©e
 = 
	`MALLOC
(dhd->
osh
, (
©ho°_wl_°©us_öfo_t
));

2529 i‡(
dhd
->
wlfc_°©e
 =
NULL
)

2530  
BCME_NOMEM
;

2533 
wlfc
 = (
©ho°_wl_°©us_öfo_t
*)
dhd
->
wlfc_°©e
;

2534 
	`mem£t
(
wlfc
, 0, (
©ho°_wl_°©us_öfo_t
));

2537 
wlfc
->
osh
 = 
dhd
->osh;

2538 
wlfc
->
dhdp
 = 
dhd
;

2540 
wlfc
->
h™gî
 =

2541 
	`dhd_wlfc_h™gî_¸óã
(
dhd
->
osh
, 
WLFC_HANGER_MAXITEMS
);

2542 i‡(
wlfc
->
h™gî
 =
NULL
) {

2543 
	`MFREE
(
dhd
->
osh
, dhd->
wlfc_°©e
, (
©ho°_wl_°©us_öfo_t
));

2544 
dhd
->
wlfc_°©e
 = 
NULL
;

2545  
BCME_NOMEM
;

2549 
i
 = 0; i < 
WLFC_MAX_IFNUM
; i++) {

2550 
wlfc
->
ho°if_Êow_°©e
[
i
] = 
OFF
;

2557 
	`pktq_öô
(&
wlfc
->
SENDQ
, (
AC_COUNT
 + 1), 
WLFC_SENDQ_LEN
);

2559 
wlfc
->
de°ö©i⁄_íåõs
.
Ÿhî
.
°©e
 = 
WLFC_STATE_OPEN
;

2561 
wlfc
->
de°ö©i⁄_íåõs
.
Ÿhî
.
ac_bôm≠
 = 0x1f;

2562 
wlfc
->
de°ö©i⁄_íåõs
.
Ÿhî
.
öãrÁ˚_id
 = 0;

2564 
wlfc
->
¥›tx°©us_mode
 = 
WLFC_FCMODE_EXPLICIT_CREDIT
;

2566 
wlfc
->
Ælow_¸edô_b‹row
 = 
TRUE
;

2567 
wlfc
->
b‹row_de„r_time°amp
 = 0;

2569  
BCME_OK
;

2570 
	}
}

2574 
	$dhd_wlfc_˛ónup
(
dhd_pub_t
 *
dhd
)

2576 
i
;

2577 
tŸÆ_íåõs
;

2578 
©ho°_wl_°©us_öfo_t
* 
wlfc
 = (athost_wl_status_info_t*)

2579 
dhd
->
wlfc_°©e
;

2580 
wlfc_mac_des¸ùt‹_t
* 
èbÀ
;

2581 
wlfc_h™gî_t
* 
h
;

2582 
¥ec
;

2583 *
pkt
 = 
NULL
;

2584 
pktq
 *
txq
 = 
NULL
;

2586 
	`DHD_TRACE
(("E¡î %s\n", 
__FUNCTION__
));

2587 i‡(
dhd
->
wlfc_°©e
 =
NULL
)

2590 
txq
 = 
	`dhd_bus_txq
(
dhd
->
bus
);

2593 
h
 = (
wlfc_h™gî_t
*)
wlfc
->
h™gî
;

2594 
tŸÆ_íåõs
 = (
wlfc
->
de°ö©i⁄_íåõs
)/(
wlfc_mac_des¸ùt‹_t
);

2596 
èbÀ
 = (
wlfc_mac_des¸ùt‹_t
*)&
wlfc
->
de°ö©i⁄_íåõs
;

2598 
i
 = 0; i < 
tŸÆ_íåõs
; i++) {

2599 i‡(
èbÀ
[
i
].
occupõd
) {

2600 i‡(
èbÀ
[
i
].
psq
.
Àn
) {

2601 
	`WLFC_DBGMESG
(("%s(): DELAYQ[%d].len = %d\n",

2602 
__FUNCTION__
, 
i
, 
èbÀ
[i].
psq
.
Àn
));

2604 
	`pktq_Êush
(
wlfc
->
osh
, &
èbÀ
[
i
].
psq
, 
TRUE
, 
NULL
, 0);

2606 
èbÀ
[
i
].
occupõd
 = 0;

2610 i‡(
wlfc
->
SENDQ
.
Àn
)

2611 
	`pktq_Êush
(
wlfc
->
osh
, &wlfc->
SENDQ
, 
TRUE
, 
NULL
, 0);

2612 
¥ec
 = 0;Öª¯< 
txq
->
num_¥ec
;Örec++) {

2613 
pkt
 = 
	`pktq_pdeq
(
txq
, 
¥ec
);

2614 
pkt
) {

2615 
i
 = 0; i < 
h
->
max_ôems
; i++) {

2616 i‡(
pkt
 =
h
->
ôems
[
i
].pkt) {

2617 i‡(
h
->
ôems
[
i
].
°©e
 =
WLFC_HANGER_ITEM_STATE_INUSE
) {

2618 
	`PKTFREE
(
wlfc
->
osh
, 
h
->
ôems
[
i
].
pkt
, 
TRUE
);

2619 
h
->
ôems
[
i
].
°©e
 = 
WLFC_HANGER_ITEM_STATE_FREE
;

2620 
h
->
ôems
[
i
].
pkt
 = 
NULL
;

2621 
h
->
ôems
[
i
].
idítifõr
 = 0;

2622 } i‡(
h
->
ôems
[
i
].
°©e
 ==

2623 
WLFC_HANGER_ITEM_STATE_INUSE_SUPPRESSED
) {

2625 
h
->
ôems
[
i
].
°©e
 = 
WLFC_HANGER_ITEM_STATE_FREE
;

2630 
pkt
 = 
	`pktq_pdeq
(
txq
, 
¥ec
);

2634 
i
 = 0; i < 
h
->
max_ôems
; i++) {

2635 i‡(
h
->
ôems
[
i
].
°©e
 =
WLFC_HANGER_ITEM_STATE_INUSE
) {

2636 
	`PKTFREE
(
wlfc
->
osh
, 
h
->
ôems
[
i
].
pkt
, 
TRUE
);

2637 
h
->
ôems
[
i
].
°©e
 = 
WLFC_HANGER_ITEM_STATE_FREE
;

2638 } i‡(
h
->
ôems
[
i
].
°©e
 =
WLFC_HANGER_ITEM_STATE_INUSE_SUPPRESSED
) {

2640 
h
->
ôems
[
i
].
°©e
 = 
WLFC_HANGER_ITEM_STATE_FREE
;

2645 
	}
}

2648 
	$dhd_wlfc_deöô
(
dhd_pub_t
 *
dhd
)

2651 
©ho°_wl_°©us_öfo_t
* 
wlfc
 = (athost_wl_status_info_t*)

2652 
dhd
->
wlfc_°©e
;

2654 
	`DHD_TRACE
(("E¡î %s\n", 
__FUNCTION__
));

2656 
	`dhd_os_wlfc_block
(
dhd
);

2657 i‡(
dhd
->
wlfc_°©e
 =
NULL
) {

2658 
	`dhd_os_wlfc_unblock
(
dhd
);

2662 #ifde‡
PROP_TXSTATUS_DEBUG


2664 
i
;

2665 
wlfc_h™gî_t
* 
h
 = (wlfc_h™gî_t*)
wlfc
->
h™gî
;

2666 
i
 = 0; i < 
h
->
max_ôems
; i++) {

2667 i‡(
h
->
ôems
[
i
].
°©e
 !
WLFC_HANGER_ITEM_STATE_FREE
) {

2668 
	`WLFC_DBGMESG
(("%s()Ökt[%d] = 0x%p, FIFO_credit_used:%d\n",

2669 
__FUNCTION__
, 
i
, 
h
->
ôems
[i].
pkt
,

2670 
	`DHD_PKTTAG_CREDITCHECK
(
	`PKTTAG
(
h
->
ôems
[
i
].
pkt
))));

2676 
	`dhd_wlfc_h™gî_dñëe
(
dhd
->
osh
, 
wlfc
->
h™gî
);

2679 
	`MFREE
(
dhd
->
osh
, dhd->
wlfc_°©e
, (
©ho°_wl_°©us_öfo_t
));

2680 
dhd
->
wlfc_°©e
 = 
NULL
;

2681 
	`dhd_os_wlfc_unblock
(
dhd
);

2684 
	}
}

2688 
	$dhd_¥Ÿ_dump
(
dhd_pub_t
 *
dhdp
, 
bcm°rbuf
 *
°rbuf
)

2690 
	`bcm_b¥ötf
(
°rbuf
, "PrŸocﬁ CDC:Ñeqid %d\n", 
dhdp
->
¥Ÿ
->
ªqid
);

2691 #ifde‡
PROP_TXSTATUS


2692 
	`dhd_os_wlfc_block
(
dhdp
);

2693 i‡(
dhdp
->
wlfc_°©e
)

2694 
	`dhd_wlfc_dump
(
dhdp
, 
°rbuf
);

2695 
	`dhd_os_wlfc_unblock
(
dhdp
);

2697 
	}
}

2700 
	$dhd_¥Ÿ_hdΩush
(
dhd_pub_t
 *
dhd
, 
ifidx
, *
pktbuf
)

2702 #ifde‡
BDC


2703 
bdc_hódî
 *
h
;

2706 
	`DHD_TRACE
(("%s: E¡î\n", 
__FUNCTION__
));

2708 #ifde‡
BDC


2711 
	`PKTPUSH
(
dhd
->
osh
, 
pktbuf
, 
BDC_HEADER_LEN
);

2713 
h
 = (
bdc_hódî
 *)
	`PKTDATA
(
dhd
->
osh
, 
pktbuf
);

2715 
h
->
Êags
 = (
BDC_PROTO_VER
 << 
BDC_FLAG_VER_SHIFT
);

2716 i‡(
	`PKTSUMNEEDED
(
pktbuf
))

2717 
h
->
Êags
 |
BDC_FLAG_SUM_NEEDED
;

2720 
h
->
¥i‹ôy
 = (
	`PKTPRIO
(
pktbuf
Ë& 
BDC_PRIORITY_MASK
);

2721 
h
->
Êags2
 = 0;

2722 
h
->
d©aOff£t
 = 0;

2724 
	`BDC_SET_IF_IDX
(
h
, 
ifidx
);

2725 
	}
}

2728 
	$dhd_¥Ÿ_hdΩuŒ
(
dhd_pub_t
 *
dhd
, *
ifidx
, *
pktbuf
, 
uch¨
 *
ª‹dî_buf_öfo
,

2729 
uöt
 *
ª‹dî_öfo_Àn
)

2731 #ifde‡
BDC


2732 
bdc_hódî
 *
h
;

2734 
uöt8
 
d©a_off£t
 = 0;

2736 
	`DHD_TRACE
(("%s: E¡î\n", 
__FUNCTION__
));

2738 #ifde‡
BDC


2739 i‡(
ª‹dî_öfo_Àn
)

2740 *
ª‹dî_öfo_Àn
 = 0;

2743 i‡(
	`PKTLEN
(
dhd
->
osh
, 
pktbuf
Ë< 
BDC_HEADER_LEN
) {

2744 
	`DHD_ERROR
(("%s:Ñx d©®toÿsh‹à(%d < %d)\n", 
__FUNCTION__
,

2745 
	`PKTLEN
(
dhd
->
osh
, 
pktbuf
), 
BDC_HEADER_LEN
));

2746  
BCME_ERROR
;

2749 
h
 = (
bdc_hódî
 *)
	`PKTDATA
(
dhd
->
osh
, 
pktbuf
);

2751 #i‡
	`deföed
(
NDIS630
)

2752 
h
->
d©aOff£t
 = 0;

2755 i‡(!
ifidx
) {

2757 
d©a_off£t
 = 
h
->
d©aOff£t
;

2758 
	`PKTPULL
(
dhd
->
osh
, 
pktbuf
, 
BDC_HEADER_LEN
);

2759 
exô
;

2762 i‡((*
ifidx
 = 
	`BDC_GET_IF_IDX
(
h
)Ë>
DHD_MAX_IFS
) {

2763 
	`DHD_ERROR
(("%s:Ñx data ifnum out ofÑange (%d)\n",

2764 
__FUNCTION__
, *
ifidx
));

2765  
BCME_ERROR
;

2768 i‡(((
h
->
Êags
 & 
BDC_FLAG_VER_MASK
Ë>> 
BDC_FLAG_VER_SHIFT
Ë!
BDC_PROTO_VER
) {

2769 
	`DHD_ERROR
(("%s:Çon-BDCÖacketÑeceived, flags = 0x%x\n",

2770 
	`dhd_i‚ame
(
dhd
, *
ifidx
), 
h
->
Êags
));

2771 i‡(((
h
->
Êags
 & 
BDC_FLAG_VER_MASK
Ë>> 
BDC_FLAG_VER_SHIFT
Ë=
BDC_PROTO_VER_1
)

2772 
h
->
d©aOff£t
 = 0;

2774  
BCME_ERROR
;

2777 i‡(
h
->
Êags
 & 
BDC_FLAG_SUM_GOOD
) {

2778 
	`DHD_INFO
(("%s: BDCÖacketÑeceived with goodÑx-csum, flags 0x%x\n",

2779 
	`dhd_i‚ame
(
dhd
, *
ifidx
), 
h
->
Êags
));

2780 
	`PKTSETSUMGOOD
(
pktbuf
, 
TRUE
);

2783 
	`PKTSETPRIO
(
pktbuf
, (
h
->
¥i‹ôy
 & 
BDC_PRIORITY_MASK
));

2784 
d©a_off£t
 = 
h
->
d©aOff£t
;

2785 
	`PKTPULL
(
dhd
->
osh
, 
pktbuf
, 
BDC_HEADER_LEN
);

2788 #i‡!
	`deföed
(
NDIS630
)

2789 i‡(
	`PKTLEN
(
dhd
->
osh
, 
pktbuf
Ë< (
uöt32
Ë(
d©a_off£t
 << 2)) {

2790 
	`DHD_ERROR
(("%s:Ñx d©®toÿsh‹à(%d < %d)\n", 
__FUNCTION__
,

2791 
	`PKTLEN
(
dhd
->
osh
, 
pktbuf
), (
d©a_off£t
 * 4)));

2792  
BCME_ERROR
;

2795 #ifde‡
PROP_TXSTATUS


2796 i‡(
dhd
->
wlfc_°©e
 &&

2797 ((
©ho°_wl_°©us_öfo_t
*)
dhd
->
wlfc_°©e
)->
¥›tx°©us_mode


2798 !
WLFC_FCMODE_NONE
 &&

2799 (!
	`DHD_PKTTAG_PKTDIR
(
	`PKTTAG
(
pktbuf
)))) {

2803 
	`dhd_os_wlfc_block
(
dhd
);

2804 
	`dhd_wlfc_∑r£_hódî_öfo
(
dhd
, 
pktbuf
, (
d©a_off£t
 << 2),

2805 
ª‹dî_buf_öfo
, 
ª‹dî_öfo_Àn
);

2806 ((
©ho°_wl_°©us_öfo_t
*)
dhd
->
wlfc_°©e
)->
°©s
.
dhd_hdΩuŒs
++;

2807 
	`dhd_os_wlfc_unblock
(
dhd
);

2811 
exô
:

2812 #i‡!
	`deföed
(
NDIS630
)

2813 
	`PKTPULL
(
dhd
->
osh
, 
pktbuf
, (
d©a_off£t
 << 2));

2816 
	}
}

2818 #i‡
deföed
(
PROP_TXSTATUS
)

2820 
	$dhd_wlfc_åiggî_pktcommô
(
dhd_pub_t
 *
dhd
)

2822 i‡(
dhd
->
wlfc_°©e
 &&

2823 (((
©ho°_wl_°©us_öfo_t
*)
dhd
->
wlfc_°©e
)->
¥›tx°©us_mode


2824 !
WLFC_FCMODE_NONE
)) {

2825 
	`dhd_os_wlfc_block
(
dhd
);

2826 
	`dhd_wlfc_commô_∑ckës
(
dhd
->
wlfc_°©e
, (
f_commôpkt_t
)
dhd_bus_txd©a
,

2827 (*)
dhd
->
bus
);

2828 
	`dhd_os_wlfc_unblock
(
dhd
);

2830 
	}
}

2834 
	$dhd_¥Ÿ_©èch
(
dhd_pub_t
 *
dhd
)

2836 
dhd_¥Ÿ_t
 *
cdc
;

2838 i‡(!(
cdc
 = (
dhd_¥Ÿ_t
 *)
	`DHD_OS_PREALLOC
(
dhd
->
osh
, 
DHD_PREALLOC_PROT
,

2839 (
dhd_¥Ÿ_t
)))) {

2840 
	`DHD_ERROR
(("%s: kmÆlo¯Áûed\n", 
__FUNCTION__
));

2841 
Áû
;

2843 
	`mem£t
(
cdc
, 0, (
dhd_¥Ÿ_t
));

2846 i‡((
uöçå
)(&
cdc
->
msg
 + 1Ë!(uöçå)cdc->
buf
) {

2847 
	`DHD_ERROR
(("dhd_prot_t isÇot correctly defined\n"));

2848 
Áû
;

2851 
dhd
->
¥Ÿ
 = 
cdc
;

2852 #ifde‡
BDC


2853 
dhd
->
hdæí
 +
BDC_HEADER_LEN
;

2855 
dhd
->
max˘l
 = 
WLC_IOCTL_MAXLEN
 + (
cdc_io˘l_t
Ë+ 
ROUND_UP_MARGIN
;

2858 
Áû
:

2859 #i‚de‡
CONFIG_DHD_USE_STATIC_BUF


2860 i‡(
cdc
 !
NULL
)

2861 
	`MFREE
(
dhd
->
osh
, 
cdc
, (
dhd_¥Ÿ_t
));

2863  
BCME_NOMEM
;

2864 
	}
}

2868 
	$dhd_¥Ÿ_dëach
(
dhd_pub_t
 *
dhd
)

2870 #ifde‡
PROP_TXSTATUS


2871 
	`dhd_wlfc_deöô
(
dhd
);

2873 #i‚de‡
CONFIG_DHD_USE_STATIC_BUF


2874 
	`MFREE
(
dhd
->
osh
, dhd->
¥Ÿ
, (
dhd_¥Ÿ_t
));

2876 
dhd
->
¥Ÿ
 = 
NULL
;

2877 
	}
}

2880 
	$dhd_¥Ÿ_d°©s
(
dhd_pub_t
 *
dhd
)

2883 
dhd
->
d°©s
.
tx_∑ckës
 = dhd->tx_packets;

2884 
dhd
->
d°©s
.
tx_îr‹s
 = dhd->tx_errors;

2885 
dhd
->
d°©s
.
rx_∑ckës
 = dhd->rx_packets;

2886 
dhd
->
d°©s
.
rx_îr‹s
 = dhd->rx_errors;

2887 
dhd
->
d°©s
.
rx_dr›≥d
 = dhd->rx_dropped;

2888 
dhd
->
d°©s
.
mu…iˇ°
 = dhd->
rx_mu…iˇ°
;

2890 
	}
}

2893 
	$dhd_¥Ÿ_öô
(
dhd_pub_t
 *
dhd
)

2895 
ªt
 = 0;

2896 
wlc_ªv_öfo_t
 
ªvöfo
;

2897 
	`DHD_TRACE
(("%s: E¡î\n", 
__FUNCTION__
));

2901 
	`mem£t
(&
ªvöfo
, 0, (revinfo));

2902 
ªt
 = 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_GET_REVINFO
, &
ªvöfo
, ‘evöfo), 
FALSE
, 0);

2903 i‡(
ªt
 < 0)

2904 
d⁄e
;

2907 #i‡
	`deföed
(
WL_CFG80211
)

2908 i‡(
dhd_dow∆ﬂd_fw_⁄_drivîlﬂd
)

2910 
ªt
 = 
	`dhd_¥eöô_io˘ls
(
dhd
);

2912 #ifde‡
PROP_TXSTATUS


2913 
ªt
 = 
	`dhd_wlfc_öô
(
dhd
);

2917 
dhd
->
iswl
 = 
TRUE
;

2919 
d⁄e
:

2920  
ªt
;

2921 
	}
}

2924 
	$dhd_¥Ÿ_°›
(
dhd_pub_t
 *
dhd
)

2927 
	}
}

2931 
	$dhd_gë_ho°ª‹dî_pkts
(*
osh
, 
ª‹dî_öfo
 *
±r
, **
pkt
,

2932 
uöt32
 *
pkt_cou¡
, **
µœ°
, 
uöt8
 
°¨t
, uöt8 
íd
)

2934 
uöt
 
i
;

2935 *
∂a°
 = 
NULL
, *
p
;

2936 
uöt32
 
pkt_˙t
 = 0;

2938 i‡(
±r
->
≥nd_pkts
 == 0) {

2939 
	`DHD_REORDER
(("%s:Çÿ∑ckë†öÑe‹dî queuê\n", 
__FUNCTION__
));

2940 *
µœ°
 = 
NULL
;

2941 *
pkt_cou¡
 = 0;

2942 *
pkt
 = 
NULL
;

2945 i‡(
°¨t
 =
íd
)

2946 
i
 = 
±r
->
max_idx
 + 1;

2948 i‡(
°¨t
 > 
íd
)

2949 
i
 = ((
±r
->
max_idx
 + 1Ë- 
°¨t
Ë+ 
íd
;

2951 
i
 = 
íd
 - 
°¨t
;

2953 
i
) {

2954 
p
 = (*)(
±r
->p[
°¨t
]);

2955 
±r
->
p
[
°¨t
] = 
NULL
;

2957 i‡(
p
 !
NULL
) {

2958 i‡(
∂a°
 =
NULL
)

2959 *
pkt
 = 
p
;

2961 
	`PKTSETNEXT
(
osh
, 
∂a°
, 
p
);

2963 
∂a°
 = 
p
;

2964 
pkt_˙t
++;

2966 
i
--;

2967 i‡(
°¨t
++ =
±r
->
max_idx
)

2968 
°¨t
 = 0;

2970 *
µœ°
 = 
∂a°
;

2971 *
pkt_cou¡
 = (
uöt32
)
pkt_˙t
;

2972 
	}
}

2975 
	$dhd_¥o˚ss_pkt_ª‹dî_öfo
(
dhd_pub_t
 *
dhd
, 
uch¨
 *
ª‹dî_öfo_buf
, 
uöt
 
ª‹dî_öfo_Àn
,

2976 **
pkt
, 
uöt32
 *
pkt_cou¡
)

2978 
uöt8
 
Êow_id
, 
max_idx
, 
cur_idx
, 
exp_idx
;

2979 
ª‹dî_öfo
 *
±r
;

2980 
uöt8
 
Êags
;

2981 *
cur_pkt
, *
∂a°
 = 
NULL
;

2982 
uöt32
 
˙t
 = 0;

2984 i‡(
pkt
 =
NULL
) {

2985 i‡(
pkt_cou¡
 !
NULL
)

2986 *
pkt_cou¡
 = 0;

2990 
Êow_id
 = 
ª‹dî_öfo_buf
[
WLHOST_REORDERDATA_FLOWID_OFFSET
];

2991 
Êags
 = 
ª‹dî_öfo_buf
[
WLHOST_REORDERDATA_FLAGS_OFFSET
];

2993 
	`DHD_REORDER
(("Êow_id %d, fœg†0x%02x, idx(%d, %d, %d)\n", 
Êow_id
, 
Êags
,

2994 
ª‹dî_öfo_buf
[
WLHOST_REORDERDATA_CURIDX_OFFSET
],

2995 
ª‹dî_öfo_buf
[
WLHOST_REORDERDATA_EXPIDX_OFFSET
],

2996 
ª‹dî_öfo_buf
[
WLHOST_REORDERDATA_MAXIDX_OFFSET
]));

2999 i‡(
Êags
 == 0xFF) {

3000 
	`DHD_ERROR
(("%s: invÆid fœgs...sÿign‹êthi†∑ckë\n", 
__FUNCTION__
));

3001 *
pkt_cou¡
 = 1;

3005 
cur_pkt
 = *
pkt
;

3006 *
pkt
 = 
NULL
;

3008 
±r
 = 
dhd
->
ª‹dî_bufs
[
Êow_id
];

3009 i‡(
Êags
 & 
WLHOST_REORDERDATA_DEL_FLOW
) {

3010 
uöt32
 
buf_size
 = (
ª‹dî_öfo
);

3012 
	`DHD_REORDER
(("%s: Flags indicatingÅo deleteá flow id %d\n",

3013 
__FUNCTION__
, 
Êow_id
));

3015 i‡(
±r
 =
NULL
) {

3016 
	`DHD_ERROR
(("%s:Ñeceived flagsÅo cleanup, butÇo flow (%d) yet\n",

3017 
__FUNCTION__
, 
Êow_id
));

3018 *
pkt_cou¡
 = 1;

3019 *
pkt
 = 
cur_pkt
;

3023 
	`dhd_gë_ho°ª‹dî_pkts
(
dhd
->
osh
, 
±r
, 
pkt
, &
˙t
, &
∂a°
,

3024 
±r
->
exp_idx
,Ötr->exp_idx);

3026 i‡(
∂a°
) {

3027 
	`PKTSETNEXT
(
dhd
->
osh
, 
∂a°
, 
cur_pkt
);

3028 
˙t
++;

3031 i‡(
˙t
 != 0) {

3032 
	`DHD_ERROR
(("%s: del flow: something fishy,ÖendingÖackets %d\n",

3033 
__FUNCTION__
, 
˙t
));

3035 *
pkt
 = 
cur_pkt
;

3036 
˙t
 = 1;

3038 
buf_size
 +((
±r
->
max_idx
 + 1) * (*));

3039 
	`MFREE
(
dhd
->
osh
, 
±r
, 
buf_size
);

3040 
dhd
->
ª‹dî_bufs
[
Êow_id
] = 
NULL
;

3041 *
pkt_cou¡
 = 
˙t
;

3045 i‡(
±r
 =
NULL
) {

3046 
uöt32
 
buf_size_Æloc
 = (
ª‹dî_öfo_t
);

3047 
max_idx
 = 
ª‹dî_öfo_buf
[
WLHOST_REORDERDATA_MAXIDX_OFFSET
];

3049 
buf_size_Æloc
 +((
max_idx
 + 1) * (*));

3052 
	`DHD_REORDER
(("%s:álloc buffer of size %d size,Ñeorder info id %d, maxidx %d\n",

3053 
__FUNCTION__
, 
buf_size_Æloc
, 
Êow_id
, 
max_idx
));

3054 
±r
 = (
ª‹dî_öfo
 *)
	`MALLOC
(
dhd
->
osh
, 
buf_size_Æloc
);

3055 i‡(
±r
 =
NULL
) {

3056 
	`DHD_ERROR
(("%s: MÆlo¯ÁûedÅÿÆlo¯buf„r\n", 
__FUNCTION__
));

3057 *
pkt_cou¡
 = 1;

3060 
	`bzîo
(
±r
, 
buf_size_Æloc
);

3061 
dhd
->
ª‹dî_bufs
[
Êow_id
] = 
±r
;

3062 
±r
->
p
 = (*)(ptr+1);

3063 
±r
->
max_idx
 = max_idx;

3065 i‡(
Êags
 & 
WLHOST_REORDERDATA_NEW_HOLE
) {

3066 
	`DHD_REORDER
(("%s:Çew hﬁe, sÿ˛ónu∞≥ndög buf„rs\n", 
__FUNCTION__
));

3067 i‡(
±r
->
≥nd_pkts
) {

3068 
	`dhd_gë_ho°ª‹dî_pkts
(
dhd
->
osh
, 
±r
, 
pkt
, &
˙t
, &
∂a°
,

3069 
±r
->
exp_idx
,Ötr->exp_idx);

3070 
±r
->
≥nd_pkts
 = 0;

3072 
±r
->
cur_idx
 = 
ª‹dî_öfo_buf
[
WLHOST_REORDERDATA_CURIDX_OFFSET
];

3073 
±r
->
exp_idx
 = 
ª‹dî_öfo_buf
[
WLHOST_REORDERDATA_EXPIDX_OFFSET
];

3074 
±r
->
max_idx
 = 
ª‹dî_öfo_buf
[
WLHOST_REORDERDATA_MAXIDX_OFFSET
];

3075 
±r
->
p
[±r->
cur_idx
] = 
cur_pkt
;

3076 
±r
->
≥nd_pkts
++;

3077 *
pkt_cou¡
 = 
˙t
;

3079 i‡(
Êags
 & 
WLHOST_REORDERDATA_CURIDX_VALID
) {

3080 
cur_idx
 = 
ª‹dî_öfo_buf
[
WLHOST_REORDERDATA_CURIDX_OFFSET
];

3081 
exp_idx
 = 
ª‹dî_öfo_buf
[
WLHOST_REORDERDATA_EXPIDX_OFFSET
];

3084 i‡((
exp_idx
 =
±r
->exp_idxË&& (
cur_idx
 !=Ötr->exp_idx)) {

3087 i‡(
±r
->
p
[
cur_idx
] !
NULL
) {

3088 
	`DHD_REORDER
(("%s: HOLE: ERROR bufferÖending..free it\n",

3089 
__FUNCTION__
));

3090 
	`PKTFREE
(
dhd
->
osh
, 
±r
->
p
[
cur_idx
], 
TRUE
);

3091 
±r
->
p
[
cur_idx
] = 
NULL
;

3093 
±r
->
p
[
cur_idx
] = 
cur_pkt
;

3094 
±r
->
≥nd_pkts
++;

3095 
±r
->
cur_idx
 = cur_idx;

3096 
	`DHD_REORDER
(("%s: fill upá hole..pendingÖackets is %d\n",

3097 
__FUNCTION__
, 
±r
->
≥nd_pkts
));

3098 *
pkt_cou¡
 = 0;

3099 *
pkt
 = 
NULL
;

3101 i‡(
±r
->
exp_idx
 =
cur_idx
) {

3103 
	`DHD_REORDER
(("%s: gotÅheÑight oneÇow, cur_idx is %d\n",

3104 
__FUNCTION__
, 
cur_idx
));

3105 i‡(
±r
->
p
[
cur_idx
] !
NULL
) {

3106 
	`DHD_REORDER
(("%s: Error bufferÖending..free it\n",

3107 
__FUNCTION__
));

3108 
	`PKTFREE
(
dhd
->
osh
, 
±r
->
p
[
cur_idx
], 
TRUE
);

3109 
±r
->
p
[
cur_idx
] = 
NULL
;

3111 
±r
->
p
[
cur_idx
] = 
cur_pkt
;

3112 
±r
->
≥nd_pkts
++;

3114 
±r
->
cur_idx
 = cur_idx;

3115 
±r
->
exp_idx
 =Éxp_idx;

3117 
	`dhd_gë_ho°ª‹dî_pkts
(
dhd
->
osh
, 
±r
, 
pkt
, &
˙t
, &
∂a°
,

3118 
cur_idx
, 
exp_idx
);

3119 
±r
->
≥nd_pkts
 -(
uöt8
)
˙t
;

3120 *
pkt_cou¡
 = 
˙t
;

3121 
	`DHD_REORDER
(("%s: freeing up buffers %d, stillÖending %d\n",

3122 
__FUNCTION__
, 
˙t
, 
±r
->
≥nd_pkts
));

3125 
uöt8
 
íd_idx
;

3126 
boﬁ
 
Êush_cuºít
 = 
FALSE
;

3128 
	`DHD_REORDER
(("%s:, flow %d, both moved, cur %d(%d),Éxp %d(%d)\n",

3129 
__FUNCTION__
, 
Êow_id
, 
±r
->
cur_idx
, cur_idx,

3130 
±r
->
exp_idx
,Éxp_idx));

3131 i‡(
Êags
 & 
WLHOST_REORDERDATA_FLUSH_ALL
)

3132 
íd_idx
 = 
±r
->
exp_idx
;

3134 
íd_idx
 = 
exp_idx
;

3137 
	`dhd_gë_ho°ª‹dî_pkts
(
dhd
->
osh
, 
±r
, 
pkt
, &
˙t
, &
∂a°
,

3138 
±r
->
exp_idx
, 
íd_idx
);

3140 i‡(
cur_idx
 =
±r
->
max_idx
) {

3141 i‡(
exp_idx
 == 0)

3142 
Êush_cuºít
 = 
TRUE
;

3144 i‡(
exp_idx
 =
cur_idx
 + 1)

3145 
Êush_cuºít
 = 
TRUE
;

3147 i‡(
Êush_cuºít
) {

3148 i‡(
∂a°
)

3149 
	`PKTSETNEXT
(
dhd
->
osh
, 
∂a°
, 
cur_pkt
);

3151 *
pkt
 = 
cur_pkt
;

3152 
˙t
++;

3155 
±r
->
p
[
cur_idx
] = 
cur_pkt
;

3156 
±r
->
≥nd_pkts
++;

3158 
±r
->
exp_idx
 =Éxp_idx;

3159 
±r
->
cur_idx
 = cur_idx;

3160 *
pkt_cou¡
 = 
˙t
;

3164 
uöt8
 
íd_idx
;

3166 
exp_idx
 = 
ª‹dî_öfo_buf
[
WLHOST_REORDERDATA_EXPIDX_OFFSET
];

3168 
	`DHD_REORDER
(("%s: moveÅhe window, cur_idx is %d,Éxp is %d,ÇewÉxp is %d\n",

3169 
__FUNCTION__
, 
±r
->
cur_idx
,Öå->
exp_idx
,Éxp_idx));

3170 i‡(
Êags
 & 
WLHOST_REORDERDATA_FLUSH_ALL
)

3171 
íd_idx
 = 
±r
->
exp_idx
;

3173 
íd_idx
 = 
exp_idx
;

3175 
	`dhd_gë_ho°ª‹dî_pkts
(
dhd
->
osh
, 
±r
, 
pkt
, &
˙t
, &
∂a°
,Öå->
exp_idx
, 
íd_idx
);

3176 
±r
->
≥nd_pkts
 -(
uöt8
)
˙t
;

3177 i‡(
∂a°
)

3178 
	`PKTSETNEXT
(
dhd
->
osh
, 
∂a°
, 
cur_pkt
);

3180 *
pkt
 = 
cur_pkt
;

3181 
˙t
++;

3182 *
pkt_cou¡
 = 
˙t
;

3184 
±r
->
exp_idx
 =Éxp_idx;

3187 
	}
}

	@dhd_cfg80211.c

27 
	~<√t/π√éök.h
>

29 
	~<bcmutûs.h
>

30 
	~<wldev_comm⁄.h
>

31 
	~<wl_cfg80211.h
>

32 
	~<dhd_cfg80211.h
>

34 #ifde‡
PKT_FILTER_SUPPORT


35 
	~<dngl_°©s.h
>

36 
	~<dhd.h
>

39 
wl_¥iv
 *
wlcfg_drv_¥iv
;

41 #ifde‡
PKT_FILTER_SUPPORT


42 
uöt
 
dhd_pkt_fûãr_íabÀ
;

43 
uöt
 
dhd_ma°î_mode
;

44 
dhd_pktfûãr_ofÊﬂd_íabÀ
(
dhd_pub_t
 * 
dhd
, *
¨g
, 
íabÀ
, 
ma°î_mode
);

47 
	gdhd_d⁄gÀ_up
 = 
FALSE
;

49 
	~<dngl_°©s.h
>

50 
	~<dhd.h
>

51 
	~<dhdio˘l.h
>

52 
	~<wlio˘l.h
>

53 
	~<dhd_cfg80211.h
>

55 
s32
 
wl_d⁄gÀ_up
(
√t_devi˚
 *
ndev
, 
u32
 
up
);

61 
s32
 
	$dhd_cfg80211_öô
(
wl_¥iv
 *
wl
)

63 
dhd_d⁄gÀ_up
 = 
FALSE
;

65 
	}
}

67 
s32
 
	$dhd_cfg80211_deöô
(
wl_¥iv
 *
wl
)

69 
dhd_d⁄gÀ_up
 = 
FALSE
;

71 
	}
}

73 
s32
 
	$dhd_cfg80211_down
(
wl_¥iv
 *
wl
)

75 
dhd_d⁄gÀ_up
 = 
FALSE
;

77 
	}
}

79 
s32
 
	$dhd_cfg80211_£t_p2p_öfo
(
wl_¥iv
 *
wl
, 
vÆ
)

81 
dhd_pub_t
 *
dhd
 = (dhd_pub_à*)(
wl
->
pub
);

82 
dhd
->
›_mode
 |
vÆ
;

83 
	`WL_ERR
(("Së : op_mode=0x%04x\n", 
dhd
->
›_mode
));

84 #ifde‡
ARP_OFFLOAD_SUPPORT


85 i‡(
dhd
->
¨p_vîsi⁄
 == 1) {

87 
	`dhd_¨p_ofÊﬂd_£t
(
dhd
, 0);

88 
	`dhd_¨p_ofÊﬂd_íabÀ
(
dhd
, 
Ál£
);

93 
	}
}

95 
s32
 
	$dhd_cfg80211_˛ón_p2p_öfo
(
wl_¥iv
 *
wl
)

97 
dhd_pub_t
 *
dhd
 = (dhd_pub_à*)(
wl
->
pub
);

98 
dhd
->
›_mode
 &~(
DHD_FLAG_P2P_GC_MODE
 | 
DHD_FLAG_P2P_GO_MODE
);

99 
	`WL_ERR
(("CÀ™ : op_mode=0x%04x\n", 
dhd
->
›_mode
));

101 #ifde‡
ARP_OFFLOAD_SUPPORT


102 i‡(
dhd
->
¨p_vîsi⁄
 == 1) {

104 
	`dhd_¨p_ofÊﬂd_£t
(
dhd
, 
dhd_¨p_mode
);

105 
	`dhd_¨p_ofÊﬂd_íabÀ
(
dhd
, 
åue
);

110 
	}
}

112 
s32
 
	$wl_d⁄gÀ_up
(
√t_devi˚
 *
ndev
, 
u32
 
up
)

114 
s32
 
îr
 = 0;

116 
îr
 = 
	`wldev_io˘l
(
ndev
, 
WLC_UP
, &
up
, (up), 
åue
);

117 i‡(
	`u∆ikñy
(
îr
)) {

118 
	`WL_ERR
(("WLC_UPÉº‹ (%d)\n", 
îr
));

120  
îr
;

121 
	}
}

122 
s32
 
	$dhd_c⁄fig_d⁄gÀ
(
wl_¥iv
 *
wl
, 
boﬁ
 
√ed_lock
)

124 #i‚de‡
DHD_SDALIGN


125 
	#DHD_SDALIGN
 32

	)

127 
√t_devi˚
 *
ndev
;

128 
s32
 
îr
 = 0;

130 
	`WL_TRACE
(("In\n"));

131 i‡(
dhd_d⁄gÀ_up
) {

132 
	`WL_ERR
(("Dongle isálready up\n"));

133  
îr
;

136 
ndev
 = 
	`wl_to_¥mry_ndev
(
wl
);

138 i‡(
√ed_lock
)

139 
	`π∆_lock
();

141 
îr
 = 
	`wl_d⁄gÀ_up
(
ndev
, 0);

142 i‡(
	`u∆ikñy
(
îr
)) {

143 
	`WL_ERR
(("wl_dongle_up failed\n"));

144 
deÁu…_c⁄f_out
;

146 
dhd_d⁄gÀ_up
 = 
åue
;

148 
deÁu…_c⁄f_out
:

149 i‡(
√ed_lock
)

150 
	`π∆_u∆ock
();

151  
îr
;

153 
	}
}

157 
	#COEX_DHCP


	)

159 #i‡
deföed
(
COEX_DHCP
)

162 
	#BT_DHCP_eSCO_FIX


	)

164 
	#BT_DHCP_USE_FLAGS


	)

166 
	#BT_DHCP_OPPR_WIN_TIME
 2500

	)

168 
	#BT_DHCP_FLAG_FORCE_TIME
 5500

	)

170 
	ewl_cfg80211_btc€x_°©us
 {

171 
	mBT_DHCP_IDLE
,

172 
	mBT_DHCP_START
,

173 
	mBT_DHCP_OPPR_WIN
,

174 
	mBT_DHCP_FLAG_FORCE_TIMEOUT


182 
	$dev_wlc_ötv¨_gë_ªg
(
√t_devi˚
 *
dev
, *
«me
,

183 
uöt
 
ªg
, *
ªtvÆ
)

186 
buf
[
WLC_IOCTL_SMLEN
];

187 
vÆ
;

188 } 
v¨
;

189 
îr‹
;

191 
	`bcm_mkiov¨
(
«me
, (*)(&
ªg
), (reg),

192 (*)(&
v¨
), (v¨.
buf
));

193 
îr‹
 = 
	`wldev_io˘l
(
dev
, 
WLC_GET_VAR
, (*)(&
v¨
), (v¨.
buf
), 
Ál£
);

195 *
ªtvÆ
 = 
	`dtoh32
(
v¨
.
vÆ
);

196  (
îr‹
);

197 
	}
}

200 
	$dev_wlc_bufv¨_£t
(
√t_devi˚
 *
dev
, *
«me
, *
buf
, 
Àn
)

202 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2, 6, 31)

203 
io˘lbuf_loˇl
[1024];

205 
io˘lbuf_loˇl
[1024];

208 
	`bcm_mkiov¨
(
«me
, 
buf
, 
Àn
, 
io˘lbuf_loˇl
, (ioctlbuf_local));

210  (
	`wldev_io˘l
(
dev
, 
WLC_SET_VAR
, 
io˘lbuf_loˇl
, (io˘lbuf_loˇl), 
åue
));

211 
	}
}

217 
	$dev_wlc_ötv¨_£t_ªg
(
√t_devi˚
 *
dev
, *
«me
, *
addr
, * 
vÆ
)

219 
ªg_addr
[8];

221 
	`mem£t
(
ªg_addr
, 0, (reg_addr));

222 
	`mem˝y
((*)&
ªg_addr
[0], (*)
addr
, 4);

223 
	`mem˝y
((*)&
ªg_addr
[4], (*)
vÆ
, 4);

225  (
	`dev_wlc_bufv¨_£t
(
dev
, 
«me
, (*)&
ªg_addr
[0], (reg_addr)));

226 
	}
}

228 
boﬁ
 
	$btc€x_is_sco_a˘ive
(
√t_devi˚
 *
dev
)

230 
ioc_ªs
 = 0;

231 
boﬁ
 
ªs
 = 
FALSE
;

232 
sco_id_˙t
 = 0;

233 
∑øm27
;

234 
i
;

236 
i
 = 0; i < 12; i++) {

238 
ioc_ªs
 = 
	`dev_wlc_ötv¨_gë_ªg
(
dev
, "btc_∑øms", 27, &
∑øm27
);

240 
	`WL_TRACE
(("%s, sample[%d], btcÖarams: 27:%x\n",

241 
__FUNCTION__
, 
i
, 
∑øm27
));

243 i‡(
ioc_ªs
 < 0) {

244 
	`WL_ERR
(("%†io¯ªad bt¯∑øm†îr‹\n", 
__FUNCTION__
));

248 i‡((
∑øm27
 & 0x6) == 2) {

249 
sco_id_˙t
++;

252 i‡(
sco_id_˙t
 > 2) {

253 
	`WL_TRACE
(("%s, sco/esco detected,Ökt id_cnt:%d samples:%d\n",

254 
__FUNCTION__
, 
sco_id_˙t
, 
i
));

255 
ªs
 = 
TRUE
;

259 
	`m¶ìp
(5);

262  
ªs
;

263 
	}
}

265 #i‡
deföed
(
BT_DHCP_eSCO_FIX
)

267 
	$£t_btc_esco_∑øms
(
√t_devi˚
 *
dev
, 
boﬁ
 
åump_sco
)

269 
boﬁ
 
ßved_°©us
 = 
FALSE
;

271 
buf_ªg50va_dh˝_⁄
[8] =

273 
buf_ªg51va_dh˝_⁄
[8] =

275 
buf_ªg64va_dh˝_⁄
[8] =

277 
buf_ªg65va_dh˝_⁄
[8] =

279 
buf_ªg71va_dh˝_⁄
[8] =

281 
uöt32
 
ªgaddr
;

282 
uöt32
 
ßved_ªg50
;

283 
uöt32
 
ßved_ªg51
;

284 
uöt32
 
ßved_ªg64
;

285 
uöt32
 
ßved_ªg65
;

286 
uöt32
 
ßved_ªg71
;

288 i‡(
åump_sco
) {

294 
	`WL_TRACE
(("DoÇew SCO/eSCO coexálgo {save &"

296 i‡((!
	`dev_wlc_ötv¨_gë_ªg
(
dev
, "btc_∑øms", 50, &
ßved_ªg50
)) &&

297 (!
	`dev_wlc_ötv¨_gë_ªg
(
dev
, "btc_∑øms", 51, &
ßved_ªg51
)) &&

298 (!
	`dev_wlc_ötv¨_gë_ªg
(
dev
, "btc_∑øms", 64, &
ßved_ªg64
)) &&

299 (!
	`dev_wlc_ötv¨_gë_ªg
(
dev
, "btc_∑øms", 65, &
ßved_ªg65
)) &&

300 (!
	`dev_wlc_ötv¨_gë_ªg
(
dev
, "btc_∑øms", 71, &
ßved_ªg71
))) {

301 
ßved_°©us
 = 
TRUE
;

302 
	`WL_TRACE
(("%s saved bt_params[50,51,64,65,71]:"

304 
__FUNCTION__
, 
ßved_ªg50
, 
ßved_ªg51
,

305 
ßved_ªg64
, 
ßved_ªg65
, 
ßved_ªg71
));

307 
	`WL_ERR
((":%s: save btc_params failed\n",

308 
__FUNCTION__
));

309 
ßved_°©us
 = 
FALSE
;

313 
	`WL_TRACE
(("override with [50,51,64,65,71]:"

315 *(
u32
 *)(
buf_ªg50va_dh˝_⁄
+4),

316 *(
u32
 *)(
buf_ªg51va_dh˝_⁄
+4),

317 *(
u32
 *)(
buf_ªg64va_dh˝_⁄
+4),

318 *(
u32
 *)(
buf_ªg65va_dh˝_⁄
+4),

319 *(
u32
 *)(
buf_ªg71va_dh˝_⁄
+4)));

321 
	`dev_wlc_bufv¨_£t
(
dev
, "btc_params",

322 (*)&
buf_ªg50va_dh˝_⁄
[0], 8);

323 
	`dev_wlc_bufv¨_£t
(
dev
, "btc_params",

324 (*)&
buf_ªg51va_dh˝_⁄
[0], 8);

325 
	`dev_wlc_bufv¨_£t
(
dev
, "btc_params",

326 (*)&
buf_ªg64va_dh˝_⁄
[0], 8);

327 
	`dev_wlc_bufv¨_£t
(
dev
, "btc_params",

328 (*)&
buf_ªg65va_dh˝_⁄
[0], 8);

329 
	`dev_wlc_bufv¨_£t
(
dev
, "btc_params",

330 (*)&
buf_ªg71va_dh˝_⁄
[0], 8);

332 
ßved_°©us
 = 
TRUE
;

333 } i‡(
ßved_°©us
) {

335 
	`WL_TRACE
(("DoÇew SCO/eSCO coexálgo {save &"

338 
ªgaddr
 = 50;

339 
	`dev_wlc_ötv¨_£t_ªg
(
dev
, "btc_params",

340 (*)&
ªgaddr
, (*)&
ßved_ªg50
);

341 
ªgaddr
 = 51;

342 
	`dev_wlc_ötv¨_£t_ªg
(
dev
, "btc_params",

343 (*)&
ªgaddr
, (*)&
ßved_ªg51
);

344 
ªgaddr
 = 64;

345 
	`dev_wlc_ötv¨_£t_ªg
(
dev
, "btc_params",

346 (*)&
ªgaddr
, (*)&
ßved_ªg64
);

347 
ªgaddr
 = 65;

348 
	`dev_wlc_ötv¨_£t_ªg
(
dev
, "btc_params",

349 (*)&
ªgaddr
, (*)&
ßved_ªg65
);

350 
ªgaddr
 = 71;

351 
	`dev_wlc_ötv¨_£t_ªg
(
dev
, "btc_params",

352 (*)&
ªgaddr
, (*)&
ßved_ªg71
);

354 
	`WL_TRACE
(("restore bt_params[50,51,64,65,71]:"

356 
ßved_ªg50
, 
ßved_ªg51
, 
ßved_ªg64
,

357 
ßved_ªg65
, 
ßved_ªg71
));

359 
ßved_°©us
 = 
FALSE
;

361 
	`WL_ERR
((":%sáttÅoÑestoreÇot saved BTCOEXÖarams\n",

362 
__FUNCTION__
));

366 
	}
}

370 
	$wl_cfg80211_bt_£tÊag
(
√t_devi˚
 *
dev
, 
boﬁ
 
£t
)

372 #i‡
	`deföed
(
BT_DHCP_USE_FLAGS
)

373 
buf_Êag7_dh˝_⁄
[8] = { 7, 00, 00, 00, 0x1, 0x0, 0x00, 0x00 };

374 
buf_Êag7_deÁu…
[8] = { 7, 00, 00, 00, 0x0, 0x00, 0x00, 0x00};

378 #i‡
	`deföed
(
BT_DHCP_eSCO_FIX
)

380 
	`£t_btc_esco_∑øms
(
dev
, 
£t
);

383 #i‡
	`deföed
(
BT_DHCP_USE_FLAGS
)

384 
	`WL_TRACE
(("WI-FIÖri‹ôy boo° vü bàÊags, së:%d\n", 
£t
));

385 i‡(
£t
 =
TRUE
)

387 
	`dev_wlc_bufv¨_£t
(
dev
, "btc_flags",

388 (*)&
buf_Êag7_dh˝_⁄
[0],

389 (
buf_Êag7_dh˝_⁄
));

392 
	`dev_wlc_bufv¨_£t
(
dev
, "btc_flags",

393 (*)&
buf_Êag7_deÁu…
[0],

394 (
buf_Êag7_deÁu…
));

396 
	}
}

398 
	$wl_cfg80211_bt_timîfunc
(
ul⁄g
 
d©a
)

400 
btc€x_öfo
 *
bt_loˇl
 = (btc€x_öfÿ*)
d©a
;

401 
	`WL_TRACE
(("%s\n", 
__FUNCTION__
));

402 
bt_loˇl
->
timî_⁄
 = 0;

403 
	`scheduÀ_w‹k
(&
bt_loˇl
->
w‹k
);

404 
	}
}

406 
	$wl_cfg80211_bt_h™dÀr
(
w‹k_°ru˘
 *
w‹k
)

408 
btc€x_öfo
 *
btcx_öf
;

410 
btcx_öf
 = 
	`c⁄èöî_of
(
w‹k
, 
btc€x_öfo
, work);

412 i‡(
btcx_öf
->
timî_⁄
) {

413 
btcx_öf
->
timî_⁄
 = 0;

414 
	`dñ_timî_sync
(&
btcx_öf
->
timî
);

417 
btcx_öf
->
bt_°©e
) {

418 
BT_DHCP_START
:

422 
	`WL_TRACE
(("%s bt_dhcp stm: started \n",

423 
__FUNCTION__
));

424 
btcx_öf
->
bt_°©e
 = 
BT_DHCP_OPPR_WIN
;

425 
	`mod_timî
(&
btcx_öf
->
timî
,

426 
jiffõs
 + 
	`m£cs_to_jiffõs
(
BT_DHCP_OPPR_WIN_TIME
));

427 
btcx_öf
->
timî_⁄
 = 1;

430 
BT_DHCP_OPPR_WIN
:

431 i‡(
btcx_öf
->
dh˝_d⁄e
) {

432 
	`WL_TRACE
(("%s DHCP Done before T1Éxpiration\n",

433 
__FUNCTION__
));

434 
btc_c€x_idÀ
;

440 
	`WL_TRACE
(("%†DHCP T1:%dÉxpúed\n", 
__FUNCTION__
,

441 
BT_DHCP_OPPR_WIN_TIME
));

442 i‡(
btcx_öf
->
dev
)

443 
	`wl_cfg80211_bt_£tÊag
(
btcx_öf
->
dev
, 
TRUE
);

444 
btcx_öf
->
bt_°©e
 = 
BT_DHCP_FLAG_FORCE_TIMEOUT
;

445 
	`mod_timî
(&
btcx_öf
->
timî
,

446 
jiffõs
 + 
	`m£cs_to_jiffõs
(
BT_DHCP_FLAG_FORCE_TIME
));

447 
btcx_öf
->
timî_⁄
 = 1;

450 
BT_DHCP_FLAG_FORCE_TIMEOUT
:

451 i‡(
btcx_öf
->
dh˝_d⁄e
) {

452 
	`WL_TRACE
(("%s DHCP Done before T2Éxpiration\n",

453 
__FUNCTION__
));

456 
	`WL_TRACE
(("%s DHCP wait interval T2:%d"

457 "m£¯expúed\n", 
__FUNCTION__
,

458 
BT_DHCP_FLAG_FORCE_TIME
));

462 i‡(
btcx_öf
->
dev
)

463 
	`wl_cfg80211_bt_£tÊag
(
btcx_öf
->
dev
, 
FALSE
);

464 
btc_c€x_idÀ
:

465 
btcx_öf
->
bt_°©e
 = 
BT_DHCP_IDLE
;

466 
btcx_öf
->
timî_⁄
 = 0;

470 
	`WL_ERR
(("%†îr‹ g_°©us=%d !!!\n", 
__FUNCTION__
,

471 
btcx_öf
->
bt_°©e
));

472 i‡(
btcx_öf
->
dev
)

473 
	`wl_cfg80211_bt_£tÊag
(
btcx_öf
->
dev
, 
FALSE
);

474 
btcx_öf
->
bt_°©e
 = 
BT_DHCP_IDLE
;

475 
btcx_öf
->
timî_⁄
 = 0;

479 
	`√t_os_wake_u∆ock
(
btcx_öf
->
dev
);

480 
	}
}

482 
	$wl_cfg80211_btc€x_öô
(
wl_¥iv
 *
wl
)

484 
btc€x_öfo
 *
btco_öf
 = 
NULL
;

486 
btco_öf
 = 
	`kmÆloc
((
btc€x_öfo
), 
GFP_KERNEL
);

487 i‡(!
btco_öf
)

488  -
ENOMEM
;

490 
btco_öf
->
bt_°©e
 = 
BT_DHCP_IDLE
;

491 
btco_öf
->
ts_dh˝_°¨t
 = 0;

492 
btco_öf
->
ts_dh˝_ok
 = 0;

494 
btco_öf
->
timî_ms
 = 10;

495 
	`öô_timî
(&
btco_öf
->
timî
);

496 
btco_öf
->
timî
.
d©a
 = (
ul⁄g
)btco_inf;

497 
btco_öf
->
timî
.
fun˘i⁄
 = 
wl_cfg80211_bt_timîfunc
;

499 
btco_öf
->
dev
 = 
wl
->
wdev
->
√tdev
;

501 
	`INIT_WORK
(&
btco_öf
->
w‹k
, 
wl_cfg80211_bt_h™dÀr
);

503 
wl
->
btc€x_öfo
 = 
btco_öf
;

505 
	}
}

507 
	$wl_cfg80211_btc€x_deöô
(
wl_¥iv
 *
wl
)

509 i‡(!
wl
->
btc€x_öfo
)

512 i‡(
wl
->
btc€x_öfo
->
timî_⁄
) {

513 
wl
->
btc€x_öfo
->
timî_⁄
 = 0;

514 
	`dñ_timî_sync
(&
wl
->
btc€x_öfo
->
timî
);

517 
	`ˇn˚l_w‹k_sync
(&
wl
->
btc€x_öfo
->
w‹k
);

519 
	`k‰ì
(
wl
->
btc€x_öfo
);

520 
wl
->
btc€x_öfo
 = 
NULL
;

521 
	}
}

524 
	$wl_cfg80211_£t_btc€x_dh˝
(
√t_devi˚
 *
dev
, *
comm™d
)

527 
wl_¥iv
 *
wl
 = 
wlcfg_drv_¥iv
;

528 
powîmode_vÆ
 = 0;

529 
buf_ªg66va_dh˝_⁄
[8] = { 66, 00, 00, 00, 0x10, 0x27, 0x00, 0x00 };

530 
buf_ªg41va_dh˝_⁄
[8] = { 41, 00, 00, 00, 0x33, 0x00, 0x00, 0x00 };

531 
buf_ªg68va_dh˝_⁄
[8] = { 68, 00, 00, 00, 0x90, 0x01, 0x00, 0x00 };

533 
uöt32
 
ªgaddr
;

534 
uöt32
 
ßved_ªg66
;

535 
uöt32
 
ßved_ªg41
;

536 
uöt32
 
ßved_ªg68
;

537 
boﬁ
 
ßved_°©us
 = 
FALSE
;

539 #ifde‡
COEX_DHCP


540 
buf_Êag7_deÁu…
[8] = { 7, 00, 00, 00, 0x0, 0x00, 0x00, 0x00};

541 
btc€x_öfo
 *
btco_öf
 = 
wl
->btcoex_info;

544 #ifde‡
PKT_FILTER_SUPPORT


545 
dhd_pub_t
 *
dhd
 = (dhd_pub_à*)(
wl
->
pub
);

549 
	`°∫˝y
((*)&
powîmode_vÆ
, 
comm™d
 + 
	`°æí
("BTCOEXMODE") +1, 1);

551 i‡(
	`°∫icmp
((*)&
powîmode_vÆ
, "1", 
	`°æí
("1")) == 0) {

552 
	`WL_TRACE_HW4
(("%s: DHCP sessi⁄ sèπs\n", 
__FUNCTION__
));

554 #i‡
	`deföed
(
DHCP_SCAN_SUPPRESS
)

556 
	`wl_cfg80211_sˇn_suµªss
(
dev
, 1);

559 #ifde‡
PKT_FILTER_SUPPORT


560 
dhd
->
dh˝_ö_¥ogªss
 = 1;

562 i‡(
dhd
->
óæy_su•íded
) {

563 
	`WL_TRACE_HW4
(("DHCP inÖrogressing , disableÖacket filter!!!\n"));

564 
	`dhd_íabÀ_∑ckë_fûãr
(0, 
dhd
);

569 i‡((
ßved_°©us
 =
FALSE
) &&

570 (!
	`dev_wlc_ötv¨_gë_ªg
(
dev
, "btc_∑øms", 66, &
ßved_ªg66
)) &&

571 (!
	`dev_wlc_ötv¨_gë_ªg
(
dev
, "btc_∑øms", 41, &
ßved_ªg41
)) &&

572 (!
	`dev_wlc_ötv¨_gë_ªg
(
dev
, "btc_∑øms", 68, &
ßved_ªg68
))) {

573 
ßved_°©us
 = 
TRUE
;

574 
	`WL_TRACE
(("Saved 0x%x 0x%x 0x%x\n",

575 
ßved_ªg66
, 
ßved_ªg41
, 
ßved_ªg68
));

580 #ifde‡
COEX_DHCP


582 i‡(
	`btc€x_is_sco_a˘ive
(
dev
)) {

584 
	`dev_wlc_bufv¨_£t
(
dev
, "btc_params",

585 (*)&
buf_ªg66va_dh˝_⁄
[0],

586 (
buf_ªg66va_dh˝_⁄
));

588 
	`dev_wlc_bufv¨_£t
(
dev
, "btc_params",

589 (*)&
buf_ªg41va_dh˝_⁄
[0],

590 (
buf_ªg41va_dh˝_⁄
));

592 
	`dev_wlc_bufv¨_£t
(
dev
, "btc_params",

593 (*)&
buf_ªg68va_dh˝_⁄
[0],

594 (
buf_ªg68va_dh˝_⁄
));

595 
ßved_°©us
 = 
TRUE
;

597 
btco_öf
->
bt_°©e
 = 
BT_DHCP_START
;

598 
btco_öf
->
timî_⁄
 = 1;

599 
	`mod_timî
(&
btco_öf
->
timî
, btco_öf->timî.
expúes
);

600 
	`WL_TRACE
(("%sÉnable BT DHCP Timer\n",

601 
__FUNCTION__
));

605 i‡(
ßved_°©us
 =
TRUE
) {

606 
	`WL_ERR
(("%†wa†ˇŒed w/ÿDHCP OFF. C⁄töue\n", 
__FUNCTION__
));

609 i‡(
	`°∫icmp
((*)&
powîmode_vÆ
, "2", 
	`°æí
("2")) == 0) {

612 #ifde‡
PKT_FILTER_SUPPORT


613 
dhd
->
dh˝_ö_¥ogªss
 = 0;

614 
	`WL_TRACE_HW4
(("%s: DHCP i†com∂ëê\n", 
__FUNCTION__
));

616 #i‡
	`deföed
(
DHCP_SCAN_SUPPRESS
)

618 
	`wl_cfg80211_sˇn_suµªss
(
dev
, 0);

622 i‡(
dhd
->
óæy_su•íded
) {

623 
	`WL_TRACE_HW4
(("DHCP is complete ,ÉnableÖacket filter!!!\n"));

624 
	`dhd_íabÀ_∑ckë_fûãr
(1, 
dhd
);

630 #ifde‡
COEX_DHCP


632 
	`WL_TRACE
(("%†dißbÀ BT DHCP Timî\n", 
__FUNCTION__
));

633 i‡(
btco_öf
->
timî_⁄
) {

634 
btco_öf
->
timî_⁄
 = 0;

635 
	`dñ_timî_sync
(&
btco_öf
->
timî
);

637 i‡(
btco_öf
->
bt_°©e
 !
BT_DHCP_IDLE
) {

639 
	`WL_TRACE
(("%s bt->bt_state:%d\n",

640 
__FUNCTION__
, 
btco_öf
->
bt_°©e
));

642 
	`scheduÀ_w‹k
(&
btco_öf
->
w‹k
);

647 i‡(
ßved_°©us
 =
TRUE
)

648 
	`dev_wlc_bufv¨_£t
(
dev
, "btc_flags",

649 (*)&
buf_Êag7_deÁu…
[0], (buf_flag7_default));

653 i‡(
ßved_°©us
 =
TRUE
) {

654 
ªgaddr
 = 66;

655 
	`dev_wlc_ötv¨_£t_ªg
(
dev
, "btc_params",

656 (*)&
ªgaddr
, (*)&
ßved_ªg66
);

657 
ªgaddr
 = 41;

658 
	`dev_wlc_ötv¨_£t_ªg
(
dev
, "btc_params",

659 (*)&
ªgaddr
, (*)&
ßved_ªg41
);

660 
ªgaddr
 = 68;

661 
	`dev_wlc_ötv¨_£t_ªg
(
dev
, "btc_params",

662 (*)&
ªgaddr
, (*)&
ßved_ªg68
);

664 
	`WL_TRACE
(("restoreÑegs {66,41,68} <- 0x%x 0x%x 0x%x\n",

665 
ßved_ªg66
, 
ßved_ªg41
, 
ßved_ªg68
));

667 
ßved_°©us
 = 
FALSE
;

671 
	`WL_ERR
(("%s Unkwown yetÖower setting, ignored\n",

672 
__FUNCTION__
));

675 
	`¢¥ötf
(
comm™d
, 3, "OK");

677  (
	`°æí
("OK"));

678 
	}
}

	@dhd_common.c

26 
	~<ty≥defs.h
>

27 
	~<o¶.h
>

29 
	~<ïivîs.h
>

30 
	~<bcmutûs.h
>

32 
	~<bcmídün.h
>

33 
	~<dngl_°©s.h
>

34 
	~<wlio˘l.h
>

35 
	~<dhd.h
>

37 
	~<¥Ÿo/bcmevít.h
>

39 
	~<dhd_bus.h
>

40 
	~<dhd_¥Ÿo.h
>

41 
	~<dhd_dbg.h
>

42 
	~<msgåa˚.h
>

44 #ifde‡
WL_CFG80211


45 
	~<wl_cfg80211.h
>

47 #ifde‡
WLBTAMP


48 
	~<¥Ÿo/bt_amp_hci.h
>

49 
	~<dhd_bè.h
>

51 #ifde‡
SET_RANDOM_MAC_SOFTAP


52 
	~<löux/øndom.h
>

53 
	~<löux/jiffõs.h
>

56 
	#htod32
(
i
Ë
	)
i

57 
	#htod16
(
i
Ë
	)
i

58 
	#dtoh32
(
i
Ë
	)
i

59 
	#dtoh16
(
i
Ë
	)
i

60 
	#htodch™•ec
(
i
Ë
	)
i

61 
	#dtohch™•ec
(
i
Ë
	)
i

63 #ifde‡
PROP_TXSTATUS


64 
	~<wlfc_¥Ÿo.h
>

65 
	~<dhd_wlfc.h
>

69 #ifde‡
WLMEDIA_HTSF


70 
htsf_upd©e
(
dhd_öfo
 *
dhd
, *
d©a
);

72 
	gdhd_msg_Àvñ
 = 
DHD_ERROR_VAL
;

75 
	~<wl_iw.h
>

77 
	gfw_∑th
[
MOD_PARAM_PATHLEN
];

78 
	gnv_∑th
[
MOD_PARAM_PATHLEN
];

80 #ifde‡
SOFTAP


81 
	gfw_∑th2
[
MOD_PARAM_PATHLEN
];

82 
boﬁ
 
so·≠_íabÀd
;

86 
uöt32
 
	gdhd_c⁄n_evít
;

87 
uöt32
 
	gdhd_c⁄n_°©us
;

88 
uöt32
 
	gdhd_c⁄n_ªas⁄
;

90 
dhd_isˇn_ªque°
(* 
dhdp
, 
uöt16
 
a˘i⁄
);

91 
dhd_öd_sˇn_c⁄fúm
(*
h
, 
boﬁ
 
°©us
);

92 
dhd_isˇn_ö_¥ogªss
(*
h
);

93 
dhd_isˇn_lock
();

94 
dhd_isˇn_u∆ock
();

95 
dhd_ch™ge_mtu
(
dhd_pub_t
 *
dhd
, 
√w_mtu
, 
ifidx
);

96 #i‡!
deföed
(
AP
Ë&& deföed(
WLP2P
)

97 
dhd_gë_c⁄cuºít_ˇ∑bûôes
(
dhd_pub_t
 *
dhd
);

99 
boﬁ
 
	g≠_cfg_ru¬ög
 = 
FALSE
;

100 
boﬁ
 
	g≠_fw_lﬂded
 = 
FALSE
;

103 #ifde‡
DHD_DEBUG


104 c⁄° 
	gdhd_vîsi⁄
[] = "D⁄gÀ Ho° Drivî, vîsi⁄ " 
EPI_VERSION_STR
 "\nCompiled on "

105 
__DATE__
 "áà" 
__TIME__
;

107 c⁄° 
	gdhd_vîsi⁄
[] = "D⁄gÀ Ho° Drivî, vîsi⁄ " 
EPI_VERSION_STR
;

110 
dhd_£t_timî
(*
bus
, 
uöt
 
wdtick
);

114 
	mIOV_VERSION
 = 1,

115 
	mIOV_WLMSGLEVEL
,

116 
	mIOV_MSGLEVEL
,

117 
	mIOV_BCMERRORSTR
,

118 
	mIOV_BCMERROR
,

119 
	mIOV_WDTICK
,

120 
	mIOV_DUMP
,

121 
	mIOV_CLEARCOUNTS
,

122 
	mIOV_LOGDUMP
,

123 
	mIOV_LOGCAL
,

124 
	mIOV_LOGSTAMP
,

125 
	mIOV_GPIOOB
,

126 
	mIOV_IOCTLTIMEOUT
,

127 #ifde‡
WLBTAMP


128 
	mIOV_HCI_CMD
,

129 
	mIOV_HCI_ACL_DATA
,

131 #i‡
deföed
(
DHD_DEBUG
)

132 
	mIOV_CONS
,

133 
	mIOV_DCONSOLE_POLL
,

135 #ifde‡
PROP_TXSTATUS


136 
	mIOV_PROPTXSTATUS_ENABLE
,

137 
	mIOV_PROPTXSTATUS_MODE
,

139 
	mIOV_BUS_TYPE
,

140 #ifde‡
WLMEDIA_HTSF


141 
	mIOV_WLPKTDLYSTAT_SZ
,

143 
	mIOV_CHANGEMTU
,

144 
	mIOV_HOSTREORDER_FLOWS
,

145 
	mIOV_LAST


148 c⁄° 
bcm_iov¨_t
 
	gdhd_iov¨s
[] = {

149 {"vîsi⁄", 
IOV_VERSION
, 0, 
IOVT_BUFFER
, (
dhd_vîsi⁄
) },

150 {"wlmsgÀvñ", 
IOV_WLMSGLEVEL
, 0, 
IOVT_UINT32
, 0 },

151 #ifde‡
DHD_DEBUG


152 {"msgÀvñ", 
IOV_MSGLEVEL
, 0, 
IOVT_UINT32
, 0 },

154 {"bcmîr‹°r", 
IOV_BCMERRORSTR
, 0, 
IOVT_BUFFER
, 
BCME_STRLEN
 },

155 {"bcmîr‹", 
IOV_BCMERROR
, 0, 
IOVT_INT8
, 0 },

156 {"wdtick", 
IOV_WDTICK
, 0, 
IOVT_UINT32
, 0 },

157 {"dump", 
IOV_DUMP
, 0, 
IOVT_BUFFER
, 
DHD_IOCTL_MAXLEN
 },

158 #ifde‡
DHD_DEBUG


159 {"c⁄s", 
IOV_CONS
, 0, 
IOVT_BUFFER
, 0 },

160 {"dc⁄pﬁl", 
IOV_DCONSOLE_POLL
, 0, 
IOVT_UINT32
, 0 },

162 {"˛órcou¡s", 
IOV_CLEARCOUNTS
, 0, 
IOVT_VOID
, 0 },

163 {"gpioob", 
IOV_GPIOOB
, 0, 
IOVT_UINT32
, 0 },

164 {"io˘l_timeout", 
IOV_IOCTLTIMEOUT
, 0, 
IOVT_UINT32
, 0 },

165 #ifde‡
WLBTAMP


166 {"HCI_cmd", 
IOV_HCI_CMD
, 0, 
IOVT_BUFFER
, 0},

167 {"HCI_ACL_d©a", 
IOV_HCI_ACL_DATA
, 0, 
IOVT_BUFFER
, 0},

169 #ifde‡
PROP_TXSTATUS


170 {"¥›tx", 
IOV_PROPTXSTATUS_ENABLE
, 0, 
IOVT_UINT32
, 0 },

177 {"±xmode", 
IOV_PROPTXSTATUS_MODE
, 0, 
IOVT_UINT32
, 0 },

179 {"bu°y≥", 
IOV_BUS_TYPE
, 0, 
IOVT_UINT32
, 0},

180 #ifde‡
WLMEDIA_HTSF


181 {"pktdly°©sz", 
IOV_WLPKTDLYSTAT_SZ
, 0, 
IOVT_UINT8
, 0 },

183 {"ch™gemtu", 
IOV_CHANGEMTU
, 0, 
IOVT_UINT32
, 0 },

184 {"ho°_ª‹dî_Êows", 
IOV_HOSTREORDER_FLOWS
, 0, 
IOVT_BUFFER
,

185 (
WLHOST_REORDERDATA_MAXFLOWS
 + 1) },

186 {
NULL
, 0, 0, 0, 0 }

190 
	$dhd_comm⁄_öô
(
o¶_t
 *
osh
)

192 #ifde‡
CONFIG_BCMDHD_FW_PATH


193 
	`bcm_°∫˝y_s
(
fw_∑th
, (fw_∑th), 
CONFIG_BCMDHD_FW_PATH
, 
MOD_PARAM_PATHLEN
-1);

195 
fw_∑th
[0] = '\0';

197 #ifde‡
CONFIG_BCMDHD_NVRAM_PATH


198 
	`bcm_°∫˝y_s
(
nv_∑th
, “v_∑th), 
CONFIG_BCMDHD_NVRAM_PATH
, 
MOD_PARAM_PATHLEN
-1);

200 
nv_∑th
[0] = '\0';

202 #ifde‡
SOFTAP


203 
fw_∑th2
[0] = '\0';

205 
	}
}

208 
	$dhd_dump
(
dhd_pub_t
 *
dhdp
, *
buf
, 
buÊí
)

210 
óbuf
[
ETHER_ADDR_STR_LEN
];

212 
bcm°rbuf
 
b
;

213 
bcm°rbuf
 *
°rbuf
 = &
b
;

215 
	`bcm_böô
(
°rbuf
, 
buf
, 
buÊí
);

218 
	`bcm_b¥ötf
(
°rbuf
, "%s\n", 
dhd_vîsi⁄
);

219 
	`bcm_b¥ötf
(
°rbuf
, "\n");

220 
	`bcm_b¥ötf
(
°rbuf
, "pub.up %dÖub.txoff %dÖub.busstate %d\n",

221 
dhdp
->
up
, dhdp->
txoff
, dhdp->
bus°©e
);

222 
	`bcm_b¥ötf
(
°rbuf
, "pub.hdrlen %dÖub.maxctl %dÖub.rxsz %d\n",

223 
dhdp
->
hdæí
, dhdp->
max˘l
, dhdp->
rxsz
);

224 
	`bcm_b¥ötf
(
°rbuf
, "pub.iswl %dÖub.drv_version %ldÖub.mac %s\n",

225 
dhdp
->
iswl
, dhdp->
drv_vîsi⁄
, 
	`bcm_ëhî_¡ﬂ
(&dhdp->
mac
, 
óbuf
));

226 
	`bcm_b¥ötf
(
°rbuf
, "pub.bcmîr‹ %dÅick˙à%d\n", 
dhdp
->
bcmîr‹
, dhdp->
tick˙t
);

228 
	`bcm_b¥ötf
(
°rbuf
, "dongle stats:\n");

229 
	`bcm_b¥ötf
(
°rbuf
, "tx_packets %ldÅx_bytes %ldÅx_errors %ldÅx_dropped %ld\n",

230 
dhdp
->
d°©s
.
tx_∑ckës
, dhdp->d°©s.
tx_byãs
,

231 
dhdp
->
d°©s
.
tx_îr‹s
, dhdp->d°©s.
tx_dr›≥d
);

232 
	`bcm_b¥ötf
(
°rbuf
, "rx_packets %ldÑx_bytes %ldÑx_errors %ldÑx_dropped %ld\n",

233 
dhdp
->
d°©s
.
rx_∑ckës
, dhdp->d°©s.
rx_byãs
,

234 
dhdp
->
d°©s
.
rx_îr‹s
, dhdp->d°©s.
rx_dr›≥d
);

235 
	`bcm_b¥ötf
(
°rbuf
, "mu…iˇ° %ld\n", 
dhdp
->
d°©s
.
mu…iˇ°
);

237 
	`bcm_b¥ötf
(
°rbuf
, "bus stats:\n");

238 
	`bcm_b¥ötf
(
°rbuf
, "tx_packets %ldÅx_multicast %ldÅx_errors %ld\n",

239 
dhdp
->
tx_∑ckës
, dhdp->
tx_mu…iˇ°
, dhdp->
tx_îr‹s
);

240 
	`bcm_b¥ötf
(
°rbuf
, "tx_ctlpkts %ldÅx_ctlerrs %ld\n",

241 
dhdp
->
tx_˘Õkts
, dhdp->
tx_˘Àºs
);

242 
	`bcm_b¥ötf
(
°rbuf
, "rx_packets %ldÑx_multicast %ldÑx_errors %ld \n",

243 
dhdp
->
rx_∑ckës
, dhdp->
rx_mu…iˇ°
, dhdp->
rx_îr‹s
);

244 
	`bcm_b¥ötf
(
°rbuf
, "rx_ctlpkts %ldÑx_ctlerrs %ldÑx_dropped %ld\n",

245 
dhdp
->
rx_˘Õkts
, dhdp->
rx_˘Àºs
, dhdp->
rx_dr›≥d
);

246 
	`bcm_b¥ötf
(
°rbuf
, "rx_readahead_cnt %ldÅx_realloc %ld\n",

247 
dhdp
->
rx_ªadahód_˙t
, dhdp->
tx_ªÆloc
);

248 
	`bcm_b¥ötf
(
°rbuf
, "\n");

251 
	`dhd_¥Ÿ_dump
(
dhdp
, 
°rbuf
);

252 
	`bcm_b¥ötf
(
°rbuf
, "\n");

255 
	`dhd_bus_dump
(
dhdp
, 
°rbuf
);

257  (!
°rbuf
->
size
 ? 
BCME_BUFTOOSHORT
 : 0);

258 
	}
}

261 
	$dhd_wl_io˘l_cmd
(
dhd_pub_t
 *
dhd_pub
, 
cmd
, *
¨g
, 
Àn
, 
uöt8
 
£t
, 
ifödex
)

263 
wl_io˘l_t
 
ioc
;

265 
ioc
.
cmd
 = cmd;

266 
ioc
.
buf
 = 
¨g
;

267 
ioc
.
Àn
 =Üen;

268 
ioc
.
£t
 = set;

270  
	`dhd_wl_io˘l
(
dhd_pub
, 
ifödex
, &
ioc
, 
¨g
, 
Àn
);

271 
	}
}

275 
	$dhd_wl_io˘l
(
dhd_pub_t
 *
dhd_pub
, 
ifödex
, 
wl_io˘l_t
 *
ioc
, *
buf
, 
Àn
)

277 
ªt
;

279 
	`dhd_os_¥Ÿo_block
(
dhd_pub
);

281 
ªt
 = 
	`dhd_¥Ÿ_io˘l
(
dhd_pub
, 
ifödex
, 
ioc
, 
buf
, 
Àn
);

282 i‡((
ªt
Ë&& (
dhd_pub
->
up
))

284 
	`dhd_os_check_h™g
(
dhd_pub
, 
ifödex
, 
ªt
);

286 
	`dhd_os_¥Ÿo_unblock
(
dhd_pub
);

288  
ªt
;

289 
	}
}

292 
	$dhd_doiov¨
(
dhd_pub_t
 *
dhd_pub
, c⁄° 
bcm_iov¨_t
 *
vi
, 
uöt32
 
a˘i⁄id
, c⁄° *
«me
,

293 *
∑øms
, 
∂í
, *
¨g
, 
Àn
, 
vÆ_size
)

295 
bcmîr‹
 = 0;

296 
öt32
 
öt_vÆ
 = 0;

298 
	`DHD_TRACE
(("%s: E¡î\n", 
__FUNCTION__
));

299 
	`DHD_TRACE
(("%s:á˘i⁄id = %d;Çamê%s\n", 
__FUNCTION__
, 
a˘i⁄id
, 
«me
));

301 i‡((
bcmîr‹
 = 
	`bcm_iov¨_Àncheck
(
vi
, 
¨g
, 
Àn
, 
	`IOV_ISSET
(
a˘i⁄id
))) != 0)

302 
exô
;

304 i‡(
∂í
 >()(
öt_vÆ
))

305 
	`bc›y
(
∑øms
, &
öt_vÆ
, (int_val));

307 
a˘i⁄id
) {

308 
	`IOV_GVAL
(
IOV_VERSION
):

310 
	`bcm_°∫˝y_s
((*)
¨g
, 
Àn
, 
dhd_vîsi⁄
,Üen);

313 
	`IOV_GVAL
(
IOV_WLMSGLEVEL
):

314 
	`¥ötk
("™droid_msg_Àvñ=0x%x\n", 
™droid_msg_Àvñ
);

315 #i‡
	`deföed
(
CONFIG_WIRELESS_EXT
)

316 
öt_vÆ
 = (
öt32
)
iw_msg_Àvñ
;

317 
	`bc›y
(&
öt_vÆ
, 
¨g
, 
vÆ_size
);

318 
	`¥ötk
("iw_msg_Àvñ=0x%x\n", 
iw_msg_Àvñ
);

320 #ifde‡
WL_CFG80211


321 
öt_vÆ
 = (
öt32
)
wl_dbg_Àvñ
;

322 
	`bc›y
(&
öt_vÆ
, 
¨g
, 
vÆ_size
);

323 
	`¥ötk
("cfg_msg_Àvñ=0x%x\n", 
wl_dbg_Àvñ
);

327 
	`IOV_SVAL
(
IOV_WLMSGLEVEL
):

328 #i‡
	`deföed
(
CONFIG_WIRELESS_EXT
)

329 i‡(
öt_vÆ
 & 
DHD_IW_VAL
) {

330 
iw_msg_Àvñ
 = (
uöt
)(
öt_vÆ
 & 0xFFFF);

331 
	`¥ötk
("iw_msg_Àvñ=0x%x\n", 
iw_msg_Àvñ
);

334 #ifde‡
WL_CFG80211


335 i‡(
öt_vÆ
 & 
DHD_CFG_VAL
) {

336 
	`wl_cfg80211_íabÀ_åa˚
((
u32
)(
öt_vÆ
 & 0xFFFF));

340 
™droid_msg_Àvñ
 = (
uöt
)
öt_vÆ
;

341 
	`¥ötk
("™droid_msg_Àvñ=0x%x\n", 
™droid_msg_Àvñ
);

345 
	`IOV_GVAL
(
IOV_MSGLEVEL
):

346 
öt_vÆ
 = (
öt32
)
dhd_msg_Àvñ
;

347 
	`bc›y
(&
öt_vÆ
, 
¨g
, 
vÆ_size
);

350 
	`IOV_SVAL
(
IOV_MSGLEVEL
):

351 
dhd_msg_Àvñ
 = 
öt_vÆ
;

354 
	`IOV_GVAL
(
IOV_BCMERRORSTR
):

355 
	`bcm_°∫˝y_s
((*)
¨g
, 
Àn
, 
	`bcmîr‹°r
(
dhd_pub
->
bcmîr‹
), 
BCME_STRLEN
);

356 ((*)
¨g
)[
BCME_STRLEN
 - 1] = 0x00;

359 
	`IOV_GVAL
(
IOV_BCMERROR
):

360 
öt_vÆ
 = (
öt32
)
dhd_pub
->
bcmîr‹
;

361 
	`bc›y
(&
öt_vÆ
, 
¨g
, 
vÆ_size
);

364 
	`IOV_GVAL
(
IOV_WDTICK
):

365 
öt_vÆ
 = (
öt32
)
dhd_w©chdog_ms
;

366 
	`bc›y
(&
öt_vÆ
, 
¨g
, 
vÆ_size
);

369 
	`IOV_SVAL
(
IOV_WDTICK
):

370 i‡(!
dhd_pub
->
up
) {

371 
bcmîr‹
 = 
BCME_NOTUP
;

374 
	`dhd_os_wd_timî
(
dhd_pub
, (
uöt
)
öt_vÆ
);

377 
	`IOV_GVAL
(
IOV_DUMP
):

378 
bcmîr‹
 = 
	`dhd_dump
(
dhd_pub
, 
¨g
, 
Àn
);

381 #ifde‡
DHD_DEBUG


382 
	`IOV_GVAL
(
IOV_DCONSOLE_POLL
):

383 
öt_vÆ
 = (
öt32
)
dhd_c⁄sﬁe_ms
;

384 
	`bc›y
(&
öt_vÆ
, 
¨g
, 
vÆ_size
);

387 
	`IOV_SVAL
(
IOV_DCONSOLE_POLL
):

388 
dhd_c⁄sﬁe_ms
 = (
uöt
)
öt_vÆ
;

391 
	`IOV_SVAL
(
IOV_CONS
):

392 i‡(
Àn
 > 0)

393 
bcmîr‹
 = 
	`dhd_bus_c⁄sﬁe_ö
(
dhd_pub
, 
¨g
, 
Àn
 - 1);

397 
	`IOV_SVAL
(
IOV_CLEARCOUNTS
):

398 
dhd_pub
->
tx_∑ckës
 = dhd_pub->
rx_∑ckës
 = 0;

399 
dhd_pub
->
tx_îr‹s
 = dhd_pub->
rx_îr‹s
 = 0;

400 
dhd_pub
->
tx_˘Õkts
 = dhd_pub->
rx_˘Õkts
 = 0;

401 
dhd_pub
->
tx_˘Àºs
 = dhd_pub->
rx_˘Àºs
 = 0;

402 
dhd_pub
->
rx_dr›≥d
 = 0;

403 
dhd_pub
->
rx_ªadahód_˙t
 = 0;

404 
dhd_pub
->
tx_ªÆloc
 = 0;

405 
dhd_pub
->
wd_dpc_sched
 = 0;

406 
	`mem£t
(&
dhd_pub
->
d°©s
, 0, (dhd_pub->dstats));

407 
	`dhd_bus_˛órcou¡s
(
dhd_pub
);

408 #ifde‡
PROP_TXSTATUS


410 i‡(
dhd_pub
->
wlfc_°©e
) {

411 
©ho°_wl_°©us_öfo_t
 *
wlfc
 =

412 (
©ho°_wl_°©us_öfo_t
*)
dhd_pub
->
wlfc_°©e
;

413 
wlfc_h™gî_t
* 
h™gî
;

415 
	`mem£t
(&
wlfc
->
°©s
, 0, (
©ho°_wl_°©_cou¡îs_t
));

417 
h™gî
 = (
wlfc_h™gî_t
*)
wlfc
->hanger;

418 
h™gî
->
pushed
 = 0;

419 
h™gî
->
p›≥d
 = 0;

420 
h™gî
->
Áûed_¶Ÿföd
 = 0;

421 
h™gî
->
Áûed_to_p›
 = 0;

422 
h™gî
->
Áûed_to_push
 = 0;

428 
	`IOV_GVAL
(
IOV_IOCTLTIMEOUT
): {

429 
öt_vÆ
 = (
öt32
)
	`dhd_os_gë_io˘l_ª•_timeout
();

430 
	`bc›y
(&
öt_vÆ
, 
¨g
, (int_val));

434 
	`IOV_SVAL
(
IOV_IOCTLTIMEOUT
): {

435 i‡(
öt_vÆ
 <= 0)

436 
bcmîr‹
 = 
BCME_BADARG
;

438 
	`dhd_os_£t_io˘l_ª•_timeout
(()
öt_vÆ
);

442 #ifde‡
WLBTAMP


443 
	`IOV_SVAL
(
IOV_HCI_CMD
): {

444 
amp_hci_cmd_t
 *
cmd
 = (amp_hci_cmd_à*)
¨g
;

447 i‡(
Àn
 < 
HCI_CMD_PREAMBLE_SIZE
)

448  
BCME_BUFTOOSHORT
;

451 i‡(
Àn
 < ()(
HCI_CMD_PREAMBLE_SIZE
 + 
cmd
->
∂í
))

452  
BCME_BUFTOOSHORT
;

454 
	`dhd_bè_docmd
(
dhd_pub
, 
cmd
, 
Àn
);

458 
	`IOV_SVAL
(
IOV_HCI_ACL_DATA
): {

459 
amp_hci_ACL_d©a_t
 *
ACL_d©a
 = (amp_hci_ACL_d©a_à*)
¨g
;

462 i‡(
Àn
 < 
HCI_ACL_DATA_PREAMBLE_SIZE
)

463  
BCME_BUFTOOSHORT
;

466 i‡(
Àn
 < ()(
HCI_ACL_DATA_PREAMBLE_SIZE
 + 
ACL_d©a
->
dÀn
))

467  
BCME_BUFTOOSHORT
;

469 
	`dhd_bè_tx_hcid©a
(
dhd_pub
, 
ACL_d©a
, 
Àn
);

474 #ifde‡
PROP_TXSTATUS


475 
	`IOV_GVAL
(
IOV_PROPTXSTATUS_ENABLE
):

476 
öt_vÆ
 = 
dhd_pub
->
wlfc_íabÀd
? 1 : 0;

477 
	`bc›y
(&
öt_vÆ
, 
¨g
, 
vÆ_size
);

480 
	`IOV_SVAL
(
IOV_PROPTXSTATUS_ENABLE
):

481 
dhd_pub
->
wlfc_íabÀd
 = 
öt_vÆ
? 1 : 0;

484 
	`IOV_GVAL
(
IOV_PROPTXSTATUS_MODE
): {

485 
©ho°_wl_°©us_öfo_t
 *
wlfc
 =

486 (
©ho°_wl_°©us_öfo_t
*)
dhd_pub
->
wlfc_°©e
;

487 
öt_vÆ
 = 
dhd_pub
->
wlfc_°©e
 ? (
öt32
)
wlfc
->
¥›tx°©us_mode
 : 0;

488 
	`bc›y
(&
öt_vÆ
, 
¨g
, 
vÆ_size
);

492 
	`IOV_SVAL
(
IOV_PROPTXSTATUS_MODE
):

493 i‡(
dhd_pub
->
wlfc_°©e
) {

494 
©ho°_wl_°©us_öfo_t
 *
wlfc
 =

495 (
©ho°_wl_°©us_öfo_t
*)
dhd_pub
->
wlfc_°©e
;

496 
wlfc
->
¥›tx°©us_mode
 = 
öt_vÆ
 & 0xff;

501 
	`IOV_GVAL
(
IOV_BUS_TYPE
):

503 #ifde‡
BCMDHDUSB


504 
öt_vÆ
 = 
BUS_TYPE_USB
;

506 
öt_vÆ
 = 
BUS_TYPE_SDIO
;

507 
	`bc›y
(&
öt_vÆ
, 
¨g
, 
vÆ_size
);

511 #ifde‡
WLMEDIA_HTSF


512 
	`IOV_GVAL
(
IOV_WLPKTDLYSTAT_SZ
):

513 
öt_vÆ
 = 
dhd_pub
->
htsfdly°©_sz
;

514 
	`bc›y
(&
öt_vÆ
, 
¨g
, 
vÆ_size
);

517 
	`IOV_SVAL
(
IOV_WLPKTDLYSTAT_SZ
):

518 
dhd_pub
->
htsfdly°©_sz
 = 
öt_vÆ
 & 0xff;

519 
	`¥ötf
("SëtögÅsfdly°©_sz:%d\n", 
dhd_pub
->
htsfdly°©_sz
);

522 
	`IOV_SVAL
(
IOV_CHANGEMTU
):

523 
öt_vÆ
 &= 0xffff;

524 
bcmîr‹
 = 
	`dhd_ch™ge_mtu
(
dhd_pub
, 
öt_vÆ
, 0);

527 
	`IOV_GVAL
(
IOV_HOSTREORDER_FLOWS
):

529 
uöt
 
i
 = 0;

530 
uöt8
 *
±r
 = (uöt8 *)
¨g
;

531 
uöt8
 
cou¡
 = 0;

533 
±r
++;

534 
i
 = 0; i < 
WLHOST_REORDERDATA_MAXFLOWS
; i++) {

535 i‡(
dhd_pub
->
ª‹dî_bufs
[
i
] !
NULL
) {

536 *
±r
 = 
dhd_pub
->
ª‹dî_bufs
[
i
]->
Êow_id
;

537 
±r
++;

538 
cou¡
++;

541 
±r
 = (
uöt8
 *)
¨g
;

542 *
±r
 = 
cou¡
;

547 
bcmîr‹
 = 
BCME_UNSUPPORTED
;

551 
exô
:

552 
	`DHD_TRACE
(("%s:á˘i⁄id %d, bcmîr‹ %d\n", 
__FUNCTION__
, 
a˘i⁄id
, 
bcmîr‹
));

553  
bcmîr‹
;

554 
	}
}

558 
	$dhd_°‹e_c⁄n_°©us
(
uöt32
 
evít
, uöt32 
°©us
, uöt32 
ªas⁄
)

564 i‡(!(
evít
 =
WLC_E_SET_SSID
 && 
°©us
 =
WLC_E_STATUS_FAIL
 &&

565 
dhd_c⁄n_evít
 =
WLC_E_PRUNE
)) {

566 
dhd_c⁄n_evít
 = 
evít
;

567 
dhd_c⁄n_°©us
 = 
°©us
;

568 
dhd_c⁄n_ªas⁄
 = 
ªas⁄
;

570 
	}
}

572 
boﬁ


573 
	$dhd_¥ec_íq
(
dhd_pub_t
 *
dhdp
, 
pktq
 *
q
, *
pkt
, 
¥ec
)

575 *
p
;

576 
ïªc
 = -1;

577 
boﬁ
 
disˇrd_ﬁde°
;

582 i‡(!
	`pktq_pfuŒ
(
q
, 
¥ec
Ë&& !
	`pktq_fuŒ
(q)) {

583 
	`pktq_≥nq
(
q
, 
¥ec
, 
pkt
);

584  
TRUE
;

588 i‡(
	`pktq_pfuŒ
(
q
, 
¥ec
))

589 
ïªc
 = 
¥ec
;

590 i‡(
	`pktq_fuŒ
(
q
)) {

591 
	`pktq_≥ek_èû
(
q
, &
ïªc
);

592 i‡(
ïªc
 > 
¥ec
 ||Éprec < 0)

593  
FALSE
;

597 i‡(
ïªc
 >= 0) {

599 
	`ASSERT
(!
	`pktq_≥m±y
(
q
, 
ïªc
));

600 
disˇrd_ﬁde°
 = 
	`AC_BITMAP_TST
(
dhdp
->
wme_dp
, 
ïªc
);

601 i‡(
ïªc
 =
¥ec
 && !
disˇrd_ﬁde°
)

602  
FALSE
;

604 
p
 = 
disˇrd_ﬁde°
 ? 
	`pktq_pdeq
(
q
, 
ïªc
Ë: 
	`pktq_pdeq_èû
(q,Éprec);

605 
	`ASSERT
(
p
);

607 
	`PKTFREE
(
dhdp
->
osh
, 
p
, 
TRUE
);

611 
	`pktq_≥nq
(
q
, 
¥ec
, 
pkt
);

613  
TRUE
;

614 
	}
}

617 
	$dhd_iov¨_›
(
dhd_pub_t
 *
dhd_pub
, c⁄° *
«me
,

618 *
∑øms
, 
∂í
, *
¨g
, 
Àn
, 
boﬁ
 
£t
)

620 
bcmîr‹
 = 0;

621 
vÆ_size
;

622 c⁄° 
bcm_iov¨_t
 *
vi
 = 
NULL
;

623 
uöt32
 
a˘i⁄id
;

625 
	`DHD_TRACE
(("%s: E¡î\n", 
__FUNCTION__
));

627 
	`ASSERT
(
«me
);

628 
	`ASSERT
(
Àn
 >= 0);

631 
	`ASSERT
(
£t
 || (
¨g
 && 
Àn
));

634 
	`ASSERT
(!
£t
 || (!
∑øms
 && !
∂í
));

636 i‡((
vi
 = 
	`bcm_iov¨_lookup
(
dhd_iov¨s
, 
«me
)Ë=
NULL
) {

637 
bcmîr‹
 = 
BCME_UNSUPPORTED
;

638 
exô
;

641 
	`DHD_CTL
(("%s: %†%s,Üí %dÖÀ¿%d\n", 
__FUNCTION__
,

642 
«me
, (
£t
 ? "£t" : "gë"), 
Àn
, 
∂í
));

647 i‡(
∑øms
 =
NULL
) {

648 
∑øms
 = 
¨g
;

649 
∂í
 = 
Àn
;

652 i‡(
vi
->
ty≥
 =
IOVT_VOID
)

653 
vÆ_size
 = 0;

654 i‡(
vi
->
ty≥
 =
IOVT_BUFFER
)

655 
vÆ_size
 = 
Àn
;

658 
vÆ_size
 = ();

660 
a˘i⁄id
 = 
£t
 ? 
	`IOV_SVAL
(
vi
->
v¨id
Ë: 
	`IOV_GVAL
(vi->varid);

662 
bcmîr‹
 = 
	`dhd_doiov¨
(
dhd_pub
, 
vi
, 
a˘i⁄id
, 
«me
, 
∑øms
, 
∂í
, 
¨g
, 
Àn
, 
vÆ_size
);

664 
exô
:

665  
bcmîr‹
;

666 
	}
}

669 
	$dhd_io˘l
(
dhd_pub_t
 * 
dhd_pub
, 
dhd_io˘l_t
 *
ioc
, * 
buf
, 
uöt
 
buÊí
)

671 
bcmîr‹
 = 0;

673 
	`DHD_TRACE
(("%s: E¡î\n", 
__FUNCTION__
));

675 i‡(!
buf
) {

676  
BCME_BADARG
;

679 
ioc
->
cmd
) {

680 
DHD_GET_MAGIC
:

681 i‡(
buÊí
 < ())

682 
bcmîr‹
 = 
BCME_BUFTOOSHORT
;

684 *(*)
buf
 = 
DHD_IOCTL_MAGIC
;

687 
DHD_GET_VERSION
:

688 i‡(
buÊí
 < ())

689 
bcmîr‹
 = -
BCME_BUFTOOSHORT
;

691 *(*)
buf
 = 
DHD_IOCTL_VERSION
;

694 
DHD_GET_VAR
:

695 
DHD_SET_VAR
: {

696 *
¨g
;

697 
uöt
 
¨gÀn
;

700 
¨g
 = 
buf
, 
¨gÀn
 = 
buÊí
; *arg &&árglen;árg++,árglen--)

703 i‡(*
¨g
) {

704 
bcmîr‹
 = 
BCME_BUFTOOSHORT
;

709 
¨g
++, 
¨gÀn
--;

712 i‡(
ioc
->
cmd
 =
DHD_GET_VAR
)

713 
bcmîr‹
 = 
	`dhd_iov¨_›
(
dhd_pub
, 
buf
, 
¨g
, 
¨gÀn
,

714 
buf
, 
buÊí
, 
IOV_GET
);

716 
bcmîr‹
 = 
	`dhd_iov¨_›
(
dhd_pub
, 
buf
, 
NULL
, 0, 
¨g
, 
¨gÀn
, 
IOV_SET
);

717 i‡(
bcmîr‹
 !
BCME_UNSUPPORTED
)

721 i‡(
ioc
->
cmd
 =
DHD_GET_VAR
)

722 
bcmîr‹
 = 
	`dhd_¥Ÿ_iov¨_›
(
dhd_pub
, 
buf
, 
¨g
,

723 
¨gÀn
, 
buf
, 
buÊí
, 
IOV_GET
);

725 
bcmîr‹
 = 
	`dhd_¥Ÿ_iov¨_›
(
dhd_pub
, 
buf
,

726 
NULL
, 0, 
¨g
, 
¨gÀn
, 
IOV_SET
);

727 i‡(
bcmîr‹
 !
BCME_UNSUPPORTED
)

731 i‡(
ioc
->
cmd
 =
DHD_GET_VAR
) {

732 
bcmîr‹
 = 
	`dhd_bus_iov¨_›
(
dhd_pub
, 
buf
,

733 
¨g
, 
¨gÀn
, 
buf
, 
buÊí
, 
IOV_GET
);

735 
bcmîr‹
 = 
	`dhd_bus_iov¨_›
(
dhd_pub
, 
buf
,

736 
NULL
, 0, 
¨g
, 
¨gÀn
, 
IOV_SET
);

743 
bcmîr‹
 = 
BCME_UNSUPPORTED
;

746  
bcmîr‹
;

747 
	}
}

749 #ifde‡
SHOW_EVENTS


751 
	$wl_show_ho°_evít
(
wl_evít_msg_t
 *
evít
, *
evít_d©a
)

753 
uöt
 
i
, 
°©us
, 
ªas⁄
;

754 
boﬁ
 
group
 = 
FALSE
, 
Êush_txq
 = FALSE, 
lök
 = FALSE;

755 c⁄° *
auth_°r
;

756 c⁄° *
evít_«me
;

757 
uch¨
 *
buf
;

758 
îr_msg
[256], 
óbuf
[
ETHER_ADDR_STR_LEN
];

759 
uöt
 
evít_ty≥
, 
Êags
, 
auth_ty≥
, 
d©Æí
;

761 
evít_ty≥
 = 
	`¡oh32
(
evít
->event_type);

762 
Êags
 = 
	`¡oh16
(
evít
->flags);

763 
°©us
 = 
	`¡oh32
(
evít
->status);

764 
ªas⁄
 = 
	`¡oh32
(
evít
->reason);

765 
	`BCM_REFERENCE
(
ªas⁄
);

766 
auth_ty≥
 = 
	`¡oh32
(
evít
->auth_type);

767 
d©Æí
 = 
	`¡oh32
(
evít
->datalen);

770 
	`¢¥ötf
(
óbuf
, (eabuf), "%02x:%02x:%02x:%02x:%02x:%02x",

771 (
uch¨
)
evít
->
addr
.
o˘ë
[0]&0xff,

772 (
uch¨
)
evít
->
addr
.
o˘ë
[1]&0xff,

773 (
uch¨
)
evít
->
addr
.
o˘ë
[2]&0xff,

774 (
uch¨
)
evít
->
addr
.
o˘ë
[3]&0xff,

775 (
uch¨
)
evít
->
addr
.
o˘ë
[4]&0xff,

776 (
uch¨
)
evít
->
addr
.
o˘ë
[5]&0xff);

778 
evít_«me
 = "UNKNOWN";

779 
i
 = 0; i < (
uöt
)
bcmevít_«mes_size
; i++)

780 i‡(
bcmevít_«mes
[
i
].
evít
 =
evít_ty≥
)

781 
evít_«me
 = 
bcmevít_«mes
[
i
].
«me
;

783 i‡(
Êags
 & 
WLC_EVENT_MSG_LINK
)

784 
lök
 = 
TRUE
;

785 i‡(
Êags
 & 
WLC_EVENT_MSG_GROUP
)

786 
group
 = 
TRUE
;

787 i‡(
Êags
 & 
WLC_EVENT_MSG_FLUSHTXQ
)

788 
Êush_txq
 = 
TRUE
;

790 
evít_ty≥
) {

791 
WLC_E_START
:

792 
WLC_E_DEAUTH
:

793 
WLC_E_DISASSOC
:

794 
	`DHD_EVENT
(("MACEVENT: %s, MAC %s\n", 
evít_«me
, 
óbuf
));

797 
WLC_E_ASSOC_IND
:

798 
WLC_E_REASSOC_IND
:

800 
	`DHD_EVENT
(("MACEVENT: %s, MAC %s\n", 
evít_«me
, 
óbuf
));

803 
WLC_E_ASSOC
:

804 
WLC_E_REASSOC
:

805 i‡(
°©us
 =
WLC_E_STATUS_SUCCESS
) {

806 
	`DHD_EVENT
(("MACEVENT: %s, MAC %s, SUCCESS\n", 
evít_«me
, 
óbuf
));

807 } i‡(
°©us
 =
WLC_E_STATUS_TIMEOUT
) {

808 
	`DHD_EVENT
(("MACEVENT: %s, MAC %s, TIMEOUT\n", 
evít_«me
, 
óbuf
));

809 } i‡(
°©us
 =
WLC_E_STATUS_FAIL
) {

810 
	`DHD_EVENT
(("MACEVENT: %s, MAC %s, FAILURE,Ñeason %d\n",

811 
evít_«me
, 
óbuf
, ()
ªas⁄
));

813 
	`DHD_EVENT
(("MACEVENT: %s, MAC %s, unexpected status %d\n",

814 
evít_«me
, 
óbuf
, ()
°©us
));

818 
WLC_E_DEAUTH_IND
:

819 
WLC_E_DISASSOC_IND
:

820 
	`DHD_EVENT
(("MACEVENT: %s, MAC %s,Ñós⁄ %d\n", 
evít_«me
, 
óbuf
, ()
ªas⁄
));

823 
WLC_E_AUTH
:

824 
WLC_E_AUTH_IND
:

825 i‡(
auth_ty≥
 =
DOT11_OPEN_SYSTEM
)

826 
auth_°r
 = "Open System";

827 i‡(
auth_ty≥
 =
DOT11_SHARED_KEY
)

828 
auth_°r
 = "Shared Key";

830 
	`¢¥ötf
(
îr_msg
, ”º_msg), "AUTH unknown: %d", ()
auth_ty≥
);

831 
auth_°r
 = 
îr_msg
;

833 i‡(
evít_ty≥
 =
WLC_E_AUTH_IND
) {

834 
	`DHD_EVENT
(("MACEVENT: %s, MAC %s, %s\n", 
evít_«me
, 
óbuf
, 
auth_°r
));

835 } i‡(
°©us
 =
WLC_E_STATUS_SUCCESS
) {

836 
	`DHD_EVENT
(("MACEVENT: %s, MAC %s, %s, SUCCESS\n",

837 
evít_«me
, 
óbuf
, 
auth_°r
));

838 } i‡(
°©us
 =
WLC_E_STATUS_TIMEOUT
) {

839 
	`DHD_EVENT
(("MACEVENT: %s, MAC %s, %s, TIMEOUT\n",

840 
evít_«me
, 
óbuf
, 
auth_°r
));

841 } i‡(
°©us
 =
WLC_E_STATUS_FAIL
) {

842 
	`DHD_EVENT
(("MACEVENT: %s, MAC %s, %s, FAILURE,Ñeason %d\n",

843 
evít_«me
, 
óbuf
, 
auth_°r
, ()
ªas⁄
));

845 
	`BCM_REFERENCE
(
auth_°r
);

849 
WLC_E_JOIN
:

850 
WLC_E_ROAM
:

851 
WLC_E_SET_SSID
:

852 i‡(
°©us
 =
WLC_E_STATUS_SUCCESS
) {

853 
	`DHD_EVENT
(("MACEVENT: %s, MAC %s\n", 
evít_«me
, 
óbuf
));

854 } i‡(
°©us
 =
WLC_E_STATUS_FAIL
) {

855 
	`DHD_EVENT
(("MACEVENT: %s, faûed\n", 
evít_«me
));

856 } i‡(
°©us
 =
WLC_E_STATUS_NO_NETWORKS
) {

857 
	`DHD_EVENT
(("MACEVENT: %s,Çÿ√tw‹k†found\n", 
evít_«me
));

859 
	`DHD_EVENT
(("MACEVENT: %s, unexpected status %d\n",

860 
evít_«me
, ()
°©us
));

864 
WLC_E_BEACON_RX
:

865 i‡(
°©us
 =
WLC_E_STATUS_SUCCESS
) {

866 
	`DHD_EVENT
(("MACEVENT: %s, SUCCESS\n", 
evít_«me
));

867 } i‡(
°©us
 =
WLC_E_STATUS_FAIL
) {

868 
	`DHD_EVENT
(("MACEVENT: %s, FAIL\n", 
evít_«me
));

870 
	`DHD_EVENT
(("MACEVENT: %s, sètu†%d\n", 
evít_«me
, 
°©us
));

874 
WLC_E_LINK
:

875 
	`DHD_EVENT
(("MACEVENT: %†%s\n", 
evít_«me
, 
lök
?"UP":"DOWN"));

876 
	`BCM_REFERENCE
(
lök
);

879 
WLC_E_MIC_ERROR
:

880 
	`DHD_EVENT
(("MACEVENT: %s, MAC %s, Group %d, Flush %d\n",

881 
evít_«me
, 
óbuf
, 
group
, 
Êush_txq
));

882 
	`BCM_REFERENCE
(
group
);

883 
	`BCM_REFERENCE
(
Êush_txq
);

886 
WLC_E_ICV_ERROR
:

887 
WLC_E_UNICAST_DECODE_ERROR
:

888 
WLC_E_MULTICAST_DECODE_ERROR
:

889 
	`DHD_EVENT
(("MACEVENT: %s, MAC %s\n",

890 
evít_«me
, 
óbuf
));

893 
WLC_E_TXFAIL
:

894 
	`DHD_EVENT
(("MACEVENT: %s, RA %s\n", 
evít_«me
, 
óbuf
));

897 
WLC_E_SCAN_COMPLETE
:

898 
WLC_E_ASSOC_REQ_IE
:

899 
WLC_E_ASSOC_RESP_IE
:

900 
WLC_E_PMKID_CACHE
:

901 
	`DHD_EVENT
(("MACEVENT: %s\n", 
evít_«me
));

904 
WLC_E_PFN_NET_FOUND
:

905 
WLC_E_PFN_NET_LOST
:

906 
WLC_E_PFN_SCAN_COMPLETE
:

907 
WLC_E_PFN_SCAN_NONE
:

908 
WLC_E_PFN_SCAN_ALLGONE
:

909 
	`DHD_EVENT
(("PNOEVENT: %s\n", 
evít_«me
));

912 
WLC_E_PSK_SUP
:

913 
WLC_E_PRUNE
:

914 
	`DHD_EVENT
(("MACEVENT: %s, status %d,Ñeason %d\n",

915 
evít_«me
, ()
°©us
, ()
ªas⁄
));

918 #ifde‡
WIFI_ACT_FRAME


919 
WLC_E_ACTION_FRAME
:

920 
	`DHD_TRACE
(("MACEVENT: %†Bssid %s\n", 
evít_«me
, 
óbuf
));

924 
WLC_E_TRACE
: {

925 
uöt32
 
£qnum_¥ev
 = 0;

926 
msgåa˚_hdr_t
 
hdr
;

927 
uöt32
 
nblo°
;

928 *
s
, *
p
;

930 
buf
 = (
uch¨
 *Ë
evít_d©a
;

931 
	`mem˝y
(&
hdr
, 
buf
, 
MSGTRACE_HDRLEN
);

933 i‡(
hdr
.
vîsi⁄
 !
MSGTRACE_VERSION
) {

934 
	`¥ötf
("\nMACEVENT: %s [unsupported version --> "

936 
evít_«me
, 
MSGTRACE_VERSION
, 
hdr
.
vîsi⁄
);

938 
d©Æí
 = 0;

943 
buf
[
MSGTRACE_HDRLEN
 + 
	`¡oh16
(
hdr
.
Àn
)] = '\0';

945 i‡(
	`¡oh32
(
hdr
.
disˇrded_byãs
Ë||Çtoh32(hdr.
disˇrded_¥ötf
)) {

946 
	`¥ötf
("\nWLC_E_TRACE: [DiscardedÅraces in dongle -->"

948 
	`¡oh32
(
hdr
.
disˇrded_byãs
),Çtoh32(hdr.
disˇrded_¥ötf
));

951 
nblo°
 = 
	`¡oh32
(
hdr
.
£qnum
Ë- 
£qnum_¥ev
 - 1;

952 i‡(
nblo°
 > 0) {

953 
	`¥ötf
("\nWLC_E_TRACE: [EventÜost --> seqnum %dÇblost %d\n",

954 
	`¡oh32
(
hdr
.
£qnum
), 
nblo°
);

956 
£qnum_¥ev
 = 
	`¡oh32
(
hdr
.
£qnum
);

961 
p
 = (*)&
buf
[
MSGTRACE_HDRLEN
];

962 (
s
 = 
	`°r°r
(
p
, "\n")Ë!
NULL
) {

963 *
s
 = '\0';

964 
	`¥ötf
("%s\n", 
p
);

965 
p
 = 
s
+1;

967 
	`¥ötf
("%s\n", 
p
);

970 
d©Æí
 = 0;

975 
WLC_E_RSSI
:

976 
	`DHD_EVENT
(("MACEVENT: %†%d\n", 
evít_«me
, 
	`¡oh32
(*((*)
evít_d©a
))));

979 
WLC_E_SERVICE_FOUND
:

980 
WLC_E_P2PO_ADD_DEVICE
:

981 
WLC_E_P2PO_DEL_DEVICE
:

982 
	`DHD_EVENT
(("MACEVENT: %s, MAC: %s\n", 
evít_«me
, 
óbuf
));

986 
	`DHD_EVENT
(("MACEVENT: %s %d, MAC %s, status %d,Ñeason %d,áuth %d\n",

987 
evít_«me
, 
evít_ty≥
, 
óbuf
, ()
°©us
, ()
ªas⁄
,

988 ()
auth_ty≥
));

993 i‡(
d©Æí
) {

994 
buf
 = (
uch¨
 *Ë
evít_d©a
;

995 
	`DHD_EVENT
((" d©®(%dË: ", 
d©Æí
));

996 
i
 = 0; i < 
d©Æí
; i++)

997 
	`DHD_EVENT
((" 0x%02x ", *
buf
++));

998 
	`DHD_EVENT
(("\n"));

1000 
	}
}

1004 
	$wl_ho°_evít
(
dhd_pub_t
 *
dhd_pub
, *
ifidx
, *
pktd©a
,

1005 
wl_evít_msg_t
 *
evít
, **
d©a_±r
)

1008 
bcm_evít_t
 *
pvt_d©a
 = (bcm_evít_à*)
pktd©a
;

1009 
uöt8
 *
evít_d©a
;

1010 
uöt32
 
ty≥
, 
°©us
, 
d©Æí
;

1011 
uöt16
 
Êags
;

1012 
evÀn
;

1014 i‡(
	`bcmp
(
BRCM_OUI
, &
pvt_d©a
->
bcm_hdr
.
oui
[0], 
DOT11_OUI_LEN
)) {

1015 
	`DHD_ERROR
(("%s: mism©ched OUI, baûög\n", 
__FUNCTION__
));

1016  (
BCME_ERROR
);

1020 i‡(
	`¡oh16_ua
((*)&
pvt_d©a
->
bcm_hdr
.
u§_subty≥
Ë!
BCMILCP_BCM_SUBTYPE_EVENT
) {

1021 
	`DHD_ERROR
(("%s: mism©ched subty≥, baûög\n", 
__FUNCTION__
));

1022  (
BCME_ERROR
);

1025 *
d©a_±r
 = &
pvt_d©a
[1];

1026 
evít_d©a
 = *
d©a_±r
;

1029 
	`mem˝y
(
evít
, &
pvt_d©a
->evít, (
wl_evít_msg_t
));

1031 
ty≥
 = 
	`¡oh32_ua
((*)&
evít
->
evít_ty≥
);

1032 
Êags
 = 
	`¡oh16_ua
((*)&
evít
->flags);

1033 
°©us
 = 
	`¡oh32_ua
((*)&
evít
->status);

1034 
d©Æí
 = 
	`¡oh32_ua
((*)&
evít
->datalen);

1035 
evÀn
 = 
d©Æí
 + (
bcm_evít_t
);

1037 
ty≥
) {

1038 #ifde‡
PROP_TXSTATUS


1039 
WLC_E_FIFO_CREDIT_MAP
:

1040 
	`dhd_wlfc_evít
(
dhd_pub
->
öfo
);

1041 
	`dhd_wlfc_FIFO¸edôm≠_evít
(
dhd_pub
->
öfo
, 
evít_d©a
);

1042 
	`WLFC_DBGMESG
(("WLC_E_FIFO_CREDIT_MAP:(AC0,AC1,AC2,AC3),(BC_MC),(OTHER): "

1043 "(%d,%d,%d,%d),(%d),(%d)\n", 
evít_d©a
[0],Évent_data[1],

1044 
evít_d©a
[2],

1045 
evít_d©a
[3],Évent_data[4],Évent_data[5]));

1049 
WLC_E_IF
:

1051 
dhd_if_evít_t
 *
i„vít
 = (dhd_if_evít_à*)
evít_d©a
;

1052 #ifde‡
PROP_TXSTATUS


1054 
uöt8
* 
ó
 = 
pvt_d©a
->
ëh
.
ëhî_dho°
;

1055 
	`WLFC_DBGMESG
(("WLC_E_IF: idx:%d,áction:%s, iftype:%s, "

1057 
i„vít
->
ifidx
,

1058 ((
i„vít
->
a˘i⁄
 =
WLC_E_IF_ADD
) ? "ADD":"DEL"),

1059 ((
i„vít
->
is_AP
 == 0) ? "STA":"AP "),

1060 
ó
[0],Éa[1],Éa[2],Éa[3],Éa[4],Éa[5]));

1061 ()
ó
;

1062 i‡(
i„vít
->
a˘i⁄
 =
WLC_E_IF_CHANGE
)

1063 
	`dhd_wlfc_öãrÁ˚_evít
(
dhd_pub
->
öfo
,

1064 
eWLFC_MAC_ENTRY_ACTION_UPDATE
,

1065 
i„vít
->
ifidx
, i„vít->
is_AP
, 
ó
);

1067 
	`dhd_wlfc_öãrÁ˚_evít
(
dhd_pub
->
öfo
,

1068 ((
i„vít
->
a˘i⁄
 =
WLC_E_IF_ADD
) ?

1069 
eWLFC_MAC_ENTRY_ACTION_ADD
 : 
eWLFC_MAC_ENTRY_ACTION_DEL
),

1070 
i„vít
->
ifidx
, i„vít->
is_AP
, 
ó
);

1074 i‡(
i„vít
->
ifidx
 == 0)

1079 #ifde‡
WL_CFG80211


1080 i‡(
	`wl_cfg80211_is_¥ogªss_ifch™ge
()) {

1081 
	`DHD_ERROR
(("%s: ifidx %d for %sáction %d\n",

1082 
__FUNCTION__
, 
i„vít
->
ifidx
,

1083 
evít
->
i‚ame
, 
i„vít
->
a˘i⁄
));

1084 i‡(
i„vít
->
a˘i⁄
 =
WLC_E_IF_ADD
 ||

1085 
i„vít
->
a˘i⁄
 =
WLC_E_IF_CHANGE
)

1086 
	`wl_cfg80211_nŸify_ifch™ge
();

1087  (
BCME_OK
);

1090 i‡(
i„vít
->
ifidx
 > 0 && i„vít->ifidx < 
DHD_MAX_IFS
) {

1091 i‡(
i„vít
->
a˘i⁄
 =
WLC_E_IF_ADD
) {

1092 i‡(
	`dhd_add_if
(
dhd_pub
->
öfo
, 
i„vít
->
ifidx
,

1093 
NULL
, 
evít
->
i‚ame
,

1094 
evít
->
addr
.
o˘ë
,

1095 
i„vít
->
Êags
, i„vít->
bssidx
)) {

1096 
	`DHD_ERROR
(("%s: dhd_add_if failed!!"

1098 
__FUNCTION__
,

1099 
i„vít
->
ifidx
,

1100 
evít
->
i‚ame
));

1101  (
BCME_ERROR
);

1104 i‡(
i„vít
->
a˘i⁄
 =
WLC_E_IF_DEL
)

1105 
	`dhd_dñ_if
(
dhd_pub
->
öfo
, 
i„vít
->
ifidx
);

1107 #i‚de‡
PROP_TXSTATUS


1108 
	`DHD_ERROR
(("%s: Invalid ifidx %d for %s\n",

1109 
__FUNCTION__
, 
i„vít
->
ifidx
, 
evít
->
i‚ame
));

1114 *
ifidx
 = 
	`dhd_i‚ame2idx
(
dhd_pub
->
öfo
, 
evít
->
i‚ame
);

1116 
	`dhd_evít
(
dhd_pub
->
öfo
, (*)
pvt_d©a
, 
evÀn
, *
ifidx
);

1120 #ifde‡
WLMEDIA_HTSF


1121 
WLC_E_HTSFSYNC
:

1122 
	`htsf_upd©e
(
dhd_pub
->
öfo
, 
evít_d©a
);

1125 #i‡
	`deföed
(
NDIS630
)

1126 
WLC_E_NDIS_LINK
:

1129 
WLC_E_NDIS_LINK
: {

1130 
uöt32
 
ãmp
 = 
	`ht⁄32
(
WLC_E_LINK
);

1132 
	`mem˝y
((*)(&
pvt_d©a
->
evít
.
evít_ty≥
), &
ãmp
,

1133 (
pvt_d©a
->
evít
.
evít_ty≥
));

1138 
WLC_E_LINK
:

1139 
WLC_E_DEAUTH
:

1140 
WLC_E_DEAUTH_IND
:

1141 
WLC_E_DISASSOC
:

1142 
WLC_E_DISASSOC_IND
:

1143 
	`DHD_EVENT
(("%s: LinkÉvent %d, flags %x, status %x\n",

1144 
__FUNCTION__
, 
ty≥
, 
Êags
, 
°©us
));

1147 *
ifidx
 = 
	`dhd_i‚ame2idx
(
dhd_pub
->
öfo
, 
evít
->
i‚ame
);

1149 
	`dhd_evít
(
dhd_pub
->
öfo
, (*)
pvt_d©a
, 
evÀn
, *
ifidx
);

1150 
	`DHD_TRACE
(("%s: MACÉvent %d, flags %x, status %x\n",

1151 
__FUNCTION__
, 
ty≥
, 
Êags
, 
°©us
));

1152 
	`BCM_REFERENCE
(
Êags
);

1153 
	`BCM_REFERENCE
(
°©us
);

1156 i‡(
ty≥
 =
WLC_E_NDIS_LINK
) {

1157 
uöt32
 
ãmp
;

1159 
ãmp
 = 
	`¡oh32_ua
((*)&
evít
->
evít_ty≥
);

1160 
	`DHD_TRACE
(("C⁄vîãdÅÿWLC_E_LINKÅy≥ %d\n", 
ãmp
));

1162 
ãmp
 = 
	`¡oh32
(
WLC_E_NDIS_LINK
);

1163 
	`mem˝y
((*)(&
pvt_d©a
->
evít
.
evít_ty≥
), &
ãmp
,

1164 (
pvt_d©a
->
evít
.
evít_ty≥
));

1169 #ifde‡
SHOW_EVENTS


1170 
	`wl_show_ho°_evít
(
evít
, (*)
evít_d©a
);

1173  (
BCME_OK
);

1174 
	}
}

1177 
	$wl_evít_to_ho°_‹dî
(
wl_evít_msg_t
 * 
evt
)

1182 
evt
->
evít_ty≥
 = 
	`¡oh32
(evt->event_type);

1183 
evt
->
Êags
 = 
	`¡oh16
(evt->flags);

1184 
evt
->
°©us
 = 
	`¡oh32
(evt->status);

1185 
evt
->
ªas⁄
 = 
	`¡oh32
(evt->reason);

1186 
evt
->
auth_ty≥
 = 
	`¡oh32
(evt->auth_type);

1187 
evt
->
d©Æí
 = 
	`¡oh32
(evt->datalen);

1188 
evt
->
vîsi⁄
 = 
	`¡oh16
(evt->version);

1189 
	}
}

1192 
	$dhd_¥öt_buf
(*
pbuf
, 
Àn
, 
byãs_≥r_löe
)

1194 #ifde‡
DHD_DEBUG


1195 
i
, 
j
 = 0;

1196 *
buf
 = 
pbuf
;

1198 i‡(
byãs_≥r_löe
 == 0) {

1199 
byãs_≥r_löe
 = 
Àn
;

1202 
i
 = 0; i < 
Àn
; i++) {

1203 
	`¥ötf
("%2.2x", *
buf
++);

1204 
j
++;

1205 i‡(
j
 =
byãs_≥r_löe
) {

1206 
	`¥ötf
("\n");

1207 
j
 = 0;

1209 
	`¥ötf
(":");

1212 
	`¥ötf
("\n");

1214 
	}
}

1216 #i‚de‡
°πoul


1217 
	#°πoul
(
≈å
, 
íd±r
, 
ba£
Ë
	`bcm_°πoul
(“±r), (íd±r), (ba£))

	)

1220 #ifde‡
PKT_FILTER_SUPPORT


1223 
	$wl_∑âîn_©oh
(*
§c
, *
d°
)

1225 
i
;

1226 i‡(
	`°∫cmp
(
§c
, "0x", 2) != 0 &&

1227 
	`°∫cmp
(
§c
, "0X", 2) != 0) {

1228 
	`DHD_ERROR
(("Mask invalid format. NeedsÅo start with 0x\n"));

1231 
§c
 = src + 2;

1232 i‡(
	`°æí
(
§c
) % 2 != 0) {

1233 
	`DHD_ERROR
(("Mask invalid format. NeedsÅo be ofÉvenÜength\n"));

1236 
i
 = 0; *
§c
 != '\0'; i++) {

1237 
num
[3];

1238 
	`bcm_°∫˝y_s
(
num
, “um), 
§c
, 2);

1239 
num
[2] = '\0';

1240 
d°
[
i
] = (
uöt8
)
	`°πoul
(
num
, 
NULL
, 16);

1241 
§c
 += 2;

1243  
i
;

1244 
	}
}

1247 
	$dhd_pktfûãr_ofÊﬂd_íabÀ
(
dhd_pub_t
 * 
dhd
, *
¨g
, 
íabÀ
, 
ma°î_mode
)

1249 *
¨gv
[8];

1250 
i
 = 0;

1251 c⁄° *
°r
;

1252 
buf_Àn
;

1253 
°r_Àn
;

1254 *
¨g_ßve
 = 0, *
¨g_‹g
 = 0;

1255 
rc
;

1256 
buf
[128];

1257 
wl_pkt_fûãr_íabÀ_t
 
íabÀ_∑rm
;

1258 
wl_pkt_fûãr_íabÀ_t
 * 
pkt_fûãΩ
;

1260 i‡(!
¨g
)

1263 i‡(!(
¨g_ßve
 = 
	`MALLOC
(
dhd
->
osh
, 
	`°æí
(
¨g
) + 1))) {

1264 
	`DHD_ERROR
(("%s: kmÆlo¯Áûed\n", 
__FUNCTION__
));

1265 
Áû
;

1267 
¨g_‹g
 = 
¨g_ßve
;

1268 
	`mem˝y
(
¨g_ßve
, 
¨g
, 
	`°æí
(arg) + 1);

1270 
¨gv
[
i
] = 
	`bcm°πok
(&
¨g_ßve
, " ", 0);

1272 
i
 = 0;

1273 i‡(
¨gv
[
i
] =
NULL
) {

1274 
	`DHD_ERROR
(("NoárgsÖrovided\n"));

1275 
Áû
;

1278 
°r
 = "pkt_filter_enable";

1279 
°r_Àn
 = 
	`°æí
(
°r
);

1280 
	`bcm_°∫˝y_s
(
buf
, (buf), 
°r
, 
°r_Àn
);

1281 
buf
[
°r_Àn
] = '\0';

1282 
buf_Àn
 = 
°r_Àn
 + 1;

1284 
pkt_fûãΩ
 = (
wl_pkt_fûãr_íabÀ_t
 *)(
buf
 + 
°r_Àn
 + 1);

1287 
íabÀ_∑rm
.
id
 = 
	`htod32
(
	`°πoul
(
¨gv
[
i
], 
NULL
, 0));

1290 
íabÀ_∑rm
.
íabÀ
 = 
	`htod32
(enable);

1292 
buf_Àn
 +(
íabÀ_∑rm
);

1293 
	`mem˝y
((*)
pkt_fûãΩ
,

1294 &
íabÀ_∑rm
,

1295 (
íabÀ_∑rm
));

1298 
rc
 = 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_SET_VAR
, 
buf
, 
buf_Àn
, 
TRUE
, 0);

1299 
rc
 =Ñc >= 0 ? 0 :Ñc;

1300 i‡(
rc
)

1301 
	`DHD_TRACE
(("%s: failedÅoáddÖktfilter %s,Ñetcode = %d\n",

1302 
__FUNCTION__
, 
¨g
, 
rc
));

1304 
	`DHD_TRACE
(("%s: successfullyáddedÖktfilter %s\n",

1305 
__FUNCTION__
, 
¨g
));

1308 
	`bcm_mkiov¨
("pkt_fûãr_mode", (*)&
ma°î_mode
, 4, 
buf
, (buf));

1309 
rc
 = 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_SET_VAR
, 
buf
, (buf), 
TRUE
, 0);

1310 
rc
 =Ñc >= 0 ? 0 :Ñc;

1311 i‡(
rc
)

1312 
	`DHD_TRACE
(("%s: failedÅoáddÖktfilter %s,Ñetcode = %d\n",

1313 
__FUNCTION__
, 
¨g
, 
rc
));

1315 
Áû
:

1316 i‡(
¨g_‹g
)

1317 
	`MFREE
(
dhd
->
osh
, 
¨g_‹g
, 
	`°æí
(
¨g
) + 1);

1318 
	}
}

1321 
	$dhd_pktfûãr_ofÊﬂd_£t
(
dhd_pub_t
 * 
dhd
, *
¨g
)

1323 c⁄° *
°r
;

1324 
wl_pkt_fûãr_t
 
pkt_fûãr
;

1325 
wl_pkt_fûãr_t
 *
pkt_fûãΩ
;

1326 
buf_Àn
;

1327 
°r_Àn
;

1328 
rc
;

1329 
uöt32
 
mask_size
;

1330 
uöt32
 
∑âîn_size
;

1331 *
¨gv
[8], * 
buf
 = 0;

1332 
i
 = 0;

1333 *
¨g_ßve
 = 0, *
¨g_‹g
 = 0;

1334 
	#BUF_SIZE
 2048

	)

1336 i‡(!
¨g
)

1339 i‡(!(
¨g_ßve
 = 
	`MALLOC
(
dhd
->
osh
, 
	`°æí
(
¨g
) + 1))) {

1340 
	`DHD_ERROR
(("%s: kmÆlo¯Áûed\n", 
__FUNCTION__
));

1341 
Áû
;

1344 
¨g_‹g
 = 
¨g_ßve
;

1346 i‡(!(
buf
 = 
	`MALLOC
(
dhd
->
osh
, 
BUF_SIZE
))) {

1347 
	`DHD_ERROR
(("%s: kmÆlo¯Áûed\n", 
__FUNCTION__
));

1348 
Áû
;

1351 
	`mem˝y
(
¨g_ßve
, 
¨g
, 
	`°æí
(arg) + 1);

1353 i‡(
	`°æí
(
¨g
Ë> 
BUF_SIZE
) {

1354 
	`DHD_ERROR
(("NŸÉnough buf„∏%d < %d\n", ()
	`°æí
(
¨g
), ()(
buf
)));

1355 
Áû
;

1358 
¨gv
[
i
] = 
	`bcm°πok
(&
¨g_ßve
, " ", 0);

1359 
¨gv
[
i
++])

1360 
¨gv
[
i
] = 
	`bcm°πok
(&
¨g_ßve
, " ", 0);

1362 
i
 = 0;

1363 i‡(
¨gv
[
i
] =
NULL
) {

1364 
	`DHD_ERROR
(("NoárgsÖrovided\n"));

1365 
Áû
;

1368 
°r
 = "pkt_filter_add";

1369 
°r_Àn
 = 
	`°æí
(
°r
);

1370 
	`bcm_°∫˝y_s
(
buf
, 
BUF_SIZE
, 
°r
, 
°r_Àn
);

1371 
buf
[ 
°r_Àn
 ] = '\0';

1372 
buf_Àn
 = 
°r_Àn
 + 1;

1374 
pkt_fûãΩ
 = (
wl_pkt_fûãr_t
 *Ë(
buf
 + 
°r_Àn
 + 1);

1377 
pkt_fûãr
.
id
 = 
	`htod32
(
	`°πoul
(
¨gv
[
i
], 
NULL
, 0));

1379 i‡(
¨gv
[++
i
] =
NULL
) {

1380 
	`DHD_ERROR
(("PolarityÇotÖrovided\n"));

1381 
Áû
;

1385 
pkt_fûãr
.
√g©e_m©ch
 = 
	`htod32
(
	`°πoul
(
¨gv
[
i
], 
NULL
, 0));

1387 i‡(
¨gv
[++
i
] =
NULL
) {

1388 
	`DHD_ERROR
(("FilterÅypeÇotÖrovided\n"));

1389 
Áû
;

1393 
pkt_fûãr
.
ty≥
 = 
	`htod32
(
	`°πoul
(
¨gv
[
i
], 
NULL
, 0));

1395 i‡(
¨gv
[++
i
] =
NULL
) {

1396 
	`DHD_ERROR
(("OffsetÇotÖrovided\n"));

1397 
Áû
;

1401 
pkt_fûãr
.
u
.
∑âîn
.
off£t
 = 
	`htod32
(
	`°πoul
(
¨gv
[
i
], 
NULL
, 0));

1403 i‡(
¨gv
[++
i
] =
NULL
) {

1404 
	`DHD_ERROR
(("BitmaskÇotÖrovided\n"));

1405 
Áû
;

1409 
mask_size
 =

1410 
	`htod32
(
	`wl_∑âîn_©oh
(
¨gv
[
i
], (*Ë
pkt_fûãΩ
->
u
.
∑âîn
.
mask_™d_∑âîn
));

1412 i‡(
¨gv
[++
i
] =
NULL
) {

1413 
	`DHD_ERROR
(("PatternÇotÖrovided\n"));

1414 
Áû
;

1418 
∑âîn_size
 =

1419 
	`htod32
(
	`wl_∑âîn_©oh
(
¨gv
[
i
],

1420 (*Ë&
pkt_fûãΩ
->
u
.
∑âîn
.
mask_™d_∑âîn
[
mask_size
]));

1422 i‡(
mask_size
 !
∑âîn_size
) {

1423 
	`DHD_ERROR
(("MaskándÖatternÇotÅhe same size\n"));

1424 
Áû
;

1427 
pkt_fûãr
.
u
.
∑âîn
.
size_byãs
 = 
mask_size
;

1428 
buf_Àn
 +
WL_PKT_FILTER_FIXED_LEN
;

1429 
buf_Àn
 +(
WL_PKT_FILTER_PATTERN_FIXED_LEN
 + 2 * 
mask_size
);

1435 
	`mem˝y
((*)
pkt_fûãΩ
,

1436 &
pkt_fûãr
,

1437 
WL_PKT_FILTER_FIXED_LEN
 + 
WL_PKT_FILTER_PATTERN_FIXED_LEN
);

1439 
rc
 = 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_SET_VAR
, 
buf
, 
buf_Àn
, 
TRUE
, 0);

1440 
rc
 =Ñc >= 0 ? 0 :Ñc;

1442 i‡(
rc
)

1443 
	`DHD_TRACE
(("%s: failedÅoáddÖktfilter %s,Ñetcode = %d\n",

1444 
__FUNCTION__
, 
¨g
, 
rc
));

1446 
	`DHD_TRACE
(("%s: successfullyáddedÖktfilter %s\n",

1447 
__FUNCTION__
, 
¨g
));

1449 
Áû
:

1450 i‡(
¨g_‹g
)

1451 
	`MFREE
(
dhd
->
osh
, 
¨g_‹g
, 
	`°æí
(
¨g
) + 1);

1453 i‡(
buf
)

1454 
	`MFREE
(
dhd
->
osh
, 
buf
, 
BUF_SIZE
);

1455 
	}
}

1461 #ifde‡
ARP_OFFLOAD_SUPPORT


1463 
	$dhd_¨p_ofÊﬂd_£t
(
dhd_pub_t
 * 
dhd
, 
¨p_mode
)

1465 
iovbuf
[32];

1466 
ªtcode
;

1468 
	`bcm_mkiov¨
("¨p_ﬁ", (*)&
¨p_mode
, 4, 
iovbuf
, (iovbuf));

1469 
ªtcode
 = 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_SET_VAR
, 
iovbuf
, (iovbuf), 
TRUE
, 0);

1470 
ªtcode
 =Ñetcode >= 0 ? 0 :Ñetcode;

1471 i‡(
ªtcode
)

1472 
	`DHD_TRACE
(("%s: failedÅo set ARP offload modeÅo 0x%x,Ñetcode = %d\n",

1473 
__FUNCTION__
, 
¨p_mode
, 
ªtcode
));

1475 
	`DHD_TRACE
(("%s: successfully set ARP offload modeÅo 0x%x\n",

1476 
__FUNCTION__
, 
¨p_mode
));

1477 
	}
}

1480 
	$dhd_¨p_ofÊﬂd_íabÀ
(
dhd_pub_t
 * 
dhd
, 
¨p_íabÀ
)

1482 
iovbuf
[32];

1483 
ªtcode
;

1485 
	`bcm_mkiov¨
("¨p€", (*)&
¨p_íabÀ
, 4, 
iovbuf
, (iovbuf));

1486 
ªtcode
 = 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_SET_VAR
, 
iovbuf
, (iovbuf), 
TRUE
, 0);

1487 
ªtcode
 =Ñetcode >= 0 ? 0 :Ñetcode;

1488 i‡(
ªtcode
)

1489 
	`DHD_TRACE
(("%s: failedÅoÉnabe ARP offloadÅo %d,Ñetcode = %d\n",

1490 
__FUNCTION__
, 
¨p_íabÀ
, 
ªtcode
));

1492 
	`DHD_TRACE
(("%s: successfullyÉnabed ARP offloadÅo %d\n",

1493 
__FUNCTION__
, 
¨p_íabÀ
));

1494 i‡(
¨p_íabÀ
) {

1495 
uöt32
 
vîsi⁄
;

1496 
	`bcm_mkiov¨
("¨p_vîsi⁄", 0, 0, 
iovbuf
, (iovbuf));

1497 
ªtcode
 = 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_GET_VAR
, 
iovbuf
, (iovbuf), 
FALSE
, 0);

1498 i‡(
ªtcode
) {

1499 
	`DHD_INFO
(("%s: failÅo get version (maybe version 1:retcode = %d\n",

1500 
__FUNCTION__
, 
ªtcode
));

1501 
dhd
->
¨p_vîsi⁄
 = 1;

1504 
	`mem˝y
(&
vîsi⁄
, 
iovbuf
, (version));

1505 
	`DHD_INFO
(("%s: ARP Vîsi⁄%x\n", 
__FUNCTION__
, 
vîsi⁄
));

1506 
dhd
->
¨p_vîsi⁄
 = 
vîsi⁄
;

1509 
	}
}

1512 
	$dhd_a€_¨p_˛r
(
dhd_pub_t
 *
dhd
, 
idx
)

1514 
ªt
 = 0;

1515 
iov_Àn
 = 0;

1516 
iovbuf
[128];

1518 i‡(
dhd
 =
NULL
) ;

1519 i‡(
dhd
->
¨p_vîsi⁄
 == 1)

1520 
idx
 = 0;

1522 
iov_Àn
 = 
	`bcm_mkiov¨
("¨p_èbÀ_˛ór", 0, 0, 
iovbuf
, (iovbuf));

1523 i‡((
ªt
 = 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_SET_VAR
, 
iovbuf
, 
iov_Àn
, 
TRUE
, 
idx
) < 0))

1524 
	`DHD_ERROR
(("%†Áûed codê%d\n", 
__FUNCTION__
, 
ªt
));

1525 
	}
}

1528 
	$dhd_a€_ho°ù_˛r
(
dhd_pub_t
 *
dhd
, 
idx
)

1530 
ªt
 = 0;

1531 
iov_Àn
 = 0;

1532 
iovbuf
[128];

1534 i‡(
dhd
 =
NULL
) ;

1535 i‡(
dhd
->
¨p_vîsi⁄
 == 1)

1536 
idx
 = 0;

1538 
iov_Àn
 = 
	`bcm_mkiov¨
("¨p_ho°ù_˛ór", 0, 0, 
iovbuf
, (iovbuf));

1539 i‡((
ªt
 = 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_SET_VAR
, 
iovbuf
, 
iov_Àn
, 
TRUE
, 
idx
)) < 0)

1540 
	`DHD_ERROR
(("%†Áûed codê%d\n", 
__FUNCTION__
, 
ªt
));

1541 
	}
}

1544 
	$dhd_¨p_ofÊﬂd_add_ù
(
dhd_pub_t
 *
dhd
, 
uöt32
 
ùaddr
, 
idx
)

1546 
iov_Àn
 = 0;

1547 
iovbuf
[32];

1548 
ªtcode
;

1551 i‡(
dhd
 =
NULL
) ;

1552 i‡(
dhd
->
¨p_vîsi⁄
 == 1)

1553 
idx
 = 0;

1554 
iov_Àn
 = 
	`bcm_mkiov¨
("¨p_ho°ù", (*)&
ùaddr
,

1555 (
ùaddr
), 
iovbuf
, (iovbuf));

1556 
ªtcode
 = 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_SET_VAR
, 
iovbuf
, 
iov_Àn
, 
TRUE
, 
idx
);

1558 i‡(
ªtcode
)

1559 
	`DHD_TRACE
(("%s: ARP ipáddrádd failed,Ñetcode = %d\n",

1560 
__FUNCTION__
, 
ªtcode
));

1562 
	`DHD_TRACE
(("%s: sARP H ipaddrÉntryádded \n",

1563 
__FUNCTION__
));

1564 
	}
}

1567 
	$dhd_¨p_gë_¨p_ho°ù_èbÀ
(
dhd_pub_t
 *
dhd
, *
buf
, 
buÊí
, 
idx
)

1569 
ªtcode
, 
i
;

1570 
iov_Àn
;

1571 
uöt32
 *
±r32
 = 
buf
;

1572 
boﬁ
 
˛r_bŸtom
 = 
FALSE
;

1574 i‡(!
buf
)

1576 i‡(
dhd
 =
NULL
)  -1;

1577 i‡(
dhd
->
¨p_vîsi⁄
 == 1)

1578 
idx
 = 0;

1580 
iov_Àn
 = 
	`bcm_mkiov¨
("¨p_ho°ù", 0, 0, 
buf
, 
buÊí
);

1581 
	`BCM_REFERENCE
(
iov_Àn
);

1582 
ªtcode
 = 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_GET_VAR
, 
buf
, 
buÊí
, 
FALSE
, 
idx
);

1584 i‡(
ªtcode
) {

1585 
	`DHD_TRACE
(("%s: ioctl WLC_GET_VARÉrror %d\n",

1586 
__FUNCTION__
, 
ªtcode
));

1592 
i
 = 0; i < 
MAX_IPV4_ENTRIES
; i++) {

1593 i‡(!
˛r_bŸtom
) {

1594 i‡(*
±r32
 == 0)

1595 
˛r_bŸtom
 = 
TRUE
;

1597 *
±r32
 = 0;

1599 
±r32
++;

1603 
	}
}

1608 
	$dhd_£ndup_evít_comm⁄
(
dhd_pub_t
 *
dhdp
, 
wl_evít_msg_t
 *
evít
, *
d©a
)

1610 
	`¡oh32
(
evít
->
evít_ty≥
)) {

1611 #ifde‡
WLBTAMP


1612 
WLC_E_BTA_HCI_EVENT
:

1620 
	`dhd_£ndup_evít
(
dhdp
, 
evít
, 
d©a
);

1621 
	}
}

1627 
boﬁ
 
	$dhd_is_assocüãd
(
dhd_pub_t
 *
dhd
, *
bss_buf
, *
ªtvÆ
)

1629 
bssid
[6], 
zbuf
[6];

1630 
ªt
 = -1;

1632 
	`bzîo
(
bssid
, 6);

1633 
	`bzîo
(
zbuf
, 6);

1635 
ªt
 = 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_GET_BSSID
, (*)&
bssid
, 
ETHER_ADDR_LEN
, 
FALSE
, 0);

1636 
	`DHD_TRACE
((" %†WLC_GET_BSSID io˘»ª†%d\n", 
__FUNCTION__
, 
ªt
));

1638 i‡(
ªt
 =
BCME_NOTASSOCIATED
) {

1639 
	`DHD_TRACE
(("%s:ÇŸássocüãd!Ñes:%d\n", 
__FUNCTION__
, 
ªt
));

1642 i‡(
ªtvÆ
)

1643 *
ªtvÆ
 = 
ªt
;

1645 i‡(
ªt
 < 0)

1646  
FALSE
;

1648 i‡((
	`memcmp
(
bssid
, 
zbuf
, 
ETHER_ADDR_LEN
) != 0)) {

1651 i‡(
bss_buf
) {

1653 
	`mem˝y
(
bss_buf
, 
bssid
, 
ETHER_ADDR_LEN
);

1655  
TRUE
;

1657 
	`DHD_TRACE
(("%s: WLC_GET_BSSID io˘»ªtu∫ed zîÿbssid\n", 
__FUNCTION__
));

1658  
FALSE
;

1660 
	}
}

1665 
	$dhd_gë_su•íd_b˙_li_dtim
(
dhd_pub_t
 *
dhd
)

1667 
b˙_li_dtim
;

1668 
ªt
 = -1;

1669 
dtim_assoc
 = 0;

1671 
b˙_li_dtim
 = 
dhd
->
su•íd_b˙_li_dtim
;

1674 i‡(
	`dhd_is_assocüãd
(
dhd
, 
NULL
, NULLË=
FALSE
) {

1675 
	`DHD_TRACE
(("%†NOTásso¯ªà%d\n", 
__FUNCTION__
, 
ªt
));

1676 
exô
;

1680 i‡((
ªt
 = 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_GET_DTIMPRD
,

1681 &
dtim_assoc
, (dtim_assoc), 
FALSE
, 0)) < 0) {

1682 
	`DHD_ERROR
(("%†Áûed codê%d\n", 
__FUNCTION__
, 
ªt
));

1683 
exô
;

1686 
	`DHD_ERROR
(("%s bcn_li_dtim=%d DTIM=%d Listen=%d\n",

1687 
__FUNCTION__
, 
b˙_li_dtim
, 
dtim_assoc
, 
LISTEN_INTERVAL
));

1690 i‡(
dtim_assoc
 == 0) {

1691 
exô
;

1695 i‡(
dtim_assoc
 > 
LISTEN_INTERVAL
) {

1697 
b˙_li_dtim
 = 1;

1698 
	`DHD_ERROR
(("%s DTIM=%d > Listen=%d :Åoo big ...\n",

1699 
__FUNCTION__
, 
dtim_assoc
, 
LISTEN_INTERVAL
));

1700 
exô
;

1703 i‡((
b˙_li_dtim
 * 
dtim_assoc
Ë> 
LISTEN_INTERVAL
) {

1705 
b˙_li_dtim
 = ()(
LISTEN_INTERVAL
 / 
dtim_assoc
);

1706 
	`DHD_TRACE
(("%†agju° dtim_skùá†%d\n", 
__FUNCTION__
, 
b˙_li_dtim
));

1709 
exô
:

1710  
b˙_li_dtim
;

1711 
	}
}

1714 
boﬁ
 
	$dhd_suµ‹t_°a_mode
(
dhd_pub_t
 *
dhd
)

1717 #ifde‡ 
WL_CFG80211


1718 i‡(!(
dhd
->
›_mode
 & 
DHD_FLAG_STA_MODE
))

1719  
FALSE
;

1722  
TRUE
;

1723 
	}
}

1725 #i‡
deföed
(
PNO_SUPPORT
)

1727 
	$dhd_≤o_˛ón
(
dhd_pub_t
 *
dhd
)

1729 
iovbuf
[128];

1730 
p‚_íabÀd
 = 0;

1731 
iov_Àn
 = 0;

1732 
ªt
;

1735 
iov_Àn
 = 
	`bcm_mkiov¨
("p‚", (*)&
p‚_íabÀd
, 4, 
iovbuf
, (iovbuf));

1736 i‡((
ªt
 = 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_SET_VAR
, 
iovbuf
, (iovbuf), 
TRUE
, 0)) >= 0) {

1738 
iov_Àn
 = 
	`bcm_mkiov¨
("p‚˛ór", 0, 0, 
iovbuf
, (iovbuf));

1739 i‡(
iov_Àn
) {

1740 i‡((
ªt
 = 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_SET_VAR
, 
iovbuf
,

1741 
iov_Àn
, 
TRUE
, 0)) < 0) {

1742 
	`DHD_ERROR
(("%†Áûed codê%d\n", 
__FUNCTION__
, 
ªt
));

1746 
ªt
 = -1;

1747 
	`DHD_ERROR
(("%†Áûed codê%d\n", 
__FUNCTION__
, 
iov_Àn
));

1751 
	`DHD_ERROR
(("%†Áûed codê%d\n", 
__FUNCTION__
, 
ªt
));

1753  
ªt
;

1754 
	}
}

1757 
	$dhd_≤o_íabÀ
(
dhd_pub_t
 *
dhd
, 
p‚_íabÀd
)

1759 
iovbuf
[128];

1760 
ªt
 = -1;

1762 i‡((!
dhd
Ë&& ((
p‚_íabÀd
 != 0) || (pfn_enabled != 1))) {

1763 
	`DHD_ERROR
(("%†îr‹Éxô\n", 
__FUNCTION__
));

1764  
ªt
;

1767 #i‚de‡
WL_SCHED_SCAN


1768 i‡(!
	`dhd_suµ‹t_°a_mode
(
dhd
))

1769  (
ªt
);

1771 
	`mem£t
(
iovbuf
, 0, (iovbuf));

1773 i‡((
p‚_íabÀd
Ë&& (
	`dhd_is_assocüãd
(
dhd
, 
NULL
, NULLË=
TRUE
)) {

1774 
	`DHD_ERROR
(("%†≤ÿi†NOTÉ«bÀ : cÆÀd i¿asso¯modê, ign‹e\n", 
__FUNCTION__
));

1775  
ªt
;

1780 i‡((
ªt
 = 
	`bcm_mkiov¨
("p‚", (*)&
p‚_íabÀd
, 4, 
iovbuf
, (iovbuf))) > 0) {

1781 i‡((
ªt
 = 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_SET_VAR
,

1782 
iovbuf
, (iovbuf), 
TRUE
, 0)) < 0) {

1783 
	`DHD_ERROR
(("%†Áûed f‹Éº‹=%d\n", 
__FUNCTION__
, 
ªt
));

1784  
ªt
;

1787 
dhd
->
≤o_íabÀ
 = 
p‚_íabÀd
;

1788 
	`DHD_TRACE
(("%s setÖnoás %s\n",

1789 
__FUNCTION__
, 
dhd
->
≤o_íabÀ
 ? "Enable" : "Disable"));

1792 
	`DHD_ERROR
(("%†ÁûedÉº=%d\n", 
__FUNCTION__
, 
ªt
));

1794  
ªt
;

1795 
	}
}

1799 
	$dhd_≤o_£t
(
dhd_pub_t
 *
dhd
, 
wlc_ssid_t
* 
ssids_loˇl
, 
nssid
, 
ush‹t
 
sˇn_‰
,

1800 
≤o_ª≥©
, 
≤o_‰eq_expo_max
)

1802 
îr
 = -1;

1803 
iovbuf
[128];

1804 
k
, 
i
;

1805 
wl_p‚_∑øm_t
 
p‚_∑øm
;

1806 
wl_p‚_t
 
p‚_ñemít
;

1807 
uöt
 
Àn
 = 0;

1809 
	`DHD_TRACE
(("%†nssid=%dÇch™=%d\n", 
__FUNCTION__
, 
nssid
, 
sˇn_‰
));

1811 i‡((!
dhd
Ë|| (!
ssids_loˇl
)) {

1812 
	`DHD_ERROR
(("%†îr‹Éxô(%†%s)\n", 
__FUNCTION__
,

1813 (!
dhd
)?"dhd i†nuŒ":"", (!
ssids_loˇl
)?"ssid isÇull":""));

1814 
îr
 = -1;

1815  
îr
;

1817 #i‚de‡
WL_SCHED_SCAN


1818 i‡(!
	`dhd_suµ‹t_°a_mode
(
dhd
))

1819  
îr
;

1823 
k
 = 0; k < 
nssid
; k++) {

1824 i‡(!
ssids_loˇl
[
k
].
SSID_Àn
) {

1825 
	`DHD_ERROR
(("%d: Brﬂdˇ° SSID i†ûegÆ f‹ PNO sëtög\n", 
k
));

1826  
îr
;

1830 #ifde‡
PNO_DUMP


1832 
j
;

1833 
j
 = 0; j < 
nssid
; j++) {

1834 
	`DHD_ERROR
(("%d: sˇ¿ f‹ %†sizê=%d\n", 
j
,

1835 
ssids_loˇl
[
j
].
SSID
, ssids_loˇl[j].
SSID_Àn
));

1841 i‡((
îr
 = 
	`dhd_≤o_˛ón
(
dhd
)) < 0) {

1842 
	`DHD_ERROR
(("%†ÁûedÉº‹=%d\n", 
__FUNCTION__
, 
îr
));

1843  
îr
;

1845 
	`mem£t
(
iovbuf
, 0, (iovbuf));

1846 
	`mem£t
(&
p‚_∑øm
, 0, (pfn_param));

1847 
	`mem£t
(&
p‚_ñemít
, 0, (pfn_element));

1850 
p‚_∑øm
.
vîsi⁄
 = 
	`htod32
(
PFN_VERSION
);

1851 
p‚_∑øm
.
Êags
 = 
	`htod16
((
PFN_LIST_ORDER
 << 
SORT_CRITERIA_BIT
));

1854 i‡((
≤o_ª≥©
 !0Ë|| (
≤o_‰eq_expo_max
 != 0)) {

1855 
p‚_∑øm
.
Êags
 |
	`htod16
(
ENABLE
 << 
ENABLE_ADAPTSCAN_BIT
);

1856 
p‚_∑øm
.
ª≥©
 = (
uch¨
Ë(
≤o_ª≥©
);

1857 
p‚_∑øm
.
exp
 = (
uch¨
Ë(
≤o_‰eq_expo_max
);

1860 i‡(
sˇn_‰
 != 0)

1861 
p‚_∑øm
.
sˇn_‰eq
 = 
	`htod32
(
sˇn_‰
);

1863 i‡(
p‚_∑øm
.
sˇn_‰eq
 > 
PNO_SCAN_MAX_FW_SEC
) {

1864 
	`DHD_ERROR
(("%†≤ÿ‰eqábovê%d sec\n", 
__FUNCTION__
, 
PNO_SCAN_MAX_FW_SEC
));

1865  
îr
;

1867 i‡(
p‚_∑øm
.
sˇn_‰eq
 < 
PNO_SCAN_MIN_FW_SEC
) {

1868 
	`DHD_ERROR
(("%†≤ÿ‰eqÜes†%d sec\n", 
__FUNCTION__
, 
PNO_SCAN_MIN_FW_SEC
));

1869  
îr
;

1872 
Àn
 = 
	`bcm_mkiov¨
("p‚_£t", (*)&
p‚_∑øm
, ’‚_∑øm), 
iovbuf
, (iovbuf));

1873 i‡((
îr
 = 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_SET_VAR
, 
iovbuf
, 
Àn
, 
TRUE
, 0)) < 0) {

1874 
	`DHD_ERROR
(("%sÖfn_set failed forÉrror=%d\n",

1875 
__FUNCTION__
, 
îr
));

1876  
îr
;

1880 
i
 = 0; i < 
nssid
; i++) {

1882 
p‚_ñemít
.
ö‰a
 = 
	`htod32
(
DOT11_BSSTYPE_INFRASTRUCTURE
);

1883 
p‚_ñemít
.
auth
 = (
DOT11_OPEN_SYSTEM
);

1884 
p‚_ñemít
.
w∑_auth
 = 
	`htod32
(
WPA_AUTH_PFN_ANY
);

1885 
p‚_ñemít
.
w£c
 = 
	`htod32
(0);

1886 
p‚_ñemít
.
ö‰a
 = 
	`htod32
(1);

1887 
p‚_ñemít
.
Êags
 = 
	`htod32
(
ENABLE
 << 
WL_PFN_HIDDEN_BIT
);

1888 
	`mem˝y
((*)
p‚_ñemít
.
ssid
.
SSID
, 
ssids_loˇl
[
i
].SSID, ssids_loˇl[i].
SSID_Àn
);

1889 
p‚_ñemít
.
ssid
.
SSID_Àn
 = 
ssids_loˇl
[
i
].SSID_len;

1891 i‡((
Àn
 =

1892 
	`bcm_mkiov¨
("p‚_add", (*)&
p‚_ñemít
,

1893 (
p‚_ñemít
), 
iovbuf
, (iovbuf))) > 0) {

1894 i‡((
îr
 =

1895 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_SET_VAR
, 
iovbuf
, 
Àn
, 
TRUE
, 0)) < 0) {

1896 
	`DHD_ERROR
(("%s failed for i=%dÉrror=%d\n",

1897 
__FUNCTION__
, 
i
, 
îr
));

1898  
îr
;

1901 
	`DHD_TRACE
(("%s set OK with PNOÅime=%dÑepeat=%d max_adjust=%d\n",

1902 
__FUNCTION__
, 
p‚_∑øm
.
sˇn_‰eq
,

1903 
p‚_∑øm
.
ª≥©
,Ö‚_∑øm.
exp
));

1905 
	`DHD_ERROR
(("%†ÁûedÉº=%d\n", 
__FUNCTION__
, 
îr
));

1910  
îr
;

1911 
	}
}

1914 
	$dhd_≤o_gë_°©us
(
dhd_pub_t
 *
dhd
)

1916 
ªt
 = -1;

1918 i‡(!
dhd
)

1919  
ªt
;

1921  (
dhd
->
≤o_íabÀ
);

1922 
	}
}

1926 #i‡
deföed
(
KEEP_ALIVE
)

1927 
	$dhd_kìp_Æive_⁄off
(
dhd_pub_t
 *
dhd
)

1929 
buf
[256];

1930 c⁄° *
°r
;

1931 
wl_mkìp_Æive_pkt_t
 
mkìp_Æive_pkt
;

1932 
wl_mkìp_Æive_pkt_t
 *
mkìp_Æive_pkç
;

1933 
buf_Àn
;

1934 
°r_Àn
;

1935 
ªs
 = -1;

1937 i‡(!
	`dhd_suµ‹t_°a_mode
(
dhd
))

1938  
ªs
;

1940 
	`DHD_TRACE
(("%†executi⁄\n", 
__FUNCTION__
));

1942 
°r
 = "mkeep_alive";

1943 
°r_Àn
 = 
	`°æí
(
°r
);

1944 
	`°∫˝y
(
buf
, 
°r
, 
°r_Àn
);

1945 
buf
[ 
°r_Àn
 ] = '\0';

1946 
mkìp_Æive_pkç
 = (
wl_mkìp_Æive_pkt_t
 *Ë(
buf
 + 
°r_Àn
 + 1);

1947 
mkìp_Æive_pkt
.
≥riod_m£c
 = 
CUSTOM_KEEP_ALIVE_SETTING
;

1948 
buf_Àn
 = 
°r_Àn
 + 1;

1949 
mkìp_Æive_pkt
.
vîsi⁄
 = 
	`htod16
(
WL_MKEEP_ALIVE_VERSION
);

1950 
mkìp_Æive_pkt
.
Àngth
 = 
	`htod16
(
WL_MKEEP_ALIVE_FIXED_LEN
);

1952 
mkìp_Æive_pkt
.
kìp_Æive_id
 = 0;

1953 
mkìp_Æive_pkt
.
Àn_byãs
 = 0;

1954 
buf_Àn
 +
WL_MKEEP_ALIVE_FIXED_LEN
;

1955 
	`bzîo
(
mkìp_Æive_pkt
.
d©a
, (mkeep_alive_pkt.data));

1960 
	`mem˝y
((*)
mkìp_Æive_pkç
, &
mkìp_Æive_pkt
, 
WL_MKEEP_ALIVE_FIXED_LEN
);

1962 
ªs
 = 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_SET_VAR
, 
buf
, 
buf_Àn
, 
TRUE
, 0);

1964  
ªs
;

1965 
	}
}

1973 
	$wl_iw_∑r£_d©a_év
(** 
li°_°r
, *
d°
, 
d°_size
, c⁄° 
tokí
,

1974 
öput_size
, *
byãs_À·
)

1976 * 
°r
;

1977 
uöt16
 
sh‹t_ãmp
;

1978 
uöt32
 
öt_ãmp
;

1980 i‡((
li°_°r
 =
NULL
Ë|| (*li°_°∏=NULLË||(
byãs_À·
 == NULL) || (*bytes_left < 0)) {

1981 
	`DHD_ERROR
(("%†îr‹Ö¨amãrs\n", 
__FUNCTION__
));

1984 
°r
 = *
li°_°r
;

1987 
	`mem£t
(
d°
, 0, 
d°_size
);

1988 *
byãs_À·
 > 0) {

1990 i‡(
°r
[0] !
tokí
) {

1991 
	`DHD_TRACE
(("%s NOT Type=%d get=%dÜeft_parse=%d \n",

1992 
__FUNCTION__
, 
tokí
, 
°r
[0], *
byãs_À·
));

1996 *
byãs_À·
 -= 1;

1997 
°r
 += 1;

1999 i‡(
öput_size
 == 1) {

2000 
	`mem˝y
(
d°
, 
°r
, 
öput_size
);

2002 i‡(
öput_size
 == 2) {

2003 
	`mem˝y
(
d°
, (*)
	`htod16
(mem˝y(&
sh‹t_ãmp
, 
°r
, 
öput_size
)),

2004 
öput_size
);

2006 i‡(
öput_size
 == 4) {

2007 
	`mem˝y
(
d°
, (*)
	`htod32
(mem˝y(&
öt_ãmp
, 
°r
, 
öput_size
)),

2008 
öput_size
);

2011 *
byãs_À·
 -
öput_size
;

2012 
°r
 +
öput_size
;

2013 *
li°_°r
 = 
°r
;

2017 
	}
}

2023 
	$wl_iw_∑r£_ch™√l_li°_év
(** 
li°_°r
, 
uöt16
* 
ch™√l_li°
,

2024 
ch™√l_num
, *
byãs_À·
)

2026 * 
°r
;

2027 
idx
 = 0;

2029 i‡((
li°_°r
 =
NULL
Ë|| (*li°_°∏=NULLË||(
byãs_À·
 == NULL) || (*bytes_left < 0)) {

2030 
	`DHD_ERROR
(("%†îr‹Ö¨amãrs\n", 
__FUNCTION__
));

2033 
°r
 = *
li°_°r
;

2035 *
byãs_À·
 > 0) {

2037 i‡(
°r
[0] !
CSCAN_TLV_TYPE_CHANNEL_IE
) {

2038 *
li°_°r
 = 
°r
;

2039 
	`DHD_TRACE
(("End ch™√l=%dÜe·_∑r£=%d %d\n", 
idx
, *
byãs_À·
, 
°r
[0]));

2040  
idx
;

2043 *
byãs_À·
 -= 1;

2044 
°r
 += 1;

2046 i‡(
°r
[0] == 0) {

2048 
ch™√l_li°
[
idx
] = 0x0;

2051 
ch™√l_li°
[
idx
] = (
uöt16
)
°r
[0];

2052 
	`DHD_TRACE
(("%†ch™√l=%d \n", 
__FUNCTION__
, 
ch™√l_li°
[
idx
]));

2054 *
byãs_À·
 -= 1;

2055 
°r
 += 1;

2057 i‡(
idx
++ > 255) {

2058 
	`DHD_ERROR
(("%†Toÿm™y ch™√l†\n", 
__FUNCTION__
));

2063 *
li°_°r
 = 
°r
;

2064  
idx
;

2065 
	}
}

2071 
	$wl_iw_∑r£_ssid_li°_év
(** 
li°_°r
, 
wlc_ssid_t
* 
ssid
, 
max
, *
byãs_À·
)

2073 * 
°r
;

2074 
idx
 = 0;

2076 i‡((
li°_°r
 =
NULL
Ë|| (*li°_°∏=NULLË|| (*
byãs_À·
 < 0)) {

2077 
	`DHD_ERROR
(("%†îr‹Ö¨amãrs\n", 
__FUNCTION__
));

2080 
°r
 = *
li°_°r
;

2081 *
byãs_À·
 > 0) {

2083 i‡(
°r
[0] !
CSCAN_TLV_TYPE_SSID_IE
) {

2084 *
li°_°r
 = 
°r
;

2085 
	`DHD_TRACE
(("nssid=%dÜe·_∑r£=%d %d\n", 
idx
, *
byãs_À·
, 
°r
[0]));

2086  
idx
;

2090 *
byãs_À·
 -= 1;

2091 
°r
 += 1;

2093 i‡(
°r
[0] == 0) {

2095 
ssid
[
idx
].
SSID_Àn
 = 0;

2096 
	`mem£t
((*)
ssid
[
idx
].
SSID
, 0x0, 
DOT11_MAX_SSID_LEN
);

2097 *
byãs_À·
 -= 1;

2098 
°r
 += 1;

2100 
	`DHD_TRACE
(("BROADCAST SCANÜe·=%d\n", *
byãs_À·
));

2102 i‡(
°r
[0] <
DOT11_MAX_SSID_LEN
) {

2104 
ssid
[
idx
].
SSID_Àn
 = 
°r
[0];

2105 *
byãs_À·
 -= 1;

2106 
°r
 += 1;

2109 i‡(
ssid
[
idx
].
SSID_Àn
 > *
byãs_À·
) {

2110 
	`DHD_ERROR
(("%s out of memoryÑangeÜen=%d butÜeft=%d\n",

2111 
__FUNCTION__
, 
ssid
[
idx
].
SSID_Àn
, *
byãs_À·
));

2115 
	`mem˝y
((*)
ssid
[
idx
].
SSID
, 
°r
, ssid[idx].
SSID_Àn
);

2117 *
byãs_À·
 -
ssid
[
idx
].
SSID_Àn
;

2118 
°r
 +
ssid
[
idx
].
SSID_Àn
;

2120 
	`DHD_TRACE
(("%s :size=%dÜeft=%d\n",

2121 (*)
ssid
[
idx
].
SSID
, ssid[idx].
SSID_Àn
, *
byãs_À·
));

2124 
	`DHD_ERROR
(("### SSID sizêm‹êth© %d\n", 
°r
[0]));

2128 i‡(
idx
++ > 
max
) {

2129 
	`DHD_ERROR
(("%†numbî o‡SSID†m‹êth© %d\n", 
__FUNCTION__
, 
idx
));

2134 *
li°_°r
 = 
°r
;

2135  
idx
;

2136 
	}
}

2144 
	$wl_iw_∑r£_ssid_li°
(** 
li°_°r
, 
wlc_ssid_t
* 
ssid
, 
idx
, 
max
)

2146 * 
°r
, *
±r
;

2148 i‡((
li°_°r
 =
NULL
) || (*list_str == NULL))

2151 
°r
 = *
li°_°r
; så !
NULL
; så = 
±r
) {

2154 i‡(!
	`°∫cmp
(
°r
, 
GET_CHANNEL
, 
	`°æí
(GET_CHANNEL))) {

2155 *
li°_°r
 = 
°r
 + 
	`°æí
(
GET_CHANNEL
);

2156  
idx
;

2159 i‡((
±r
 = 
	`°rchr
(
°r
, ',')Ë!
NULL
) {

2160 *
±r
++ = '\0';

2163 i‡(
	`°æí
(
°r
Ë> 
DOT11_MAX_SSID_LEN
) {

2164 
	`DHD_ERROR
(("ssid <%s>Éx˚ed†%d\n", 
°r
, 
DOT11_MAX_SSID_LEN
));

2168 i‡(
	`°æí
(
°r
) == 0)

2169 
ssid
[
idx
].
SSID_Àn
 = 0;

2171 i‡(
idx
 < 
max
) {

2172 
	`bzîo
(
ssid
[
idx
].
SSID
, (ssid[idx].SSID));

2173 
	`°∫˝y
((*)
ssid
[
idx
].
SSID
, 
°r
, (ssid[idx].SSID) - 1);

2174 
ssid
[
idx
].
SSID_Àn
 = 
	`°æí
(
°r
);

2176 
idx
++;

2178  
idx
;

2179 
	}
}

2185 
	$wl_iw_∑r£_ch™√l_li°
(** 
li°_°r
, 
uöt16
* 
ch™√l_li°
, 
ch™√l_num
)

2187 
num
;

2188 
vÆ
;

2189 * 
°r
;

2190 * 
íd±r
 = 
NULL
;

2192 i‡((
li°_°r
 =
NULL
)||(*list_str == NULL))

2195 
°r
 = *
li°_°r
;

2196 
num
 = 0;

2197 
	`°∫cmp
(
°r
, 
GET_NPROBE
, 
	`°æí
(GET_NPROBE))) {

2198 
vÆ
 = ()
	`°πoul
(
°r
, &
íd±r
, 0);

2199 i‡(
íd±r
 =
°r
) {

2200 
	`¥ötf
("couldÇotÖarse channelÇumber startingát"

2202 
°r
, *
li°_°r
);

2205 
°r
 = 
íd±r
 + 
	`°r•n
(endptr, " ,");

2207 i‡(
num
 =
ch™√l_num
) {

2208 
	`DHD_ERROR
(("too many channels (moreÅhan %d) in channelÜist:\n%s\n",

2209 
ch™√l_num
, *
li°_°r
));

2213 
ch™√l_li°
[
num
++] = (
uöt16
)
vÆ
;

2215 *
li°_°r
 = 
°r
;

2216  
num
;

2217 
	}
}

	@dhd_custom_gpio.c

26 
	~<ty≥defs.h
>

27 
	~<löuxvî.h
>

28 
	~<o¶.h
>

29 
	~<bcmutûs.h
>

31 
	~<dngl_°©s.h
>

32 
	~<dhd.h
>

34 
	~<wlio˘l.h
>

35 
	~<wl_iw.h
>

37 
	#WL_ERROR
(
x
Ë
¥ötf
 
	)
x

38 
	#WL_TRACE
(
x
)

	)

40 #ifde‡
CUSTOMER_HW


41 #i‡
deföed
(
CUSTOMER_OOB
)

42 
bcm_wœn_gë_oob_úq
();

44 
bcm_wœn_powî_off
();

45 
bcm_wœn_powî_⁄
();

47 #i‡
deföed
(
CUSTOMER_HW2
)

48 #ifde‡
CONFIG_WIFI_CONTROL_FUNC


49 
wifi_£t_powî
(
⁄
, 
m£c
);

50 
wifi_gë_úq_numbî
(*
úq_Êags_±r
);

51 
wifi_gë_mac_addr
(*
buf
);

52 *
wifi_gë_cou¡ry_code
(*
ccode
);

54 
	$wifi_£t_powî
(
⁄
, 
m£c
Ë{  -1; 
	}
}

55 
	$wifi_gë_úq_numbî
(*
úq_Êags_±r
Ë{  -1; 
	}
}

56 
	$wifi_gë_mac_addr
(*
buf
Ë{  -1; 
	}
}

57 *
	$wifi_gë_cou¡ry_code
(*
ccode
Ë{  
NULL
; 
	}
}

61 #i‡
deföed
(
OOB_INTR_ONLY
)

63 #i‡
deföed
(
BCMLXSDMMC
)

64 
sdioh_mmc_úq
(
úq
);

67 #ifde‡
CUSTOMER_HW3


68 
	~<mach/gpio.h
>

72 
	gdhd_oob_gpio_num
 = -1;

74 
moduÀ_∑øm
(
dhd_oob_gpio_num
, , 0644);

75 
MODULE_PARM_DESC
(
dhd_oob_gpio_num
, "DHD oob gpioÇumber");

88 
	$dhd_cu°omî_oob_úq_m≠
(*
úq_Êags_±r
)

90 
ho°_oob_úq
 = 0;

92 #i‡
	`deföed
(
CUSTOMER_HW2
)

93 
ho°_oob_úq
 = 
	`wifi_gë_úq_numbî
(
úq_Êags_±r
);

95 #ñi‡
	`deföed
(
CUSTOMER_OOB
)

96 
ho°_oob_úq
 = 
	`bcm_wœn_gë_oob_úq
();

99 #i‡
	`deföed
(
CUSTOM_OOB_GPIO_NUM
)

100 i‡(
dhd_oob_gpio_num
 < 0) {

101 
dhd_oob_gpio_num
 = 
CUSTOM_OOB_GPIO_NUM
;

105 i‡(
dhd_oob_gpio_num
 < 0) {

106 
	`WL_ERROR
(("%s: ERROR customer specific Host GPIO is NOT defined \n",

107 
__FUNCTION__
));

108  (
dhd_oob_gpio_num
);

111 
	`WL_ERROR
(("%s: customer specific Host GPIOÇumber is (%d)\n",

112 
__FUNCTION__
, 
dhd_oob_gpio_num
));

114 #i‡
deföed
 
CUSTOMER_HW


115 
ho°_oob_úq
 = 
	`MSM_GPIO_TO_INT
(
dhd_oob_gpio_num
);

116 #ñi‡
deföed
 
CUSTOMER_HW3


117 
	`gpio_ªque°
(
dhd_oob_gpio_num
, "oob irq");

118 
ho°_oob_úq
 = 
	`gpio_to_úq
(
dhd_oob_gpio_num
);

119 
	`gpio_dúe˘i⁄_öput
(
dhd_oob_gpio_num
);

123  (
ho°_oob_úq
);

124 
	}
}

129 
	$dhd_cu°omî_gpio_wœn_˘æ
(
⁄off
)

131 
⁄off
) {

132 
WLAN_RESET_OFF
:

133 
	`WL_TRACE
(("%s: call customer specific GPIOÅo insert WLAN RESET\n",

134 
__FUNCTION__
));

135 #ifde‡
CUSTOMER_HW


136 
	`bcm_wœn_powî_off
(2);

138 #i‡
	`deföed
(
CUSTOMER_HW2
)

139 
	`wifi_£t_powî
(0, 0);

141 
	`mdñay
(100);

142 
	`WL_ERROR
(("=========== WLANÖlaced in RESET ========\n"));

145 
WLAN_RESET_ON
:

146 
	`WL_TRACE
(("%s: callc customer specific GPIOÅoÑemove WLAN RESET\n",

147 
__FUNCTION__
));

148 #ifde‡
CUSTOMER_HW


149 
	`bcm_wœn_powî_⁄
(2);

151 #i‡
	`deföed
(
CUSTOMER_HW2
)

152 
	`wifi_£t_powî
(1, 0);

154 
	`mdñay
(100);

155 
	`WL_ERROR
(("=========== WLAN going backÅoÜive ========\n"));

158 
WLAN_POWER_OFF
:

159 
	`WL_TRACE
(("%s: call customer specific GPIOÅoÅurn off WL_REG_ON\n",

160 
__FUNCTION__
));

161 #ifde‡
CUSTOMER_HW


162 
	`bcm_wœn_powî_off
(1);

164 
	`WL_ERROR
(("=========== WLANÖlaced in POWER OFF ========\n"));

167 
WLAN_POWER_ON
:

168 
	`WL_TRACE
(("%s: call customer specific GPIOÅoÅurn on WL_REG_ON\n",

169 
__FUNCTION__
));

170 #ifde‡
CUSTOMER_HW


171 
	`bcm_wœn_powî_⁄
(1);

174 
	`mdñay
(100);

175 
	`WL_ERROR
(("=========== WLANÖlaced in POWER ON ========\n"));

178 
	}
}

180 #ifde‡
GET_CUSTOM_MAC_ENABLE


183 
	$dhd_cu°om_gë_mac_addªss
(*
buf
)

185 
ªt
 = 0;

187 
	`WL_TRACE
(("%†E¡î\n", 
__FUNCTION__
));

188 i‡(!
buf
)

189  -
EINVAL
;

192 #i‡
	`deföed
(
CUSTOMER_HW2
Ë&& (
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 35))

193 
ªt
 = 
	`wifi_gë_mac_addr
(
buf
);

196 #ifde‡
EXAMPLE_GET_MAC


199 
ëhî_addr
 
ó_exam∂e
 = {{0x00, 0x11, 0x22, 0x33, 0x44, 0xFF}};

200 
	`bc›y
((*)&
ó_exam∂e
, 
buf
, (
ëhî_addr
));

204  
ªt
;

205 
	}
}

209 c⁄° 
˙åy_loˇÀs_cu°om
 
	gå™¶©e_cu°om_èbÀ
[] = {

211 #ifde‡
EXAMPLE_TABLE


262 
	$gë_cu°omized_cou¡ry_code
(*
cou¡ry_iso_code
, 
wl_cou¡ry_t
 *
c•ec
)

264 #i‡
	`deföed
(
CUSTOMER_HW2
Ë&& (
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 39))

266 
˙åy_loˇÀs_cu°om
 *
˛oc_±r
;

268 i‡(!
c•ec
)

271 
˛oc_±r
 = 
	`wifi_gë_cou¡ry_code
(
cou¡ry_iso_code
);

272 i‡(
˛oc_±r
) {

273 
	`°æ˝y
(
c•ec
->
ccode
, 
˛oc_±r
->
cu°om_loˇÀ
, 
WLC_CNTRY_BUF_SZ
);

274 
c•ec
->
ªv
 = 
˛oc_±r
->
cu°om_loˇÀ_ªv
;

278 
size
, 
i
;

280 
size
 = 
	`ARRAYSIZE
(
å™¶©e_cu°om_èbÀ
);

282 i‡(
c•ec
 == 0)

285 i‡(
size
 == 0)

288 
i
 = 0; i < 
size
; i++) {

289 i‡(
	`°rcmp
(
cou¡ry_iso_code
, 
å™¶©e_cu°om_èbÀ
[
i
].
iso_abbªv
) == 0) {

290 
	`mem˝y
(
c•ec
->
ccode
,

291 
å™¶©e_cu°om_èbÀ
[
i
].
cu°om_loˇÀ
, 
WLC_CNTRY_BUF_SZ
);

292 
c•ec
->
ªv
 = 
å™¶©e_cu°om_èbÀ
[
i
].
cu°om_loˇÀ_ªv
;

296 #ifde‡
EXAMPLE_TABLE


298 
	`mem˝y
(
c•ec
->
ccode
, 
å™¶©e_cu°om_èbÀ
[0].
cu°om_loˇÀ
, 
WLC_CNTRY_BUF_SZ
);

299 
c•ec
->
ªv
 = 
å™¶©e_cu°om_èbÀ
[0].
cu°om_loˇÀ_ªv
;

303 
	}
}

	@dhd_gpio.c

26 
	~<o¶.h
>

28 
	~<mach/gpio.h
>

29 
	~<mach/ªgs-gpio.h
>

30 
	~<∂©/gpio-cfg.h
>

32 #ifde‡
CUSTOMER_HW


34 
	~<∂©/sdhci.h
>

35 
	~<∂©/devs.h
>

37 
	#sdmmc_ch™√l
 
s3c_devi˚_hsmmc0


	)

39 #ifde‡
CUSTOMER_OOB


40 
	$bcm_wœn_gë_oob_úq
()

42 
ho°_oob_úq
 = 0;

44 
	`¥ötk
("GPIO(WL_HOST_WAKEËEXYNOS4_GPX0(7Ë%d\n", 
	`EXYNOS4_GPX0
(7));

45 
ho°_oob_úq
 = 
	`gpio_to_úq
(
	`EXYNOS4_GPX0
(7));

46 
	`gpio_dúe˘i⁄_öput
(
	`EXYNOS4_GPX0
(7));

47 
	`¥ötk
("ho°_oob_úq: %d \r\n", 
ho°_oob_úq
);

49  
ho°_oob_úq
;

50 
	}
}

53 
	$bcm_wœn_powî_⁄
(
Êag
)

55 i‡(
Êag
 == 1) {

56 
	`¥ötk
("======== PULL WL_REG_ON HIGH! ========\n");

57 
	`gpio_£t_vÆue
(
	`EXYNOS4_GPK1
(0), 1);

58 
	`mdñay
(100);

59 
	`¥ötk
("======== Enable sdhciÖresence change! ========\n");

60 
	`sdhci_s3c_f‹˚_¥e£n˚_ch™ge
(&
sdmmc_ch™√l
, 1);

63 
	`¥ötk
("=======PULL WL_REG_ON HIGH! (Êag = %dË========\n", 
Êag
);

64 
	`gpio_£t_vÆue
(
	`EXYNOS4_GPK1
(0), 1);

66 
	}
}

68 
	$bcm_wœn_powî_off
(
Êag
)

70 i‡(
Êag
 == 1) {

71 
	`¥ötk
("======== Disable sdhciÖresence change! ========\n");

72 
	`sdhci_s3c_f‹˚_¥e£n˚_ch™ge
(&
sdmmc_ch™√l
, 0);

73 
	`mdñay
(100);

74 
	`¥ötk
("======== PULL WL_REG_ON LOW! ========\n");

75 
	`gpio_£t_vÆue
(
	`EXYNOS4_GPK1
(0), 0);

78 
	`¥ötk
("=======PULL WL_REG_ON LOW! (Êag = %dË========\n", 
Êag
);

79 
	`gpio_£t_vÆue
(
	`EXYNOS4_GPK1
(0), 0);

81 
	}
}

	@dhd_linux.c

28 
	~<ty≥defs.h
>

29 
	~<löuxvî.h
>

30 
	~<o¶.h
>

32 
	~<löux/öô.h
>

33 
	~<löux/kî√l.h
>

34 
	~<löux/¶ab.h
>

35 
	~<löux/skbuff.h
>

36 
	~<löux/√tdevi˚.h
>

37 
	~<löux/öëdevi˚.h
>

38 
	~<löux/π√éök.h
>

39 
	~<löux/ëhîdevi˚.h
>

40 
	~<löux/øndom.h
>

41 
	~<löux/•ölock.h
>

42 
	~<löux/ëhtoﬁ.h
>

43 
	~<löux/f˙é.h
>

44 
	~<löux/fs.h
>

46 
	~<asm/uac˚ss.h
>

47 
	~<asm/u«lig√d.h
>

49 
	~<ïivîs.h
>

50 
	~<bcmutûs.h
>

51 
	~<bcmídün.h
>

52 
	~<bcmdevs.h
>

54 
	~<¥Ÿo/ëhî√t.h
>

55 
	~<dngl_°©s.h
>

56 
	~<dhd.h
>

57 
	~<dhd_bus.h
>

58 
	~<dhd_¥Ÿo.h
>

59 
	~<dhd_dbg.h
>

60 #ifde‡
CONFIG_HAS_WAKELOCK


61 
	~<löux/wakñock.h
>

63 #ifde‡
WL_CFG80211


64 
	~<wl_cfg80211.h
>

67 #ifde‡
WLBTAMP


68 
	~<¥Ÿo/802.11_bè.h
>

69 
	~<¥Ÿo/bt_amp_hci.h
>

70 
	~<dhd_bè.h
>

73 #ifde‡
WLMEDIA_HTSF


74 
	~<löux/time.h
>

75 
	~<htsf.h
>

77 
	#HTSF_MINLEN
 200

	)

78 
	#HTSF_BUS_DELAY
 150

	)

79 
	#TSMAX
 1000

	)

80 
	#NUMBIN
 34

	)

81 
uöt32
 
	gtsidx
 = 0;

82 
uöt32
 
	ghtsf_£qnum
 = 0;

83 
uöt32
 
	gtsfsync
;

84 
timevÆ
 
	gtsync
;

85 
uöt32
 
	gt•‹t
 = 5010;

87 
	shi°o_
 {

88 
uöt32
 
	mbö
[
NUMBIN
];

89 } 
	thi°o_t
;

91 #i‡!
ISPOWEROF2
(
DHD_SDALIGN
)

92 #îr‹ 
DHD_SDALIGN
 
is
 
nŸ
 
a
 
powî
 
of
 2!

95 
hi°o_t
 
	gvi_d1
, 
	gvi_d2
, 
	gvi_d3
, 
	gvi_d4
;

98 #i‡
deföed
(
PKT_FILTER_SUPPORT
)

101 #i‡
deföed
(
SOFTAP
)

102 
boﬁ
 
≠_cfg_ru¬ög
;

103 
boﬁ
 
≠_fw_lﬂded
;

107 
	#AOE_IP_ALIAS_SUPPORT
 1

	)

109 #ifde‡
BCM_FD_AGGR


110 
	~<bcm_Ωc.h
>

111 
	~<bcm_Ωc_ç.h
>

113 #ifde‡
PROP_TXSTATUS


114 
	~<wlfc_¥Ÿo.h
>

115 
	~<dhd_wlfc.h
>

118 
	~<wl_™droid.h
>

120 #ifde‡
ARP_OFFLOAD_SUPPORT


121 
a€_upd©e_ho°_ùv4_èbÀ
(
dhd_pub_t
 *
dhd_pub
, 
u32
 
ùa
, 
boﬁ
 
add
, 
idx
);

122 
dhd_devi˚_evít
(
nŸifõr_block
 *
this
,

123 
evít
,

124 *
±r
);

126 
nŸifõr_block
 
	gdhd_nŸifõr
 = {

127 .
nŸifõr_ˇŒ
 = 
dhd_devi˚_evít


131 #i‡(
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2, 6, 27)Ë&& 
deföed
(
CONFIG_PM_SLEEP
)

132 
	~<löux/su•íd.h
>

133 vﬁ©ûê
boﬁ
 
	gdhd_mmc_su•íd
 = 
FALSE
;

134 
DECLARE_WAIT_QUEUE_HEAD
(
dhd_dpc_waô
);

137 #i‡
deföed
(
OOB_INTR_ONLY
)

138 
dhd_íabÀ_oob_öå
(
dhd_bus
 *
bus
, 
boﬁ
 
íabÀ
);

140 #i‡(
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2, 6, 27)) && (1)

141 
dhd_h™g_¥o˚ss
(
w‹k_°ru˘
 *
w‹k
);

143 #i‡(
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2, 6, 0))

144 
MODULE_LICENSE
("GPL v2");

147 
	~<dhd_bus.h
>

149 #ifde‡
BCM_FD_AGGR


150 
	#DBUS_RX_BUFFER_SIZE_DHD
(
√t
Ë(
BCM_RPC_TP_DNGL_AGG_MAX_BYTE
)

	)

152 #i‚de‡
PROP_TXSTATUS


153 
	#DBUS_RX_BUFFER_SIZE_DHD
(
√t
Ë“ë->
mtu
 +Çë->
h¨d_hódî_Àn
 + 
dhd
->
pub
.
hdæí
)

	)

155 
	#DBUS_RX_BUFFER_SIZE_DHD
(
√t
Ë“ë->
mtu
 +Çë->
h¨d_hódî_Àn
 + 
dhd
->
pub
.
hdæí
 + 128)

	)

159 #i‡
LINUX_VERSION_CODE
 =
KERNEL_VERSION
(2, 6, 15)

161 
	$¥öt_èöãd
()

164 
	}
}

168 #i‡
deföed
(
CONFIG_WIRELESS_EXT
)

169 
	~<wl_iw.h
>

170 
wl_iw_exåa_∑øms_t
 
g_wl_iw_∑øms
;

173 #i‡
deföed
(
CONFIG_HAS_EARLYSUSPEND
Ë&& deföed(
DHD_USE_EARLYSUSPEND
)

174 
	~<löux/óæysu•íd.h
>

177 
dhd_gë_su•íd_b˙_li_dtim
(
dhd_pub_t
 *
dhd
);

179 #ifde‡
PKT_FILTER_SUPPORT


180 
dhd_pktfûãr_ofÊﬂd_£t
(
dhd_pub_t
 * 
dhd
, *
¨g
);

181 
dhd_pktfûãr_ofÊﬂd_íabÀ
(
dhd_pub_t
 * 
dhd
, *
¨g
, 
íabÀ
, 
ma°î_mode
);

184 #ifde‡
READ_MACADDR


185 
dhd_ªad_maˇddr
(
dhd_öfo
 *
dhd
, 
ëhî_addr
 *
mac
);

187 #ifde‡
RDWR_MACADDR


188 
dhd_check_rdwr_maˇddr
(
dhd_öfo
 *
dhd
, 
dhd_pub_t
 *
dhdp
, 
ëhî_addr
 *
mac
);

189 
dhd_wrôe_rdwr_maˇddr
(
ëhî_addr
 *
mac
);

191 #ifde‡
WRITE_MACADDR


192 
dhd_wrôe_maˇddr
(
ëhî_addr
 *
mac
);

194 #ifde‡
GET_MAC_FROM_OTP


195 
dhd_check_moduÀ_mac
(
dhd_pub_t
 *
dhd
, 
ëhî_addr
 *
mac
);

197 #ifde‡
MIMO_ANT_SETTING


198 
dhd_£l_™t_‰om_fûe
(
dhd_pub_t
 *
dhd
);

201 #ifde‡
GLOBALCONFIG_WLAN_COUNTRY_CODE


202 
dhd_cu°omî_£t_cou¡ry
(
dhd_pub_t
 *
dhd
);

206 
	sdhd_if
 {

207 
dhd_öfo
 *
	möfo
;

209 
√t_devi˚
 *
	m√t
;

210 
√t_devi˚_°©s
 
	m°©s
;

211 
	midx
;

212 
dhd_if_°©e_t
 
	m°©e
;

213 
uöt
 
	msubunô
;

214 
uöt8
 
	mmac_addr
[
ETHER_ADDR_LEN
];

215 
boﬁ
 
	m©èched
;

216 
boﬁ
 
	mtxÊowc⁄åﬁ
;

217 
	m«me
[
IFNAMSIZ
+1];

218 
uöt8
 
	mbssidx
;

219 
boﬁ
 
	m£t_mu…iˇ°
;

220 
boﬁ
 
	mevít2cfg80211
;

221 } 
	tdhd_if_t
;

223 #ifde‡
WLMEDIA_HTSF


225 
uöt32
 
	mlow
;

226 
uöt32
 
	mhigh
;

227 } 
	ttsf_t
;

230 
uöt32
 
	mœ°_cy˛e
;

231 
uöt32
 
	mœ°_£c
;

232 
uöt32
 
	mœ°_tsf
;

233 
uöt32
 
	mc€f
;

234 
uöt32
 
	mc€fdec1
;

235 
uöt32
 
	mc€fdec2
;

236 } 
	thtsf_t
;

239 
uöt32
 
	mt1
;

240 
uöt32
 
	mt2
;

241 
uöt32
 
	mt3
;

242 
uöt32
 
	mt4
;

243 } 
	tt°amp_t
;

245 
t°amp_t
 
	gts
[
TSMAX
];

246 
t°amp_t
 
	gmaxdñayts
;

247 
uöt32
 
	gmaxdñay
 = 0, 
	gt•kt˙t
 = 0, 
	gmaxdñaypkäo
 = 0;

252 
	sdhd_öfo
 {

253 #i‡
deföed
(
CONFIG_WIRELESS_EXT
)

254 
wl_iw_t
 
	miw
;

257 
dhd_pub_t
 
	mpub
;

260 
dhd_if_t
 *
	miÊi°
[
DHD_MAX_IFS
];

262 
£m≠h‹e
 
	m¥Ÿo_£m
;

263 #ifde‡
PROP_TXSTATUS


264 
•ölock_t
 
	mwlfc_•ölock
;

266 #ifde‡
WLMEDIA_HTSF


267 
htsf_t
 
	mhtsf
;

269 
waô_queue_hód_t
 
	mio˘l_ª•_waô
;

270 
timî_li°
 
	mtimî
;

271 
boﬁ
 
	mwd_timî_vÆid
;

272 
èskÀt_°ru˘
 
	mèskÀt
;

273 
•ölock_t
 
	msdlock
;

274 
•ölock_t
 
	mtxqlock
;

275 
•ölock_t
 
	mdhd_lock
;

276 #ifde‡
DHDTHREAD


278 
boﬁ
 
	mthªads_⁄ly
;

279 
£m≠h‹e
 
	msd£m
;

281 
tsk_˘l_t
 
	mthr_dpc_˘l
;

282 
tsk_˘l_t
 
	mthr_wdt_˘l
;

284 
boﬁ
 
	mdhd_èskÀt_¸óã
;

285 
tsk_˘l_t
 
	mthr_sysioc_˘l
;

286 #i‡(
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2, 6, 27))

287 
w‹k_°ru˘
 
	mw‹k_h™g
;

291 #i‡
deföed
(
CONFIG_HAS_WAKELOCK
Ë&& (
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2, 6, 27))

292 
wake_lock
 *
	mwl_wifi
;

293 
wake_lock
 *
	mwl_rxwake
;

294 
wake_lock
 *
	mwl_˘æwake
;

295 
wake_lock
 *
	mwl_wdwake
;

298 #i‡(
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2, 6, 25)) && 1

302 
muãx
 
	mdhd_√t_if_muãx
;

303 
muãx
 
	mdhd_su•íd_muãx
;

305 
•ölock_t
 
	mwakñock_•ölock
;

306 
	mwakñock_cou¡î
;

307 
	mwakñock_wd_cou¡î
;

308 
	mwakñock_rx_timeout_íabÀ
;

309 
	mwakñock_˘æ_timeout_íabÀ
;

312 
	m£t_maˇddªss
;

313 
ëhî_addr
 
	mmacvÆue
;

314 
waô_queue_hód_t
 
	m˘æ_waô
;

315 
©omic_t
 
	m≥nd_8021x_˙t
;

316 
dhd_©èch_°©es_t
 
	mdhd_°©e
;

318 #i‡
deföed
(
CONFIG_HAS_EARLYSUSPEND
Ë&& deföed(
DHD_USE_EARLYSUSPEND
)

319 
óæy_su•íd
 
	móæy_su•íd
;

322 #ifde‡
ARP_OFFLOAD_SUPPORT


323 
u32
 
	m≥nd_ùaddr
;

325 #ifde‡
BCM_FD_AGGR


326 *
	mΩc_th
;

327 *
	mΩc_osh
;

328 
timî_li°
 
	mΩ˘h_timî
;

329 
boﬁ
 
	mΩ˘h_timî_a˘ive
;

330 
boﬁ
 
	mfdaggr
;

332 } 
	tdhd_öfo_t
;

335 
uöt
 
	gdhd_dow∆ﬂd_fw_⁄_drivîlﬂd
 = 
TRUE
;

340 
	gfúmw¨e_∑th
[
MOD_PARAM_PATHLEN
];

341 
	gnvøm_∑th
[
MOD_PARAM_PATHLEN
];

344 
	göfo_°rög
[
MOD_PARAM_INFOLEN
];

345 
moduÀ_∑øm_°rög
(
öfo_°rög
, info_°rög, 
MOD_PARAM_INFOLEN
, 0444);

347 
	g›_mode
 = 0;

348 
	gdißbÀ_¥›tx
 = 0;

349 
moduÀ_∑øm
(
›_mode
, , 0644);

350 
wl_c⁄åﬁ_wl_°¨t
(
√t_devi˚
 *
dev
);

351 #i‡(
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2, 6, 27))

352 
£m≠h‹e
 
	gdhd_ªgi°øti⁄_£m
;

353 
£m≠h‹e
 
	gdhd_chùup_£m
;

354 
	gdhd_ªgi°øti⁄_check
 = 
FALSE
;

356 
	#DHD_REGISTRATION_TIMEOUT
 12000

	)

360 
uöt
 
	gdhd_sysioc
 = 
TRUE
;

361 
moduÀ_∑øm
(
dhd_sysioc
, 
uöt
, 0);

364 
moduÀ_∑øm
(
dhd_msg_Àvñ
, , 0);

365 #i‡
deföed
(
CONFIG_WIRELESS_EXT
)

366 
moduÀ_∑øm
(
iw_msg_Àvñ
, , 0);

368 #ifde‡
WL_CFG80211


369 
moduÀ_∑øm
(
wl_dbg_Àvñ
, , 0);

371 
moduÀ_∑øm
(
™droid_msg_Àvñ
, , 0);

374 
moduÀ_∑øm
(
dißbÀ_¥›tx
, , 0644);

377 
moduÀ_∑øm_°rög
(
fúmw¨e_∑th
, fúmw¨e_∑th, 
MOD_PARAM_PATHLEN
, 0660);

378 
moduÀ_∑øm_°rög
(
nvøm_∑th
,Çvøm_∑th, 
MOD_PARAM_PATHLEN
, 0);

381 
uöt
 
	gdhd_w©chdog_ms
 = 10;

382 
moduÀ_∑øm
(
dhd_w©chdog_ms
, 
uöt
, 0);

384 #i‡
deföed
(
DHD_DEBUG
)

386 
uöt
 
	gdhd_c⁄sﬁe_ms
 = 0;

387 
moduÀ_∑øm
(
dhd_c⁄sﬁe_ms
, 
uöt
, 0644);

390 
uöt
 
	gdhd_¶∑uto
 = 
TRUE
;

391 
moduÀ_∑øm
(
dhd_¶∑uto
, 
uöt
, 0);

394 
uöt
 
	gdhd_¨p_mode
 = 
ARP_OL_AGENT
 | 
ARP_OL_PEER_AUTO_REPLY
;

395 
moduÀ_∑øm
(
dhd_¨p_mode
, 
uöt
, 0);

398 
uöt
 
	gdhd_¨p_íabÀ
 = 
TRUE
;

399 
moduÀ_∑øm
(
dhd_¨p_íabÀ
, 
uöt
, 0);

401 #ifde‡
PKT_FILTER_SUPPORT


403 
uöt
 
	gdhd_pkt_fûãr_íabÀ
 = 
TRUE
;

404 
moduÀ_∑øm
(
dhd_pkt_fûãr_íabÀ
, 
uöt
, 0);

408 
uöt
 
	gdhd_pkt_fûãr_öô
 = 0;

409 
moduÀ_∑øm
(
dhd_pkt_fûãr_öô
, 
uöt
, 0);

412 #ifde‡
GAN_LITE_NAT_KEEPALIVE_FILTER


413 
uöt
 
	gdhd_ma°î_mode
 = 
FALSE
;

415 
uöt
 
	gdhd_ma°î_mode
 = 
TRUE
;

417 
moduÀ_∑øm
(
dhd_ma°î_mode
, 
uöt
, 0);

419 #ifde‡
DHDTHREAD


420 
	gdhd_w©chdog_¥io
 = 0;

421 
moduÀ_∑øm
(
dhd_w©chdog_¥io
, , 0);

424 
	gdhd_dpc_¥io
 = 
CUSTOM_DPC_PRIO_SETTING
;

425 
moduÀ_∑øm
(
dhd_dpc_¥io
, , 0);

428 
dhd_d⁄gÀ_memsize
;

429 
moduÀ_∑øm
(
dhd_d⁄gÀ_memsize
, , 0);

432 
uöt
 
	gdhd_rﬂm_dißbÀ
 = 0;

435 
uöt
 
	gdhd_ødio_up
 = 1;

438 
	giÁ˚_«me
[
IFNAMSIZ
] = {'\0'};

439 
moduÀ_∑øm_°rög
(
iÁ˚_«me
, iÁ˚_«me, 
IFNAMSIZ
, 0);

444 
	gdhd_io˘l_timeout_m£c
 = 
IOCTL_RESP_TIMEOUT
;

447 
	gdhd_idÀtime
 = 
DHD_IDLETIME_TICKS
;

448 
moduÀ_∑øm
(
dhd_idÀtime
, , 0);

451 
uöt
 
	gdhd_pﬁl
 = 
FALSE
;

452 
moduÀ_∑øm
(
dhd_pﬁl
, 
uöt
, 0);

455 
uöt
 
	gdhd_öå
 = 
TRUE
;

456 
moduÀ_∑øm
(
dhd_öå
, 
uöt
, 0);

459 
uöt
 
	gdhd_sdiod_drive_°ªngth
 = 6;

460 
moduÀ_∑øm
(
dhd_sdiod_drive_°ªngth
, 
uöt
, 0);

463 
uöt
 
dhd_txbound
;

464 
uöt
 
dhd_rxbound
;

465 
moduÀ_∑øm
(
dhd_txbound
, 
uöt
, 0);

466 
moduÀ_∑øm
(
dhd_rxbound
, 
uöt
, 0);

469 
uöt
 
dhd_de„ºed_tx
;

470 
moduÀ_∑øm
(
dhd_de„ºed_tx
, 
uöt
, 0);

472 #ifde‡
BCMDBGFS


473 
dhd_dbg_öô
(
dhd_pub_t
 *
dhdp
);

474 
dhd_dbg_ªmove
();

479 #ifde‡
SDTEST


481 
uöt
 
	gdhd_pktgí
 = 0;

482 
moduÀ_∑øm
(
dhd_pktgí
, 
uöt
, 0);

485 
uöt
 
	gdhd_pktgí_Àn
 = 0;

486 
moduÀ_∑øm
(
dhd_pktgí_Àn
, 
uöt
, 0);

490 #ifde‡
DHD_DEBUG


491 #i‚de‡
SRCBASE


492 
	#SRCBASE
 "drivîs/√t/wúñess/bcmdhd"

	)

494 
	#DHD_COMPILED
 "\nCompûed i¿" 
SRCBASE


	)

496 
	#DHD_COMPILED


	)

499 
	gdhd_vîsi⁄
[] = "D⁄gÀ Ho° Drivî, vîsi⁄ " 
EPI_VERSION_STR


500 #ifde‡
DHD_DEBUG


501 "\nCompûed i¿" 
SRCBASE
 " o¿" 
__DATE__
 "áà" 
__TIME__


504 
dhd_√t_if_lock_loˇl
(
dhd_öfo_t
 *
dhd
);

505 
dhd_√t_if_u∆ock_loˇl
(
dhd_öfo_t
 *
dhd
);

506 
dhd_su•íd_lock
(
dhd_pub_t
 *
dhdp
);

507 
dhd_su•íd_u∆ock
(
dhd_pub_t
 *
dhdp
);

509 #ifde‡
WLMEDIA_HTSF


510 
htsf_upd©e
(
dhd_öfo_t
 *
dhd
, *
d©a
);

511 
tsf_t
 
	g¥ev_tsf
, 
	gcur_tsf
;

513 
uöt32
 
dhd_gë_htsf
(
dhd_öfo_t
 *
dhd
, 
ifidx
);

514 
dhd_io˘l_htsf_gë
(
dhd_öfo_t
 *
dhd
, 
ifidx
);

515 
dhd_dump_œãncy
();

516 
dhd_htsf_addtxts
(
dhd_pub_t
 *
dhdp
, *
pktbuf
);

517 
dhd_htsf_addrxts
(
dhd_pub_t
 *
dhdp
, *
pktbuf
);

518 
dhd_dump_htsfhi°o
(
hi°o_t
 *
his
, *
s
);

522 
dhd_m⁄ô‹_öô
(*
dhd_pub
);

523 
dhd_m⁄ô‹_unöô
();

526 #i‡
deföed
(
CONFIG_WIRELESS_EXT
)

527 
iw_°©i°ics
 *
dhd_gë_wúñess_°©s
(
√t_devi˚
 *
dev
);

530 
dhd_dpc
(
ul⁄g
 
d©a
);

532 
dhd_waô_≥nd8021x
(
√t_devi˚
 *
dev
);

534 #ifde‡
TOE


535 #i‚de‡
BDC


536 #îr‹ 
TOE
 
ªquúes
 
BDC


538 
dhd_t€_gë
(
dhd_öfo_t
 *
dhd
, 
idx
, 
uöt32
 *
t€_ﬁ
);

539 
dhd_t€_£t
(
dhd_öfo_t
 *
dhd
, 
idx
, 
uöt32
 
t€_ﬁ
);

542 
dhd_wl_ho°_evít
(
dhd_öfo_t
 *
dhd
, *
ifidx
, *
pktd©a
,

543 
wl_evít_msg_t
 *
evít_±r
, **
d©a_±r
);

545 #i‡(
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2, 6, 27)Ë&& 
deföed
(
CONFIG_PM_SLEEP
)

546 
	$dhd_¶ìp_pm_ˇŒback
(
nŸifõr_block
 *
nfb
, 
a˘i⁄
, *
ign‹ed
)

548 
ªt
 = 
NOTIFY_DONE
;

550 #i‡
	`deföed
(
CONFIG_ARCH_RHEA
Ë|| deföed(
CONFIG_ARCH_CAPRI
Ë|| (
LINUX_VERSION_CODE
 <= \

551 
	`KERNEL_VERSION
(2, 6, 39))

552 
a˘i⁄
) {

553 
PM_HIBERNATION_PREPARE
:

554 
PM_SUSPEND_PREPARE
:

555 
dhd_mmc_su•íd
 = 
TRUE
;

556 
ªt
 = 
NOTIFY_OK
;

558 
PM_POST_HIBERNATION
:

559 
PM_POST_SUSPEND
:

560 
dhd_mmc_su•íd
 = 
FALSE
;

561 
ªt
 = 
NOTIFY_OK
;

564 
	`smp_mb
();

566  
ªt
;

567 
	}
}

569 
nŸifõr_block
 
	gdhd_¶ìp_pm_nŸifõr
 = {

570 .
nŸifõr_ˇŒ
 = 
dhd_¶ìp_pm_ˇŒback
,

571 .
	g¥i‹ôy
 = 10

573 
ªgi°î_pm_nŸifõr
(
nŸifõr_block
 *
nb
);

574 
uƒegi°î_pm_nŸifõr
(
nŸifõr_block
 *
nb
);

577 
	$dhd_£t_∑ckë_fûãr
(
dhd_pub_t
 *
dhd
)

579 #ifde‡
PKT_FILTER_SUPPORT


580 
i
;

582 
	`DHD_TRACE
(("%s:É¡î\n", 
__FUNCTION__
));

583 i‡(
dhd_pkt_fûãr_íabÀ
) {

584 
i
 = 0; i < 
dhd
->
pktfûãr_cou¡
; i++) {

585 
	`dhd_pktfûãr_ofÊﬂd_£t
(
dhd
, dhd->
pktfûãr
[
i
]);

589 
	}
}

591 
	$dhd_íabÀ_∑ckë_fûãr
(
vÆue
, 
dhd_pub_t
 *
dhd
)

593 #ifde‡
PKT_FILTER_SUPPORT


594 
i
;

596 
	`DHD_TRACE
(("%s:É¡î, vÆuê%d\n", 
__FUNCTION__
, 
vÆue
));

599 i‡(
dhd_pkt_fûãr_íabÀ
 && (!
vÆue
 ||

600 (
	`dhd_suµ‹t_°a_mode
(
dhd
Ë&& !dhd->
dh˝_ö_¥ogªss
))) {

601 
i
 = 0; i < 
dhd
->
pktfûãr_cou¡
; i++) {

602 #ifde‡
PASS_ARP_PACKET


603 i‡(
vÆue
 && (
i
 =
dhd
->
pktfûãr_cou¡
 -1) &&

604 !(
dhd
->
›_mode
 & (
DHD_FLAG_P2P_GC_MODE
 | 
DHD_FLAG_P2P_GO_MODE
))) {

605 
	`DHD_TRACE_HW4
(("DoÇotÅurn on ARP whiteÜistÖkt filter:"

607 
vÆue
, 
i
, 
dhd
->
›_mode
));

611 
	`dhd_pktfûãr_ofÊﬂd_íabÀ
(
dhd
, dhd->
pktfûãr
[
i
],

612 
vÆue
, 
dhd_ma°î_mode
);

616 
	}
}

618 
	$dhd_£t_su•íd
(
vÆue
, 
dhd_pub_t
 *
dhd
)

620 #i‡!
	`deföed
(
SUPPORT_PM2_ONLY
)

621 
powî_mode
 = 
PM_MAX
;

624 
iovbuf
[32];

625 
b˙_li_dtim
 = 0;

626 #i‚de‡
DISABLE_FW_ROAM_SUSPEND


627 
uöt
 
rﬂmv¨
 = 1;

629 #ifde‡
ENABLE_BCN_LI_BCN_WAKEUP


630 
b˙_li_b˙
;

632 #ifde‡
PASS_ALL_MCAST_PKTS


633 
dhd_öfo
 *
dhdöfo
 = 
dhd
->
öfo
;

634 
uöt32
 
Ælmu…i
;

635 
uöt
 
i
;

638 
	`DHD_TRACE
(("%s:Énter, value = %d in_suspend=%d\n",

639 
__FUNCTION__
, 
vÆue
, 
dhd
->
ö_su•íd
));

641 
	`dhd_su•íd_lock
(
dhd
);

642 i‡(
dhd
 && dhd->
up
) {

643 i‡(
vÆue
 && 
dhd
->
ö_su•íd
) {

644 #ifde‡
PKT_FILTER_SUPPORT


645 
dhd
->
óæy_su•íded
 = 1;

648 
	`DHD_ERROR
(("%s: f‹˚Éxå®Su•íd sëtög\n", 
__FUNCTION__
));

650 #i‡!
	`deföed
(
SUPPORT_PM2_ONLY
)

651 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_SET_PM
, (*)&
powî_mode
,

652 (
powî_mode
), 
TRUE
, 0);

655 
	`dhd_íabÀ_∑ckë_fûãr
(1, 
dhd
);

656 #ifde‡
PASS_ALL_MCAST_PKTS


657 
Ælmu…i
 = 0;

658 
	`bcm_mkiov¨
("Ælmu…i", (*)&
Ælmu…i
,

659 4, 
iovbuf
, (iovbuf));

660 
i
 = 0; i < 
DHD_MAX_IFS
; i++) {

661 i‡(
dhdöfo
->
iÊi°
[
i
] && dhdöfo->iÊi°[i]->
√t
)

662 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_SET_VAR
, 
iovbuf
,

663 (
iovbuf
), 
TRUE
, 
i
);

671 
b˙_li_dtim
 = 
	`dhd_gë_su•íd_b˙_li_dtim
(
dhd
);

672 
	`bcm_mkiov¨
("b˙_li_dtim", (*)&
b˙_li_dtim
,

673 4, 
iovbuf
, (iovbuf));

674 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_SET_VAR
, 
iovbuf
, (iovbuf), 
TRUE
, 0);

676 #i‚de‡
DISABLE_FW_ROAM_SUSPEND


678 
	`bcm_mkiov¨
("rﬂm_off", (*)&
rﬂmv¨
, 4,

679 
iovbuf
, (iovbuf));

680 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_SET_VAR
, 
iovbuf
, (iovbuf), 
TRUE
, 0);

682 #ifde‡
ENABLE_BCN_LI_BCN_WAKEUP


683 
b˙_li_b˙
 = 0;

684 
	`bcm_mkiov¨
("b˙_li_b˙", (*)&
b˙_li_b˙
,

685 4, 
iovbuf
, (iovbuf));

686 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_SET_VAR
, 
iovbuf
, (iovbuf), 
TRUE
, 0);

690 #ifde‡
PKT_FILTER_SUPPORT


691 
dhd
->
óæy_su•íded
 = 0;

694 
	`DHD_ERROR
(("%s: Removêexå®su•íd sëtög\n", 
__FUNCTION__
));

696 #i‡!
	`deföed
(
SUPPORT_PM2_ONLY
)

697 
powî_mode
 = 
PM_FAST
;

698 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_SET_PM
, (*)&
powî_mode
,

699 (
powî_mode
), 
TRUE
, 0);

702 
	`dhd_íabÀ_∑ckë_fûãr
(0, 
dhd
);

703 #ifde‡
PASS_ALL_MCAST_PKTS


704 
Ælmu…i
 = 1;

705 
	`bcm_mkiov¨
("Ælmu…i", (*)&
Ælmu…i
,

706 4, 
iovbuf
, (iovbuf));

707 
i
 = 0; i < 
DHD_MAX_IFS
; i++) {

708 i‡(
dhdöfo
->
iÊi°
[
i
] && dhdöfo->iÊi°[i]->
√t
)

709 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_SET_VAR
, 
iovbuf
,

710 (
iovbuf
), 
TRUE
, 
i
);

715 
	`bcm_mkiov¨
("b˙_li_dtim", (*)&
b˙_li_dtim
,

716 4, 
iovbuf
, (iovbuf));

718 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_SET_VAR
, 
iovbuf
, (iovbuf), 
TRUE
, 0);

719 #i‚de‡
DISABLE_FW_ROAM_SUSPEND


720 
rﬂmv¨
 = 
dhd_rﬂm_dißbÀ
;

721 
	`bcm_mkiov¨
("rﬂm_off", (*)&
rﬂmv¨
, 4, 
iovbuf
,

722 (
iovbuf
));

723 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_SET_VAR
, 
iovbuf
, (iovbuf), 
TRUE
, 0);

725 #ifde‡
ENABLE_BCN_LI_BCN_WAKEUP


726 
b˙_li_b˙
 = 1;

727 
	`bcm_mkiov¨
("b˙_li_b˙", (*)&
b˙_li_b˙
,

728 4, 
iovbuf
, (iovbuf));

729 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_SET_VAR
, 
iovbuf
, (iovbuf), 
TRUE
, 0);

735 
	`dhd_su•íd_u∆ock
(
dhd
);

737 
	}
}

739 
	$dhd_su•íd_ªsume_hñ≥r
(
dhd_öfo
 *
dhd
, 
vÆ
, 
f‹˚
)

741 
dhd_pub_t
 *
dhdp
 = &
dhd
->
pub
;

742 
ªt
 = 0;

744 
	`DHD_OS_WAKE_LOCK
(
dhdp
);

746 
dhdp
->
ö_su•íd
 = 
vÆ
;

747 i‡((
f‹˚
 || !
dhdp
->
su•íd_dißbÀ_Êag
) &&

748 
	`dhd_suµ‹t_°a_mode
(
dhdp
))

750 
ªt
 = 
	`dhd_£t_su•íd
(
vÆ
, 
dhdp
);

753 
	`DHD_OS_WAKE_UNLOCK
(
dhdp
);

754  
ªt
;

755 
	}
}

757 #i‡
deföed
(
CONFIG_HAS_EARLYSUSPEND
Ë&& deföed(
DHD_USE_EARLYSUSPEND
)

758 
	$dhd_óæy_su•íd
(
óæy_su•íd
 *
h
)

760 
dhd_öfo
 *
dhd
 = 
	`c⁄èöî_of
(
h
, dhd_öfo, 
óæy_su•íd
);

761 
	`DHD_TRACE_HW4
(("%s:É¡î\n", 
__FUNCTION__
));

763 i‡(
dhd
)

764 
	`dhd_su•íd_ªsume_hñ≥r
(
dhd
, 1, 0);

765 
	}
}

767 
	$dhd_œã_ªsume
(
óæy_su•íd
 *
h
)

769 
dhd_öfo
 *
dhd
 = 
	`c⁄èöî_of
(
h
, dhd_öfo, 
óæy_su•íd
);

770 
	`DHD_TRACE_HW4
(("%s:É¡î\n", 
__FUNCTION__
));

772 i‡(
dhd
)

773 
	`dhd_su•íd_ªsume_hñ≥r
(
dhd
, 0, 0);

774 
	}
}

790 
	$dhd_timeout_°¨t
(
dhd_timeout_t
 *
tmo
, 
uöt
 
u£c
)

792 
tmo
->
limô
 = 
u£c
;

793 
tmo
->
ö¸emít
 = 0;

794 
tmo
->
ñ≠£d
 = 0;

795 
tmo
->
tick
 = 
	`jiffõs_to_u£cs
(1);

796 
	}
}

799 
	$dhd_timeout_expúed
(
dhd_timeout_t
 *
tmo
)

802 i‡(
tmo
->
ö¸emít
 == 0) {

803 
tmo
->
ö¸emít
 = 1;

807 i‡(
tmo
->
ñ≠£d
 >tmo->
limô
)

811 
tmo
->
ñ≠£d
 +tmo->
ö¸emít
;

813 i‡(
tmo
->
ö¸emít
 <Åmo->
tick
) {

814 
	`OSL_DELAY
(
tmo
->
ö¸emít
);

815 
tmo
->
ö¸emít
 *= 2;

816 i‡(
tmo
->
ö¸emít
 >Åmo->
tick
)

817 
tmo
->
ö¸emít
 =Åmo->
tick
;

819 
waô_queue_hód_t
 
dñay_waô
;

820 
	`DECLARE_WAITQUEUE
(
waô
, 
cuºít
);

821 
	`öô_waôqueue_hód
(&
dñay_waô
);

822 
	`add_waô_queue
(&
dñay_waô
, &
waô
);

823 
	`£t_cuºít_°©e
(
TASK_INTERRUPTIBLE
);

824 
	`scheduÀ_timeout
(1);

825 
	`ªmove_waô_queue
(&
dñay_waô
, &
waô
);

826 
	`£t_cuºít_°©e
(
TASK_RUNNING
);

830 
	}
}

833 
	$dhd_√t2idx
(
dhd_öfo_t
 *
dhd
, 
√t_devi˚
 *
√t
)

835 
i
 = 0;

837 
	`ASSERT
(
dhd
);

838 
i
 < 
DHD_MAX_IFS
) {

839 i‡(
dhd
->
iÊi°
[
i
] && (dhd->iÊi°[i]->
√t
 ==Çet))

840  
i
;

841 
i
++;

844  
DHD_BAD_IF
;

845 
	}
}

847 
√t_devi˚
 * 
	$dhd_idx2√t
(*
pub
, 
ifidx
)

849 
dhd_pub
 *dhd_pub = (dhd_pub *)
pub
;

850 
dhd_öfo
 *dhd_info;

852 i‡(!
dhd_pub
 || 
ifidx
 < 0 || ifidx >
DHD_MAX_IFS
)

853  
NULL
;

854 
dhd_öfo
 = 
dhd_pub
->
öfo
;

855 i‡(
dhd_öfo
 && dhd_öfo->
iÊi°
[
ifidx
])

856  
dhd_öfo
->
iÊi°
[
ifidx
]->
√t
;

857  
NULL
;

858 
	}
}

861 
	$dhd_i‚ame2idx
(
dhd_öfo_t
 *
dhd
, *
«me
)

863 
i
 = 
DHD_MAX_IFS
;

865 
	`ASSERT
(
dhd
);

867 i‡(
«me
 =
NULL
 || *name == '\0')

870 --
i
 > 0)

871 i‡(
dhd
->
iÊi°
[
i
] && !
	`°∫cmp
(dhd->iÊi°[i]->
«me
,Çame, 
IFNAMSIZ
))

874 
	`DHD_TRACE
(("%s:Ñëu∫ idx %d f‹ \"%s\"\n", 
__FUNCTION__
, 
i
, 
«me
));

876  
i
;

877 
	}
}

880 
	$dhd_i‚ame
(
dhd_pub_t
 *
dhdp
, 
ifidx
)

882 
dhd_öfo_t
 *
dhd
 = (dhd_öfo_à*)
dhdp
->
öfo
;

884 
	`ASSERT
(
dhd
);

886 i‡(
ifidx
 < 0 || ifidx >
DHD_MAX_IFS
) {

887 
	`DHD_ERROR
(("%s: ifidx %d ouào‡ønge\n", 
__FUNCTION__
, 
ifidx
));

891 i‡(
dhd
->
iÊi°
[
ifidx
] =
NULL
) {

892 
	`DHD_ERROR
(("%s:ÇuŒ i/‡%d\n", 
__FUNCTION__
, 
ifidx
));

896 i‡(
dhd
->
iÊi°
[
ifidx
]->
√t
)

897  
dhd
->
iÊi°
[
ifidx
]->
√t
->
«me
;

900 
	}
}

902 
uöt8
 *

903 
	$dhd_bssidx2bssid
(
dhd_pub_t
 *
dhdp
, 
idx
)

905 
i
;

906 
dhd_öfo_t
 *
dhd
 = (dhd_öfo_à*)
dhdp
;

908 
	`ASSERT
(
dhd
);

909 
i
 = 0; i < 
DHD_MAX_IFS
; i++)

910 i‡(
dhd
->
iÊi°
[
i
] && dhd->iÊi°[i]->
bssidx
 =
idx
)

911  
dhd
->
iÊi°
[
i
]->
mac_addr
;

913  
NULL
;

914 
	}
}

918 
	$_dhd_£t_mu…iˇ°_li°
(
dhd_öfo_t
 *
dhd
, 
ifidx
)

920 
√t_devi˚
 *
dev
;

921 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 35)

922 
√tdev_hw_addr
 *
ha
;

924 
dev_mc_li°
 *
m˛i°
;

926 
uöt32
 
Ælmu…i
, 
˙t
;

928 
wl_io˘l_t
 
ioc
;

929 *
buf
, *
buÂ
;

930 
uöt
 
buÊí
;

931 
ªt
;

933 
	`ASSERT
(
dhd
 && dhd->
iÊi°
[
ifidx
]);

934 
dev
 = 
dhd
->
iÊi°
[
ifidx
]->
√t
;

935 i‡(!
dev
)

937 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 27)

938 
	`√tif_addr_lock_bh
(
dev
);

940 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 35)

941 
˙t
 = 
	`√tdev_mc_cou¡
(
dev
);

943 
˙t
 = 
dev
->
mc_cou¡
;

946 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 27)

947 
	`√tif_addr_u∆ock_bh
(
dev
);

951 
Ælmu…i
 = (
dev
->
Êags
 & 
IFF_ALLMULTI
Ë? 
TRUE
 : 
FALSE
;

952 #ifde‡
PASS_ALL_MCAST_PKTS


953 #ifde‡
PKT_FILTER_SUPPORT


954 i‡(!
dhd
->
pub
.
óæy_su•íded
)

956 
Ælmu…i
 = 
TRUE
;

962 
buÊí
 = ("mˇ°_li°"Ë+ (
˙t
Ë+ (˙à* 
ETHER_ADDR_LEN
);

963 i‡(!(
buÂ
 = 
buf
 = 
	`MALLOC
(
dhd
->
pub
.
osh
, 
buÊí
))) {

964 
	`DHD_ERROR
(("%s: out of memory for mcast_list, cnt %d\n",

965 
	`dhd_i‚ame
(&
dhd
->
pub
, 
ifidx
), 
˙t
));

969 
	`°∫˝y
(
buÂ
, "mˇ°_li°", 
buÊí
 - 1);

970 
buÂ
[
buÊí
 - 1] = '\0';

971 
buÂ
 +
	`°æí
("mcast_list") + 1;

973 
˙t
 = 
	`htﬁ32
(cnt);

974 
	`mem˝y
(
buÂ
, &
˙t
, (cnt));

975 
buÂ
 +(
˙t
);

977 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 27)

978 
	`√tif_addr_lock_bh
(
dev
);

980 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 35)

981 
	`√tdev_f‹_óch_mc_addr
(
ha
, 
dev
) {

982 i‡(!
˙t
)

984 
	`mem˝y
(
buÂ
, 
ha
->
addr
, 
ETHER_ADDR_LEN
);

985 
buÂ
 +
ETHER_ADDR_LEN
;

986 
˙t
--;

989 
m˛i°
 = 
dev
->
mc_li°
; (m˛i° && (
˙t
 > 0));

990 
˙t
--, 
m˛i°
 = m˛i°->
√xt
) {

991 
	`mem˝y
(
buÂ
, (*)
m˛i°
->
dmi_addr
, 
ETHER_ADDR_LEN
);

992 
buÂ
 +
ETHER_ADDR_LEN
;

996 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 27)

997 
	`√tif_addr_u∆ock_bh
(
dev
);

1000 
	`mem£t
(&
ioc
, 0, (ioc));

1001 
ioc
.
cmd
 = 
WLC_SET_VAR
;

1002 
ioc
.
buf
 = buf;

1003 
ioc
.
Àn
 = 
buÊí
;

1004 
ioc
.
£t
 = 
TRUE
;

1006 
ªt
 = 
	`dhd_wl_io˘l
(&
dhd
->
pub
, 
ifidx
, &
ioc
, ioc.
buf
, ioc.
Àn
);

1007 i‡(
ªt
 < 0) {

1008 
	`DHD_ERROR
(("%s: set mcast_list failed, cnt %d\n",

1009 
	`dhd_i‚ame
(&
dhd
->
pub
, 
ifidx
), 
˙t
));

1010 
Ælmu…i
 = 
˙t
 ? 
TRUE
 :állmulti;

1013 
	`MFREE
(
dhd
->
pub
.
osh
, 
buf
, 
buÊí
);

1020 
buÊí
 = ("Ælmu…i"Ë+ (
Ælmu…i
);

1021 i‡(!(
buf
 = 
	`MALLOC
(
dhd
->
pub
.
osh
, 
buÊí
))) {

1022 
	`DHD_ERROR
(("%s: ouào‡mem‹y f‹áŒmu…i\n", 
	`dhd_i‚ame
(&
dhd
->
pub
, 
ifidx
)));

1025 
Ælmu…i
 = 
	`htﬁ32
(allmulti);

1027 i‡(!
	`bcm_mkiov¨
("Ælmu…i", (*)&
Ælmu…i
, ◊Œmu…i), 
buf
, 
buÊí
)) {

1028 
	`DHD_ERROR
(("%s: mkiovar failed forállmulti, datalen %d buflen %u\n",

1029 
	`dhd_i‚ame
(&
dhd
->
pub
, 
ifidx
), ()(
Ælmu…i
), 
buÊí
));

1030 
	`MFREE
(
dhd
->
pub
.
osh
, 
buf
, 
buÊí
);

1035 
	`mem£t
(&
ioc
, 0, (ioc));

1036 
ioc
.
cmd
 = 
WLC_SET_VAR
;

1037 
ioc
.
buf
 = buf;

1038 
ioc
.
Àn
 = 
buÊí
;

1039 
ioc
.
£t
 = 
TRUE
;

1041 
ªt
 = 
	`dhd_wl_io˘l
(&
dhd
->
pub
, 
ifidx
, &
ioc
, ioc.
buf
, ioc.
Àn
);

1042 i‡(
ªt
 < 0) {

1043 
	`DHD_ERROR
(("%s: setállmulti %d failed\n",

1044 
	`dhd_i‚ame
(&
dhd
->
pub
, 
ifidx
), 
	`…oh32
(
Ælmu…i
)));

1047 
	`MFREE
(
dhd
->
pub
.
osh
, 
buf
, 
buÊí
);

1051 
Ælmu…i
 = (
dev
->
Êags
 & 
IFF_PROMISC
Ë? 
TRUE
 : 
FALSE
;

1052 
Ælmu…i
 = 
	`htﬁ32
(allmulti);

1054 
	`mem£t
(&
ioc
, 0, (ioc));

1055 
ioc
.
cmd
 = 
WLC_SET_PROMISC
;

1056 
ioc
.
buf
 = &
Ælmu…i
;

1057 
ioc
.
Àn
 = (
Ælmu…i
);

1058 
ioc
.
£t
 = 
TRUE
;

1060 
ªt
 = 
	`dhd_wl_io˘l
(&
dhd
->
pub
, 
ifidx
, &
ioc
, ioc.
buf
, ioc.
Àn
);

1061 i‡(
ªt
 < 0) {

1062 
	`DHD_ERROR
(("%s: setÖromisc %d failed\n",

1063 
	`dhd_i‚ame
(&
dhd
->
pub
, 
ifidx
), 
	`…oh32
(
Ælmu…i
)));

1065 
	}
}

1068 
	$_dhd_£t_mac_addªss
(
dhd_öfo_t
 *
dhd
, 
ifidx
, 
ëhî_addr
 *
addr
)

1070 
buf
[32];

1071 
wl_io˘l_t
 
ioc
;

1072 
ªt
;

1074 i‡(!
	`bcm_mkiov¨
("cur_ëhîaddr", (*)
addr
, 
ETHER_ADDR_LEN
, 
buf
, 32)) {

1075 
	`DHD_ERROR
(("%s: mkiov¨ faûed f‹ cur_ëhîaddr\n", 
	`dhd_i‚ame
(&
dhd
->
pub
, 
ifidx
)));

1078 
	`mem£t
(&
ioc
, 0, (ioc));

1079 
ioc
.
cmd
 = 
WLC_SET_VAR
;

1080 
ioc
.
buf
 = buf;

1081 
ioc
.
Àn
 = 32;

1082 
ioc
.
£t
 = 
TRUE
;

1084 
ªt
 = 
	`dhd_wl_io˘l
(&
dhd
->
pub
, 
ifidx
, &
ioc
, ioc.
buf
, ioc.
Àn
);

1085 i‡(
ªt
 < 0) {

1086 
	`DHD_ERROR
(("%s: së cur_ëhîadd∏Áûed\n", 
	`dhd_i‚ame
(&
dhd
->
pub
, 
ifidx
)));

1088 
	`mem˝y
(
dhd
->
iÊi°
[
ifidx
]->
√t
->
dev_addr
, 
addr
, 
ETHER_ADDR_LEN
);

1089 
	`mem˝y
(
dhd
->
pub
.
mac
.
o˘ë
, 
addr
, 
ETHER_ADDR_LEN
);

1092  
ªt
;

1093 
	}
}

1095 #ifde‡
SOFTAP


1096 
√t_devi˚
 *
≠_√t_dev
;

1097 
tsk_˘l_t
 
≠_ëh_˘l
;

1101 
	$dhd_›_if
(
dhd_if_t
 *
iÂ
)

1103 
dhd_öfo_t
 *
dhd
;

1104 
ªt
 = 0, 
îr
 = 0;

1105 #ifde‡
SOFTAP


1106 
Êags
;

1109 i‡(!
iÂ
 || !iÂ->
öfo
 || !iÂ->
idx
)

1111 
	`ASSERT
(
iÂ
 && iÂ->
öfo
 && iÂ->
idx
);

1112 
dhd
 = 
iÂ
->
öfo
;

1114 
	`DHD_TRACE
(("%s: idx %d, sèã %d\n", 
__FUNCTION__
, 
iÂ
->
idx
, iÂ->
°©e
));

1116 #ifde‡
WL_CFG80211


1117 i‡(
	`wl_cfg80211_is_¥ogªss_ifch™ge
())

1121 
iÂ
->
°©e
) {

1122 
DHD_IF_ADD
:

1127 i‡(
iÂ
->
√t
 !
NULL
) {

1128 
	`DHD_ERROR
(("%s: ERROR:Çetdev:%sálreadyÉxists,Åry free & unregister \n",

1129 
__FUNCTION__
, 
iÂ
->
√t
->
«me
));

1130 
	`√tif_°›_queue
(
iÂ
->
√t
);

1131 
	`uƒegi°î_√tdev
(
iÂ
->
√t
);

1132 
	`‰ì_√tdev
(
iÂ
->
√t
);

1135 i‡(!(
iÂ
->
√t
 = 
	`Æloc_ëhîdev
((
dhd
)))) {

1136 
	`DHD_ERROR
(("%s: OOM -áŒoc_ëhîdev\n", 
__FUNCTION__
));

1137 
ªt
 = -
ENOMEM
;

1139 i‡(
ªt
 == 0) {

1140 
	`°∫˝y
(
iÂ
->
√t
->
«me
, iÂ->«me, 
IFNAMSIZ
);

1141 
iÂ
->
√t
->
«me
[
IFNAMSIZ
 - 1] = '\0';

1142 
	`mem˝y
(
	`√tdev_¥iv
(
iÂ
->
√t
), &
dhd
, (dhd));

1143 #ifde‡
WL_CFG80211


1144 i‡(
dhd
->
dhd_°©e
 & 
DHD_ATTACH_STATE_CFG80211
)

1145 i‡(!
	`wl_cfg80211_nŸify_iÁdd
(
iÂ
->
√t
, iÂ->
idx
, iÂ->
bssidx
,

1146 (*)
dhd_√t_©èch
)) {

1147 
iÂ
->
°©e
 = 
DHD_IF_NONE
;

1148 
iÂ
->
evít2cfg80211
 = 
TRUE
;

1152 i‡((
îr
 = 
	`dhd_√t_©èch
(&
dhd
->
pub
, 
iÂ
->
idx
)) != 0) {

1153 
	`DHD_ERROR
(("%s: dhd_net_attach failed,Érr %d\n",

1154 
__FUNCTION__
, 
îr
));

1155 
ªt
 = -
EOPNOTSUPP
;

1157 #i‡
	`deföed
(
SOFTAP
)

1158 i‡(
≠_fw_lﬂded
 && !(
dhd
->
dhd_°©e
 & 
DHD_ATTACH_STATE_CFG80211
)) {

1160 
Êags
 = 
	`dhd_os_•ö_lock
(&
dhd
->
pub
);

1163 
≠_√t_dev
 = 
iÂ
->
√t
;

1165 
	`up
(&
≠_ëh_˘l
.
£ma
);

1166 
	`dhd_os_•ö_u∆ock
(&
dhd
->
pub
, 
Êags
);

1169 
	`DHD_TRACE
(("\n ====Öid:%x,Çet_device for if:%s created ===\n\n",

1170 
cuºít
->
pid
, 
iÂ
->
√t
->
«me
));

1171 
iÂ
->
°©e
 = 
DHD_IF_NONE
;

1175 
DHD_IF_DEL
:

1178 
iÂ
->
°©e
 = 
DHD_IF_DELETING
;

1179 i‡(
iÂ
->
√t
 !
NULL
) {

1180 
	`DHD_TRACE
(("\n%s: gŸ 'DHD_IF_DEL' sèã\n", 
__FUNCTION__
));

1181 
	`√tif_°›_queue
(
iÂ
->
√t
);

1182 #ifde‡
WL_CFG80211


1183 i‡(
dhd
->
dhd_°©e
 & 
DHD_ATTACH_STATE_CFG80211
) {

1184 
	`wl_cfg80211_ifdñ_›s
(
iÂ
->
√t
);

1187 
	`uƒegi°î_√tdev
(
iÂ
->
√t
);

1188 
ªt
 = 
DHD_DEL_IF
;

1189 #ifde‡
WL_CFG80211


1190 i‡(
dhd
->
dhd_°©e
 & 
DHD_ATTACH_STATE_CFG80211
) {

1191 
	`wl_cfg80211_nŸify_ifdñ
();

1196 
DHD_IF_DELETING
:

1199 
	`DHD_ERROR
(("%s: bad o∞%d\n", 
__FUNCTION__
, 
iÂ
->
°©e
));

1200 
	`ASSERT
(!
iÂ
->
°©e
);

1204 i‡(
ªt
 < 0) {

1205 
iÂ
->
£t_mu…iˇ°
 = 
FALSE
;

1206 i‡(
iÂ
->
√t
) {

1207 
	`‰ì_√tdev
(
iÂ
->
√t
);

1208 
iÂ
->
√t
 = 
NULL
;

1210 
dhd
->
iÊi°
[
iÂ
->
idx
] = 
NULL
;

1211 #ifde‡
SOFTAP


1212 
Êags
 = 
	`dhd_os_•ö_lock
(&
dhd
->
pub
);

1213 i‡(
iÂ
->
√t
 =
≠_√t_dev
)

1214 
≠_√t_dev
 = 
NULL
;

1215 
	`dhd_os_•ö_u∆ock
(&
dhd
->
pub
, 
Êags
);

1217 
	`MFREE
(
dhd
->
pub
.
osh
, 
iÂ
, (*ifp));

1219 
	}
}

1222 
	$_dhd_sysioc_thªad
(*
d©a
)

1224 
tsk_˘l_t
 *
tsk
 = (tsk_˘l_à*)
d©a
;

1225 
dhd_öfo_t
 *
dhd
 = (dhd_öfo_à*)
tsk
->
∑ª¡
;

1228 
i
;

1229 #ifde‡
SOFTAP


1230 
boﬁ
 
ö_≠
 = 
FALSE
;

1231 
Êags
;

1233 #i‚de‡
USE_KTHREAD_API


1234 
	`DAEMONIZE
("dhd_sysioc");

1236 
	`com∂ëe
(&
tsk
->
com∂ëed
);

1239 
	`down_öãºu±ibÀ
(&
tsk
->
£ma
) == 0) {

1241 
	`SMP_RD_BARRIER_DEPENDS
();

1242 i‡(
tsk
->
ãrmö©ed
) {

1246 
	`dhd_√t_if_lock_loˇl
(
dhd
);

1247 
	`DHD_OS_WAKE_LOCK
(&
dhd
->
pub
);

1249 
i
 = 0; i < 
DHD_MAX_IFS
; i++) {

1250 i‡(
dhd
->
iÊi°
[
i
]) {

1251 
	`DHD_TRACE
(("%s: i¡îÁ˚ %d\n", 
__FUNCTION__
, 
i
));

1252 #ifde‡
SOFTAP


1253 
Êags
 = 
	`dhd_os_•ö_lock
(&
dhd
->
pub
);

1254 
ö_≠
 = (
≠_√t_dev
 !
NULL
);

1255 
	`dhd_os_•ö_u∆ock
(&
dhd
->
pub
, 
Êags
);

1257 i‡(
dhd
->
iÊi°
[
i
] && dhd->iÊi°[i]->
°©e
)

1258 
	`dhd_›_if
(
dhd
->
iÊi°
[
i
]);

1260 i‡(
dhd
->
iÊi°
[
i
] =
NULL
) {

1261 
	`DHD_TRACE
(("\n\n %s: interface %d just beenÑemoved,"

1262 "!\n\n", 
__FUNCTION__
, 
i
));

1265 #ifde‡
SOFTAP


1266 i‡(
ö_≠
 && 
dhd
->
£t_maˇddªss
 =
i
+1) {

1267 
	`DHD_TRACE
(("attemptÅo set MAC for %s in AP Mode,"

1268 "blocked. \n", 
dhd
->
iÊi°
[
i
]->
√t
->
«me
));

1269 
dhd
->
£t_maˇddªss
 = 0;

1273 i‡(
ö_≠
 && 
dhd
->
iÊi°
[
i
]->
£t_mu…iˇ°
) {

1274 
	`DHD_TRACE
(("attemptÅo set MULTICASTÜist for %s"

1275 "ö AP Mode, blocked. \n", 
dhd
->
iÊi°
[
i
]->
√t
->
«me
));

1276 
dhd
->
iÊi°
[
i
]->
£t_mu…iˇ°
 = 
FALSE
;

1280 i‡(
dhd
->
pub
.
up
 == 0)

1282 i‡(
dhd
->
iÊi°
[
i
]->
£t_mu…iˇ°
) {

1283 
dhd
->
iÊi°
[
i
]->
£t_mu…iˇ°
 = 
FALSE
;

1284 
	`_dhd_£t_mu…iˇ°_li°
(
dhd
, 
i
);

1286 i‡(
dhd
->
£t_maˇddªss
 =
i
+1) {

1287 
dhd
->
£t_maˇddªss
 = 0;

1288 i‡(
	`_dhd_£t_mac_addªss
(
dhd
, 
i
, &dhd->
macvÆue
) == 0) {

1289 
	`DHD_INFO
((

1292 
	`DHD_ERROR
((

1299 
	`DHD_OS_WAKE_UNLOCK
(&
dhd
->
pub
);

1300 
	`dhd_√t_if_u∆ock_loˇl
(
dhd
);

1302 
	`DHD_TRACE
(("%s: st›≥d\n", 
__FUNCTION__
));

1303 
	`com∂ëe_™d_exô
(&
tsk
->
com∂ëed
, 0);

1304 
	}
}

1307 
	$dhd_£t_mac_addªss
(
√t_devi˚
 *
dev
, *
addr
)

1309 
ªt
 = 0;

1311 
dhd_öfo_t
 *
dhd
 = *(dhd_öfo_à**)
	`√tdev_¥iv
(
dev
);

1312 
sockaddr
 *
ß
 = (sockadd∏*)
addr
;

1313 
ifidx
;

1315 
ifidx
 = 
	`dhd_√t2idx
(
dhd
, 
dev
);

1316 i‡(
ifidx
 =
DHD_BAD_IF
)

1319 
	`ASSERT
(
dhd
->
thr_sysioc_˘l
.
thr_pid
 >= 0);

1320 
	`mem˝y
(&
dhd
->
macvÆue
, 
ß
->
ß_d©a
, 
ETHER_ADDR_LEN
);

1321 
dhd
->
£t_maˇddªss
 = 
ifidx
+1;

1322 
	`up
(&
dhd
->
thr_sysioc_˘l
.
£ma
);

1324  
ªt
;

1325 
	}
}

1328 
	$dhd_£t_mu…iˇ°_li°
(
√t_devi˚
 *
dev
)

1330 
dhd_öfo_t
 *
dhd
 = *(dhd_öfo_à**)
	`√tdev_¥iv
(
dev
);

1331 
ifidx
;

1333 
ifidx
 = 
	`dhd_√t2idx
(
dhd
, 
dev
);

1334 i‡(
ifidx
 =
DHD_BAD_IF
)

1337 
	`ASSERT
(
dhd
->
thr_sysioc_˘l
.
thr_pid
 >= 0);

1338 
dhd
->
iÊi°
[
ifidx
]->
£t_mu…iˇ°
 = 
TRUE
;

1339 
	`up
(&
dhd
->
thr_sysioc_˘l
.
£ma
);

1340 
	}
}

1342 #ifde‡
PROP_TXSTATUS


1344 
	$dhd_os_wlfc_block
(
dhd_pub_t
 *
pub
)

1346 
dhd_öfo_t
 *
di
 = (dhd_öfo_à*)(
pub
->
öfo
);

1347 
	`ASSERT
(
di
 !
NULL
);

1348 
	`•ö_lock_bh
(&
di
->
wlfc_•ölock
);

1350 
	}
}

1353 
	$dhd_os_wlfc_unblock
(
dhd_pub_t
 *
pub
)

1355 
dhd_öfo_t
 *
di
 = (dhd_öfo_à*)(
pub
->
öfo
);

1357 
	`ASSERT
(
di
 !
NULL
);

1358 
	`•ö_u∆ock_bh
(&
di
->
wlfc_•ölock
);

1360 
	}
}

1362 c⁄° 
uöt8
 
	gwme_fifo2ac
[] = { 0, 1, 2, 3, 1, 1 };

1363 
uöt8
 
	g¥io2fifo
[8] = { 1, 0, 0, 1, 2, 2, 3, 3 };

1364 
	#WME_PRIO2AC
(
¥io
Ë
wme_fifo2ac
[
¥io2fifo
[’rio)]]

	)

1368 
	$dhd_£ndpkt
(
dhd_pub_t
 *
dhdp
, 
ifidx
, *
pktbuf
)

1370 
ªt
;

1371 
dhd_öfo_t
 *
dhd
 = (dhd_öfo_à*)(
dhdp
->
öfo
);

1372 
ëhî_hódî
 *
eh
 = 
NULL
;

1375 i‡(!
dhdp
->
up
 || (dhdp->
bus°©e
 =
DHD_BUS_DOWN
)) {

1377 
	`PKTFREE
(
dhdp
->
osh
, 
pktbuf
, 
TRUE
);

1378  -
ENODEV
;

1382 i‡(
	`PKTLEN
(
dhdp
->
osh
, 
pktbuf
Ë>
ETHER_HDR_LEN
) {

1383 
uöt8
 *
pktd©a
 = (uöt8 *)
	`PKTDATA
(
dhdp
->
osh
, 
pktbuf
);

1384 
eh
 = (
ëhî_hódî
 *)
pktd©a
;

1386 i‡(
	`ETHER_ISMULTI
(
eh
->
ëhî_dho°
))

1387 
dhdp
->
tx_mu…iˇ°
++;

1388 i‡(
	`¡oh16
(
eh
->
ëhî_ty≥
Ë=
ETHER_TYPE_802_1X
)

1389 
	`©omic_öc
(&
dhd
->
≥nd_8021x_˙t
);

1391 
	`PKTFREE
(
dhd
->
pub
.
osh
, 
pktbuf
, 
TRUE
);

1392  
BCME_ERROR
;

1396 #i‚de‡
PKTPRIO_OVERRIDE


1397 i‡(
	`PKTPRIO
(
pktbuf
) == 0)

1399 
	`pkt£çrio
(
pktbuf
, 
FALSE
);

1401 #ifde‡
PROP_TXSTATUS


1402 i‡(
dhdp
->
wlfc_°©e
) {

1404 
	`DHD_PKTTAG_SETIF
(
	`PKTTAG
(
pktbuf
), 
ifidx
);

1407 
	`DHD_PKTTAG_SETDSTN
(
	`PKTTAG
(
pktbuf
), 
eh
->
ëhî_dho°
);

1410 i‡(
	`ETHER_ISMULTI
(
eh
->
ëhî_dho°
))

1412 
	`DHD_PKTTAG_SETFIFO
(
	`PKTTAG
(
pktbuf
), 
AC_COUNT
);

1414 
	`DHD_PKTTAG_SETFIFO
(
	`PKTTAG
(
pktbuf
), 
	`WME_PRIO2AC
(
	`PKTPRIO
(pktbuf)));

1418 
	`dhd_¥Ÿ_hdΩush
(
dhdp
, 
ifidx
, 
pktbuf
);

1421 #ifde‡
WLMEDIA_HTSF


1422 
	`dhd_htsf_addtxts
(
dhdp
, 
pktbuf
);

1424 #ifde‡
PROP_TXSTATUS


1425 
	`dhd_os_wlfc_block
(
dhdp
);

1426 i‡(
dhdp
->
wlfc_°©e
 && ((
©ho°_wl_°©us_öfo_t
*)dhdp->wlfc_°©e)->
¥›tx°©us_mode


1427 !
WLFC_FCMODE_NONE
) {

1428 
ªt
 = 
	`dhd_wlfc_íque_£ndq
(
dhdp
->
wlfc_°©e
, 
	`DHD_PKTTAG_FIFO
(
	`PKTTAG
(
pktbuf
)),

1429 
pktbuf
);

1430 
	`dhd_wlfc_commô_∑ckës
(
dhdp
->
wlfc_°©e
, (
f_commôpkt_t
)
dhd_bus_txd©a
,

1431 
dhdp
->
bus
);

1432 i‡(((
©ho°_wl_°©us_öfo_t
*)
dhdp
->
wlfc_°©e
)->
toggÀ_ho°_if
) {

1433 ((
©ho°_wl_°©us_öfo_t
*)
dhdp
->
wlfc_°©e
)->
toggÀ_ho°_if
 = 0;

1435 
	`dhd_os_wlfc_unblock
(
dhdp
);

1438 
	`dhd_os_wlfc_unblock
(
dhdp
);

1440 
ªt
 = 
	`dhd_bus_txd©a
(
dhdp
->
bus
, 
pktbuf
);

1443 
ªt
 = 
	`dhd_bus_txd©a
(
dhdp
->
bus
, 
pktbuf
);

1446  
ªt
;

1447 
	}
}

1450 
	$dhd_°¨t_xmô
(
sk_buff
 *
skb
, 
√t_devi˚
 *
√t
)

1452 
ªt
;

1453 *
pktbuf
;

1454 
dhd_öfo_t
 *
dhd
 = *(dhd_öfo_à**)
	`√tdev_¥iv
(
√t
);

1455 
ifidx
;

1456 #ifde‡
WLMEDIA_HTSF


1457 
uöt8
 
htsfdly°©_sz
 = 
dhd
->
pub
.htsfdlystat_sz;

1459 
uöt8
 
htsfdly°©_sz
 = 0;

1462 
	`DHD_TRACE
(("%s: E¡î\n", 
__FUNCTION__
));

1464 
	`DHD_OS_WAKE_LOCK
(&
dhd
->
pub
);

1467 i‡(
dhd
->
pub
.
bus°©e
 =
DHD_BUS_DOWN
 || dhd->pub.
h™g_was_£¡
) {

1468 
	`DHD_ERROR
(("%s: xmitÑejectedÖub.up=%d busstate=%d \n",

1469 
__FUNCTION__
, 
dhd
->
pub
.
up
, dhd->pub.
bus°©e
));

1470 
	`√tif_°›_queue
(
√t
);

1472 i‡(
dhd
->
pub
.
up
) {

1473 
	`DHD_ERROR
(("%s: EvíàHANG síàup\n", 
__FUNCTION__
));

1474 
	`√t_os_£nd_h™g_mesßge
(
√t
);

1476 
	`DHD_OS_WAKE_UNLOCK
(&
dhd
->
pub
);

1477 #i‡(
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2, 6, 20))

1478  -
ENODEV
;

1480  
NETDEV_TX_BUSY
;

1484 
ifidx
 = 
	`dhd_√t2idx
(
dhd
, 
√t
);

1485 i‡(
ifidx
 =
DHD_BAD_IF
) {

1486 
	`DHD_ERROR
(("%s: bad ifidx %d\n", 
__FUNCTION__
, 
ifidx
));

1487 
	`√tif_°›_queue
(
√t
);

1488 
	`DHD_OS_WAKE_UNLOCK
(&
dhd
->
pub
);

1489 #i‡(
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2, 6, 20))

1490  -
ENODEV
;

1492  
NETDEV_TX_BUSY
;

1498 i‡(
	`skb_hódroom
(
skb
Ë< 
dhd
->
pub
.
hdæí
 + 
htsfdly°©_sz
) {

1499 
sk_buff
 *
skb2
;

1501 
	`DHD_INFO
(("%s: insufficient headroom\n",

1502 
	`dhd_i‚ame
(&
dhd
->
pub
, 
ifidx
)));

1503 
dhd
->
pub
.
tx_ªÆloc
++;

1505 
skb2
 = 
	`skb_ªÆloc_hódroom
(
skb
, 
dhd
->
pub
.
hdæí
 + 
htsfdly°©_sz
);

1507 
	`dev_k‰ì_skb
(
skb
);

1508 i‡((
skb
 = 
skb2
Ë=
NULL
) {

1509 
	`DHD_ERROR
(("%s: skb_realloc_headroom failed\n",

1510 
	`dhd_i‚ame
(&
dhd
->
pub
, 
ifidx
)));

1511 
ªt
 = -
ENOMEM
;

1512 
d⁄e
;

1517 i‡(!(
pktbuf
 = 
	`PKTFRMNATIVE
(
dhd
->
pub
.
osh
, 
skb
))) {

1518 
	`DHD_ERROR
(("%s: PKTFRMNATIVE failed\n",

1519 
	`dhd_i‚ame
(&
dhd
->
pub
, 
ifidx
)));

1520 
	`dev_k‰ì_skb_™y
(
skb
);

1521 
ªt
 = -
ENOMEM
;

1522 
d⁄e
;

1524 #ifde‡
WLMEDIA_HTSF


1525 i‡(
htsfdly°©_sz
 && 
	`PKTLEN
(
dhd
->
pub
.
osh
, 
pktbuf
Ë>
ETHER_ADDR_LEN
) {

1526 
uöt8
 *
pktd©a
 = (uöt8 *)
	`PKTDATA
(
dhd
->
pub
.
osh
, 
pktbuf
);

1527 
ëhî_hódî
 *
eh
 = (ëhî_hódî *)
pktd©a
;

1529 i‡(!
	`ETHER_ISMULTI
(
eh
->
ëhî_dho°
) &&

1530 (
	`¡oh16
(
eh
->
ëhî_ty≥
Ë=
ETHER_TYPE_IP
)) {

1531 
eh
->
ëhî_ty≥
 = 
	`ht⁄16
(
ETHER_TYPE_BRCM_PKTDLYSTATS
);

1536 
ªt
 = 
	`dhd_£ndpkt
(&
dhd
->
pub
, 
ifidx
, 
pktbuf
);

1539 
d⁄e
:

1540 i‡(
ªt
)

1541 
dhd
->
pub
.
d°©s
.
tx_dr›≥d
++;

1543 
dhd
->
pub
.
tx_∑ckës
++;

1545 
	`DHD_OS_WAKE_UNLOCK
(&
dhd
->
pub
);

1548 #i‡(
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2, 6, 20))

1551  
NETDEV_TX_OK
;

1553 
	}
}

1556 
	$dhd_txÊowc⁄åﬁ
(
dhd_pub_t
 *
dhdp
, 
ifidx
, 
boﬁ
 
°©e
)

1558 
√t_devi˚
 *
√t
;

1559 
dhd_öfo_t
 *
dhd
 = 
dhdp
->
öfo
;

1560 
i
;

1562 
	`DHD_TRACE
(("%s: E¡î\n", 
__FUNCTION__
));

1564 
	`ASSERT
(
dhd
);

1566 i‡(
ifidx
 =
ALL_INTERFACES
) {

1568 
dhdp
->
txoff
 = 
°©e
;

1569 
i
 = 0; i < 
DHD_MAX_IFS
; i++) {

1570 i‡(
dhd
->
iÊi°
[
i
]) {

1571 
√t
 = 
dhd
->
iÊi°
[
i
]->net;

1572 i‡(
°©e
 =
ON
)

1573 
	`√tif_°›_queue
(
√t
);

1575 
	`√tif_wake_queue
(
√t
);

1580 i‡(
dhd
->
iÊi°
[
ifidx
]) {

1581 
√t
 = 
dhd
->
iÊi°
[
ifidx
]->net;

1582 i‡(
°©e
 =
ON
)

1583 
	`√tif_°›_queue
(
√t
);

1585 
	`√tif_wake_queue
(
√t
);

1588 
	}
}

1590 #ifde‡
DHD_RX_DUMP


1592 
uöt16
 
	mty≥
;

1593 c⁄° *
	m°r
;

1594 } 
	tPKTTYPE_INFO
;

1596 c⁄° 
PKTTYPE_INFO
 
	g∑ckë_ty≥_öfo
[] =

1598 { 
ETHER_TYPE_IP
, "IP" },

1599 { 
ETHER_TYPE_ARP
, "ARP" },

1600 { 
ETHER_TYPE_BRCM
, "BRCM" },

1601 { 
ETHER_TYPE_802_1X
, "802.1X" },

1602 { 
ETHER_TYPE_WAI
, "WAPI" },

1606 c⁄° *
	$_gë_∑ckë_ty≥_°r
(
uöt16
 
ty≥
)

1608 
i
;

1609 
n
 = (
∑ckë_ty≥_öfo
)/(packet_type_info[1]) - 1;

1611 
i
 = 0; i < 
n
; i++) {

1612 i‡(
∑ckë_ty≥_öfo
[
i
].
ty≥
 ==Åype)

1613  
∑ckë_ty≥_öfo
[
i
].
°r
;

1616  
∑ckë_ty≥_öfo
[
n
].
°r
;

1617 
	}
}

1621 
	$dhd_rx_‰ame
(
dhd_pub_t
 *
dhdp
, 
ifidx
, *
pktbuf
, 
numpkt
, 
uöt8
 
ch™
)

1623 
dhd_öfo_t
 *
dhd
 = (dhd_öfo_à*)
dhdp
->
öfo
;

1624 
sk_buff
 *
skb
;

1625 
uch¨
 *
ëh
;

1626 
uöt
 
Àn
;

1627 *
d©a
, *
≤ext
 = 
NULL
;

1628 
i
;

1629 
dhd_if_t
 *
iÂ
;

1630 
wl_evít_msg_t
 
evít
;

1631 
tout_rx
 = 0;

1632 
tout_˘æ
 = 0;

1634 #ifde‡
DHD_RX_DUMP


1635 #ifde‡
DHD_RX_FULL_DUMP


1636 
k
;

1638 *
dump_d©a
;

1639 
uöt16
 
¥Ÿocﬁ
;

1642 
	`DHD_TRACE
(("%s: E¡î\n", 
__FUNCTION__
));

1644 
i
 = 0; 
pktbuf
 && i < 
numpkt
; i++,Öktbu‡
≤ext
) {

1645 #ifde‡
WLBTAMP


1646 
ëhî_hódî
 *
eh
;

1647 
dŸ11_Œc_¢≠_hódî
 *
lsh
;

1650 
iÂ
 = 
dhd
->
iÊi°
[
ifidx
];

1651 i‡(
iÂ
 =
NULL
) {

1652 
	`DHD_ERROR
(("%s: ifp is NULL. dropÖacket\n",

1653 
__FUNCTION__
));

1654 
	`PKTFREE
(
dhdp
->
osh
, 
pktbuf
, 
TRUE
);

1657 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 0)

1659 #i‚de‡
PROP_TXSTATUS_VSDB


1660 i‡(!
iÂ
->
√t
 || iÂ->√t->
ªg_°©e
 !
NETREG_REGISTERED
) {

1662 i‡(!
iÂ
->
√t
 || iÂ->√t->
ªg_°©e
 !
NETREG_REGISTERED
 || !
dhd
->
pub
.
up
) {

1664 
	`DHD_ERROR
(("%s:Çet device is NOTÑegistered yet. dropÖacket\n",

1665 
__FUNCTION__
));

1666 
	`PKTFREE
(
dhdp
->
osh
, 
pktbuf
, 
TRUE
);

1671 
≤ext
 = 
	`PKTNEXT
(
dhdp
->
osh
, 
pktbuf
);

1672 
	`PKTSETNEXT
(
wl
->
sh
.
osh
, 
pktbuf
, 
NULL
);

1674 #ifde‡
WLBTAMP


1675 
eh
 = (
ëhî_hódî
 *)
	`PKTDATA
(
wl
->
sh
.
osh
, 
pktbuf
);

1676 
lsh
 = (
dŸ11_Œc_¢≠_hódî
 *)&
eh
[1];

1678 i‡((
	`¡oh16
(
eh
->
ëhî_ty≥
Ë< 
ETHER_TYPE_MIN
) &&

1679 (
	`PKTLEN
(
wl
->
sh
.
osh
, 
pktbuf
Ë>
RFC1042_HDR_LEN
) &&

1680 
	`bcmp
(
lsh
, 
BT_SIG_SNAP_MPROT
, 
DOT11_LLC_SNAP_HDR_LEN
 - 2) == 0 &&

1681 
lsh
->
ty≥
 =
	`HTON16
(
BTA_PROT_L2CAP
)) {

1682 
amp_hci_ACL_d©a_t
 *
ACL_d©a
 = (amp_hci_ACL_data_t *)

1683 ((
uöt8
 *)
eh
 + 
RFC1042_HDR_LEN
);

1684 
ACL_d©a
 = 
NULL
;

1688 #ifde‡
PROP_TXSTATUS


1689 i‡(
dhdp
->
wlfc_°©e
 && 
	`PKTLEN
(
wl
->
sh
.
osh
, 
pktbuf
) == 0) {

1694 ((
©ho°_wl_°©us_öfo_t
*)
dhdp
->
wlfc_°©e
)->
°©s
.
wlfc_hódî_⁄ly_pkt
++;

1695 
	`PKTFREE
(
dhdp
->
osh
, 
pktbuf
, 
TRUE
);

1700 
skb
 = 
	`PKTTONATIVE
(
dhdp
->
osh
, 
pktbuf
);

1711 
ëh
 = 
skb
->
d©a
;

1712 
Àn
 = 
skb
->len;

1714 #ifde‡
DHD_RX_DUMP


1715 
dump_d©a
 = 
skb
->
d©a
;

1716 
¥Ÿocﬁ
 = (
dump_d©a
[12] << 8) | dump_data[13];

1717 
	`DHD_ERROR
(("RX DUMP - %s\n", 
	`_gë_∑ckë_ty≥_°r
(
¥Ÿocﬁ
)));

1719 #ifde‡
DHD_RX_FULL_DUMP


1720 i‡(
¥Ÿocﬁ
 !
ETHER_TYPE_BRCM
) {

1721 
k
 = 0; k < 
skb
->
Àn
; k++) {

1722 
	`DHD_ERROR
(("%02X ", 
dump_d©a
[
k
]));

1723 i‡((
k
 & 15) == 15)

1724 
	`DHD_ERROR
(("\n"));

1726 
	`DHD_ERROR
(("\n"));

1730 i‡(
¥Ÿocﬁ
 !
ETHER_TYPE_BRCM
) {

1731 i‡(
dump_d©a
[0] == 0xFF) {

1732 
	`DHD_ERROR
(("%s: BROADCAST\n", 
__FUNCTION__
));

1734 i‡((
dump_d©a
[12] == 8) &&

1735 (
dump_d©a
[13] == 6)) {

1736 
	`DHD_ERROR
(("%s: ARP %d\n",

1737 
__FUNCTION__
, 
dump_d©a
[0x15]));

1739 } i‡(
dump_d©a
[0] & 1) {

1740 
	`DHD_ERROR
(("%s: MULTICAST: " 
MACDBG
 "\n",

1741 
__FUNCTION__
, 
	`MAC2STRDBG
(
dump_d©a
)));

1744 i‡(
¥Ÿocﬁ
 =
ETHER_TYPE_802_1X
) {

1745 
	`DHD_ERROR
(("ETHER_TYPE_802_1X: "

1747 
dump_d©a
[14], dump_data[15],

1748 
dump_d©a
[30]));

1754 
iÂ
 = 
dhd
->
iÊi°
[
ifidx
];

1755 i‡(
iÂ
 =
NULL
)

1756 
iÂ
 = 
dhd
->
iÊi°
[0];

1758 
	`ASSERT
(
iÂ
);

1759 
skb
->
dev
 = 
iÂ
->
√t
;

1760 
skb
->
¥Ÿocﬁ
 = 
	`ëh_ty≥_å™s
(skb, skb->
dev
);

1762 i‡(
skb
->
pkt_ty≥
 =
PACKET_MULTICAST
) {

1763 
dhd
->
pub
.
rx_mu…iˇ°
++;

1766 
skb
->
d©a
 = 
ëh
;

1767 
skb
->
Àn
 =Üen;

1769 #ifde‡
WLMEDIA_HTSF


1770 
	`dhd_htsf_addrxts
(
dhdp
, 
pktbuf
);

1773 
	`skb_puŒ
(
skb
, 
ETH_HLEN
);

1776 i‡(
	`¡oh16
(
skb
->
¥Ÿocﬁ
Ë=
ETHER_TYPE_BRCM
) {

1777 
	`dhd_wl_ho°_evít
(
dhd
, &
ifidx
,

1778 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 22)

1779 
skb
->
mac_hódî
,

1781 
skb
->
mac
.
øw
,

1783 &
evít
,

1784 &
d©a
);

1786 
	`wl_evít_to_ho°_‹dî
(&
evít
);

1787 i‡(!
tout_˘æ
)

1788 
tout_˘æ
 = 
DHD_PACKET_TIMEOUT_MS
;

1789 #ifde‡
WLBTAMP


1790 i‡(
evít
.
evít_ty≥
 =
WLC_E_BTA_HCI_EVENT
) {

1791 
	`dhd_bè_d€vt
(
dhdp
, 
d©a
, 
evít
.
d©Æí
);

1795 #i‡
	`deföed
(
PNO_SUPPORT
)

1796 i‡(
evít
.
evít_ty≥
 =
WLC_E_PFN_NET_FOUND
) {

1798 
tout_˘æ
 = 
CUSTOM_PNO_EVENT_LOCK_xTIME
 * 
DHD_PACKET_TIMEOUT_MS
;

1802 #ifde‡
DHD_DONOT_FORWARD_BCMEVENT_AS_NETWORK_PKT


1803 
	`PKTFREE
(
dhdp
->
osh
, 
pktbuf
, 
TRUE
);

1807 
tout_rx
 = 
DHD_PACKET_TIMEOUT_MS
;

1810 
	`ASSERT
(
ifidx
 < 
DHD_MAX_IFS
 && 
dhd
->
iÊi°
[ifidx]);

1811 i‡(
dhd
->
iÊi°
[
ifidx
] && !dhd->iÊi°[ifidx]->
°©e
)

1812 
iÂ
 = 
dhd
->
iÊi°
[
ifidx
];

1814 i‡(
iÂ
->
√t
)

1815 
iÂ
->
√t
->
œ°_rx
 = 
jiffõs
;

1817 
dhdp
->
d°©s
.
rx_byãs
 +
skb
->
Àn
;

1818 
dhdp
->
rx_∑ckës
++;

1820 i‡(
	`ö_öãºu±
()) {

1821 
	`√tif_rx
(
skb
);

1829 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 0)

1830 
	`√tif_rx_ni
(
skb
);

1832 
ul⁄g
 
Êags
;

1833 
	`√tif_rx
(
skb
);

1834 
	`loˇl_úq_ßve
(
Êags
);

1835 
	`RAISE_RX_SOFTIRQ
();

1836 
	`loˇl_úq_ª°‹e
(
Êags
);

1841 
	`DHD_OS_WAKE_LOCK_RX_TIMEOUT_ENABLE
(
dhdp
, 
tout_rx
);

1842 
	`DHD_OS_WAKE_LOCK_CTRL_TIMEOUT_ENABLE
(
dhdp
, 
tout_˘æ
);

1843 
	}
}

1846 
	$dhd_evít
(
dhd_öfo
 *
dhd
, *
evpkt
, 
evÀn
, 
ifidx
)

1850 
	}
}

1853 
	$dhd_txcom∂ëe
(
dhd_pub_t
 *
dhdp
, *
txp
, 
boﬁ
 
suc˚ss
)

1855 
dhd_öfo_t
 *
dhd
 = (dhd_öfo_à*)(
dhdp
->
öfo
);

1856 
ëhî_hódî
 *
eh
;

1857 
uöt16
 
ty≥
;

1858 #ifde‡
WLBTAMP


1859 
uöt
 
Àn
;

1862 
	`dhd_¥Ÿ_hdΩuŒ
(
dhdp
, 
NULL
, 
txp
, NULL, NULL);

1864 
eh
 = (
ëhî_hódî
 *)
	`PKTDATA
(
dhdp
->
osh
, 
txp
);

1865 
ty≥
 = 
	`¡oh16
(
eh
->
ëhî_ty≥
);

1867 i‡(
ty≥
 =
ETHER_TYPE_802_1X
)

1868 
	`©omic_dec
(&
dhd
->
≥nd_8021x_˙t
);

1870 #ifde‡
WLBTAMP


1874 
Àn
 = 
	`PKTLEN
(
dhdp
->
osh
, 
txp
);

1877 i‡((
ty≥
 < 
ETHER_TYPE_MIN
Ë&& (
Àn
 >
RFC1042_HDR_LEN
)) {

1878 
dŸ11_Œc_¢≠_hódî
 *
lsh
 = (dŸ11_Œc_¢≠_hódî *)&
eh
[1];

1880 i‡(
	`bcmp
(
lsh
, 
BT_SIG_SNAP_MPROT
, 
DOT11_LLC_SNAP_HDR_LEN
 - 2) == 0 &&

1881 
	`¡oh16
(
lsh
->
ty≥
Ë=
BTA_PROT_L2CAP
) {

1883 
	`dhd_bè_tx_hcid©a_com∂ëe
(
dhdp
, 
txp
, 
suc˚ss
);

1887 
	}
}

1889 
√t_devi˚_°©s
 *

1890 
	$dhd_gë_°©s
(
√t_devi˚
 *
√t
)

1892 
dhd_öfo_t
 *
dhd
 = *(dhd_öfo_à**)
	`√tdev_¥iv
(
√t
);

1893 
dhd_if_t
 *
iÂ
;

1894 
ifidx
;

1896 
	`DHD_TRACE
(("%s: E¡î\n", 
__FUNCTION__
));

1898 
ifidx
 = 
	`dhd_√t2idx
(
dhd
, 
√t
);

1899 i‡(
ifidx
 =
DHD_BAD_IF
) {

1900 
	`DHD_ERROR
(("%s: BAD_IF\n", 
__FUNCTION__
));

1901  
NULL
;

1904 
iÂ
 = 
dhd
->
iÊi°
[
ifidx
];

1905 
	`ASSERT
(
dhd
 && 
iÂ
);

1907 i‡(
dhd
->
pub
.
up
) {

1909 
	`dhd_¥Ÿ_d°©s
(&
dhd
->
pub
);

1913 
iÂ
->
°©s
.
rx_∑ckës
 = 
dhd
->
pub
.
d°©s
.rx_packets;

1914 
iÂ
->
°©s
.
tx_∑ckës
 = 
dhd
->
pub
.
d°©s
.tx_packets;

1915 
iÂ
->
°©s
.
rx_byãs
 = 
dhd
->
pub
.
d°©s
.rx_bytes;

1916 
iÂ
->
°©s
.
tx_byãs
 = 
dhd
->
pub
.
d°©s
.tx_bytes;

1917 
iÂ
->
°©s
.
rx_îr‹s
 = 
dhd
->
pub
.
d°©s
.rx_errors;

1918 
iÂ
->
°©s
.
tx_îr‹s
 = 
dhd
->
pub
.
d°©s
.tx_errors;

1919 
iÂ
->
°©s
.
rx_dr›≥d
 = 
dhd
->
pub
.
d°©s
.rx_dropped;

1920 
iÂ
->
°©s
.
tx_dr›≥d
 = 
dhd
->
pub
.
d°©s
.tx_dropped;

1921 
iÂ
->
°©s
.
mu…iˇ°
 = 
dhd
->
pub
.
d°©s
.multicast;

1923  &
iÂ
->
°©s
;

1924 
	}
}

1926 #ifde‡
DHDTHREAD


1928 
	$dhd_w©chdog_thªad
(*
d©a
)

1930 
tsk_˘l_t
 *
tsk
 = (tsk_˘l_à*)
d©a
;

1931 
dhd_öfo_t
 *
dhd
 = (dhd_öfo_à*)
tsk
->
∑ª¡
;

1935 i‡(
dhd_w©chdog_¥io
 > 0) {

1936 
sched_∑øm
 
∑øm
;

1937 
∑øm
.
sched_¥i‹ôy
 = (
dhd_w©chdog_¥io
 < 
MAX_RT_PRIO
)?

1938 
dhd_w©chdog_¥io
:(
MAX_RT_PRIO
-1);

1939 
	`£tScheduÀr
(
cuºít
, 
SCHED_FIFO
, &
∑øm
);

1941 #i‚de‡
USE_KTHREAD_API


1942 
	`DAEMONIZE
("dhd_watchdog");

1945 
	`com∂ëe
(&
tsk
->
com∂ëed
);

1949 i‡(
	`down_öãºu±ibÀ
 (&
tsk
->
£ma
) == 0) {

1950 
Êags
;

1951 
jiffõs_©_°¨t
 = 
jiffõs
;

1952 
time_œp£
;

1954 
	`SMP_RD_BARRIER_DEPENDS
();

1955 i‡(
tsk
->
ãrmö©ed
) {

1959 
	`dhd_os_sdlock
(&
dhd
->
pub
);

1960 i‡(
dhd
->
pub
.
d⁄gÀ_ª£t
 =
FALSE
) {

1961 
	`DHD_TIMER
(("%s:\n", 
__FUNCTION__
));

1964 
	`dhd_bus_w©chdog
(&
dhd
->
pub
);

1966 
Êags
 = 
	`dhd_os_•ö_lock
(&
dhd
->
pub
);

1968 
dhd
->
pub
.
tick˙t
++;

1969 
time_œp£
 = 
jiffõs
 - 
jiffõs_©_°¨t
;

1972 i‡(
dhd
->
wd_timî_vÆid
)

1973 
	`mod_timî
(&
dhd
->
timî
,

1974 
jiffõs
 +

1975 
	`m£cs_to_jiffõs
(
dhd_w©chdog_ms
) -

1976 
	`mö
(
	`m£cs_to_jiffõs
(
dhd_w©chdog_ms
), 
time_œp£
));

1977 
	`dhd_os_•ö_u∆ock
(&
dhd
->
pub
, 
Êags
);

1979 
	`dhd_os_sdu∆ock
(&
dhd
->
pub
);

1984 
	`com∂ëe_™d_exô
(&
tsk
->
com∂ëed
, 0);

1985 
	}
}

1988 
	$dhd_w©chdog
(
ul⁄g
 
d©a
)

1990 
dhd_öfo_t
 *
dhd
 = (dhd_öfo_à*)
d©a
;

1991 
Êags
;

1993 i‡(
dhd
->
pub
.
d⁄gÀ_ª£t
) {

1997 #ifde‡
DHDTHREAD


1998 i‡(
dhd
->
thr_wdt_˘l
.
thr_pid
 >= 0) {

1999 
	`up
(&
dhd
->
thr_wdt_˘l
.
£ma
);

2004 
	`dhd_os_sdlock
(&
dhd
->
pub
);

2006 
	`dhd_bus_w©chdog
(&
dhd
->
pub
);

2008 
Êags
 = 
	`dhd_os_•ö_lock
(&
dhd
->
pub
);

2010 
dhd
->
pub
.
tick˙t
++;

2013 i‡(
dhd
->
wd_timî_vÆid
)

2014 
	`mod_timî
(&
dhd
->
timî
, 
jiffõs
 + 
	`m£cs_to_jiffõs
(
dhd_w©chdog_ms
));

2015 
	`dhd_os_•ö_u∆ock
(&
dhd
->
pub
, 
Êags
);

2016 
	`dhd_os_sdu∆ock
(&
dhd
->
pub
);

2017 
	}
}

2019 #ifde‡
DHDTHREAD


2021 
	$dhd_dpc_thªad
(*
d©a
)

2023 
tsk_˘l_t
 *
tsk
 = (tsk_˘l_à*)
d©a
;

2024 
dhd_öfo_t
 *
dhd
 = (dhd_öfo_à*)
tsk
->
∑ª¡
;

2029 i‡(
dhd_dpc_¥io
 > 0)

2031 
sched_∑øm
 
∑øm
;

2032 
∑øm
.
sched_¥i‹ôy
 = (
dhd_dpc_¥io
 < 
MAX_RT_PRIO
)?dhd_dpc_prio:(MAX_RT_PRIO-1);

2033 
	`£tScheduÀr
(
cuºít
, 
SCHED_FIFO
, &
∑øm
);

2035 #i‚de‡
USE_KTHREAD_API


2036 
	`DAEMONIZE
("dhd_dpc");

2040 
	`com∂ëe
(&
tsk
->
com∂ëed
);

2045 i‡(
	`down_öãºu±ibÀ
(&
tsk
->
£ma
) == 0) {

2047 
	`SMP_RD_BARRIER_DEPENDS
();

2048 i‡(
tsk
->
ãrmö©ed
) {

2053 i‡(
dhd
->
pub
.
bus°©e
 !
DHD_BUS_DOWN
) {

2054 i‡(
	`dhd_bus_dpc
(
dhd
->
pub
.
bus
)) {

2055 
	`up
(&
tsk
->
£ma
);

2058 
	`DHD_OS_WAKE_UNLOCK
(&
dhd
->
pub
);

2061 i‡(
dhd
->
pub
.
up
)

2062 
	`dhd_bus_°›
(
dhd
->
pub
.
bus
, 
TRUE
);

2063 
	`DHD_OS_WAKE_UNLOCK
(&
dhd
->
pub
);

2070 
	`com∂ëe_™d_exô
(&
tsk
->
com∂ëed
, 0);

2071 
	}
}

2075 
	$dhd_dpc
(
ul⁄g
 
d©a
)

2077 
dhd_öfo_t
 *
dhd
;

2079 
dhd
 = (
dhd_öfo_t
 *)
d©a
;

2086 i‡(
dhd
->
pub
.
bus°©e
 !
DHD_BUS_DOWN
) {

2087 i‡(
	`dhd_bus_dpc
(
dhd
->
pub
.
bus
))

2088 
	`èskÀt_scheduÀ
(&
dhd
->
èskÀt
);

2090 
	`DHD_OS_WAKE_UNLOCK
(&
dhd
->
pub
);

2092 
	`dhd_bus_°›
(
dhd
->
pub
.
bus
, 
TRUE
);

2093 
	`DHD_OS_WAKE_UNLOCK
(&
dhd
->
pub
);

2095 
	}
}

2098 
	$dhd_sched_dpc
(
dhd_pub_t
 *
dhdp
)

2100 
dhd_öfo_t
 *
dhd
 = (dhd_öfo_à*)
dhdp
->
öfo
;

2102 
	`DHD_OS_WAKE_LOCK
(
dhdp
);

2103 #ifde‡
DHDTHREAD


2104 i‡(
dhd
->
thr_dpc_˘l
.
thr_pid
 >= 0) {

2105 
	`up
(&
dhd
->
thr_dpc_˘l
.
£ma
);

2110 i‡(
dhd
->
dhd_èskÀt_¸óã
)

2111 
	`èskÀt_scheduÀ
(&
dhd
->
èskÀt
);

2112 
	}
}

2114 #ifde‡
TOE


2117 
	$dhd_t€_gë
(
dhd_öfo_t
 *
dhd
, 
ifidx
, 
uöt32
 *
t€_ﬁ
)

2119 
wl_io˘l_t
 
ioc
;

2120 
buf
[32];

2121 
ªt
;

2123 
	`mem£t
(&
ioc
, 0, (ioc));

2125 
ioc
.
cmd
 = 
WLC_GET_VAR
;

2126 
ioc
.
buf
 = buf;

2127 
ioc
.
Àn
 = (
uöt
)(
buf
);

2128 
ioc
.
£t
 = 
FALSE
;

2130 
	`°∫˝y
(
buf
, "toe_ol", (buf) - 1);

2131 
buf
[(buf) - 1] = '\0';

2132 i‡((
ªt
 = 
	`dhd_wl_io˘l
(&
dhd
->
pub
, 
ifidx
, &
ioc
, ioc.
buf
, ioc.
Àn
)) < 0) {

2134 i‡(
ªt
 =-
EIO
) {

2135 
	`DHD_ERROR
(("%s:ÅoeÇot supported by device\n",

2136 
	`dhd_i‚ame
(&
dhd
->
pub
, 
ifidx
)));

2137  -
EOPNOTSUPP
;

2140 
	`DHD_INFO
(("%s: couldÇŸ gëÅ€_ﬁ:Ñë=%d\n", 
	`dhd_i‚ame
(&
dhd
->
pub
, 
ifidx
), 
ªt
));

2141  
ªt
;

2144 
	`mem˝y
(
t€_ﬁ
, 
buf
, (
uöt32
));

2146 
	}
}

2150 
	$dhd_t€_£t
(
dhd_öfo_t
 *
dhd
, 
ifidx
, 
uöt32
 
t€_ﬁ
)

2152 
wl_io˘l_t
 
ioc
;

2153 
buf
[32];

2154 
t€
, 
ªt
;

2156 
	`mem£t
(&
ioc
, 0, (ioc));

2158 
ioc
.
cmd
 = 
WLC_SET_VAR
;

2159 
ioc
.
buf
 = buf;

2160 
ioc
.
Àn
 = (
uöt
)(
buf
);

2161 
ioc
.
£t
 = 
TRUE
;

2165 
	`°∫˝y
(
buf
, "toe_ol", (buf) - 1);

2166 
buf
[(buf) - 1] = '\0';

2167 
	`mem˝y
(&
buf
[("t€_ﬁ")], &
t€_ﬁ
, (
uöt32
));

2169 i‡((
ªt
 = 
	`dhd_wl_io˘l
(&
dhd
->
pub
, 
ifidx
, &
ioc
, ioc.
buf
, ioc.
Àn
)) < 0) {

2170 
	`DHD_ERROR
(("%s: couldÇot setÅoe_ol:Ñet=%d\n",

2171 
	`dhd_i‚ame
(&
dhd
->
pub
, 
ifidx
), 
ªt
));

2172  
ªt
;

2177 
t€
 = (
t€_ﬁ
 != 0);

2179 
	`°r˝y
(
buf
, "toe");

2180 
	`mem˝y
(&
buf
[("t€")], &
t€
, (
uöt32
));

2182 i‡((
ªt
 = 
	`dhd_wl_io˘l
(&
dhd
->
pub
, 
ifidx
, &
ioc
, ioc.
buf
, ioc.
Àn
)) < 0) {

2183 
	`DHD_ERROR
(("%s: couldÇŸ sëÅ€:Ñë=%d\n", 
	`dhd_i‚ame
(&
dhd
->
pub
, 
ifidx
), 
ªt
));

2184  
ªt
;

2188 
	}
}

2191 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2, 6, 24)

2193 
	$dhd_ëhtoﬁ_gë_drvöfo
(
√t_devi˚
 *
√t
, 
ëhtoﬁ_drvöfo
 *
öfo
)

2195 
dhd_öfo_t
 *
dhd
 = *(dhd_öfo_à**)
	`√tdev_¥iv
(
√t
);

2197 
	`¢¥ötf
(
öfo
->
drivî
, (info->driver), "wl");

2198 
	`¢¥ötf
(
öfo
->
vîsi⁄
, (öfo->vîsi⁄), "%lu", 
dhd
->
pub
.
drv_vîsi⁄
);

2199 
	}
}

2201 
ëhtoﬁ_›s
 
	gdhd_ëhtoﬁ_›s
 = {

2202 .
gë_drvöfo
 = 
dhd_ëhtoﬁ_gë_drvöfo


2207 #i‡
LINUX_VERSION_CODE
 > 
KERNEL_VERSION
(2, 4, 2)

2209 
	$dhd_ëhtoﬁ
(
dhd_öfo_t
 *
dhd
, *
uaddr
)

2211 
ëhtoﬁ_drvöfo
 
öfo
;

2212 
drv«me
[(
öfo
.
drivî
)];

2213 
uöt32
 
cmd
;

2214 #ifde‡
TOE


2215 
ëhtoﬁ_vÆue
 
ed©a
;

2216 
uöt32
 
t€_cm≤t
, 
csum_dú
;

2217 
ªt
;

2220 
	`DHD_TRACE
(("%s: E¡î\n", 
__FUNCTION__
));

2223 i‡(
	`c›y_‰om_u£r
(&
cmd
, 
uaddr
,  (
uöt32
)))

2224  -
EFAULT
;

2226 
cmd
) {

2227 
ETHTOOL_GDRVINFO
:

2229 i‡(
	`c›y_‰om_u£r
(&
öfo
, 
uaddr
, (info)))

2230  -
EFAULT
;

2231 
	`°∫˝y
(
drv«me
, 
öfo
.
drivî
, (info.driver));

2232 
drv«me
[(
öfo
.
drivî
)-1] = '\0';

2235 
	`mem£t
(&
öfo
, 0, (info));

2236 
öfo
.
cmd
 = cmd;

2239 i‡(
	`°rcmp
(
drv«me
, "?dhd") == 0) {

2240 
	`¢¥ötf
(
öfo
.
drivî
, (info.driver), "dhd");

2241 
	`°∫˝y
(
öfo
.
vîsi⁄
, 
EPI_VERSION_STR
, (info.version) - 1);

2242 
öfo
.
vîsi⁄
[(info.version) - 1] = '\0';

2246 i‡(!
dhd
->
pub
.
up
) {

2247 
	`DHD_ERROR
(("%s: d⁄gÀ i†nŸ up\n", 
__FUNCTION__
));

2248  -
ENODEV
;

2252 i‡(
dhd
->
pub
.
iswl
)

2253 
	`¢¥ötf
(
öfo
.
drivî
, (info.driver), "wl");

2255 
	`¢¥ötf
(
öfo
.
drivî
, (info.driver), "xx");

2257 
	`¢¥ötf
(
öfo
.
vîsi⁄
, (öfo.vîsi⁄), "%lu", 
dhd
->
pub
.
drv_vîsi⁄
);

2258 i‡(
	`c›y_to_u£r
(
uaddr
, &
öfo
, (info)))

2259  -
EFAULT
;

2260 
	`DHD_CTL
(("%s: giví %*s,Ñëu∫ög %s\n", 
__FUNCTION__
,

2261 ()(
drv«me
), drv«me, 
öfo
.
drivî
));

2264 #ifde‡
TOE


2266 
ETHTOOL_GRXCSUM
:

2267 
ETHTOOL_GTXCSUM
:

2268 i‡((
ªt
 = 
	`dhd_t€_gë
(
dhd
, 0, &
t€_cm≤t
)) < 0)

2269  
ªt
;

2271 
csum_dú
 = (
cmd
 =
ETHTOOL_GTXCSUM
Ë? 
TOE_TX_CSUM_OL
 : 
TOE_RX_CSUM_OL
;

2273 
ed©a
.
cmd
 = cmd;

2274 
ed©a
.
d©a
 = (
t€_cm≤t
 & 
csum_dú
) ? 1 : 0;

2276 i‡(
	`c›y_to_u£r
(
uaddr
, &
ed©a
, (edata)))

2277  -
EFAULT
;

2281 
ETHTOOL_SRXCSUM
:

2282 
ETHTOOL_STXCSUM
:

2283 i‡(
	`c›y_‰om_u£r
(&
ed©a
, 
uaddr
, (edata)))

2284  -
EFAULT
;

2287 i‡((
ªt
 = 
	`dhd_t€_gë
(
dhd
, 0, &
t€_cm≤t
)) < 0)

2288  
ªt
;

2290 
csum_dú
 = (
cmd
 =
ETHTOOL_STXCSUM
Ë? 
TOE_TX_CSUM_OL
 : 
TOE_RX_CSUM_OL
;

2292 i‡(
ed©a
.
d©a
 != 0)

2293 
t€_cm≤t
 |
csum_dú
;

2295 
t€_cm≤t
 &~
csum_dú
;

2297 i‡((
ªt
 = 
	`dhd_t€_£t
(
dhd
, 0, 
t€_cm≤t
)) < 0)

2298  
ªt
;

2301 i‡(
cmd
 =
ETHTOOL_STXCSUM
) {

2302 i‡(
ed©a
.
d©a
)

2303 
dhd
->
iÊi°
[0]->
√t
->
„©uªs
 |
NETIF_F_IP_CSUM
;

2305 
dhd
->
iÊi°
[0]->
√t
->
„©uªs
 &~
NETIF_F_IP_CSUM
;

2312  -
EOPNOTSUPP
;

2316 
	}
}

2319 
boﬁ
 
	$dhd_check_h™g
(
√t_devi˚
 *
√t
, 
dhd_pub_t
 *
dhdp
, 
îr‹
)

2321 
dhd_öfo_t
 * 
dhd
;

2323 i‡(!
dhdp
)

2324  
FALSE
;

2326 
dhd
 = (
dhd_öfo_t
 *)
dhdp
->
öfo
;

2327 i‡(
dhd
->
thr_sysioc_˘l
.
thr_pid
 < 0) {

2328 
	`DHD_ERROR
(("%†: skù≥d duêtÿ√g©ivêpid - u∆ﬂdög?\n", 
__FUNCTION__
));

2329  
FALSE
;

2332 i‡((
îr‹
 =-
ETIMEDOUT
Ë|| (îr‹ =-
EREMOTEIO
) ||

2333 ((
dhdp
->
bus°©e
 =
DHD_BUS_DOWN
Ë&& (!dhdp->
d⁄gÀ_ª£t
))) {

2334 
	`DHD_ERROR
(("%s: EvíàHANG síd u∞duêtÿÑe=%dÅe=%dÉ=%d s=%d\n", 
__FUNCTION__
,

2335 
dhdp
->
rx˙t_timeout
, dhdp->
tx˙t_timeout
, 
îr‹
, dhdp->
bus°©e
));

2336 
	`√t_os_£nd_h™g_mesßge
(
√t
);

2337  
TRUE
;

2339  
FALSE
;

2340 
	}
}

2343 
	$dhd_io˘l_íåy
(
√t_devi˚
 *
√t
, 
i‰eq
 *
i‰
, 
cmd
)

2345 
dhd_öfo_t
 *
dhd
 = *(dhd_öfo_à**)
	`√tdev_¥iv
(
√t
);

2346 
dhd_io˘l_t
 
ioc
;

2347 
bcmîr‹
 = 0;

2348 
buÊí
 = 0;

2349 *
buf
 = 
NULL
;

2350 
uöt
 
drivî
 = 0;

2351 
ifidx
;

2352 
ªt
;

2354 
	`DHD_OS_WAKE_LOCK
(&
dhd
->
pub
);

2357 i‡(
dhd
->
pub
.
h™g_was_£¡
) {

2358 
	`DHD_ERROR
(("%s: HANG wa†£¡ u∞óæõr\n", 
__FUNCTION__
));

2359 
	`DHD_OS_WAKE_LOCK_CTRL_TIMEOUT_ENABLE
(&
dhd
->
pub
, 
DHD_EVENT_TIMEOUT_MS
);

2360 
	`DHD_OS_WAKE_UNLOCK
(&
dhd
->
pub
);

2361  
	`OSL_ERROR
(
BCME_DONGLE_DOWN
);

2364 
ifidx
 = 
	`dhd_√t2idx
(
dhd
, 
√t
);

2365 
	`DHD_TRACE
(("%s: ifidx %d, cmd 0x%04x\n", 
__FUNCTION__
, 
ifidx
, 
cmd
));

2367 i‡(
ifidx
 =
DHD_BAD_IF
) {

2368 
	`DHD_ERROR
(("%s: BAD IF\n", 
__FUNCTION__
));

2369 
	`DHD_OS_WAKE_UNLOCK
(&
dhd
->
pub
);

2373 #i‡
	`deföed
(
CONFIG_WIRELESS_EXT
)

2375 i‡((
cmd
 >
SIOCIWFIRST
Ë&& (cmd <
SIOCIWLAST
)) {

2377 
ªt
 = 
	`wl_iw_io˘l
(
√t
, 
i‰
, 
cmd
);

2378 
	`DHD_OS_WAKE_UNLOCK
(&
dhd
->
pub
);

2379  
ªt
;

2383 #i‡
LINUX_VERSION_CODE
 > 
	`KERNEL_VERSION
(2, 4, 2)

2384 i‡(
cmd
 =
SIOCETHTOOL
) {

2385 
ªt
 = 
	`dhd_ëhtoﬁ
(
dhd
, (*)
i‰
->
i‰_d©a
);

2386 
	`DHD_OS_WAKE_UNLOCK
(&
dhd
->
pub
);

2387  
ªt
;

2391 i‡(
cmd
 =
SIOCDEVPRIVATE
+1) {

2392 
ªt
 = 
	`wl_™droid_¥iv_cmd
(
√t
, 
i‰
, 
cmd
);

2393 
	`dhd_check_h™g
(
√t
, &
dhd
->
pub
, 
ªt
);

2394 
	`DHD_OS_WAKE_UNLOCK
(&
dhd
->
pub
);

2395  
ªt
;

2398 i‡(
cmd
 !
SIOCDEVPRIVATE
) {

2399 
	`DHD_OS_WAKE_UNLOCK
(&
dhd
->
pub
);

2400  -
EOPNOTSUPP
;

2403 
	`mem£t
(&
ioc
, 0, (ioc));

2406 i‡(
	`c›y_‰om_u£r
(&
ioc
, 
i‰
->
i‰_d©a
, (
wl_io˘l_t
))) {

2407 
bcmîr‹
 = 
BCME_BADADDR
;

2408 
d⁄e
;

2412 i‡(
ioc
.
buf
) {

2413 i‡(
ioc
.
Àn
 == 0) {

2414 
	`DHD_TRACE
(("%s: ioc.Àn=0,Ñëu∫†BCME_BADARG \n", 
__FUNCTION__
));

2415 
bcmîr‹
 = 
BCME_BADARG
;

2416 
d⁄e
;

2418 
buÊí
 = 
	`MIN
(
ioc
.
Àn
, 
DHD_IOCTL_MAXLEN
);

2426 i‡(!(
buf
 = (*)
	`MALLOC
(
dhd
->
pub
.
osh
, 
buÊí
))) {

2427 
bcmîr‹
 = 
BCME_NOMEM
;

2428 
d⁄e
;

2430 i‡(
	`c›y_‰om_u£r
(
buf
, 
ioc
.buf, 
buÊí
)) {

2431 
bcmîr‹
 = 
BCME_BADADDR
;

2432 
d⁄e
;

2438 i‡((
	`c›y_‰om_u£r
(&
drivî
, (*)
i‰
->
i‰_d©a
 + (
wl_io˘l_t
),

2439 (
uöt
)) != 0)) {

2440 
bcmîr‹
 = 
BCME_BADADDR
;

2441 
d⁄e
;

2444 i‡(!
	`ˇ∑bÀ
(
CAP_NET_ADMIN
)) {

2445 
bcmîr‹
 = 
BCME_EPERM
;

2446 
d⁄e
;

2450 i‡(
drivî
 =
DHD_IOCTL_MAGIC
) {

2451 
bcmîr‹
 = 
	`dhd_io˘l
((*)&
dhd
->
pub
, &
ioc
, 
buf
, 
buÊí
);

2452 i‡(
bcmîr‹
)

2453 
dhd
->
pub
.
bcmîr‹
 = bcmerror;

2454 
d⁄e
;

2458 i‡(
dhd
->
pub
.
bus°©e
 !
DHD_BUS_DATA
) {

2459 
bcmîr‹
 = 
BCME_DONGLE_DOWN
;

2460 
d⁄e
;

2463 i‡(!
dhd
->
pub
.
iswl
) {

2464 
bcmîr‹
 = 
BCME_DONGLE_DOWN
;

2465 
d⁄e
;

2475 i‡(
ioc
.
cmd
 =
WLC_SET_KEY
 ||

2476 (
ioc
.
cmd
 =
WLC_SET_VAR
 && ioc.
buf
 !
NULL
 &&

2477 
	`°∫cmp
("w£c_key", 
ioc
.
buf
, 9) == 0) ||

2478 (
ioc
.
cmd
 =
WLC_SET_VAR
 && ioc.
buf
 !
NULL
 &&

2479 
	`°∫cmp
("bsscfg:w£c_key", 
ioc
.
buf
, 15) == 0) ||

2480 
ioc
.
cmd
 =
WLC_DISASSOC
)

2481 
	`dhd_waô_≥nd8021x
(
√t
);

2483 #ifde‡
WLMEDIA_HTSF


2484 i‡(
ioc
.
buf
) {

2486 i‡(
	`°rcmp
("htsf", 
ioc
.
buf
) == 0) {

2487 
	`dhd_io˘l_htsf_gë
(
dhd
, 0);

2488  
BCME_OK
;

2491 i‡(
	`°rcmp
("htsÊ©e", 
ioc
.
buf
) == 0) {

2492 i‡(
ioc
.
£t
) {

2493 
	`mem£t
(
ts
, 0, (
t°amp_t
)*
TSMAX
);

2494 
	`mem£t
(&
maxdñayts
, 0, (
t°amp_t
));

2495 
maxdñay
 = 0;

2496 
t•kt˙t
 = 0;

2497 
maxdñaypkäo
 = 0;

2498 
	`mem£t
(&
vi_d1
.
bö
, 0, (
uöt32
)*
NUMBIN
);

2499 
	`mem£t
(&
vi_d2
.
bö
, 0, (
uöt32
)*
NUMBIN
);

2500 
	`mem£t
(&
vi_d3
.
bö
, 0, (
uöt32
)*
NUMBIN
);

2501 
	`mem£t
(&
vi_d4
.
bö
, 0, (
uöt32
)*
NUMBIN
);

2503 
	`dhd_dump_œãncy
();

2505  
BCME_OK
;

2507 i‡(
	`°rcmp
("htsf˛ór", 
ioc
.
buf
) == 0) {

2508 
	`mem£t
(&
vi_d1
.
bö
, 0, (
uöt32
)*
NUMBIN
);

2509 
	`mem£t
(&
vi_d2
.
bö
, 0, (
uöt32
)*
NUMBIN
);

2510 
	`mem£t
(&
vi_d3
.
bö
, 0, (
uöt32
)*
NUMBIN
);

2511 
	`mem£t
(&
vi_d4
.
bö
, 0, (
uöt32
)*
NUMBIN
);

2512 
htsf_£qnum
 = 0;

2513  
BCME_OK
;

2515 i‡(
	`°rcmp
("htsfhis", 
ioc
.
buf
) == 0) {

2516 
	`dhd_dump_htsfhi°o
(&
vi_d1
, "HÅo D");

2517 
	`dhd_dump_htsfhi°o
(&
vi_d2
, "DÅo D");

2518 
	`dhd_dump_htsfhi°o
(&
vi_d3
, "DÅo H");

2519 
	`dhd_dump_htsfhi°o
(&
vi_d4
, "HÅo H");

2520  
BCME_OK
;

2522 i‡(
	`°rcmp
("t•‹t", 
ioc
.
buf
) == 0) {

2523 i‡(
ioc
.
£t
) {

2524 
	`mem˝y
(&
t•‹t
, 
ioc
.
buf
 + 7, 4);

2526 
	`DHD_ERROR
(("cuºíàtime°am∞p‹t: %d \n", 
t•‹t
));

2528  
BCME_OK
;

2533 i‡((
ioc
.
cmd
 =
WLC_SET_VAR
 || ioc.cmd =
WLC_GET_VAR
) &&

2534 
ioc
.
buf
 !
NULL
 && 
	`°∫cmp
("rpc_", ioc.buf, 4) == 0) {

2535 #ifde‡
BCM_FD_AGGR


2536 
bcmîr‹
 = 
	`dhd_fdaggr_io˘l
(&
dhd
->
pub
, 
ifidx
, (
wl_io˘l_t
 *)&
ioc
, 
buf
, 
buÊí
);

2538 
bcmîr‹
 = 
BCME_UNSUPPORTED
;

2540 
d⁄e
;

2542 
bcmîr‹
 = 
	`dhd_wl_io˘l
(&
dhd
->
pub
, 
ifidx
, (
wl_io˘l_t
 *)&
ioc
, 
buf
, 
buÊí
);

2544 
d⁄e
:

2545 
	`dhd_check_h™g
(
√t
, &
dhd
->
pub
, 
bcmîr‹
);

2547 i‡(!
bcmîr‹
 && 
buf
 && 
ioc
.buf) {

2548 i‡(
	`c›y_to_u£r
(
ioc
.
buf
, buf, 
buÊí
))

2549 
bcmîr‹
 = -
EFAULT
;

2552 i‡(
buf
)

2553 
	`MFREE
(
dhd
->
pub
.
osh
, 
buf
, 
buÊí
);

2555 
	`DHD_OS_WAKE_UNLOCK
(&
dhd
->
pub
);

2557  
	`OSL_ERROR
(
bcmîr‹
);

2558 
	}
}

2560 #ifde‡
WL_CFG80211


2562 
	$dhd_˛ónup_vút_iÁ˚s
(
dhd_öfo_t
 *
dhd
)

2564 
i
 = 1;

2565 #i‡(
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 27))

2566 
rﬁlback_lock
 = 
FALSE
;

2569 
	`DHD_TRACE
(("%s: E¡î \n", 
__func__
));

2571 #i‡(
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 27))

2573 i‡(
	`π∆_is_locked
()) {

2574 
	`π∆_u∆ock
();

2575 
rﬁlback_lock
 = 
TRUE
;

2579 
i
 = 1; i < 
DHD_MAX_IFS
; i++) {

2580 
	`dhd_√t_if_lock_loˇl
(
dhd
);

2581 i‡(
dhd
->
iÊi°
[
i
]) {

2582 
	`DHD_TRACE
(("Dñëög IF: %d \n", 
i
));

2583 i‡((
dhd
->
iÊi°
[
i
]->
°©e
 !
DHD_IF_DEL
) &&

2584 (
dhd
->
iÊi°
[
i
]->
°©e
 !
DHD_IF_DELETING
)) {

2585 
dhd
->
iÊi°
[
i
]->
°©e
 = 
DHD_IF_DEL
;

2586 
dhd
->
iÊi°
[
i
]->
idx
 = i;

2587 
	`dhd_›_if
(
dhd
->
iÊi°
[
i
]);

2590 
	`dhd_√t_if_u∆ock_loˇl
(
dhd
);

2593 #i‡(
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 27))

2594 i‡(
rﬁlback_lock
)

2595 
	`π∆_lock
();

2599 
	}
}

2604 
	$dhd_°›
(
√t_devi˚
 *
√t
)

2606 
ifidx
 = 0;

2607 
dhd_öfo_t
 *
dhd
 = *(dhd_öfo_à**)
	`√tdev_¥iv
(
√t
);

2608 
	`DHD_OS_WAKE_LOCK
(&
dhd
->
pub
);

2609 
	`DHD_TRACE
(("%s: E¡î %p\n", 
__FUNCTION__
, 
√t
));

2610 i‡(
dhd
->
pub
.
up
 == 0) {

2611 
exô
;

2613 
ifidx
 = 
	`dhd_√t2idx
(
dhd
, 
√t
);

2614 
	`BCM_REFERENCE
(
ifidx
);

2617 
	`√tif_°›_queue
(
√t
);

2618 
dhd
->
pub
.
up
 = 0;

2620 #ifde‡
WL_CFG80211


2621 i‡(
ifidx
 == 0) {

2622 
	`wl_cfg80211_down
(
NULL
);

2628 i‡((
dhd
->
dhd_°©e
 & 
DHD_ATTACH_STATE_ADD_IF
) &&

2629 (
dhd
->
dhd_°©e
 & 
DHD_ATTACH_STATE_CFG80211
)) {

2630 
	`dhd_˛ónup_vút_iÁ˚s
(
dhd
);

2635 #ifde‡
PROP_TXSTATUS


2636 
	`dhd_os_wlfc_block
(&
dhd
->
pub
);

2637 
	`dhd_wlfc_˛ónup
(&
dhd
->
pub
);

2638 
	`dhd_os_wlfc_unblock
(&
dhd
->
pub
);

2641 
	`dhd_¥Ÿ_°›
(&
dhd
->
pub
);

2643 
OLD_MOD_DEC_USE_COUNT
;

2644 
exô
:

2645 #i‡
	`deföed
(
WL_CFG80211
)

2646 i‡(
ifidx
 == 0) {

2647 i‡(!
dhd_dow∆ﬂd_fw_⁄_drivîlﬂd
)

2648 
	`wl_™droid_wifi_off
(
√t
);

2651 
dhd
->
pub
.
rx˙t_timeout
 = 0;

2652 
dhd
->
pub
.
tx˙t_timeout
 = 0;

2654 
	`DHD_OS_WAKE_UNLOCK
(&
dhd
->
pub
);

2656 
	}
}

2659 
	$dhd_›í
(
√t_devi˚
 *
√t
)

2661 
dhd_öfo_t
 *
dhd
 = *(dhd_öfo_à**)
	`√tdev_¥iv
(
√t
);

2662 #ifde‡
TOE


2663 
uöt32
 
t€_ﬁ
;

2665 
ifidx
;

2666 
öt32
 
ªt
 = 0;

2668 #i‡(
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 25)) && 1

2669 i‡(
	`muãx_is_locked
(&
_dhd_sdio_muãx_lock_
) != 0) {

2670 
	`DHD_ERROR
(("%†: dhd_›í: cÆ»dev o≥¿bef‹êösmod com∂ëe!\n", 
__FUNCTION__
));

2672 
	`muãx_lock
(&
_dhd_sdio_muãx_lock_
);

2675 
	`DHD_OS_WAKE_LOCK
(&
dhd
->
pub
);

2677 i‡(
	`°æí
(
fúmw¨e_∑th
) != 0) {

2678 i‡(
fúmw¨e_∑th
[
	`°æí
(firmware_path)-1] == '\n')

2679 
fúmw¨e_∑th
[
	`°æí
(firmware_path)-1] = '\0';

2680 
	`COPY_FW_PATH_BY_CHIP
(
dhd
->
pub
.
bus
, 
fw_∑th
, 
fúmw¨e_∑th
);

2684 
dhd
->
pub
.
d⁄gÀ_å≠_occuªd
 = 0;

2685 
dhd
->
pub
.
h™g_was_£¡
 = 0;

2686 #i‡!
	`deföed
(
WL_CFG80211
)

2692 
ªt
 = 
	`wl_c⁄åﬁ_wl_°¨t
(
√t
);

2693 i‡(
ªt
 != 0) {

2694 
	`DHD_ERROR
(("%s: faûed wôh codê%d\n", 
__FUNCTION__
, 
ªt
));

2695 
ªt
 = -1;

2696 
exô
;

2700 
ifidx
 = 
	`dhd_√t2idx
(
dhd
, 
√t
);

2701 
	`DHD_TRACE
(("%s: ifidx %d\n", 
__FUNCTION__
, 
ifidx
));

2703 i‡(
ifidx
 < 0) {

2704 
	`DHD_ERROR
(("%s: Eº‹: cÆÀd wôh invÆid IF\n", 
__FUNCTION__
));

2705 
ªt
 = -1;

2706 
exô
;

2709 i‡(!
dhd
->
iÊi°
[
ifidx
] || dhd->iÊi°[ifidx]->
°©e
 =
DHD_IF_DEL
) {

2710 
	`DHD_ERROR
(("%s: Eº‹: cÆÀd whí IFáÃódy dñëed\n", 
__FUNCTION__
));

2711 
ªt
 = -1;

2712 
exô
;

2715 i‡(
ifidx
 == 0) {

2716 
	`©omic_£t
(&
dhd
->
≥nd_8021x_˙t
, 0);

2717 #i‡
	`deföed
(
WL_CFG80211
)

2718 
	`DHD_ERROR
(("\n%s\n", 
dhd_vîsi⁄
));

2719 i‡(!
dhd_dow∆ﬂd_fw_⁄_drivîlﬂd
) {

2720 
ªt
 = 
	`wl_™droid_wifi_⁄
(
√t
);

2721 i‡(
ªt
 != 0) {

2722 
	`DHD_ERROR
(("%s: faûed wôh codê%d\n", 
__FUNCTION__
, 
ªt
));

2723 
ªt
 = -1;

2724 
exô
;

2730 i‡(
dhd
->
pub
.
bus°©e
 !
DHD_BUS_DATA
) {

2733 i‡((
ªt
 = 
	`dhd_bus_°¨t
(&
dhd
->
pub
)) != 0) {

2734 
	`DHD_ERROR
(("%s: faûed wôh codê%d\n", 
__FUNCTION__
, 
ªt
));

2735 
ªt
 = -1;

2736 
exô
;

2742 
	`mem˝y
(
√t
->
dev_addr
, 
dhd
->
pub
.
mac
.
o˘ë
, 
ETHER_ADDR_LEN
);

2744 #ifde‡
TOE


2746 i‡(
	`dhd_t€_gë
(
dhd
, 
ifidx
, &
t€_ﬁ
Ë>0 && (t€_ﬁ & 
TOE_TX_CSUM_OL
) != 0)

2747 
dhd
->
iÊi°
[
ifidx
]->
√t
->
„©uªs
 |
NETIF_F_IP_CSUM
;

2749 
dhd
->
iÊi°
[
ifidx
]->
√t
->
„©uªs
 &~
NETIF_F_IP_CSUM
;

2752 #i‡
	`deföed
(
WL_CFG80211
)

2753 i‡(
	`u∆ikñy
(
	`wl_cfg80211_up
(
NULL
))) {

2754 
	`DHD_ERROR
(("%s: faûedÅÿbrög u∞cfg80211\n", 
__FUNCTION__
));

2755 
ªt
 = -1;

2756 
exô
;

2762 
	`√tif_°¨t_queue
(
√t
);

2763 
dhd
->
pub
.
up
 = 1;

2765 #ifde‡
BCMDBGFS


2766 
	`dhd_dbg_öô
(&
dhd
->
pub
);

2769 
OLD_MOD_INC_USE_COUNT
;

2770 
exô
:

2771 i‡(
ªt
)

2772 
	`dhd_°›
(
√t
);

2774 
	`DHD_OS_WAKE_UNLOCK
(&
dhd
->
pub
);

2776 #i‡(
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 25)) && 1

2777 
	`muãx_u∆ock
(&
_dhd_sdio_muãx_lock_
);

2779  
ªt
;

2780 
	}
}

2782 
	$dhd_do_drivî_öô
(
√t_devi˚
 *
√t
)

2784 
dhd_öfo_t
 *
dhd
 = 
NULL
;

2786 i‡(!
√t
) {

2787 
	`DHD_ERROR
(("Primary InterfaceÇot initialized \n"));

2788  -
EINVAL
;

2791 #i‡(
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 25)) && 1

2792 #ifde‡
MULTIPLE_SUPPLICANT


2793 i‡(
	`muãx_is_locked
(&
_dhd_sdio_muãx_lock_
) != 0) {

2794 
	`DHD_ERROR
(("%†: dhdsdio_¥obêi†ÆªadyÑu¬ög!\n", 
__FUNCTION__
));

2800 
dhd
 = *(
dhd_öfo_t
 **)
	`√tdev_¥iv
(
√t
);

2804 i‡(
dhd
->
pub
.
bus°©e
 =
DHD_BUS_DATA
) {

2805 
	`DHD_TRACE
(("Driverálready Inititalized. NothingÅo do"));

2809 i‡(
	`dhd_›í
(
√t
) < 0) {

2810 
	`DHD_ERROR
(("Driver Init Failed \n"));

2815 
	}
}

2817 
o¶_t
 *

2818 
	$dhd_o¶_©èch
(*
pdev
, 
uöt
 
bu°y≥
)

2820  
	`o¶_©èch
(
pdev
, 
bu°y≥
, 
TRUE
);

2821 
	}
}

2824 
	$dhd_o¶_dëach
(
o¶_t
 *
osh
)

2826 i‡(
	`MALLOCED
(
osh
)) {

2827 
	`DHD_ERROR
(("%s: MEMORY LEAK %d byãs\n", 
__FUNCTION__
, 
	`MALLOCED
(
osh
)));

2829 
	`o¶_dëach
(
osh
);

2830 #i‡1 && (
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 27))

2831 
dhd_ªgi°øti⁄_check
 = 
FALSE
;

2832 
	`up
(&
dhd_ªgi°øti⁄_£m
);

2833 #if 
	`deföed
(
BCMLXSDMMC
)

2834 
	`up
(&
dhd_chùup_£m
);

2837 
	}
}

2840 
	$dhd_add_if
(
dhd_öfo_t
 *
dhd
, 
ifidx
, *
h™dÀ
, *
«me
,

2841 
uöt8
 *
mac_addr
, 
uöt32
 
Êags
, uöt8 
bssidx
)

2843 
dhd_if_t
 *
iÂ
;

2845 
	`DHD_TRACE
(("%s: idx %d, h™dÀ->%p\n", 
__FUNCTION__
, 
ifidx
, 
h™dÀ
));

2847 
	`ASSERT
(
dhd
 && (
ifidx
 < 
DHD_MAX_IFS
));

2849 
iÂ
 = 
dhd
->
iÊi°
[
ifidx
];

2850 i‡(
iÂ
 !
NULL
) {

2851 i‡(
iÂ
->
√t
 !
NULL
) {

2852 
	`√tif_°›_queue
(
iÂ
->
√t
);

2853 
	`uƒegi°î_√tdev
(
iÂ
->
√t
);

2854 
	`‰ì_√tdev
(
iÂ
->
√t
);

2857 i‡((
iÂ
 = 
	`MALLOC
(
dhd
->
pub
.
osh
, (
dhd_if_t
))Ë=
NULL
) {

2858 
	`DHD_ERROR
(("%s: OOM - dhd_if_t\n", 
__FUNCTION__
));

2859  -
ENOMEM
;

2862 
	`mem£t
(
iÂ
, 0, (
dhd_if_t
));

2863 
iÂ
->
evít2cfg80211
 = 
FALSE
;

2864 
iÂ
->
öfo
 = 
dhd
;

2865 
dhd
->
iÊi°
[
ifidx
] = 
iÂ
;

2866 
	`°∫˝y
(
iÂ
->
«me
,Çame, 
IFNAMSIZ
);

2867 
iÂ
->
«me
[
IFNAMSIZ
] = '\0';

2868 i‡(
mac_addr
 !
NULL
)

2869 
	`mem˝y
(&
iÂ
->
mac_addr
, mac_addr, 
ETHER_ADDR_LEN
);

2871 i‡(
h™dÀ
 =
NULL
) {

2872 
iÂ
->
°©e
 = 
DHD_IF_ADD
;

2873 
iÂ
->
idx
 = 
ifidx
;

2874 
iÂ
->
bssidx
 = bssidx;

2875 
	`ASSERT
(
dhd
->
thr_sysioc_˘l
.
thr_pid
 >= 0);

2876 
	`up
(&
dhd
->
thr_sysioc_˘l
.
£ma
);

2878 
iÂ
->
√t
 = (
√t_devi˚
 *)
h™dÀ
;

2880 i‡(
ifidx
 == 0) {

2881 
iÂ
->
evít2cfg80211
 = 
TRUE
;

2885 
	}
}

2888 
	$dhd_dñ_if
(
dhd_öfo_t
 *
dhd
, 
ifidx
)

2890 
dhd_if_t
 *
iÂ
;

2892 
	`DHD_TRACE
(("%s: idx %d\n", 
__FUNCTION__
, 
ifidx
));

2894 
	`ASSERT
(
dhd
 && 
ifidx
 && (ifidx < 
DHD_MAX_IFS
));

2895 
iÂ
 = 
dhd
->
iÊi°
[
ifidx
];

2896 i‡(!
iÂ
) {

2897 
	`DHD_ERROR
(("%s: NuŒ i¡îÁ˚\n", 
__FUNCTION__
));

2901 
iÂ
->
°©e
 = 
DHD_IF_DEL
;

2902 
iÂ
->
idx
 = 
ifidx
;

2903 
	`ASSERT
(
dhd
->
thr_sysioc_˘l
.
thr_pid
 >= 0);

2904 
	`up
(&
dhd
->
thr_sysioc_˘l
.
£ma
);

2905 
	}
}

2907 #i‡(
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2, 6, 31))

2908 
√t_devi˚_›s
 
	gdhd_›s_¥i
 = {

2909 .
ndo_›í
 = 
dhd_›í
,

2910 .
	gndo_°›
 = 
dhd_°›
,

2911 .
	gndo_gë_°©s
 = 
dhd_gë_°©s
,

2912 .
	gndo_do_io˘l
 = 
dhd_io˘l_íåy
,

2913 .
	gndo_°¨t_xmô
 = 
dhd_°¨t_xmô
,

2914 .
	gndo_£t_mac_addªss
 = 
dhd_£t_mac_addªss
,

2915 #i‡(
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(3, 2, 0))

2916 .
	gndo_£t_rx_mode
 = 
dhd_£t_mu…iˇ°_li°
,

2918 .
	gndo_£t_mu…iˇ°_li°
 = 
dhd_£t_mu…iˇ°_li°
,

2922 
√t_devi˚_›s
 
	gdhd_›s_vút
 = {

2923 .
ndo_gë_°©s
 = 
dhd_gë_°©s
,

2924 .
	gndo_do_io˘l
 = 
dhd_io˘l_íåy
,

2925 .
	gndo_°¨t_xmô
 = 
dhd_°¨t_xmô
,

2926 .
	gndo_£t_mac_addªss
 = 
dhd_£t_mac_addªss
,

2927 #i‡(
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(3, 2, 0))

2928 .
	gndo_£t_rx_mode
 = 
dhd_£t_mu…iˇ°_li°
,

2930 .
	gndo_£t_mu…iˇ°_li°
 = 
dhd_£t_mu…iˇ°_li°
,

2935 
dhd_pub_t
 *

2936 
	$dhd_©èch
(
o¶_t
 *
osh
, 
dhd_bus
 *
bus
, 
uöt
 
bus_hdæí
)

2938 
dhd_öfo_t
 *
dhd
 = 
NULL
;

2939 
√t_devi˚
 *
√t
 = 
NULL
;

2941 
dhd_©èch_°©es_t
 
dhd_°©e
 = 
DHD_ATTACH_STATE_INIT
;

2942 
	`DHD_TRACE
(("%s: E¡î\n", 
__FUNCTION__
));

2945 i‡((
fúmw¨e_∑th
 !
NULL
) && (firmware_path[0] != '\0'))

2946 
	`COPY_FW_PATH_BY_CHIP
(
bus
, 
fw_∑th
, 
fúmw¨e_∑th
);

2947 i‡(
	`°æí
(
nvøm_∑th
) != 0) {

2948 
	`°∫˝y
(
nv_∑th
, 
nvøm_∑th
, (nv_path) -1);

2949 
nv_∑th
[(nv_path) -1] = '\0';

2953 i‡(!(
√t
 = 
	`Æloc_ëhîdev
((
dhd
)))) {

2954 
	`DHD_ERROR
(("%s: OOM -áŒoc_ëhîdev\n", 
__FUNCTION__
));

2955 
Áû
;

2957 
dhd_°©e
 |
DHD_ATTACH_STATE_NET_ALLOC
;

2960 i‡(!(
dhd
 = 
	`MALLOC
(
osh
, (
dhd_öfo_t
)))) {

2961 
	`DHD_ERROR
(("%s: OOM -áŒo¯dhd_öfo\n", 
__FUNCTION__
));

2962 
Áû
;

2964 
	`mem£t
(
dhd
, 0, (
dhd_öfo_t
));

2966 #ifde‡
DHDTHREAD


2967 
dhd
->
thr_dpc_˘l
.
thr_pid
 = 
DHD_PID_KT_TL_INVALID
;

2968 
dhd
->
thr_wdt_˘l
.
thr_pid
 = 
DHD_PID_KT_INVALID
;

2970 
dhd
->
dhd_èskÀt_¸óã
 = 
FALSE
;

2971 
dhd
->
thr_sysioc_˘l
.
thr_pid
 = 
DHD_PID_KT_INVALID
;

2972 
dhd_°©e
 |
DHD_ATTACH_STATE_DHD_ALLOC
;

2977 
	`mem˝y
((*)
	`√tdev_¥iv
(
√t
), &
dhd
, (dhd));

2978 
dhd
->
pub
.
osh
 = osh;

2981 
dhd
->
pub
.
öfo
 = dhd;

2983 
dhd
->
pub
.
bus
 = bus;

2984 
dhd
->
pub
.
hdæí
 = 
bus_hdæí
;

2987 i‡(
iÁ˚_«me
[0]) {

2988 
Àn
;

2989 
ch
;

2990 
	`°∫˝y
(
√t
->
«me
, 
iÁ˚_«me
, 
IFNAMSIZ
);

2991 
√t
->
«me
[
IFNAMSIZ
 - 1] = 0;

2992 
Àn
 = 
	`°æí
(
√t
->
«me
);

2993 
ch
 = 
√t
->
«me
[
Àn
 - 1];

2994 i‡((
ch
 > '9' || ch < '0'Ë&& (
Àn
 < 
IFNAMSIZ
 - 2))

2995 
	`°rˇt
(
√t
->
«me
, "%d");

2998 i‡(
	`dhd_add_if
(
dhd
, 0, (*)
√t
,Çë->
«me
, 
NULL
, 0, 0Ë=
DHD_BAD_IF
)

2999 
Áû
;

3000 
dhd_°©e
 |
DHD_ATTACH_STATE_ADD_IF
;

3002 #i‡(
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2, 6, 31))

3003 
√t
->
›í
 = 
NULL
;

3005 
√t
->
√tdev_›s
 = 
NULL
;

3008 
	`£ma_öô
(&
dhd
->
¥Ÿo_£m
, 1);

3010 #ifde‡
PROP_TXSTATUS


3011 
	`•ö_lock_öô
(&
dhd
->
wlfc_•ölock
);

3012 #ifde‡
PROP_TXSTATUS_VSDB


3013 
dhd
->
pub
.
wlfc_íabÀd
 = 
FALSE
;

3015 
dhd
->
pub
.
wlfc_íabÀd
 = 
TRUE
;

3020 
	`öô_waôqueue_hód
(&
dhd
->
io˘l_ª•_waô
);

3021 
	`öô_waôqueue_hód
(&
dhd
->
˘æ_waô
);

3024 
	`•ö_lock_öô
(&
dhd
->
sdlock
);

3025 
	`•ö_lock_öô
(&
dhd
->
txqlock
);

3026 
	`•ö_lock_öô
(&
dhd
->
dhd_lock
);

3029 
	`•ö_lock_öô
(&
dhd
->
wakñock_•ölock
);

3030 
dhd
->
wakñock_cou¡î
 = 0;

3031 
dhd
->
wakñock_wd_cou¡î
 = 0;

3032 
dhd
->
wakñock_rx_timeout_íabÀ
 = 0;

3033 
dhd
->
wakñock_˘æ_timeout_íabÀ
 = 0;

3034 #ifde‡
CONFIG_HAS_WAKELOCK


3035 
dhd
->
wl_wifi
 = 
	`MALLOC
(
osh
, (
wake_lock
));

3036 
dhd
->
wl_rxwake
 = 
	`MALLOC
(
osh
, (
wake_lock
));

3037 
dhd
->
wl_˘æwake
 = 
	`MALLOC
(
osh
, (
wake_lock
));

3038 
dhd
->
wl_wdwake
 = 
	`MALLOC
(
osh
, (
wake_lock
));

3039 i‡(!
dhd
->
wl_wifi
 || !dhd->
wl_rxwake
 || !dhd->
wl_˘æwake
 || !dhd->
wl_wdwake
) {

3040 
	`DHD_ERROR
(("%s: memáŒo¯f‹ wakêlock faûed\n", 
__FUNCTION__
));

3041 
Áû
;

3043 
	`wake_lock_öô
(
dhd
->
wl_wifi
, 
WAKE_LOCK_SUSPEND
, "wlan_wake");

3044 
	`wake_lock_öô
(
dhd
->
wl_rxwake
, 
WAKE_LOCK_SUSPEND
, "wlan_rx_wake");

3045 
	`wake_lock_öô
(
dhd
->
wl_˘æwake
, 
WAKE_LOCK_SUSPEND
, "wlan_ctrl_wake");

3046 
	`wake_lock_öô
(
dhd
->
wl_wdwake
, 
WAKE_LOCK_SUSPEND
, "wlan_wd_wake");

3048 #i‡(
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 25)) && 1

3049 
	`muãx_öô
(&
dhd
->
dhd_√t_if_muãx
);

3050 
	`muãx_öô
(&
dhd
->
dhd_su•íd_muãx
);

3052 
dhd_°©e
 |
DHD_ATTACH_STATE_WAKELOCKS_INIT
;

3055 i‡(
	`dhd_¥Ÿ_©èch
(&
dhd
->
pub
) != 0) {

3056 
	`DHD_ERROR
(("dhd_prot_attach failed\n"));

3057 
Áû
;

3059 
dhd_°©e
 |
DHD_ATTACH_STATE_PROT_ATTACH
;

3061 #ifde‡
WL_CFG80211


3063 i‡(
	`u∆ikñy
(
	`wl_cfg80211_©èch
(
√t
, &
dhd
->
pub
))) {

3064 
	`DHD_ERROR
(("wl_cfg80211_attach failed\n"));

3065 
Áû
;

3068 
	`dhd_m⁄ô‹_öô
(&
dhd
->
pub
);

3069 
dhd_°©e
 |
DHD_ATTACH_STATE_CFG80211
;

3071 #i‡
	`deföed
(
CONFIG_WIRELESS_EXT
)

3073 i‡(!(
dhd_°©e
 & 
DHD_ATTACH_STATE_CFG80211
)) {

3074 i‡(
	`wl_iw_©èch
(
√t
, (*)&
dhd
->
pub
) != 0) {

3075 
	`DHD_ERROR
(("wl_iw_attach failed\n"));

3076 
Áû
;

3078 
dhd_°©e
 |
DHD_ATTACH_STATE_WL_ATTACH
;

3084 
	`öô_timî
(&
dhd
->
timî
);

3085 
dhd
->
timî
.
d©a
 = (
ul⁄g
)dhd;

3086 
dhd
->
timî
.
fun˘i⁄
 = 
dhd_w©chdog
;

3088 #ifde‡
DHDTHREAD


3090 
	`£ma_öô
(&
dhd
->
sd£m
, 1);

3091 i‡((
dhd_w©chdog_¥io
 >0Ë&& (
dhd_dpc_¥io
 >= 0)) {

3092 
dhd
->
thªads_⁄ly
 = 
TRUE
;

3095 
dhd
->
thªads_⁄ly
 = 
FALSE
;

3098 i‡(
dhd_w©chdog_¥io
 >= 0) {

3100 #ifde‡
USE_KTHREAD_API


3101 
	`PROC_START2
(
dhd_w©chdog_thªad
, 
dhd
, &dhd->
thr_wdt_˘l
, 0, "dhd_watchdog_thread");

3103 
	`PROC_START
(
dhd_w©chdog_thªad
, 
dhd
, &dhd->
thr_wdt_˘l
, 0);

3106 
dhd
->
thr_wdt_˘l
.
thr_pid
 = -1;

3110 i‡(
dhd_dpc_¥io
 >= 0) {

3112 #ifde‡
USE_KTHREAD_API


3113 
	`PROC_START2
(
dhd_dpc_thªad
, 
dhd
, &dhd->
thr_dpc_˘l
, 0, "dhd_dpc");

3115 
	`PROC_START
(
dhd_dpc_thªad
, 
dhd
, &dhd->
thr_dpc_˘l
, 0);

3119 
	`èskÀt_öô
(&
dhd
->
èskÀt
, 
dhd_dpc
, (
ul⁄g
)dhd);

3120 
dhd
->
thr_dpc_˘l
.
thr_pid
 = -1;

3124 
	`èskÀt_öô
(&
dhd
->
èskÀt
, 
dhd_dpc
, (
ul⁄g
)dhd);

3125 
dhd
->
dhd_èskÀt_¸óã
 = 
TRUE
;

3128 i‡(
dhd_sysioc
) {

3129 #ifde‡
USE_KTHREAD_API


3130 
	`PROC_START2
(
_dhd_sysioc_thªad
, 
dhd
, &dhd->
thr_sysioc_˘l
, 0, "dhd_sysioc");

3132 
	`PROC_START
(
_dhd_sysioc_thªad
, 
dhd
, &dhd->
thr_sysioc_˘l
, 0);

3135 
dhd
->
thr_sysioc_˘l
.
thr_pid
 = -1;

3137 
dhd_°©e
 |
DHD_ATTACH_STATE_THREADS_CREATED
;

3138 #i‡(
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 27)) && (1)

3139 
	`INIT_WORK
(&
dhd
->
w‹k_h™g
, 
dhd_h™g_¥o˚ss
);

3144 
	`mem˝y
(
	`√tdev_¥iv
(
√t
), &
dhd
, (dhd));

3146 #i‡(
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 27)Ë&& 
	`deföed
(
CONFIG_PM_SLEEP
)

3147 
	`ªgi°î_pm_nŸifõr
(&
dhd_¶ìp_pm_nŸifõr
);

3150 #i‡
	`deföed
(
CONFIG_HAS_EARLYSUSPEND
Ë&& deföed(
DHD_USE_EARLYSUSPEND
)

3151 
dhd
->
óæy_su•íd
.
Àvñ
 = 
EARLY_SUSPEND_LEVEL_BLANK_SCREEN
 + 20;

3152 
dhd
->
óæy_su•íd
.
su•íd
 = 
dhd_óæy_su•íd
;

3153 
dhd
->
óæy_su•íd
.
ªsume
 = 
dhd_œã_ªsume
;

3154 
	`ªgi°î_óæy_su•íd
(&
dhd
->
óæy_su•íd
);

3155 
dhd_°©e
 |
DHD_ATTACH_STATE_EARLYSUSPEND_DONE
;

3158 #ifde‡
ARP_OFFLOAD_SUPPORT


3159 
dhd
->
≥nd_ùaddr
 = 0;

3160 
	`ªgi°î_öëaddr_nŸifõr
(&
dhd_nŸifõr
);

3163 
dhd_°©e
 |
DHD_ATTACH_STATE_DONE
;

3164 
dhd
->
dhd_°©e
 = dhd_state;

3165  &
dhd
->
pub
;

3167 
Áû
:

3168 i‡(
dhd_°©e
 < 
DHD_ATTACH_STATE_DHD_ALLOC
) {

3169 i‡(
√t
Ë
	`‰ì_√tdev
(net);

3171 
	`DHD_TRACE
(("%s: Calling dhd_detach dhd_state 0x%x &dhd->pub %p\n",

3172 
__FUNCTION__
, 
dhd_°©e
, &
dhd
->
pub
));

3173 
dhd
->
dhd_°©e
 = dhd_state;

3174 
	`dhd_dëach
(&
dhd
->
pub
);

3175 
	`dhd_‰ì
(&
dhd
->
pub
);

3178  
NULL
;

3179 
	}
}

3182 
	$dhd_bus_°¨t
(
dhd_pub_t
 *
dhdp
)

3184 
ªt
 = -1;

3185 
dhd_öfo_t
 *
dhd
 = (dhd_öfo_t*)
dhdp
->
öfo
;

3186 
Êags
;

3188 
	`ASSERT
(
dhd
);

3190 
	`DHD_TRACE
(("E¡î %s:\n", 
__FUNCTION__
));

3192 #ifde‡
DHDTHREAD


3193 i‡(
dhd
->
thªads_⁄ly
)

3194 
	`dhd_os_sdlock
(
dhdp
);

3199 i‡((
dhd
->
pub
.
bus°©e
 =
DHD_BUS_DOWN
) &&

3200 (
fw_∑th
 !
NULL
) && (fw_path[0] != '\0') &&

3201 (
nv_∑th
 !
NULL
) && (nv_path[0] != '\0')) {

3203 i‡(!(
	`dhd_bus_dow∆ﬂd_fúmw¨e
(
dhd
->
pub
.
bus
, dhd->pub.
osh
,

3204 
fw_∑th
, 
nv_∑th
))) {

3205 
	`DHD_ERROR
(("%s: dhdsdio_probe_download failed. firmware = %sÇvram = %s\n",

3206 
__FUNCTION__
, 
fw_∑th
, 
nv_∑th
));

3207 #ifde‡
DHDTHREAD


3208 i‡(
dhd
->
thªads_⁄ly
)

3209 
	`dhd_os_sdu∆ock
(
dhdp
);

3214 i‡(
dhd
->
pub
.
bus°©e
 !
DHD_BUS_LOAD
) {

3215 #ifde‡
DHDTHREAD


3216 i‡(
dhd
->
thªads_⁄ly
)

3217 
	`dhd_os_sdu∆ock
(
dhdp
);

3219  -
ENETDOWN
;

3223 
dhd
->
pub
.
tick˙t
 = 0;

3224 
	`dhd_os_wd_timî
(&
dhd
->
pub
, 
dhd_w©chdog_ms
);

3227 i‡((
ªt
 = 
	`dhd_bus_öô
(&
dhd
->
pub
, 
FALSE
)) != 0) {

3229 
	`DHD_ERROR
(("%s, dhd_bus_öô faûed %d\n", 
__FUNCTION__
, 
ªt
));

3230 #ifde‡
DHDTHREAD


3231 i‡(
dhd
->
thªads_⁄ly
)

3232 
	`dhd_os_sdu∆ock
(
dhdp
);

3234  
ªt
;

3236 
	`bcmsdh_£t_drvd©a
(
dhdp
);

3237 #i‡
	`deföed
(
OOB_INTR_ONLY
)

3239 i‡(
	`bcmsdh_ªgi°î_oob_öå
(
dhdp
)) {

3242 
Êags
 = 
	`dhd_os_•ö_lock
(&
dhd
->
pub
);

3243 
dhd
->
wd_timî_vÆid
 = 
FALSE
;

3244 
	`dhd_os_•ö_u∆ock
(&
dhd
->
pub
, 
Êags
);

3245 
	`dñ_timî_sync
(&
dhd
->
timî
);

3246 
	`DHD_ERROR
(("%†Ho° faûedÅÿªgi°î f‹ OOB\n", 
__FUNCTION__
));

3247 #ifde‡
DHDTHREAD


3248 i‡(
dhd
->
thªads_⁄ly
)

3249 
	`dhd_os_sdu∆ock
(
dhdp
);

3251 
	`DHD_OS_WD_WAKE_UNLOCK
(&
dhd
->
pub
);

3252  -
ENODEV
;

3256 
	`dhd_íabÀ_oob_öå
(
dhd
->
pub
.
bus
, 
TRUE
);

3260 i‡(
dhd
->
pub
.
bus°©e
 !
DHD_BUS_DATA
) {

3261 
Êags
 = 
	`dhd_os_•ö_lock
(&
dhd
->
pub
);

3262 
dhd
->
wd_timî_vÆid
 = 
FALSE
;

3263 
	`dhd_os_•ö_u∆ock
(&
dhd
->
pub
, 
Êags
);

3264 
	`dñ_timî_sync
(&
dhd
->
timî
);

3265 
	`DHD_ERROR
(("%†Áûed bu†i†nŸÑódy\n", 
__FUNCTION__
));

3266 #ifde‡
DHDTHREAD


3267 i‡(
dhd
->
thªads_⁄ly
)

3268 
	`dhd_os_sdu∆ock
(
dhdp
);

3270 
	`DHD_OS_WD_WAKE_UNLOCK
(&
dhd
->
pub
);

3271  -
ENODEV
;

3274 #ifde‡
DHDTHREAD


3275 i‡(
dhd
->
thªads_⁄ly
)

3276 
	`dhd_os_sdu∆ock
(
dhdp
);

3279 #ifde‡
BCMSDIOH_TXGLOM


3280 i‡((
dhd
->
pub
.
bus°©e
 =
DHD_BUS_DATA
Ë&& 
	`bcmsdh_glom_íabÀd
()) {

3281 
	`dhd_txglom_íabÀ
(
dhdp
, 
TRUE
);

3285 #ifde‡
READ_MACADDR


3286 
	`dhd_ªad_maˇddr
(
dhd
);

3290 i‡((
ªt
 = 
	`dhd_¥Ÿ_öô
(&
dhd
->
pub
)) < 0)

3291  
ªt
;

3293 #ifde‡
WRITE_MACADDR


3294 
	`dhd_wrôe_maˇddr
(
dhd
->
pub
.
mac
.
o˘ë
);

3297 #ifde‡
ARP_OFFLOAD_SUPPORT


3298 i‡(
dhd
->
≥nd_ùaddr
) {

3299 #ifde‡
AOE_IP_ALIAS_SUPPORT


3300 
	`a€_upd©e_ho°_ùv4_èbÀ
(&
dhd
->
pub
, dhd->
≥nd_ùaddr
, 
TRUE
, 0);

3302 
dhd
->
≥nd_ùaddr
 = 0;

3307 
	}
}

3309 
boﬁ
 
	$dhd_is_c⁄cuºít_mode
(
dhd_pub_t
 *
dhd
)

3311 i‡(!
dhd
)

3312  
FALSE
;

3314 i‡(
dhd
->
›_mode
 & 
DHD_FLAG_CONCURR_MULTI_CHAN_MODE
)

3315  
TRUE
;

3316 i‡((
dhd
->
›_mode
 & 
DHD_FLAG_CONCURR_SINGLE_CHAN_MODE
) ==

3317 
DHD_FLAG_CONCURR_SINGLE_CHAN_MODE
)

3318  
TRUE
;

3320  
FALSE
;

3321 
	}
}

3323 #i‡!
deföed
(
AP
Ë&& deföed(
WLP2P
)

3329 
uöt32


3330 
	$dhd_gë_c⁄cuºít_ˇ∑bûôes
(
dhd_pub_t
 *
dhd
)

3332 
öt32
 
ªt
 = 0;

3333 
buf
[
WLC_IOCTL_SMLEN
];

3334 
boﬁ
 
mch™_suµ‹ãd
 = 
FALSE
;

3338 i‡(
dhd
->
›_mode
 & 
DHD_FLAG_HOSTAP_MODE
)

3340 
	`mem£t
(
buf
, 0, (buf));

3341 
	`bcm_mkiov¨
("ˇp", 0, 0, 
buf
, (buf));

3342 i‡((
ªt
 = 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_GET_VAR
, 
buf
, (buf),

3343 
FALSE
, 0)) < 0) {

3344 
	`DHD_ERROR
(("%s: Get Capability failed (error=%d)\n",

3345 
__FUNCTION__
, 
ªt
));

3348 i‡(
	`°r°r
(
buf
, "vsdb")) {

3349 
mch™_suµ‹ãd
 = 
TRUE
;

3351 i‡(
	`°r°r
(
buf
, "p2p"Ë=
NULL
) {

3352 
	`DHD_TRACE
(("Chip doesÇot supportÖ2p\n"));

3357 
	`mem£t
(
buf
, 0, (buf));

3358 
	`bcm_mkiov¨
("p2p", 0, 0, 
buf
, (buf));

3359 i‡((
ªt
 = 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_GET_VAR
, 
buf
, (buf),

3360 
FALSE
, 0)) < 0) {

3361 
	`DHD_ERROR
(("%s: Gë P2P faûed (îr‹=%d)\n", 
__FUNCTION__
, 
ªt
));

3365 i‡(
buf
[0] == 1) {

3369 
ªt
 = 
DHD_FLAG_CONCURR_SINGLE_CHAN_MODE
;

3370 i‡(
mch™_suµ‹ãd
)

3371 
ªt
 |
DHD_FLAG_CONCURR_MULTI_CHAN_MODE
;

3372 #i‡
	`deföed
(
WL_ENABLE_P2P_IF
)

3376  
ªt
;

3384 
	}
}

3387 
	$dhd_¥eöô_io˘ls
(
dhd_pub_t
 *
dhd
)

3389 
ªt
 = 0;

3390 
evítmask
[
WL_EVENTING_MASK_LEN
];

3391 
iovbuf
[
WL_EVENTING_MASK_LEN
 + 12];

3393 #i‡!
	`deföed
(
WL_CFG80211
)

3394 
uöt
 
up
 = 0;

3396 
uöt
 
powî_mode
 = 
PM_FAST
;

3397 
uöt32
 
d⁄gÀ_Æign
 = 
DHD_SDALIGN
;

3398 
uöt32
 
glom
 = 
CUSTOM_GLOM_SETTING
;

3399 #i‡
	`deföed
(
VSDB
Ë|| deföed(
ROAM_ENABLE
)

3400 
uöt
 
b˙_timeout
 = 8;

3402 
uöt
 
b˙_timeout
 = 4;

3404 #ifde‡
ENABLE_BCN_LI_BCN_WAKEUP


3405 
uöt32
 
b˙_li_b˙
 = 1;

3407 
uöt
 
ªåy_max
 = 3;

3408 #i‡
	`deföed
(
ARP_OFFLOAD_SUPPORT
)

3409 
¨p€
 = 1;

3411 
sˇn_assoc_time
 = 
DHD_SCAN_ASSOC_ACTIVE_TIME
;

3412 
sˇn_u«ssoc_time
 = 
DHD_SCAN_UNASSOC_ACTIVE_TIME
;

3413 
sˇn_∑ssive_time
 = 
DHD_SCAN_PASSIVE_TIME
;

3414 
buf
[
WLC_IOCTL_SMLEN
];

3415 *
±r
;

3416 
uöt32
 
li°í_öãrvÆ
 = 
LISTEN_INTERVAL
;

3417 #ifde‡
ROAM_ENABLE


3418 
uöt
 
rﬂmv¨
 = 0;

3419 
rﬂm_åiggî
[2] = {
CUSTOM_ROAM_TRIGGER_SETTING
, 
WLC_BAND_ALL
};

3420 
rﬂm_sˇn_≥riod
[2] = {10, 
WLC_BAND_ALL
};

3421 
rﬂm_dñè
[2] = {
CUSTOM_ROAM_DELTA_SETTING
, 
WLC_BAND_ALL
};

3422 #ifde‡
FULL_ROAMING_SCAN_PERIOD_60_SEC


3423 
rﬂm_fuŒsˇn_≥riod
 = 60;

3425 
rﬂm_fuŒsˇn_≥riod
 = 120;

3428 #ifde‡
DISABLE_BUILTIN_ROAM


3429 
uöt
 
rﬂmv¨
 = 1;

3433 #i‡
	`deföed
(
SOFTAP
)

3434 
uöt
 
dtim
 = 1;

3436 #i‡(
	`deföed
(
AP
Ë&& !deföed(
WLP2P
)Ë|| (!deföed(APË&& deföed(
WL_CFG80211
))

3437 
uöt32
 
mpc
 = 0;

3438 
ëhî_addr
 
p2p_ó
;

3440 
uöt32
 
mimo_bw_ˇp
 = 1;

3442 #i‡
	`deföed
(
AP
Ë|| deföed(
WLP2P
)

3443 
uöt32
 
≠°a
 = 1;

3445 #ifde‡
GET_CUSTOM_MAC_ENABLE


3446 
ëhî_addr
 
ó_addr
;

3448 #ifde‡
DISABLE_11N


3449 
uöt32
 
nmode
 = 0;

3451 #ifde‡
AMPDU_HOSTREORDER


3452 
uöt32
 
ho°ª‹dî
 = 1;

3455 
dhd
->
su•íd_b˙_li_dtim
 = 
CUSTOM_SUSPEND_BCN_LI_DTIM
;

3456 #ifde‡
PROP_TXSTATUS


3457 #ifde‡
PROP_TXSTATUS_VSDB


3458 
dhd
->
wlfc_íabÀd
 = 
FALSE
;

3461 
dhd
->
wlfc_íabÀd
 = 
TRUE
;

3464 
	`DHD_TRACE
(("E¡î %s\n", 
__FUNCTION__
));

3465 
dhd
->
›_mode
 = 0;

3466 #ifde‡
GET_CUSTOM_MAC_ENABLE


3467 
ªt
 = 
	`dhd_cu°om_gë_mac_addªss
(
ó_addr
.
o˘ë
);

3468 i‡(!
ªt
) {

3469 
	`mem£t
(
buf
, 0, (buf));

3470 
	`bcm_mkiov¨
("cur_ëhîaddr", (*)&
ó_addr
, 
ETHER_ADDR_LEN
, 
buf
, (buf));

3471 
ªt
 = 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_SET_VAR
, 
buf
, (buf), 
TRUE
, 0);

3472 i‡(
ªt
 < 0) {

3473 
	`DHD_ERROR
(("%s: c™'à£àMACáddªs†,Éº‹=%d\n", 
__FUNCTION__
, 
ªt
));

3474  
BCME_NOTUP
;

3476 
	`mem˝y
(
dhd
->
mac
.
o˘ë
, 
ó_addr
.o˘ë, 
ETHER_ADDR_LEN
);

3480 
	`mem£t
(
buf
, 0, (buf));

3481 
	`bcm_mkiov¨
("cur_ëhîaddr", 0, 0, 
buf
, (buf));

3482 i‡((
ªt
 = 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_GET_VAR
, 
buf
, (buf),

3483 
FALSE
, 0)) < 0) {

3484 
	`DHD_ERROR
(("%s: c™'àgë MACáddªs†,Éº‹=%d\n", 
__FUNCTION__
, 
ªt
));

3485  
BCME_NOTUP
;

3488 
	`mem˝y
(
dhd
->
mac
.
o˘ë
, 
buf
, 
ETHER_ADDR_LEN
);

3490 #ifde‡
GET_CUSTOM_MAC_ENABLE


3494 
	`DHD_TRACE
(("Fúmw¨ê%s\n", 
fw_∑th
));

3496 i‡((!
›_mode
 && 
	`°r°r
(
fw_∑th
, "_≠°a"Ë!
NULL
) ||

3497 (
›_mode
 =
DHD_FLAG_HOSTAP_MODE
)) {

3498 #ifde‡
SET_RANDOM_MAC_SOFTAP


3499 
uöt
 
ønd_mac
;

3501 
dhd
->
›_mode
 = 
DHD_FLAG_HOSTAP_MODE
;

3502 #i‡
	`deföed
(
ARP_OFFLOAD_SUPPORT
)

3503 
¨p€
 = 0;

3505 #ifde‡
PKT_FILTER_SUPPORT


3506 
dhd_pkt_fûãr_íabÀ
 = 
FALSE
;

3508 #ifde‡
SET_RANDOM_MAC_SOFTAP


3509 
	`§™dom32
((
uöt
)
jiffõs
);

3510 
ønd_mac
 = 
	`øndom32
();

3511 
iovbuf
[0] = 0x02;

3512 
iovbuf
[1] = 0x1A;

3513 
iovbuf
[2] = 0x11;

3514 
iovbuf
[3] = ()(
ønd_mac
 & 0x0F) | 0xF0;

3515 
iovbuf
[4] = ()(
ønd_mac
 >> 8);

3516 
iovbuf
[5] = ()(
ønd_mac
 >> 16);

3518 
	`bcm_mkiov¨
("cur_ëhîaddr", (*)
iovbuf
, 
ETHER_ADDR_LEN
, 
buf
, (buf));

3519 
ªt
 = 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_SET_VAR
, 
buf
, (buf), 
TRUE
, 0);

3520 i‡(
ªt
 < 0) {

3521 
	`DHD_ERROR
(("%s: c™'à£àMACáddªs†,Éº‹=%d\n", 
__FUNCTION__
, 
ªt
));

3523 
	`mem˝y
(
dhd
->
mac
.
o˘ë
, 
iovbuf
, 
ETHER_ADDR_LEN
);

3525 #i‡!
	`deföed
(
AP
Ë&& deföed(
WL_CFG80211
)

3527 
	`bcm_mkiov¨
("mpc", (*)&
mpc
, 4, 
iovbuf
, (iovbuf));

3528 i‡((
ªt
 = 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_SET_VAR
, 
iovbuf
,

3529 (
iovbuf
), 
TRUE
, 0)) < 0) {

3530 
	`DHD_ERROR
(("%†mp¯f‹ Ho°APD faûed %d\n", 
__FUNCTION__
, 
ªt
));

3536 
uöt32
 
c⁄cuºít_mode
 = 0;

3537 i‡((!
›_mode
 && 
	`°r°r
(
fw_∑th
, "_p2p"Ë!
NULL
) ||

3538 (
›_mode
 =
DHD_FLAG_P2P_MODE
)) {

3539 #i‡
	`deföed
(
ARP_OFFLOAD_SUPPORT
)

3540 
¨p€
 = 0;

3542 #ifde‡
PKT_FILTER_SUPPORT


3543 
dhd_pkt_fûãr_íabÀ
 = 
FALSE
;

3545 
dhd
->
›_mode
 = 
DHD_FLAG_P2P_MODE
;

3548 
dhd
->
›_mode
 = 
DHD_FLAG_STA_MODE
;

3549 #i‡!
	`deföed
(
AP
Ë&& deföed(
WLP2P
)

3550 i‡((
c⁄cuºít_mode
 = 
	`dhd_gë_c⁄cuºít_ˇ∑bûôes
(
dhd
))) {

3551 #i‡
	`deföed
(
ARP_OFFLOAD_SUPPORT
)

3552 
¨p€
 = 1;

3554 
dhd
->
›_mode
 |
c⁄cuºít_mode
;

3558 i‡(
dhd
->
›_mode
 & 
DHD_FLAG_P2P_MODE
) {

3559 
	`bcm_mkiov¨
("≠°a", (*)&
≠°a
, 4, 
iovbuf
, (iovbuf));

3560 i‡((
ªt
 = 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_SET_VAR
,

3561 
iovbuf
, (iovbuf), 
TRUE
, 0)) < 0) {

3562 
	`DHD_ERROR
(("%†APSTA f‹ P2P faûedÑë%d\n", 
__FUNCTION__
, 
ªt
));

3565 
	`mem˝y
(&
p2p_ó
, &
dhd
->
mac
, 
ETHER_ADDR_LEN
);

3566 
	`ETHER_SET_LOCALADDR
(&
p2p_ó
);

3567 
	`bcm_mkiov¨
("p2p_da_ovîride", (*)&
p2p_ó
,

3568 
ETHER_ADDR_LEN
, 
iovbuf
, (iovbuf));

3569 i‡((
ªt
 = 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_SET_VAR
,

3570 
iovbuf
, (iovbuf), 
TRUE
, 0)) < 0) {

3571 
	`DHD_ERROR
(("%†p2p_da_ovîridêªt%d\n", 
__FUNCTION__
, 
ªt
));

3573 
	`DHD_INFO
(("dhd_preinit_ioctls:Ö2p_da_override succeeded\n"));

3577 ()
c⁄cuºít_mode
;

3581 
	`DHD_ERROR
(("Firmware up: op_mode=0x%04x, "

3582 "Brﬂdcom D⁄gÀ Ho° Drivî mac="
MACDBG
"\n",

3583 
dhd
->
›_mode
,

3584 
	`MAC2STRDBG
(
dhd
->
mac
.
o˘ë
)));

3586 i‡(
dhd
->
dhd_c•ec
.
ccode
[0] != 0) {

3587 
	`bcm_mkiov¨
("cou¡ry", (*)&
dhd
->
dhd_c•ec
,

3588 (
wl_cou¡ry_t
), 
iovbuf
, (iovbuf));

3589 i‡((
ªt
 = 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_SET_VAR
, 
iovbuf
, (iovbuf), 
TRUE
, 0)) < 0)

3590 
	`DHD_ERROR
(("%s: cou¡ry codê£âög faûed\n", 
__FUNCTION__
));

3594 
	`bcm_mkiov¨
("assoc_li°í", (*)&
li°í_öãrvÆ
, 4, 
iovbuf
, (iovbuf));

3595 i‡((
ªt
 = 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_SET_VAR
, 
iovbuf
, (iovbuf), 
TRUE
, 0)) < 0)

3596 
	`DHD_ERROR
(("%†assoc_li°í faûed %d\n", 
__FUNCTION__
, 
ªt
));

3598 #i‡
	`deföed
(
ROAM_ENABLE
Ë|| deföed(
DISABLE_BUILTIN_ROAM
)

3600 
	`bcm_mkiov¨
("rﬂm_off", (*)&
rﬂmv¨
, 4, 
iovbuf
, (iovbuf));

3601 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_SET_VAR
, 
iovbuf
, (iovbuf), 
TRUE
, 0);

3603 #ifde‡
ROAM_ENABLE


3604 i‡((
ªt
 = 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_SET_ROAM_TRIGGER
, 
rﬂm_åiggî
,

3605 (
rﬂm_åiggî
), 
TRUE
, 0)) < 0)

3606 
	`DHD_ERROR
(("%s:ÑﬂmÅriggî së faûed %d\n", 
__FUNCTION__
, 
ªt
));

3607 i‡((
ªt
 = 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_SET_ROAM_SCAN_PERIOD
, 
rﬂm_sˇn_≥riod
,

3608 (
rﬂm_sˇn_≥riod
), 
TRUE
, 0)) < 0)

3609 
	`DHD_ERROR
(("%s:Ñﬂm sˇ¿≥riod së faûed %d\n", 
__FUNCTION__
, 
ªt
));

3610 i‡((
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_SET_ROAM_DELTA
, 
rﬂm_dñè
,

3611 (
rﬂm_dñè
), 
TRUE
, 0)) < 0)

3612 
	`DHD_ERROR
(("%s:Ñﬂm dñè së faûed %d\n", 
__FUNCTION__
, 
ªt
));

3613 
	`bcm_mkiov¨
("fuŒrﬂm≥riod", (*)&
rﬂm_fuŒsˇn_≥riod
, 4, 
iovbuf
, (iovbuf));

3614 i‡((
ªt
 = 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_SET_VAR
, 
iovbuf
, (iovbuf), 
TRUE
, 0)) < 0)

3615 
	`DHD_ERROR
(("%s:Ñﬂm fuŒsˇ¿≥riod së faûed %d\n", 
__FUNCTION__
, 
ªt
));

3619 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_SET_PM
, (*)&
powî_mode
, ’owî_mode), 
TRUE
, 0);

3622 
	`bcm_mkiov¨
("bus:txglomÆign", (*)&
d⁄gÀ_Æign
, 4, 
iovbuf
, (iovbuf));

3623 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_SET_VAR
, 
iovbuf
, (iovbuf), 
TRUE
, 0);

3625 i‡(
glom
 !
DEFAULT_GLOM_VALUE
) {

3626 
	`DHD_INFO
(("%†£àglom=0x%X\n", 
__FUNCTION__
, 
glom
));

3627 
	`bcm_mkiov¨
("bus:txglom", (*)&
glom
, 4, 
iovbuf
, (iovbuf));

3628 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_SET_VAR
, 
iovbuf
, (iovbuf), 
TRUE
, 0);

3632 
	`bcm_mkiov¨
("b˙_timeout", (*)&
b˙_timeout
, 4, 
iovbuf
, (iovbuf));

3633 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_SET_VAR
, 
iovbuf
, (iovbuf), 
TRUE
, 0);

3635 
	`bcm_mkiov¨
("assoc_ªåy_max", (*)&
ªåy_max
, 4, 
iovbuf
, (iovbuf));

3636 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_SET_VAR
, 
iovbuf
, (iovbuf), 
TRUE
, 0);

3637 #i‡
	`deföed
(
AP
Ë&& !deföed(
WLP2P
)

3639 
	`bcm_mkiov¨
("mpc", (*)&
mpc
, 4, 
iovbuf
, (iovbuf));

3640 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_SET_VAR
, 
iovbuf
, (iovbuf), 
TRUE
, 0);

3641 
	`bcm_mkiov¨
("≠°a", (*)&
≠°a
, 4, 
iovbuf
, (iovbuf));

3642 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_SET_VAR
, 
iovbuf
, (iovbuf), 
TRUE
, 0);

3645 i‡(
	`dhd_bus_chù_id
(
dhd
Ë=
BCM43341_CHIP_ID
 || dhd_bus_chù_id(dhdË=
BCM4324_CHIP_ID
) {

3647 
	`bcm_mkiov¨
("mimo_bw_ˇp", (*)&
mimo_bw_ˇp
, 4, 
iovbuf
, (iovbuf));

3648 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_SET_VAR
, 
iovbuf
, (iovbuf), 
TRUE
, 0);

3651 #i‡
	`deföed
(
SOFTAP
)

3652 i‡(
≠_fw_lﬂded
 =
TRUE
) {

3653 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_SET_DTIMPRD
, (*)&
dtim
, (dtim), 
TRUE
, 0);

3657 #i‡
	`deföed
(
KEEP_ALIVE
)

3660 
ªs
;

3662 #i‡
	`deföed
(
SOFTAP
)

3663 i‡(
≠_fw_lﬂded
 =
FALSE
)

3665 i‡(!(
dhd
->
›_mode
 & 
DHD_FLAG_HOSTAP_MODE
)) {

3666 i‡((
ªs
 = 
	`dhd_kìp_Æive_⁄off
(
dhd
)) < 0)

3667 
	`DHD_ERROR
(("%s set keeplive failed %d\n",

3668 
__FUNCTION__
, 
ªs
));

3674 
	`bcm_mkiov¨
("evít_msgs", 
evítmask
, 
WL_EVENTING_MASK_LEN
, 
iovbuf
, (iovbuf));

3675 i‡((
ªt
 = 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_GET_VAR
, 
iovbuf
, (iovbuf), 
FALSE
, 0)) < 0) {

3676 
	`DHD_ERROR
(("%†ªad Evíàmask faûed %d\n", 
__FUNCTION__
, 
ªt
));

3677 
d⁄e
;

3679 
	`bc›y
(
iovbuf
, 
evítmask
, 
WL_EVENTING_MASK_LEN
);

3682 
	`£tbô
(
evítmask
, 
WLC_E_SET_SSID
);

3683 
	`£tbô
(
evítmask
, 
WLC_E_PRUNE
);

3684 
	`£tbô
(
evítmask
, 
WLC_E_AUTH
);

3685 
	`£tbô
(
evítmask
, 
WLC_E_ASSOC
);

3686 
	`£tbô
(
evítmask
, 
WLC_E_REASSOC
);

3687 
	`£tbô
(
evítmask
, 
WLC_E_REASSOC_IND
);

3688 
	`£tbô
(
evítmask
, 
WLC_E_DEAUTH
);

3689 
	`£tbô
(
evítmask
, 
WLC_E_DEAUTH_IND
);

3690 
	`£tbô
(
evítmask
, 
WLC_E_DISASSOC_IND
);

3691 
	`£tbô
(
evítmask
, 
WLC_E_DISASSOC
);

3692 
	`£tbô
(
evítmask
, 
WLC_E_JOIN
);

3693 
	`£tbô
(
evítmask
, 
WLC_E_ASSOC_IND
);

3694 
	`£tbô
(
evítmask
, 
WLC_E_PSK_SUP
);

3695 
	`£tbô
(
evítmask
, 
WLC_E_LINK
);

3696 
	`£tbô
(
evítmask
, 
WLC_E_NDIS_LINK
);

3697 
	`£tbô
(
evítmask
, 
WLC_E_MIC_ERROR
);

3698 
	`£tbô
(
evítmask
, 
WLC_E_ASSOC_REQ_IE
);

3699 
	`£tbô
(
evítmask
, 
WLC_E_ASSOC_RESP_IE
);

3700 #i‚de‡
WL_CFG80211


3701 
	`£tbô
(
evítmask
, 
WLC_E_PMKID_CACHE
);

3702 
	`£tbô
(
evítmask
, 
WLC_E_TXFAIL
);

3704 
	`£tbô
(
evítmask
, 
WLC_E_JOIN_START
);

3705 
	`£tbô
(
evítmask
, 
WLC_E_SCAN_COMPLETE
);

3706 #ifde‡
WLMEDIA_HTSF


3707 
	`£tbô
(
evítmask
, 
WLC_E_HTSFSYNC
);

3709 #ifde‡
PNO_SUPPORT


3710 
	`£tbô
(
evítmask
, 
WLC_E_PFN_NET_FOUND
);

3713 
	`£tbô
(
evítmask
, 
WLC_E_ROAM
);

3714 #ifde‡
WL_CFG80211


3715 
	`£tbô
(
evítmask
, 
WLC_E_ESCAN_RESULT
);

3716 i‡(
dhd
->
›_mode
 & 
DHD_FLAG_P2P_MODE
) {

3717 
	`£tbô
(
evítmask
, 
WLC_E_ACTION_FRAME_RX
);

3718 
	`£tbô
(
evítmask
, 
WLC_E_P2P_DISC_LISTEN_COMPLETE
);

3723 
	`bcm_mkiov¨
("evít_msgs", 
evítmask
, 
WL_EVENTING_MASK_LEN
, 
iovbuf
, (iovbuf));

3724 i‡((
ªt
 = 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_SET_VAR
, 
iovbuf
, (iovbuf), 
TRUE
, 0)) < 0) {

3725 
	`DHD_ERROR
(("%†Së Evíàmask faûed %d\n", 
__FUNCTION__
, 
ªt
));

3726 
d⁄e
;

3729 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_SET_SCAN_CHANNEL_TIME
, (*)&
sˇn_assoc_time
,

3730 (
sˇn_assoc_time
), 
TRUE
, 0);

3731 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_SET_SCAN_UNASSOC_TIME
, (*)&
sˇn_u«ssoc_time
,

3732 (
sˇn_u«ssoc_time
), 
TRUE
, 0);

3733 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_SET_SCAN_PASSIVE_TIME
, (*)&
sˇn_∑ssive_time
,

3734 (
sˇn_∑ssive_time
), 
TRUE
, 0);

3736 #ifde‡
ARP_OFFLOAD_SUPPORT


3738 #i‡
	`deföed
(
SOFTAP
)

3739 i‡(
¨p€
 && !
≠_fw_lﬂded
) {

3741 i‡(
¨p€
) {

3743 
	`dhd_¨p_ofÊﬂd_íabÀ
(
dhd
, 
TRUE
);

3744 
	`dhd_¨p_ofÊﬂd_£t
(
dhd
, 
dhd_¨p_mode
);

3746 
	`dhd_¨p_ofÊﬂd_íabÀ
(
dhd
, 
FALSE
);

3747 
	`dhd_¨p_ofÊﬂd_£t
(
dhd
, 0);

3749 
dhd_¨p_íabÀ
 = 
¨p€
;

3752 #ifde‡
PKT_FILTER_SUPPORT


3754 
dhd
->
pktfûãr_cou¡
 = 5;

3756 
dhd
->
pktfûãr
[0] = "100 0 0 0 0x01 0x00";

3757 
dhd
->
pktfûãr
[1] = 
NULL
;

3758 
dhd
->
pktfûãr
[2] = 
NULL
;

3759 
dhd
->
pktfûãr
[3] = 
NULL
;

3761 
dhd
->
pktfûãr
[4] = "104 0 0 0 0xFFFFFFFFFFFF 0x01005E0000FB";

3762 
	`dhd_£t_∑ckë_fûãr
(
dhd
);

3764 #i‡
	`deföed
(
SOFTAP
)

3765 i‡(
≠_fw_lﬂded
) {

3766 
	`dhd_íabÀ_∑ckë_fûãr
(0, 
dhd
);

3771 #ifde‡
DISABLE_11N


3772 
	`bcm_mkiov¨
("nmode", (*)&
nmode
, 4, 
iovbuf
, (iovbuf));

3773 i‡((
ªt
 = 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_SET_VAR
, 
iovbuf
, (iovbuf), 
TRUE
, 0)) < 0)

3774 
	`DHD_ERROR
(("%†w»nmodê0 faûed %d\n", 
__FUNCTION__
, 
ªt
));

3776 #ifde‡
AMPDU_HOSTREORDER


3777 
	`bcm_mkiov¨
("ampdu_ho°ª‹dî", (*)&
ho°ª‹dî
, 4, 
buf
, (buf));

3778 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_SET_VAR
, 
buf
, (buf), 
TRUE
, 0);

3782 #i‡!
	`deföed
(
WL_CFG80211
)

3784 i‡((
ªt
 = 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_UP
, (*)&
up
, (up), 
TRUE
, 0)) < 0) {

3785 
	`DHD_ERROR
(("%†Sëtög WL UP faûed %d\n", 
__FUNCTION__
, 
ªt
));

3786 
d⁄e
;

3790 #ifde‡
ENABLE_BCN_LI_BCN_WAKEUP


3791 
	`bcm_mkiov¨
("b˙_li_b˙", (*)&
b˙_li_b˙
, 4, 
iovbuf
, (iovbuf));

3792 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_SET_VAR
, 
iovbuf
, (iovbuf), 
TRUE
, 0);

3796 
	`mem£t
(
buf
, 0, (buf));

3797 
±r
 = 
buf
;

3798 
	`bcm_mkiov¨
("vî", (*)&
buf
, 4, buf, (buf));

3799 i‡((
ªt
 = 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_GET_VAR
, 
buf
, (buf), 
FALSE
, 0)) < 0)

3800 
	`DHD_ERROR
(("%†Áûed %d\n", 
__FUNCTION__
, 
ªt
));

3802 
	`bcm°πok
(&
±r
, "\n", 0);

3804 
	`DHD_ERROR
(("Fúmw¨êvîsi⁄ = %s\n", 
buf
));

3806 
	`dhd_£t_vîsi⁄_öfo
(
dhd
, 
buf
);

3808 
	`DHD_BLOG
(
buf
, 
	`°æí
(buf) + 1);

3809 
	`DHD_BLOG
(
dhd_vîsi⁄
, 
	`°æí
(dhd_version) + 1);

3812 i‡(
	`°r°r
(
buf
, 
MANUFACTRING_FW
Ë!
NULL
) {

3813 
	`dhd_os_£t_io˘l_ª•_timeout
(20000);

3814 
	`DHD_ERROR
(("%s :ádjust IOCTLÑesponseÅime for Manufactring Firmware\n",

3815 
__FUNCTION__
));

3819 
d⁄e
:

3820  
ªt
;

3821 
	}
}

3825 
	$dhd_iov¨
(
dhd_pub_t
 *
pub
, 
ifidx
, *
«me
, *
cmd_buf
, 
uöt
 
cmd_Àn
, 
£t
)

3827 
buf
[
	`°æí
(
«me
Ë+ 1 + 
cmd_Àn
];

3828 
Àn
 = (
buf
);

3829 
wl_io˘l_t
 
ioc
;

3830 
ªt
;

3832 
Àn
 = 
	`bcm_mkiov¨
(
«me
, 
cmd_buf
, 
cmd_Àn
, 
buf
,Üen);

3834 
	`mem£t
(&
ioc
, 0, (ioc));

3836 
ioc
.
cmd
 = 
£t
? 
WLC_SET_VAR
 : 
WLC_GET_VAR
;

3837 
ioc
.
buf
 = buf;

3838 
ioc
.
Àn
 =Üen;

3839 
ioc
.
£t
 = 
TRUE
;

3841 
ªt
 = 
	`dhd_wl_io˘l
(
pub
, 
ifidx
, &
ioc
, ioc.
buf
, ioc.
Àn
);

3842 i‡(!
£t
 && 
ªt
 >= 0)

3843 
	`mem˝y
(
cmd_buf
, 
buf
, 
cmd_Àn
);

3845  
ªt
;

3846 
	}
}

3848 
	$dhd_ch™ge_mtu
(
dhd_pub_t
 *
dhdp
, 
√w_mtu
, 
ifidx
)

3850 
dhd_öfo
 *
dhd
 = 
dhdp
->
öfo
;

3851 
√t_devi˚
 *
dev
 = 
NULL
;

3853 
	`ASSERT
(
dhd
 && dhd->
iÊi°
[
ifidx
]);

3854 
dev
 = 
dhd
->
iÊi°
[
ifidx
]->
√t
;

3855 
	`ASSERT
(
dev
);

3857 i‡(
	`√tif_ru¬ög
(
dev
)) {

3858 
	`DHD_ERROR
(("%s: Mu° bêdow¿tÿch™gêô†MTU", 
dev
->
«me
));

3859  
BCME_NOTDOWN
;

3862 
	#DHD_MIN_MTU
 1500

	)

3863 
	#DHD_MAX_MTU
 1752

	)

3865 i‡((
√w_mtu
 < 
DHD_MIN_MTU
Ë|| (√w_mtu > 
DHD_MAX_MTU
)) {

3866 
	`DHD_ERROR
(("%s: MTU sizê%d i†övÆid.\n", 
__FUNCTION__
, 
√w_mtu
));

3867  
BCME_BADARG
;

3870 
dev
->
mtu
 = 
√w_mtu
;

3872 
	}
}

3874 #ifde‡
ARP_OFFLOAD_SUPPORT


3877 
	$a€_upd©e_ho°_ùv4_èbÀ
(
dhd_pub_t
 *
dhd_pub
, 
u32
 
ùa
, 
boﬁ
 
add
, 
idx
)

3879 
u32
 
ùv4_buf
[
MAX_IPV4_ENTRIES
];

3880 
i
;

3881 
ªt
;

3883 
	`bzîo
(
ùv4_buf
, (ipv4_buf));

3886 
ªt
 = 
	`dhd_¨p_gë_¨p_ho°ù_èbÀ
(
dhd_pub
, 
ùv4_buf
, (ùv4_buf), 
idx
);

3887 
	`DHD_ARPOE
(("%s: ho°ùÅabÀÑód from D⁄gÀ:\n", 
__FUNCTION__
));

3888 #ifde‡
AOE_DBG


3889 
	`dhd_¥öt_buf
(
ùv4_buf
, 32, 4);

3892 
	`dhd_a€_ho°ù_˛r
(
dhd_pub
, 
idx
);

3894 i‡(
ªt
) {

3895 
	`DHD_ERROR
(("%†Áûed\n", 
__FUNCTION__
));

3899 
i
 = 0; i < 
MAX_IPV4_ENTRIES
; i++) {

3900 i‡(
add
 && (
ùv4_buf
[
i
] == 0)) {

3901 
ùv4_buf
[
i
] = 
ùa
;

3902 
add
 = 
FALSE
;

3903 
	`DHD_ARPOE
(("%s: SavedÇew IP inÅempárp_hostip[%d]\n",

3904 
__FUNCTION__
, 
i
));

3905 } i‡(
ùv4_buf
[
i
] =
ùa
) {

3906 
ùv4_buf
[
i
] = 0;

3907 
	`DHD_ARPOE
(("%s:Ñemoved IP:%x fromÅempÅable %d\n",

3908 
__FUNCTION__
, 
ùa
, 
i
));

3911 i‡(
ùv4_buf
[
i
] != 0) {

3913 
	`dhd_¨p_ofÊﬂd_add_ù
(
dhd_pub
, 
ùv4_buf
[
i
], 
idx
);

3914 
	`DHD_ARPOE
(("%s:ádded IP:%xÅo dongleárp_hostip[%d]\n\n",

3915 
__FUNCTION__
, 
ùv4_buf
[
i
], i));

3918 #ifde‡
AOE_DBG


3920 
	`dhd_¨p_gë_¨p_ho°ù_èbÀ
(
dhd_pub
, 
ùv4_buf
, (ùv4_buf), 
idx
);

3921 
	`DHD_ARPOE
(("%s:Ñód backáΩ_ho°ùÅabÀ:\n", 
__FUNCTION__
));

3922 
	`dhd_¥öt_buf
(
ùv4_buf
, 32, 4);

3924 
	}
}

3931 
	$dhd_devi˚_evít
(
nŸifõr_block
 *
this
,

3932 
evít
,

3933 *
±r
)

3935 
ö_iÁddr
 *
iÁ
 = (ö_iÁdd∏*)
±r
;

3937 
dhd_öfo_t
 *
dhd
;

3938 
dhd_pub_t
 *
dhd_pub
;

3939 
idx
;

3941 i‡(!
dhd_¨p_íabÀ
)

3942  
NOTIFY_DONE
;

3943 i‡(!
iÁ
 || !(iÁ->
iÁ_dev
->
dev
))

3944  
NOTIFY_DONE
;

3946 #i‡(
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 31))

3948 i‡((
iÁ
->
iÁ_dev
->
dev
->
√tdev_›s
 !&
dhd_›s_¥i
) &&

3949 (
iÁ
->
iÁ_dev
->
dev
->
√tdev_›s
 !&
dhd_›s_vút
)) {

3950 #ifde‡
WLP2P


3951 i‡(!
	`wl_cfgp2p_is_if›s
(
iÁ
->
iÁ_dev
->
dev
->
√tdev_›s
))

3953  
NOTIFY_DONE
;

3957 
dhd
 = *(
dhd_öfo_t
 **)
	`√tdev_¥iv
(
iÁ
->
iÁ_dev
->
dev
);

3958 i‡(!
dhd
)

3959  
NOTIFY_DONE
;

3961 
dhd_pub
 = &
dhd
->
pub
;

3963 i‡(
dhd_pub
->
¨p_vîsi⁄
 == 1) {

3964 
idx
 = 0;

3967 
idx
 = 0; idx < 
DHD_MAX_IFS
; idx++) {

3968 i‡(
dhd
->
iÊi°
[
idx
] && dhd->iÊi°[idx]->
√t
 =
iÁ
->
iÁ_dev
->
dev
)

3971 i‡(
idx
 < 
DHD_MAX_IFS
)

3972 
	`DHD_TRACE
(("ifidx : %∞%†%d\n", 
dhd
->
iÊi°
[
idx
]->
√t
,

3973 
dhd
->
iÊi°
[
idx
]->
«me
, dhd->iflist[idx]->idx));

3975 
	`DHD_ERROR
(("C™nŸ föd ifidx f‹(%sË£àtÿ0\n", 
iÁ
->
iÁ_œbñ
));

3976 
idx
 = 0;

3980 
evít
) {

3981 
NETDEV_UP
:

3982 
	`DHD_ARPOE
(("%s: [%s] Up IP: 0x%x\n",

3983 
__FUNCTION__
, 
iÁ
->
iÁ_œbñ
, iÁ->
iÁ_addªss
));

3985 i‡(
dhd
->
pub
.
bus°©e
 !
DHD_BUS_DATA
) {

3986 
	`DHD_ERROR
(("%s: bu†nŸÑódy,Éxô\n", 
__FUNCTION__
));

3987 i‡(
dhd
->
≥nd_ùaddr
) {

3988 
	`DHD_ERROR
(("%s: overwriteÖending ipaddr: 0x%x\n",

3989 
__FUNCTION__
, 
dhd
->
≥nd_ùaddr
));

3991 
dhd
->
≥nd_ùaddr
 = 
iÁ
->
iÁ_addªss
;

3995 #ifde‡
AOE_IP_ALIAS_SUPPORT


3996 
	`DHD_ARPOE
(("%s:addáliased IPÅo AOE hostip cache\n",

3997 
__FUNCTION__
));

3998 
	`a€_upd©e_ho°_ùv4_èbÀ
(
dhd_pub
, 
iÁ
->
iÁ_addªss
, 
TRUE
, 
idx
);

4002 
NETDEV_DOWN
:

4003 
	`DHD_ARPOE
(("%s: [%s] Down IP: 0x%x\n",

4004 
__FUNCTION__
, 
iÁ
->
iÁ_œbñ
, iÁ->
iÁ_addªss
));

4005 
dhd
->
≥nd_ùaddr
 = 0;

4006 #ifde‡
AOE_IP_ALIAS_SUPPORT


4007 
	`DHD_ARPOE
(("%s:interface is down, AOE clráll forÅhis if\n",

4008 
__FUNCTION__
));

4009 
	`a€_upd©e_ho°_ùv4_èbÀ
(
dhd_pub
, 
iÁ
->
iÁ_addªss
, 
FALSE
, 
idx
);

4011 
	`dhd_a€_ho°ù_˛r
(&
dhd
->
pub
, 
idx
);

4012 
	`dhd_a€_¨p_˛r
(&
dhd
->
pub
, 
idx
);

4017 
	`DHD_ARPOE
(("%s: doÇoting for [%s] Event: %lu\n",

4018 
__func__
, 
iÁ
->
iÁ_œbñ
, 
evít
));

4021  
NOTIFY_DONE
;

4022 
	}
}

4026 
	$dhd_√t_©èch
(
dhd_pub_t
 *
dhdp
, 
ifidx
)

4028 
dhd_öfo_t
 *
dhd
 = (dhd_öfo_à*)
dhdp
->
öfo
;

4029 
√t_devi˚
 *
√t
 = 
NULL
;

4030 
îr
 = 0;

4031 
uöt8
 
ãmp_addr
[
ETHER_ADDR_LEN
] = { 0x00, 0x90, 0x4c, 0x11, 0x22, 0x33 };

4033 
	`DHD_TRACE
(("%s: ifidx %d\n", 
__FUNCTION__
, 
ifidx
));

4035 
	`ASSERT
(
dhd
 && dhd->
iÊi°
[
ifidx
]);

4037 
√t
 = 
dhd
->
iÊi°
[
ifidx
]->net;

4038 
	`ASSERT
(
√t
);

4040 #i‡(
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2, 6, 31))

4041 
	`ASSERT
(!
√t
->
›í
);

4042 
√t
->
gë_°©s
 = 
dhd_gë_°©s
;

4043 
√t
->
do_io˘l
 = 
dhd_io˘l_íåy
;

4044 
√t
->
h¨d_°¨t_xmô
 = 
dhd_°¨t_xmô
;

4045 
√t
->
£t_mac_addªss
 = 
dhd_£t_mac_addªss
;

4046 
√t
->
£t_mu…iˇ°_li°
 = 
dhd_£t_mu…iˇ°_li°
;

4047 
√t
->
›í
 =Çë->
°›
 = 
NULL
;

4049 
	`ASSERT
(!
√t
->
√tdev_›s
);

4050 
√t
->
√tdev_›s
 = &
dhd_›s_vút
;

4054 i‡(
ifidx
 == 0) {

4058 #i‡(
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2, 6, 31))

4059 
√t
->
›í
 = 
dhd_›í
;

4060 
√t
->
°›
 = 
dhd_°›
;

4062 
√t
->
√tdev_›s
 = &
dhd_›s_¥i
;

4064 i‡(!
	`ETHER_ISNULLADDR
(
dhd
->
pub
.
mac
.
o˘ë
))

4065 
	`mem˝y
(
ãmp_addr
, 
dhd
->
pub
.
mac
.
o˘ë
, 
ETHER_ADDR_LEN
);

4070 
	`mem˝y
(
ãmp_addr
, 
dhd
->
iÊi°
[
ifidx
]->
mac_addr
, 
ETHER_ADDR_LEN
);

4076 i‡(!
	`memcmp
(
ãmp_addr
, 
dhd
->
iÊi°
[0]->
mac_addr
,

4077 
ETHER_ADDR_LEN
)) {

4078 
	`DHD_ERROR
(("%s interface [%s]: setÜocallyádministered bit in MAC\n",

4079 
__func__
, 
√t
->
«me
));

4080 
ãmp_addr
[0] |= 0x02;

4084 
√t
->
h¨d_hódî_Àn
 = 
ETH_HLEN
 + 
dhd
->
pub
.
hdæí
;

4085 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 24)

4086 
√t
->
ëhtoﬁ_›s
 = &
dhd_ëhtoﬁ_›s
;

4089 #i‡
	`deföed
(
CONFIG_WIRELESS_EXT
)

4090 #i‡
WIRELESS_EXT
 < 19

4091 
√t
->
gë_wúñess_°©s
 = 
dhd_gë_wúñess_°©s
;

4093 #i‡
WIRELESS_EXT
 > 12

4094 
√t
->
wúñess_h™dÀrs
 = (
iw_h™dÀr_def
 *)&
wl_iw_h™dÀr_def
;

4098 
dhd
->
pub
.
rxsz
 = 
	`DBUS_RX_BUFFER_SIZE_DHD
(
√t
);

4100 
	`mem˝y
(
√t
->
dev_addr
, 
ãmp_addr
, 
ETHER_ADDR_LEN
);

4102 i‡((
îr
 = 
	`ªgi°î_√tdev
(
√t
)) != 0) {

4103 
	`DHD_ERROR
(("couldn'àªgi°îÅhê√àdevi˚,Éº %d\n", 
îr
));

4104 
Áû
;

4106 
	`¥ötf
("Broadcom Dongle Host Driver:Ñegister interface [%s]"

4107 " MAC: "
MACDBG
"\n",

4108 
√t
->
«me
,

4109 
	`MAC2STRDBG
(
√t
->
dev_addr
));

4111 #i‡
	`deföed
(
SOFTAP
Ë&& deföed(
CONFIG_WIRELESS_EXT
Ë&& !deföed(
WL_CFG80211
)

4112 
	`wl_iw_isˇn_£t_sˇn_brﬂdˇ°_¥ï
(
√t
, 1);

4115 #i‡1 && (
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 27))

4116 i‡(
ifidx
 == 0) {

4117 
dhd_ªgi°øti⁄_check
 = 
TRUE
;

4118 
	`up
(&
dhd_ªgi°øti⁄_£m
);

4123 
Áû
:

4124 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2, 6, 31)

4125 
√t
->
›í
 = 
NULL
;

4127 
√t
->
√tdev_›s
 = 
NULL
;

4129  
îr
;

4130 
	}
}

4133 
	$dhd_bus_dëach
(
dhd_pub_t
 *
dhdp
)

4135 
dhd_öfo_t
 *
dhd
;

4137 
	`DHD_TRACE
(("%s: E¡î\n", 
__FUNCTION__
));

4139 i‡(
dhdp
) {

4140 
dhd
 = (
dhd_öfo_t
 *)
dhdp
->
öfo
;

4141 i‡(
dhd
) {

4147 i‡(
dhd
->
pub
.
bus°©e
 !
DHD_BUS_DOWN
) {

4149 
	`dhd_¥Ÿ_°›
(&
dhd
->
pub
);

4152 
	`dhd_bus_°›
(
dhd
->
pub
.
bus
, 
TRUE
);

4155 #i‡
	`deföed
(
OOB_INTR_ONLY
)

4156 
	`bcmsdh_uƒegi°î_oob_öå
();

4160 
	}
}

4163 
	$dhd_dëach
(
dhd_pub_t
 *
dhdp
)

4165 
dhd_öfo_t
 *
dhd
;

4166 
Êags
;

4167 
timî_vÆid
 = 
FALSE
;

4169 i‡(!
dhdp
)

4172 
dhd
 = (
dhd_öfo_t
 *)
dhdp
->
öfo
;

4173 i‡(!
dhd
)

4176 
	`DHD_TRACE
(("%s: E¡î sèã 0x%x\n", 
__FUNCTION__
, 
dhd
->
dhd_°©e
));

4178 
dhd
->
pub
.
up
 = 0;

4179 i‡(!(
dhd
->
dhd_°©e
 & 
DHD_ATTACH_STATE_DONE
)) {

4183 
	`o¶_dñay
(1000*100);

4186 i‡(
dhd
->
dhd_°©e
 & 
DHD_ATTACH_STATE_PROT_ATTACH
) {

4187 
	`dhd_bus_dëach
(
dhdp
);

4189 i‡(
dhdp
->
¥Ÿ
)

4190 
	`dhd_¥Ÿ_dëach
(
dhdp
);

4193 #ifde‡
ARP_OFFLOAD_SUPPORT


4194 
	`uƒegi°î_öëaddr_nŸifõr
(&
dhd_nŸifõr
);

4197 #i‡
	`deföed
(
CONFIG_HAS_EARLYSUSPEND
Ë&& deföed(
DHD_USE_EARLYSUSPEND
)

4198 i‡(
dhd
->
dhd_°©e
 & 
DHD_ATTACH_STATE_EARLYSUSPEND_DONE
) {

4199 i‡(
dhd
->
óæy_su•íd
.
su•íd
)

4200 
	`uƒegi°î_óæy_su•íd
(&
dhd
->
óæy_su•íd
);

4204 #i‡(
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 27))

4205 
	`ˇn˚l_w‹k_sync
(&
dhd
->
w‹k_h™g
);

4208 #i‡
	`deföed
(
CONFIG_WIRELESS_EXT
)

4209 i‡(
dhd
->
dhd_°©e
 & 
DHD_ATTACH_STATE_WL_ATTACH
) {

4211 
	`wl_iw_dëach
();

4215 i‡(
dhd
->
thr_sysioc_˘l
.
thr_pid
 >= 0) {

4216 
	`PROC_STOP
(&
dhd
->
thr_sysioc_˘l
);

4220 i‡(
dhd
->
dhd_°©e
 & 
DHD_ATTACH_STATE_ADD_IF
) {

4221 
i
 = 1;

4222 
dhd_if_t
 *
iÂ
;

4225 
i
 = 1; i < 
DHD_MAX_IFS
; i++) {

4226 
	`dhd_√t_if_lock_loˇl
(
dhd
);

4227 i‡(
dhd
->
iÊi°
[
i
]) {

4228 
dhd
->
iÊi°
[
i
]->
°©e
 = 
DHD_IF_DEL
;

4229 
dhd
->
iÊi°
[
i
]->
idx
 = i;

4230 
	`dhd_›_if
(
dhd
->
iÊi°
[
i
]);

4233 
	`dhd_√t_if_u∆ock_loˇl
(
dhd
);

4236 
iÂ
 = 
dhd
->
iÊi°
[0];

4237 
	`ASSERT
(
iÂ
);

4238 
	`ASSERT
(
iÂ
->
√t
);

4239 i‡(
iÂ
 && iÂ->
√t
) {

4240 #i‡(
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2, 6, 31))

4241 i‡(
iÂ
->
√t
->
›í
)

4243 i‡(
iÂ
->
√t
->
√tdev_›s
 =&
dhd_›s_¥i
)

4246 
	`uƒegi°î_√tdev
(
iÂ
->
√t
);

4247 
	`‰ì_√tdev
(
iÂ
->
√t
);

4248 
iÂ
->
√t
 = 
NULL
;

4249 
	`MFREE
(
dhd
->
pub
.
osh
, 
iÂ
, (*ifp));

4250 
dhd
->
iÊi°
[0] = 
NULL
;

4256 
Êags
 = 
	`dhd_os_•ö_lock
(&
dhd
->
pub
);

4257 
timî_vÆid
 = 
dhd
->
wd_timî_vÆid
;

4258 
dhd
->
wd_timî_vÆid
 = 
FALSE
;

4259 
	`dhd_os_•ö_u∆ock
(&
dhd
->
pub
, 
Êags
);

4260 i‡(
timî_vÆid
)

4261 
	`dñ_timî_sync
(&
dhd
->
timî
);

4263 i‡(
dhd
->
dhd_°©e
 & 
DHD_ATTACH_STATE_THREADS_CREATED
) {

4264 #ifde‡
DHDTHREAD


4265 i‡(
dhd
->
thr_wdt_˘l
.
thr_pid
 >= 0) {

4266 
	`PROC_STOP
(&
dhd
->
thr_wdt_˘l
);

4269 i‡(
dhd
->
thr_dpc_˘l
.
thr_pid
 >= 0) {

4270 
	`PROC_STOP
(&
dhd
->
thr_dpc_˘l
);

4274 
	`èskÀt_kûl
(&
dhd
->
èskÀt
);

4277 #ifde‡
WL_CFG80211


4278 i‡(
dhd
->
dhd_°©e
 & 
DHD_ATTACH_STATE_CFG80211
) {

4279 
	`wl_cfg80211_dëach
(
NULL
);

4280 
	`dhd_m⁄ô‹_unöô
();

4285 #i‡(
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 27)Ë&& 
	`deföed
(
CONFIG_PM_SLEEP
)

4286 
	`uƒegi°î_pm_nŸifõr
(&
dhd_¶ìp_pm_nŸifõr
);

4290 i‡(
dhd
->
dhd_°©e
 & 
DHD_ATTACH_STATE_WAKELOCKS_INIT
) {

4291 #ifde‡
CONFIG_HAS_WAKELOCK


4292 
dhd
->
wakñock_cou¡î
 = 0;

4293 
dhd
->
wakñock_wd_cou¡î
 = 0;

4294 
dhd
->
wakñock_rx_timeout_íabÀ
 = 0;

4295 
dhd
->
wakñock_˘æ_timeout_íabÀ
 = 0;

4296 i‡(
dhd
->
wl_wifi
) {

4297 
	`wake_lock_de°roy
(
dhd
->
wl_wifi
);

4298 
	`MFREE
(
dhd
->
pub
.
osh
, dhd->
wl_wifi
, (
wake_lock
));

4299 
dhd
->
wl_wifi
 = 
NULL
;

4301 i‡(
dhd
->
wl_rxwake
) {

4302 
	`wake_lock_de°roy
(
dhd
->
wl_rxwake
);

4303 
	`MFREE
(
dhd
->
pub
.
osh
, dhd->
wl_rxwake
, (
wake_lock
));

4304 
dhd
->
wl_rxwake
 = 
NULL
;

4306 i‡(
dhd
->
wl_˘æwake
) {

4307 
	`wake_lock_de°roy
(
dhd
->
wl_˘æwake
);

4308 
	`MFREE
(
dhd
->
pub
.
osh
, dhd->
wl_˘æwake
, (
wake_lock
));

4309 
dhd
->
wl_˘æwake
 = 
NULL
;

4311 i‡(
dhd
->
wl_wdwake
) {

4312 
	`wake_lock_de°roy
(
dhd
->
wl_wdwake
);

4313 
	`MFREE
(
dhd
->
pub
.
osh
, dhd->
wl_wdwake
, (
wake_lock
));

4314 
dhd
->
wl_wdwake
 = 
NULL
;

4318 
	}
}

4322 
	$dhd_‰ì
(
dhd_pub_t
 *
dhdp
)

4324 
dhd_öfo_t
 *
dhd
;

4325 
	`DHD_TRACE
(("%s: E¡î\n", 
__FUNCTION__
));

4327 i‡(
dhdp
) {

4328 
i
;

4329 
i
 = 0; i < 
	`ARRAYSIZE
(
dhdp
->
ª‹dî_bufs
); i++) {

4330 i‡(
dhdp
->
ª‹dî_bufs
[
i
]) {

4331 
ª‹dî_öfo_t
 *
±r
;

4332 
uöt32
 
buf_size
 = (
ª‹dî_öfo
);

4334 
±r
 = 
dhdp
->
ª‹dî_bufs
[
i
];

4336 
buf_size
 +((
±r
->
max_idx
 + 1) * (*));

4337 
	`DHD_REORDER
(("free flow id buf %d, maxidx is %d, buf_size %d\n",

4338 
i
, 
±r
->
max_idx
, 
buf_size
));

4340 
	`MFREE
(
dhdp
->
osh
, dhdp->
ª‹dî_bufs
[
i
], 
buf_size
);

4341 
dhdp
->
ª‹dî_bufs
[
i
] = 
NULL
;

4344 
dhd
 = (
dhd_öfo_t
 *)
dhdp
->
öfo
;

4345 i‡(
dhd
)

4346 
	`MFREE
(
dhd
->
pub
.
osh
, dhd, (*dhd));

4348 
	}
}

4350 
__exô


4351 
	$dhd_moduÀ_˛ónup
()

4353 
	`DHD_TRACE
(("%s: E¡î\n", 
__FUNCTION__
));

4355 
	`dhd_bus_uƒegi°î
();

4357 #i‡
	`deföed
(
CONFIG_WIFI_CONTROL_FUNC
)

4358 
	`wl_™droid_wifi˘æ_func_dñ
();

4360 
	`wl_™droid_exô
();

4363 
	`dhd_cu°omî_gpio_wœn_˘æ
(
WLAN_POWER_OFF
);

4364 
	}
}

4367 
__öô


4368 
	$dhd_moduÀ_öô
()

4370 
îr‹
 = 0;

4372 #i‡1 && 
	`deföed
(
BCMLXSDMMC
Ë&& (
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 27))

4373 
ªåy
 = 
POWERUP_MAX_RETRY
;

4374 
chù_up
 = 0;

4377 
	`DHD_TRACE
(("%s: E¡î\n", 
__FUNCTION__
));

4379 
	`wl_™droid_öô
();

4381 #i‡
	`deföed
(
DHDTHREAD
)

4385 i‡((
dhd_w©chdog_¥io
 < 0Ë&& (
dhd_dpc_¥io
 < 0))

4389 i‡((
dhd_w©chdog_¥io
 >0Ë&& (
dhd_dpc_¥io
 >0Ë&& 
dhd_de„ºed_tx
)

4392 
	`DHD_ERROR
(("Invalid moduleÖarameters.\n"));

4393  -
EINVAL
;

4397 #i‡1 && 
	`deföed
(
BCMLXSDMMC
Ë&& (
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 27))

4399 
	`£ma_öô
(&
dhd_chùup_£m
, 0);

4400 
	`dhd_bus_ªg_sdio_nŸify
(&
dhd_chùup_£m
);

4401 
	`dhd_cu°omî_gpio_wœn_˘æ
(
WLAN_POWER_ON
);

4402 #i‡
	`deföed
(
CONFIG_WIFI_CONTROL_FUNC
)

4403 i‡(
	`wl_™droid_wifi˘æ_func_add
() < 0) {

4404 
	`dhd_bus_uƒeg_sdio_nŸify
();

4405 
Áû_1
;

4408 i‡(
	`down_timeout
(&
dhd_chùup_£m
,

4409 
	`m£cs_to_jiffõs
(
POWERUP_WAIT_MS
)) == 0) {

4410 
	`dhd_bus_uƒeg_sdio_nŸify
();

4411 
chù_up
 = 1;

4414 
	`DHD_ERROR
(("\nfailedÅoÖower up wifi chip,Ñetryágain (%dÜeft) **\n\n",

4415 
ªåy
+1));

4416 
	`dhd_bus_uƒeg_sdio_nŸify
();

4417 #i‡
	`deföed
(
CONFIG_WIFI_CONTROL_FUNC
)

4418 
	`wl_™droid_wifi˘æ_func_dñ
();

4420 
	`dhd_cu°omî_gpio_wœn_˘æ
(
WLAN_POWER_OFF
);

4421 } 
ªåy
-- > 0);

4423 i‡(!
chù_up
) {

4424 
	`DHD_ERROR
(("\nfailedÅoÖower up wifi chip, maxÑetryÑeached,Éxits **\n\n"));

4425  -
ENODEV
;

4428 
	`dhd_cu°omî_gpio_wœn_˘æ
(
WLAN_POWER_ON
);

4429 #i‡
	`deföed
(
CONFIG_WIFI_CONTROL_FUNC
)

4430 i‡(
	`wl_™droid_wifi˘æ_func_add
() < 0)

4431 
Áû_1
;

4436 #i‡1 && (
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 27))

4437 
	`£ma_öô
(&
dhd_ªgi°øti⁄_£m
, 0);

4441 
îr‹
 = 
	`dhd_bus_ªgi°î
();

4443 i‡(!
îr‹
)

4444 
	`¥ötf
("\n%s\n", 
dhd_vîsi⁄
);

4446 
	`DHD_ERROR
(("%s: sdio_ªgi°î_drivî faûed\n", 
__FUNCTION__
));

4447 
Áû_1
;

4450 #i‡(
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 27))

4456 i‡((
	`down_timeout
(&
dhd_ªgi°øti⁄_£m
,

4457 
	`m£cs_to_jiffõs
(
DHD_REGISTRATION_TIMEOUT
)) != 0) ||

4458 (
dhd_ªgi°øti⁄_check
 !
TRUE
)) {

4459 
îr‹
 = -
ENODEV
;

4460 
	`DHD_ERROR
(("%s: sdio_ªgi°î_drivîÅimeouà‹Éº‹ \n", 
__FUNCTION__
));

4461 
Áû_2
;

4464 #i‡
	`deföed
(
WL_CFG80211
)

4465 
	`wl_™droid_po°_öô
();

4468  
îr‹
;

4470 #i‡1 && (
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 27))

4471 
Áû_2
:

4472 
	`dhd_bus_uƒegi°î
();

4475 
Áû_1
:

4477 #i‡
	`deföed
(
CONFIG_WIFI_CONTROL_FUNC
)

4478 
	`wl_™droid_wifi˘æ_func_dñ
();

4482 
	`dhd_cu°omî_gpio_wœn_˘æ
(
WLAN_POWER_OFF
);

4484  
îr‹
;

4485 
	}
}

4487 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2, 6, 0)

4488 
œã_öôˇŒ
(
dhd_moduÀ_öô
);

4490 
moduÀ_öô
(
dhd_moduÀ_öô
);

4493 
moduÀ_exô
(
dhd_moduÀ_˛ónup
);

4499 
	$dhd_os_¥Ÿo_block
(
dhd_pub_t
 *
pub
)

4501 
dhd_öfo_t
 * 
dhd
 = (dhd_öfo_à*)(
pub
->
öfo
);

4503 i‡(
dhd
) {

4504 
	`down
(&
dhd
->
¥Ÿo_£m
);

4509 
	}
}

4512 
	$dhd_os_¥Ÿo_unblock
(
dhd_pub_t
 *
pub
)

4514 
dhd_öfo_t
 * 
dhd
 = (dhd_öfo_à*)(
pub
->
öfo
);

4516 i‡(
dhd
) {

4517 
	`up
(&
dhd
->
¥Ÿo_£m
);

4522 
	}
}

4525 
	$dhd_os_gë_io˘l_ª•_timeout
()

4527  (()
dhd_io˘l_timeout_m£c
);

4528 
	}
}

4531 
	$dhd_os_£t_io˘l_ª•_timeout
(
timeout_m£c
)

4533 
dhd_io˘l_timeout_m£c
 = ()
timeout_m£c
;

4534 
	}
}

4537 
	$dhd_os_io˘l_ª•_waô
(
dhd_pub_t
 *
pub
, 
uöt
 *
c⁄dôi⁄
, 
boﬁ
 *
≥ndög
)

4539 
dhd_öfo_t
 * 
dhd
 = (dhd_öfo_à*)(
pub
->
öfo
);

4540 
timeout
;

4543 #i‡(
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 27))

4544 
timeout
 = 
	`m£cs_to_jiffõs
(
dhd_io˘l_timeout_m£c
);

4546 
timeout
 = 
dhd_io˘l_timeout_m£c
 * 
HZ
 / 1000;

4549 
timeout
 = 
	`waô_evít_timeout
(
dhd
->
io˘l_ª•_waô
, (*
c⁄dôi⁄
),Åimeout);

4550  
timeout
;

4551 
	}
}

4554 
	$dhd_os_io˘l_ª•_wake
(
dhd_pub_t
 *
pub
)

4556 
dhd_öfo_t
 *
dhd
 = (dhd_öfo_à*)(
pub
->
öfo
);

4558 i‡(
	`waôqueue_a˘ive
(&
dhd
->
io˘l_ª•_waô
)) {

4559 
	`wake_up
(&
dhd
->
io˘l_ª•_waô
);

4563 
	}
}

4566 
	$dhd_os_wd_timî
(*
bus
, 
uöt
 
wdtick
)

4568 
dhd_pub_t
 *
pub
 = 
bus
;

4569 
dhd_öfo_t
 *
dhd
 = (dhd_öfo_à*)
pub
->
öfo
;

4570 
Êags
;

4572 
	`DHD_TRACE
(("%s: E¡î\n", 
__FUNCTION__
));

4574 i‡(!
dhd
)

4576 i‡(
wdtick
)

4577 
	`DHD_OS_WD_WAKE_LOCK
(
pub
);

4579 
Êags
 = 
	`dhd_os_•ö_lock
(
pub
);

4582 i‡(
pub
->
bus°©e
 =
DHD_BUS_DOWN
) {

4583 
	`dhd_os_•ö_u∆ock
(
pub
, 
Êags
);

4584 
	`DHD_OS_WD_WAKE_UNLOCK
(
pub
);

4589 i‡(!
wdtick
 && 
dhd
->
wd_timî_vÆid
 =
TRUE
) {

4590 
dhd
->
wd_timî_vÆid
 = 
FALSE
;

4591 
	`dhd_os_•ö_u∆ock
(
pub
, 
Êags
);

4592 #ifde‡
DHDTHREAD


4593 
	`dñ_timî_sync
(&
dhd
->
timî
);

4595 
	`dñ_timî
(&
dhd
->
timî
);

4598 
	`DHD_OS_WD_WAKE_UNLOCK
(
pub
);

4602 i‡(
wdtick
) {

4603 
dhd_w©chdog_ms
 = (
uöt
)
wdtick
;

4605 
	`mod_timî
(&
dhd
->
timî
, 
jiffõs
 + 
	`m£cs_to_jiffõs
(
dhd_w©chdog_ms
));

4606 
dhd
->
wd_timî_vÆid
 = 
TRUE
;

4608 
	`dhd_os_•ö_u∆ock
(
pub
, 
Êags
);

4609 
	}
}

4612 
	$dhd_os_›í_image
(*
fûíame
)

4614 
fûe
 *
Â
;

4616 
Â
 = 
	`fûp_›í
(
fûíame
, 
O_RDONLY
, 0);

4623 i‡(
	`IS_ERR
(
Â
))

4624 
Â
 = 
NULL
;

4626  
Â
;

4627 
	}
}

4630 
	$dhd_os_gë_image_block
(*
buf
, 
Àn
, *
image
)

4632 
fûe
 *
Â
 = (fûê*)
image
;

4633 
rdÀn
;

4635 i‡(!
image
)

4638 
rdÀn
 = 
	`kî√l_ªad
(
Â
, fp->
f_pos
, 
buf
, 
Àn
);

4639 i‡(
rdÀn
 > 0)

4640 
Â
->
f_pos
 +
rdÀn
;

4642  
rdÀn
;

4643 
	}
}

4646 
	$dhd_os_˛o£_image
(*
image
)

4648 i‡(
image
)

4649 
	`fûp_˛o£
((
fûe
 *)
image
, 
NULL
);

4650 
	}
}

4654 
	$dhd_os_sdlock
(
dhd_pub_t
 *
pub
)

4656 
dhd_öfo_t
 *
dhd
;

4658 
dhd
 = (
dhd_öfo_t
 *)(
pub
->
öfo
);

4660 #ifde‡
DHDTHREAD


4661 i‡(
dhd
->
thªads_⁄ly
)

4662 
	`down
(&
dhd
->
sd£m
);

4665 
	`•ö_lock_bh
(&
dhd
->
sdlock
);

4666 
	}
}

4669 
	$dhd_os_sdu∆ock
(
dhd_pub_t
 *
pub
)

4671 
dhd_öfo_t
 *
dhd
;

4673 
dhd
 = (
dhd_öfo_t
 *)(
pub
->
öfo
);

4675 #ifde‡
DHDTHREAD


4676 i‡(
dhd
->
thªads_⁄ly
)

4677 
	`up
(&
dhd
->
sd£m
);

4680 
	`•ö_u∆ock_bh
(&
dhd
->
sdlock
);

4681 
	}
}

4684 
	$dhd_os_sdlock_txq
(
dhd_pub_t
 *
pub
)

4686 
dhd_öfo_t
 *
dhd
;

4688 
dhd
 = (
dhd_öfo_t
 *)(
pub
->
öfo
);

4689 
	`•ö_lock_bh
(&
dhd
->
txqlock
);

4690 
	}
}

4693 
	$dhd_os_sdu∆ock_txq
(
dhd_pub_t
 *
pub
)

4695 
dhd_öfo_t
 *
dhd
;

4697 
dhd
 = (
dhd_öfo_t
 *)(
pub
->
öfo
);

4698 
	`•ö_u∆ock_bh
(&
dhd
->
txqlock
);

4699 
	}
}

4702 
	$dhd_os_sdlock_rxq
(
dhd_pub_t
 *
pub
)

4704 
	}
}

4707 
	$dhd_os_sdu∆ock_rxq
(
dhd_pub_t
 *
pub
)

4709 
	}
}

4712 
	$dhd_os_sdtxlock
(
dhd_pub_t
 *
pub
)

4714 
	`dhd_os_sdlock
(
pub
);

4715 
	}
}

4718 
	$dhd_os_sdtxu∆ock
(
dhd_pub_t
 *
pub
)

4720 
	`dhd_os_sdu∆ock
(
pub
);

4721 
	}
}

4723 #i‡
deföed
(
CONFIG_DHD_USE_STATIC_BUF
)

4724 
uöt8
* 
	$dhd_os_¥óŒoc
(*
osh
, 
£˘i⁄
, 
uöt
 
size
)

4726  (
uöt8
*)
	`wl_™droid_¥óŒoc
(
£˘i⁄
, 
size
);

4727 
	}
}

4729 
	$dhd_os_¥e‰ì
(*
osh
, *
addr
, 
uöt
 
size
)

4731 
	}
}

4734 #i‡
deföed
(
CONFIG_WIRELESS_EXT
)

4735 
iw_°©i°ics
 *

4736 
	$dhd_gë_wúñess_°©s
(
√t_devi˚
 *
dev
)

4738 
ªs
 = 0;

4739 
dhd_öfo_t
 *
dhd
 = *(dhd_öfo_à**)
	`√tdev_¥iv
(
dev
);

4741 i‡(!
dhd
->
pub
.
up
) {

4742  
NULL
;

4745 
ªs
 = 
	`wl_iw_gë_wúñess_°©s
(
dev
, &
dhd
->
iw
.
w°©s
);

4747 i‡(
ªs
 == 0)

4748  &
dhd
->
iw
.
w°©s
;

4750  
NULL
;

4751 
	}
}

4755 
	$dhd_wl_ho°_evít
(
dhd_öfo_t
 *
dhd
, *
ifidx
, *
pktd©a
,

4756 
wl_evít_msg_t
 *
evít
, **
d©a
)

4758 
bcmîr‹
 = 0;

4759 
	`ASSERT
(
dhd
 !
NULL
);

4761 
bcmîr‹
 = 
	`wl_ho°_evít
(&
dhd
->
pub
, 
ifidx
, 
pktd©a
, 
evít
, 
d©a
);

4762 i‡(
bcmîr‹
 !
BCME_OK
)

4763  (
bcmîr‹
);

4765 #i‡
	`deföed
(
CONFIG_WIRELESS_EXT
)

4766 i‡(
evít
->
bsscfgidx
 == 0) {

4771 
	`ASSERT
(
dhd
->
iÊi°
[*
ifidx
] !
NULL
);

4772 
	`ASSERT
(
dhd
->
iÊi°
[*
ifidx
]->
√t
 !
NULL
);

4774 i‡(
dhd
->
iÊi°
[*
ifidx
]->
√t
) {

4775 
	`wl_iw_evít
(
dhd
->
iÊi°
[*
ifidx
]->
√t
, 
evít
, *
d©a
);

4780 #ifde‡
WL_CFG80211


4781 i‡((
	`¡oh32
(
evít
->
evít_ty≥
Ë=
WLC_E_IF
) &&

4782 (((
dhd_if_evít_t
 *)*
d©a
)->
a˘i⁄
 =
WLC_E_IF_ADD
))

4787  (
BCME_OK
);

4788 i‡((
	`wl_cfg80211_is_¥ogªss_ifch™ge
() ||

4789 
	`wl_cfg80211_is_¥ogªss_iÁdd
()Ë&& (*
ifidx
 != 0)) {

4794  (
BCME_OK
);

4797 
	`ASSERT
(
dhd
->
iÊi°
[*
ifidx
] !
NULL
);

4798 
	`ASSERT
(
dhd
->
iÊi°
[*
ifidx
]->
√t
 !
NULL
);

4799 i‡(
dhd
->
iÊi°
[*
ifidx
]->
evít2cfg80211
 && dhd->iÊi°[*ifidx]->
√t
) {

4800 
	`wl_cfg80211_evít
(
dhd
->
iÊi°
[*
ifidx
]->
√t
, 
evít
, *
d©a
);

4804  (
bcmîr‹
);

4805 
	}
}

4809 
	$dhd_£ndup_evít
(
dhd_pub_t
 *
dhdp
, 
wl_evít_msg_t
 *
evít
, *
d©a
)

4811 
	`¡oh32
(
evít
->
evít_ty≥
)) {

4812 #ifde‡
WLBTAMP


4814 
WLC_E_BTA_HCI_EVENT
: {

4815 
sk_buff
 *
p
, *
skb
;

4816 
bcm_evít_t
 *
msg
;

4817 
wl_evít_msg_t
 *
p_bcm_evít
;

4818 *
±r
;

4819 
uöt32
 
Àn
;

4820 
uöt32
 
pkéí
;

4821 
dhd_if_t
 *
iÂ
;

4822 
dhd_öfo_t
 *
dhd
;

4823 
uch¨
 *
ëh
;

4824 
ifidx
;

4826 
Àn
 = 
	`¡oh32
(
evít
->
d©Æí
);

4827 
pkéí
 = (
bcm_evít_t
Ë+ 
Àn
 + 2;

4828 
dhd
 = 
dhdp
->
öfo
;

4829 
ifidx
 = 
	`dhd_i‚ame2idx
(
dhd
, 
evít
->
i‚ame
);

4831 i‡((
p
 = 
	`PKTGET
(
dhdp
->
osh
, 
pkéí
, 
FALSE
))) {

4832 
	`ASSERT
(
	`ISALIGNED
((
uöçå
)
	`PKTDATA
(
dhdp
->
osh
, 
p
), (
uöt32
)));

4834 
msg
 = (
bcm_evít_t
 *Ë
	`PKTDATA
(
dhdp
->
osh
, 
p
);

4836 
	`bc›y
(&
dhdp
->
mac
, &
msg
->
ëh
.
ëhî_dho°
, 
ETHER_ADDR_LEN
);

4837 
	`bc›y
(&
dhdp
->
mac
, &
msg
->
ëh
.
ëhî_sho°
, 
ETHER_ADDR_LEN
);

4838 
	`ETHER_TOGGLE_LOCALADDR
(&
msg
->
ëh
.
ëhî_sho°
);

4840 
msg
->
ëh
.
ëhî_ty≥
 = 
	`ht⁄16
(
ETHER_TYPE_BRCM
);

4843 
msg
->
bcm_hdr
.
subty≥
 = 
	`ht⁄16
(
BCMILCP_SUBTYPE_VENDOR_LONG
);

4844 
msg
->
bcm_hdr
.
vîsi⁄
 = 
BCMILCP_BCM_SUBTYPEHDR_VERSION
;

4845 
	`bc›y
(
BRCM_OUI
, &
msg
->
bcm_hdr
.
oui
[0], 
DOT11_OUI_LEN
);

4850 
msg
->
bcm_hdr
.
Àngth
 = 
	`ht⁄16
(
BCMILCP_BCM_SUBTYPEHDR_MINLENGTH
 +

4851 
BCM_MSG_LEN
 + (
wl_evít_msg_t
Ë+ (
uöt16
)
Àn
);

4852 
msg
->
bcm_hdr
.
u§_subty≥
 = 
	`ht⁄16
(
BCMILCP_BCM_SUBTYPE_EVENT
);

4854 
	`PKTSETLEN
(
dhdp
->
osh
, 
p
, ((
bcm_evít_t
Ë+ 
Àn
 + 2));

4859 
p_bcm_evít
 = &
msg
->
evít
;

4860 
	`bc›y
(
evít
, 
p_bcm_evít
, (
wl_evít_msg_t
));

4863 
	`bc›y
(
d©a
, (
p_bcm_evít
 + 1), 
Àn
);

4865 
msg
->
bcm_hdr
.
Àngth
 = 
	`ht⁄16
((
wl_evít_msg_t
) +

4866 
	`¡oh16
(
msg
->
bcm_hdr
.
Àngth
));

4867 
	`PKTSETLEN
(
dhdp
->
osh
, 
p
, ((
bcm_evít_t
Ë+ 
Àn
 + 2));

4869 
±r
 = (*)(
msg
 + 1);

4873 
±r
[
Àn
+0] = 0x00;

4874 
±r
[
Àn
+1] = 0x00;

4876 
skb
 = 
	`PKTTONATIVE
(
dhdp
->
osh
, 
p
);

4877 
ëh
 = 
skb
->
d©a
;

4878 
Àn
 = 
skb
->len;

4880 
iÂ
 = 
dhd
->
iÊi°
[
ifidx
];

4881 i‡(
iÂ
 =
NULL
)

4882 
iÂ
 = 
dhd
->
iÊi°
[0];

4884 
	`ASSERT
(
iÂ
);

4885 
skb
->
dev
 = 
iÂ
->
√t
;

4886 
skb
->
¥Ÿocﬁ
 = 
	`ëh_ty≥_å™s
(skb, skb->
dev
);

4888 
skb
->
d©a
 = 
ëh
;

4889 
skb
->
Àn
 =Üen;

4892 
	`skb_puŒ
(
skb
, 
ETH_HLEN
);

4895 i‡(
	`ö_öãºu±
()) {

4896 
	`√tif_rx
(
skb
);

4898 
	`√tif_rx_ni
(
skb
);

4903 
	`DHD_ERROR
(("%s: u«bÀÅÿÆlo¯sk_buf", 
__FUNCTION__
));

4912 
	}
}

4914 
	$dhd_waô_f‹_evít
(
dhd_pub_t
 *
dhd
, 
boﬁ
 *
lockv¨
)

4916 #i‡1 && (
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 0))

4917 
dhd_öfo
 *
dhdöfo
 = 
dhd
->
öfo
;

4919 #i‡(
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 27))

4920 
timeout
 = 
	`m£cs_to_jiffõs
(
IOCTL_RESP_TIMEOUT
);

4922 
timeout
 = (
IOCTL_RESP_TIMEOUT
 / 1000Ë* 
HZ
;

4925 
	`dhd_os_sdu∆ock
(
dhd
);

4926 
	`waô_evít_timeout
(
dhdöfo
->
˘æ_waô
, (*
lockv¨
 =
FALSE
), 
timeout
);

4927 
	`dhd_os_sdlock
(
dhd
);

4930 
	}
}

4932 
	$dhd_waô_evít_wakeup
(
dhd_pub_t
 *
dhd
)

4934 #i‡1 && (
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 0))

4935 
dhd_öfo
 *
dhdöfo
 = 
dhd
->
öfo
;

4936 i‡(
	`waôqueue_a˘ive
(&
dhdöfo
->
˘æ_waô
))

4937 
	`wake_up
(&
dhdöfo
->
˘æ_waô
);

4940 
	}
}

4943 
	$dhd_dev_ª£t
(
√t_devi˚
 *
dev
, 
uöt8
 
Êag
)

4945 
ªt
;

4947 
dhd_öfo_t
 *
dhd
 = *(dhd_öfo_à**)
	`√tdev_¥iv
(
dev
);

4949 i‡(
Êag
 =
TRUE
) {

4951 i‡(
	`dhd_wl_io˘l_cmd
(&
dhd
->
pub
, 
WLC_DOWN
, 
NULL
, 0, 
TRUE
, 0) < 0) {

4952 
	`DHD_TRACE
(("%s: w»dow¿Áûed\n", 
__FUNCTION__
));

4956 
ªt
 = 
	`dhd_bus_devª£t
(&
dhd
->
pub
, 
Êag
);

4957 i‡(
ªt
) {

4958 
	`DHD_ERROR
(("%s: dhd_bus_devª£t: %d\n", 
__FUNCTION__
, 
ªt
));

4959  
ªt
;

4962  
ªt
;

4963 
	}
}

4965 
	$√t_os_£t_su•íd_dißbÀ
(
√t_devi˚
 *
dev
, 
vÆ
)

4967 
dhd_öfo_t
 *
dhd
 = *(dhd_öfo_à**)
	`√tdev_¥iv
(
dev
);

4968 
ªt
 = 0;

4970 i‡(
dhd
) {

4971 
ªt
 = 
dhd
->
pub
.
su•íd_dißbÀ_Êag
;

4972 
dhd
->
pub
.
su•íd_dißbÀ_Êag
 = 
vÆ
;

4974  
ªt
;

4975 
	}
}

4977 
	$√t_os_£t_su•íd
(
√t_devi˚
 *
dev
, 
vÆ
, 
f‹˚
)

4979 
ªt
 = 0;

4980 
dhd_öfo_t
 *
dhd
 = *(dhd_öfo_à**)
	`√tdev_¥iv
(
dev
);

4982 i‡(
dhd
) {

4983 #i‡
	`deföed
(
CONFIG_HAS_EARLYSUSPEND
Ë&& deföed(
DHD_USE_EARLYSUSPEND
)

4984 
ªt
 = 
	`dhd_£t_su•íd
(
vÆ
, &
dhd
->
pub
);

4986 
ªt
 = 
	`dhd_su•íd_ªsume_hñ≥r
(
dhd
, 
vÆ
, 
f‹˚
);

4988 #ifde‡
WL_CFG80211


4989 
	`wl_cfg80211_upd©e_powî_mode
(
dev
);

4992  
ªt
;

4993 
	}
}

4995 
	$√t_os_£t_su•íd_b˙_li_dtim
(
√t_devi˚
 *
dev
, 
vÆ
)

4997 
dhd_öfo_t
 *
dhd
 = *(dhd_öfo_à**)
	`√tdev_¥iv
(
dev
);

4999 i‡(
dhd
)

5000 
dhd
->
pub
.
su•íd_b˙_li_dtim
 = 
vÆ
;

5003 
	}
}

5005 #ifde‡
PKT_FILTER_SUPPORT


5006 
	$√t_os_rxfûãr_add_ªmove
(
√t_devi˚
 *
dev
, 
add_ªmove
, 
num
)

5008 #i‚de‡
GAN_LITE_NAT_KEEPALIVE_FILTER


5009 
dhd_öfo_t
 *
dhd
 = *(dhd_öfo_à**)
	`√tdev_¥iv
(
dev
);

5010 *
fûãΩ
 = 
NULL
;

5011 
ªt
 = 0;

5013 i‡(!
dhd
 || (
num
 =
DHD_UNICAST_FILTER_NUM
) ||

5014 (
num
 =
DHD_MDNS_FILTER_NUM
))

5015  
ªt
;

5016 i‡(
num
 >
dhd
->
pub
.
pktfûãr_cou¡
)

5017  -
EINVAL
;

5018 i‡(
add_ªmove
) {

5019 
num
) {

5020 
DHD_BROADCAST_FILTER_NUM
:

5021 
fûãΩ
 = "101 0 0 0 0xFFFFFFFFFFFF 0xFFFFFFFFFFFF";

5023 
DHD_MULTICAST4_FILTER_NUM
:

5024 
fûãΩ
 = "102 0 0 0 0xFFFFFF 0x01005E";

5026 
DHD_MULTICAST6_FILTER_NUM
:

5027 
fûãΩ
 = "103 0 0 0 0xFFFF 0x3333";

5030  -
EINVAL
;

5033 
dhd
->
pub
.
pktfûãr
[
num
] = 
fûãΩ
;

5034 
	`dhd_pktfûãr_ofÊﬂd_£t
(&
dhd
->
pub
, dhd->pub.
pktfûãr
[
num
]);

5035  
ªt
;

5039 
	}
}

5041 
	$dhd_os_íabÀ_∑ckë_fûãr
(
dhd_pub_t
 *
dhdp
, 
vÆ
)

5043 
ªt
 = 0;

5050 i‡(
dhdp
 && dhdp->
up
) {

5051 i‡(
dhdp
->
ö_su•íd
) {

5052 i‡(!
vÆ
 || (vÆ && !
dhdp
->
su•íd_dißbÀ_Êag
))

5053 
	`dhd_íabÀ_∑ckë_fûãr
(
vÆ
, 
dhdp
);

5056  
ªt
;

5057 
	}
}

5060 
	$√t_os_íabÀ_∑ckë_fûãr
(
√t_devi˚
 *
dev
, 
vÆ
)

5062 
dhd_öfo_t
 *
dhd
 = *(dhd_öfo_à**)
	`√tdev_¥iv
(
dev
);

5064  
	`dhd_os_íabÀ_∑ckë_fûãr
(&
dhd
->
pub
, 
vÆ
);

5065 
	}
}

5069 
	$dhd_dev_öô_io˘l
(
√t_devi˚
 *
dev
)

5071 
dhd_öfo_t
 *
dhd
 = *(dhd_öfo_à**)
	`√tdev_¥iv
(
dev
);

5072  
	`dhd_¥eöô_io˘ls
(&
dhd
->
pub
);

5073 
	}
}

5075 #ifde‡
PNO_SUPPORT


5078 
	$dhd_dev_≤o_ª£t
(
√t_devi˚
 *
dev
)

5080 
dhd_öfo_t
 *
dhd
 = *(dhd_öfo_à**)
	`√tdev_¥iv
(
dev
);

5082  (
	`dhd_≤o_˛ón
(&
dhd
->
pub
));

5083 
	}
}

5088 
	$dhd_dev_≤o_íabÀ
(
√t_devi˚
 *
dev
, 
p‚_íabÀd
)

5090 
dhd_öfo_t
 *
dhd
 = *(dhd_öfo_à**)
	`√tdev_¥iv
(
dev
);

5092  (
	`dhd_≤o_íabÀ
(&
dhd
->
pub
, 
p‚_íabÀd
));

5093 
	}
}

5098 
	$dhd_dev_≤o_£t
(
√t_devi˚
 *
dev
, 
wlc_ssid_t
* 
ssids_loˇl
, 
nssid
,

5099 
ush‹t
 
sˇn_‰
, 
≤o_ª≥©
, 
≤o_‰eq_expo_max
)

5101 
dhd_öfo_t
 *
dhd
 = *(dhd_öfo_à**)
	`√tdev_¥iv
(
dev
);

5103  (
	`dhd_≤o_£t
(&
dhd
->
pub
, 
ssids_loˇl
, 
nssid
, 
sˇn_‰
, 
≤o_ª≥©
, 
≤o_‰eq_expo_max
));

5104 
	}
}

5108 
	$dhd_dev_gë_≤o_°©us
(
√t_devi˚
 *
dev
)

5110 
dhd_öfo_t
 *
dhd
 = *(dhd_öfo_à**)
	`√tdev_¥iv
(
dev
);

5112  (
	`dhd_≤o_gë_°©us
(&
dhd
->
pub
));

5113 
	}
}

5117 #i‡(
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2, 6, 27)) && (1)

5118 
	$dhd_h™g_¥o˚ss
(
w‹k_°ru˘
 *
w‹k
)

5120 
dhd_öfo_t
 *
dhd
;

5121 
√t_devi˚
 *
dev
;

5123 
dhd
 = (
dhd_öfo_t
 *)
	`c⁄èöî_of
(
w‹k
, dhd_öfo_t, 
w‹k_h™g
);

5124 
dev
 = 
dhd
->
iÊi°
[0]->
√t
;

5126 i‡(
dev
) {

5127 
	`π∆_lock
();

5128 
	`dev_˛o£
(
dev
);

5129 
	`π∆_u∆ock
();

5130 #i‡
	`deföed
(
WL_WIRELESS_EXT
)

5131 
	`wl_iw_£nd_¥iv_evít
(
dev
, "HANG");

5133 #i‡
	`deföed
(
WL_CFG80211
)

5134 
	`wl_cfg80211_h™g
(
dev
, 
WLAN_REASON_UNSPECIFIED
);

5137 
	}
}

5139 
	$dhd_os_£nd_h™g_mesßge
(
dhd_pub_t
 *
dhdp
)

5141 
ªt
 = 0;

5142 i‡(
dhdp
) {

5143 i‡(!
dhdp
->
h™g_was_£¡
) {

5144 
dhdp
->
h™g_was_£¡
 = 1;

5145 
	`scheduÀ_w‹k
(&
dhdp
->
öfo
->
w‹k_h™g
);

5148  
ªt
;

5149 
	}
}

5151 
	$√t_os_£nd_h™g_mesßge
(
√t_devi˚
 *
dev
)

5153 
dhd_öfo_t
 *
dhd
 = *(dhd_öfo_à**)
	`√tdev_¥iv
(
dev
);

5154 
ªt
 = 0;

5156 i‡(
dhd
)

5157 #i‡(
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 27))

5158 
ªt
 = 
	`dhd_os_£nd_h™g_mesßge
(&
dhd
->
pub
);

5160 
ªt
 = 
	`wl_cfg80211_h™g
(
dev
, 
WLAN_REASON_UNSPECIFIED
);

5162  
ªt
;

5163 
	}
}

5166 
	$dhd_bus_cou¡ry_£t
(
√t_devi˚
 *
dev
, 
wl_cou¡ry_t
 *
c•ec
)

5168 
dhd_öfo_t
 *
dhd
 = *(dhd_öfo_à**)
	`√tdev_¥iv
(
dev
);

5170 i‡(
dhd
 && dhd->
pub
.
up
) {

5171 
	`mem˝y
(&
dhd
->
pub
.
dhd_c•ec
, 
c•ec
, (
wl_cou¡ry_t
));

5172 #ifde‡
WL_CFG80211


5173 
	`wl_upd©e_wùhyb™ds
(
NULL
, 
åue
);

5176 
	}
}

5178 
	$dhd_bus_b™d_£t
(
√t_devi˚
 *
dev
, 
uöt
 
b™d
)

5180 
dhd_öfo_t
 *
dhd
 = *(dhd_öfo_à**)
	`√tdev_¥iv
(
dev
);

5181 i‡(
dhd
 && dhd->
pub
.
up
) {

5182 #ifde‡
WL_CFG80211


5183 
	`wl_upd©e_wùhyb™ds
(
NULL
, 
åue
);

5186 
	}
}

5188 
	$dhd_√t_if_lock
(
√t_devi˚
 *
dev
)

5190 
dhd_öfo_t
 *
dhd
 = *(dhd_öfo_à**)
	`√tdev_¥iv
(
dev
);

5191 
	`dhd_√t_if_lock_loˇl
(
dhd
);

5192 
	}
}

5194 
	$dhd_√t_if_u∆ock
(
√t_devi˚
 *
dev
)

5196 
dhd_öfo_t
 *
dhd
 = *(dhd_öfo_à**)
	`√tdev_¥iv
(
dev
);

5197 
	`dhd_√t_if_u∆ock_loˇl
(
dhd
);

5198 
	}
}

5200 
	$dhd_√t_if_lock_loˇl
(
dhd_öfo_t
 *
dhd
)

5202 #i‡(
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 25)) && 1

5203 i‡(
dhd
)

5204 
	`muãx_lock
(&
dhd
->
dhd_√t_if_muãx
);

5206 
	}
}

5208 
	$dhd_√t_if_u∆ock_loˇl
(
dhd_öfo_t
 *
dhd
)

5210 #i‡(
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 25)) && 1

5211 i‡(
dhd
)

5212 
	`muãx_u∆ock
(&
dhd
->
dhd_√t_if_muãx
);

5214 
	}
}

5216 
	$dhd_su•íd_lock
(
dhd_pub_t
 *
pub
)

5218 #i‡(
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 25)) && 1

5219 
dhd_öfo_t
 *
dhd
 = (dhd_öfo_à*)(
pub
->
öfo
);

5220 i‡(
dhd
)

5221 
	`muãx_lock
(&
dhd
->
dhd_su•íd_muãx
);

5223 
	}
}

5225 
	$dhd_su•íd_u∆ock
(
dhd_pub_t
 *
pub
)

5227 #i‡(
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 25)) && 1

5228 
dhd_öfo_t
 *
dhd
 = (dhd_öfo_à*)(
pub
->
öfo
);

5229 i‡(
dhd
)

5230 
	`muãx_u∆ock
(&
dhd
->
dhd_su•íd_muãx
);

5232 
	}
}

5234 
	$dhd_os_•ö_lock
(
dhd_pub_t
 *
pub
)

5236 
dhd_öfo_t
 *
dhd
 = (dhd_öfo_à*)(
pub
->
öfo
);

5237 
Êags
 = 0;

5239 i‡(
dhd
)

5240 
	`•ö_lock_úqßve
(&
dhd
->
dhd_lock
, 
Êags
);

5242  
Êags
;

5243 
	}
}

5245 
	$dhd_os_•ö_u∆ock
(
dhd_pub_t
 *
pub
, 
Êags
)

5247 
dhd_öfo_t
 *
dhd
 = (dhd_öfo_à*)(
pub
->
öfo
);

5249 i‡(
dhd
)

5250 
	`•ö_u∆ock_úqª°‹e
(&
dhd
->
dhd_lock
, 
Êags
);

5251 
	}
}

5254 
	$dhd_gë_≥nd_8021x_˙t
(
dhd_öfo_t
 *
dhd
)

5256  (
	`©omic_ªad
(&
dhd
->
≥nd_8021x_˙t
));

5257 
	}
}

5259 
	#MAX_WAIT_FOR_8021X_TX
 25

	)

5262 
	$dhd_waô_≥nd8021x
(
√t_devi˚
 *
dev
)

5264 
dhd_öfo_t
 *
dhd
 = *(dhd_öfo_à**)
	`√tdev_¥iv
(
dev
);

5265 
timeout
 = 
	`m£cs_to_jiffõs
(10);

5266 
¡imes
 = 
MAX_WAIT_FOR_8021X_TX
;

5267 
≥nd
 = 
	`dhd_gë_≥nd_8021x_˙t
(
dhd
);

5269 
¡imes
 && 
≥nd
) {

5270 i‡(
≥nd
) {

5271 
	`£t_cuºít_°©e
(
TASK_INTERRUPTIBLE
);

5272 
	`scheduÀ_timeout
(
timeout
);

5273 
	`£t_cuºít_°©e
(
TASK_RUNNING
);

5274 
¡imes
--;

5276 
≥nd
 = 
	`dhd_gë_≥nd_8021x_˙t
(
dhd
);

5278 i‡(
¡imes
 == 0)

5279 
	`DHD_ERROR
(("%s: TIMEOUT\n", 
__FUNCTION__
));

5280  
≥nd
;

5281 
	}
}

5283 #ifde‡
DHD_DEBUG


5285 
	$wrôe_to_fûe
(
dhd_pub_t
 *
dhd
, 
uöt8
 *
buf
, 
size
)

5287 
ªt
 = 0;

5288 
fûe
 *
Â
;

5289 
mm_£gmít_t
 
ﬁd_fs
;

5290 
loff_t
 
pos
 = 0;

5293 
ﬁd_fs
 = 
	`gë_fs
();

5294 
	`£t_fs
(
KERNEL_DS
);

5297 
Â
 = 
	`fûp_›í
("/tmp/mem_dump", 
O_WRONLY
|
O_CREAT
, 0640);

5298 i‡(!
Â
) {

5299 
	`¥ötf
("%s: o≥¿fûêîr‹\n", 
__FUNCTION__
);

5300 
ªt
 = -1;

5301 
exô
;

5305 
Â
->
f_›
->
	`wrôe
(Â, 
buf
, 
size
, &
pos
);

5307 
exô
:

5309 
	`MFREE
(
dhd
->
osh
, 
buf
, 
size
);

5311 i‡(
Â
)

5312 
	`fûp_˛o£
(
Â
, 
cuºít
->
fûes
);

5314 
	`£t_fs
(
ﬁd_fs
);

5316  
ªt
;

5317 
	}
}

5320 
	$dhd_os_wake_lock_timeout
(
dhd_pub_t
 *
pub
)

5322 
dhd_öfo_t
 *
dhd
 = (dhd_öfo_à*)(
pub
->
öfo
);

5323 
Êags
;

5324 
ªt
 = 0;

5326 i‡(
dhd
) {

5327 
	`•ö_lock_úqßve
(&
dhd
->
wakñock_•ölock
, 
Êags
);

5328 
ªt
 = 
dhd
->
wakñock_rx_timeout_íabÀ
 > dhd->
wakñock_˘æ_timeout_íabÀ
 ?

5329 
dhd
->
wakñock_rx_timeout_íabÀ
 : dhd->
wakñock_˘æ_timeout_íabÀ
;

5330 #ifde‡
CONFIG_HAS_WAKELOCK


5331 i‡(
dhd
->
wakñock_rx_timeout_íabÀ
)

5332 
	`wake_lock_timeout
(
dhd
->
wl_rxwake
,

5333 
	`m£cs_to_jiffõs
(
dhd
->
wakñock_rx_timeout_íabÀ
));

5334 i‡(
dhd
->
wakñock_˘æ_timeout_íabÀ
)

5335 
	`wake_lock_timeout
(
dhd
->
wl_˘æwake
,

5336 
	`m£cs_to_jiffõs
(
dhd
->
wakñock_˘æ_timeout_íabÀ
));

5338 
dhd
->
wakñock_rx_timeout_íabÀ
 = 0;

5339 
dhd
->
wakñock_˘æ_timeout_íabÀ
 = 0;

5340 
	`•ö_u∆ock_úqª°‹e
(&
dhd
->
wakñock_•ölock
, 
Êags
);

5342  
ªt
;

5343 
	}
}

5345 
	$√t_os_wake_lock_timeout
(
√t_devi˚
 *
dev
)

5347 
dhd_öfo_t
 *
dhd
 = *(dhd_öfo_à**)
	`√tdev_¥iv
(
dev
);

5348 
ªt
 = 0;

5350 i‡(
dhd
)

5351 
ªt
 = 
	`dhd_os_wake_lock_timeout
(&
dhd
->
pub
);

5352  
ªt
;

5353 
	}
}

5355 
	$dhd_os_wake_lock_rx_timeout_íabÀ
(
dhd_pub_t
 *
pub
, 
vÆ
)

5357 
dhd_öfo_t
 *
dhd
 = (dhd_öfo_à*)(
pub
->
öfo
);

5358 
Êags
;

5360 i‡(
dhd
) {

5361 
	`•ö_lock_úqßve
(&
dhd
->
wakñock_•ölock
, 
Êags
);

5362 i‡(
vÆ
 > 
dhd
->
wakñock_rx_timeout_íabÀ
)

5363 
dhd
->
wakñock_rx_timeout_íabÀ
 = 
vÆ
;

5364 
	`•ö_u∆ock_úqª°‹e
(&
dhd
->
wakñock_•ölock
, 
Êags
);

5367 
	}
}

5369 
	$dhd_os_wake_lock_˘æ_timeout_íabÀ
(
dhd_pub_t
 *
pub
, 
vÆ
)

5371 
dhd_öfo_t
 *
dhd
 = (dhd_öfo_à*)(
pub
->
öfo
);

5372 
Êags
;

5374 i‡(
dhd
) {

5375 
	`•ö_lock_úqßve
(&
dhd
->
wakñock_•ölock
, 
Êags
);

5376 i‡(
vÆ
 > 
dhd
->
wakñock_˘æ_timeout_íabÀ
)

5377 
dhd
->
wakñock_˘æ_timeout_íabÀ
 = 
vÆ
;

5378 
	`•ö_u∆ock_úqª°‹e
(&
dhd
->
wakñock_•ölock
, 
Êags
);

5381 
	}
}

5383 
	$√t_os_wake_lock_rx_timeout_íabÀ
(
√t_devi˚
 *
dev
, 
vÆ
)

5385 
dhd_öfo_t
 *
dhd
 = *(dhd_öfo_à**)
	`√tdev_¥iv
(
dev
);

5386 
ªt
 = 0;

5388 i‡(
dhd
)

5389 
ªt
 = 
	`dhd_os_wake_lock_rx_timeout_íabÀ
(&
dhd
->
pub
, 
vÆ
);

5390  
ªt
;

5391 
	}
}

5393 
	$√t_os_wake_lock_˘æ_timeout_íabÀ
(
√t_devi˚
 *
dev
, 
vÆ
)

5395 
dhd_öfo_t
 *
dhd
 = *(dhd_öfo_à**)
	`√tdev_¥iv
(
dev
);

5396 
ªt
 = 0;

5398 i‡(
dhd
)

5399 
ªt
 = 
	`dhd_os_wake_lock_˘æ_timeout_íabÀ
(&
dhd
->
pub
, 
vÆ
);

5400  
ªt
;

5401 
	}
}

5403 
	$dhd_os_wake_lock
(
dhd_pub_t
 *
pub
)

5405 
dhd_öfo_t
 *
dhd
 = (dhd_öfo_à*)(
pub
->
öfo
);

5406 
Êags
;

5407 
ªt
 = 0;

5409 i‡(
dhd
) {

5410 
	`•ö_lock_úqßve
(&
dhd
->
wakñock_•ölock
, 
Êags
);

5411 #ifde‡
CONFIG_HAS_WAKELOCK


5412 i‡(!
dhd
->
wakñock_cou¡î
)

5413 
	`wake_lock
(
dhd
->
wl_wifi
);

5415 
dhd
->
wakñock_cou¡î
++;

5416 
ªt
 = 
dhd
->
wakñock_cou¡î
;

5417 
	`•ö_u∆ock_úqª°‹e
(&
dhd
->
wakñock_•ölock
, 
Êags
);

5419  
ªt
;

5420 
	}
}

5422 
	$√t_os_wake_lock
(
√t_devi˚
 *
dev
)

5424 
dhd_öfo_t
 *
dhd
 = *(dhd_öfo_à**)
	`√tdev_¥iv
(
dev
);

5425 
ªt
 = 0;

5427 i‡(
dhd
)

5428 
ªt
 = 
	`dhd_os_wake_lock
(&
dhd
->
pub
);

5429  
ªt
;

5430 
	}
}

5432 
	$dhd_os_wake_u∆ock
(
dhd_pub_t
 *
pub
)

5434 
dhd_öfo_t
 *
dhd
 = (dhd_öfo_à*)(
pub
->
öfo
);

5435 
Êags
;

5436 
ªt
 = 0;

5438 
	`dhd_os_wake_lock_timeout
(
pub
);

5439 i‡(
dhd
) {

5440 
	`•ö_lock_úqßve
(&
dhd
->
wakñock_•ölock
, 
Êags
);

5441 i‡(
dhd
->
wakñock_cou¡î
) {

5442 
dhd
->
wakñock_cou¡î
--;

5443 #ifde‡
CONFIG_HAS_WAKELOCK


5444 i‡(!
dhd
->
wakñock_cou¡î
)

5445 
	`wake_u∆ock
(
dhd
->
wl_wifi
);

5447 
ªt
 = 
dhd
->
wakñock_cou¡î
;

5449 
	`•ö_u∆ock_úqª°‹e
(&
dhd
->
wakñock_•ölock
, 
Êags
);

5451  
ªt
;

5452 
	}
}

5454 
	$dhd_os_check_wakñock
(*
dhdp
)

5456 #ifde‡
CONFIG_HAS_WAKELOCK


5457 
dhd_pub_t
 *
pub
 = (dhd_pub_à*)
dhdp
;

5458 
dhd_öfo_t
 *
dhd
;

5460 i‡(!
pub
)

5462 
dhd
 = (
dhd_öfo_t
 *)(
pub
->
öfo
);

5465 i‡(
dhd
 && (
	`wake_lock_a˘ive
(dhd->
wl_wifi
) ||

5466 (
	`wake_lock_a˘ive
(
dhd
->
wl_wdwake
))))

5470 
	}
}

5472 
	$√t_os_wake_u∆ock
(
√t_devi˚
 *
dev
)

5474 
dhd_öfo_t
 *
dhd
 = *(dhd_öfo_à**)
	`√tdev_¥iv
(
dev
);

5475 
ªt
 = 0;

5477 i‡(
dhd
)

5478 
ªt
 = 
	`dhd_os_wake_u∆ock
(&
dhd
->
pub
);

5479  
ªt
;

5480 
	}
}

5482 
	$dhd_os_wd_wake_lock
(
dhd_pub_t
 *
pub
)

5484 
dhd_öfo_t
 *
dhd
 = (dhd_öfo_à*)(
pub
->
öfo
);

5485 
Êags
;

5486 
ªt
 = 0;

5488 i‡(
dhd
) {

5489 
	`•ö_lock_úqßve
(&
dhd
->
wakñock_•ölock
, 
Êags
);

5490 #ifde‡
CONFIG_HAS_WAKELOCK


5492 i‡(!
dhd
->
wakñock_wd_cou¡î
) {

5493 i‡(
dhd
->
wl_wdwake
)

5494 
	`wake_lock
(
dhd
->
wl_wdwake
);

5496 
	`•ö_u∆ock_úqª°‹e
(&
dhd
->
wakñock_•ölock
, 
Êags
);

5501 
dhd
->
wakñock_wd_cou¡î
++;

5502 
ªt
 = 
dhd
->
wakñock_wd_cou¡î
;

5503 
	`•ö_u∆ock_úqª°‹e
(&
dhd
->
wakñock_•ölock
, 
Êags
);

5505  
ªt
;

5506 
	}
}

5508 
	$dhd_os_wd_wake_u∆ock
(
dhd_pub_t
 *
pub
)

5510 
dhd_öfo_t
 *
dhd
 = (dhd_öfo_à*)(
pub
->
öfo
);

5511 
Êags
;

5512 
ªt
 = 0;

5514 i‡(
dhd
) {

5515 
	`•ö_lock_úqßve
(&
dhd
->
wakñock_•ölock
, 
Êags
);

5516 i‡(
dhd
->
wakñock_wd_cou¡î
) {

5517 
dhd
->
wakñock_wd_cou¡î
 = 0;

5518 #ifde‡
CONFIG_HAS_WAKELOCK


5519 
	`wake_u∆ock
(
dhd
->
wl_wdwake
);

5522 
	`•ö_u∆ock_úqª°‹e
(&
dhd
->
wakñock_•ölock
, 
Êags
);

5524  
ªt
;

5525 
	}
}

5527 
	$dhd_os_check_if_up
(*
dhdp
)

5529 
dhd_pub_t
 *
pub
 = (dhd_pub_à*)
dhdp
;

5531 i‡(!
pub
)

5533  
pub
->
up
;

5534 
	}
}

5537 
	$dhd_£t_vîsi⁄_öfo
(
dhd_pub_t
 *
dhdp
, *
fw
)

5539 
i
;

5541 
i
 = 
	`¢¥ötf
(
öfo_°rög
, (info_string),

5542 " Drivî: %s\¿ Fúmw¨e: %†", 
EPI_VERSION_STR
, 
fw
);

5544 i‡(!
dhdp
)

5547 
i
 = 
	`¢¥ötf
(&
öfo_°rög
[i], (info_string) - i,

5548 "\¿ Chù: %x Rev %x Pkg %x", 
	`dhd_bus_chù_id
(
dhdp
),

5549 
	`dhd_bus_chùªv_id
(
dhdp
), 
	`dhd_bus_chùpkg_id
(dhdp));

5550 
	}
}

5552 
	$dhd_io˘l_íåy_loˇl
(
√t_devi˚
 *
√t
, 
wl_io˘l_t
 *
ioc
, 
cmd
)

5554 
ifidx
;

5555 
ªt
 = 0;

5556 
dhd_öfo_t
 *
dhd
 = 
NULL
;

5558 i‡(!
√t
 || !
	`√tdev_¥iv
(net)) {

5559 
	`DHD_ERROR
(("%†övÆidÖ¨amëî\n", 
__FUNCTION__
));

5560  -
EINVAL
;

5563 
dhd
 = *(
dhd_öfo_t
 **)
	`√tdev_¥iv
(
√t
);

5564 
ifidx
 = 
	`dhd_√t2idx
(
dhd
, 
√t
);

5565 i‡(
ifidx
 =
DHD_BAD_IF
) {

5566 
	`DHD_ERROR
(("%†bad ifidx\n", 
__FUNCTION__
));

5567  -
ENODEV
;

5570 
	`DHD_OS_WAKE_LOCK
(&
dhd
->
pub
);

5571 
ªt
 = 
	`dhd_wl_io˘l
(&
dhd
->
pub
, 
ifidx
, 
ioc
, ioc->
buf
, ioc->
Àn
);

5572 
	`dhd_check_h™g
(
√t
, &
dhd
->
pub
, 
ªt
);

5573 
	`DHD_OS_WAKE_UNLOCK
(&
dhd
->
pub
);

5575  
ªt
;

5576 
	}
}

5578 
boﬁ
 
	$dhd_os_check_h™g
(
dhd_pub_t
 *
dhdp
, 
ifidx
, 
ªt
)

5580 
√t_devi˚
 *
√t
;

5582 
√t
 = 
	`dhd_idx2√t
(
dhdp
, 
ifidx
);

5583  
	`dhd_check_h™g
(
√t
, 
dhdp
, 
ªt
);

5584 
	}
}

5587 #ifde‡
PROP_TXSTATUS


5588 
dhd_wlfc_öãrÁ˚_íåy_upd©e
(* 
°©e
, 
ewlfc_mac_íåy_a˘i⁄_t
 
a˘i⁄
, 
uöt8
 
ifid
,

5589 
uöt8
 
i·y≥
, uöt8* 
ó
);

5590 
dhd_wlfc_FIFO¸edôm≠_upd©e
(* 
°©e
, 
uöt8
* 
¸edôs
);

5592 
	$dhd_wlfc_öãrÁ˚_evít
(
dhd_öfo
 *
dhd
,

5593 
ewlfc_mac_íåy_a˘i⁄_t
 
a˘i⁄
, 
uöt8
 
ifid
, uöt8 
i·y≥
, uöt8* 
ó
)

5595 
°©us
;

5597 
	`dhd_os_wlfc_block
(&
dhd
->
pub
);

5598 i‡(
dhd
->
pub
.
wlfc_°©e
 =
NULL
) {

5599 
	`dhd_os_wlfc_unblock
(&
dhd
->
pub
);

5600  
BCME_OK
;

5603 
°©us
 = 
	`dhd_wlfc_öãrÁ˚_íåy_upd©e
(
dhd
->
pub
.
wlfc_°©e
, 
a˘i⁄
, 
ifid
, 
i·y≥
, 
ó
);

5604 
	`dhd_os_wlfc_unblock
(&
dhd
->
pub
);

5605  
°©us
;

5606 
	}
}

5608 
	$dhd_wlfc_FIFO¸edôm≠_evít
(
dhd_öfo
 *
dhd
, 
uöt8
* 
evít_d©a
)

5610 
°©us
;

5612 
	`dhd_os_wlfc_block
(&
dhd
->
pub
);

5613 i‡(
dhd
->
pub
.
wlfc_°©e
 =
NULL
) {

5614 
	`dhd_os_wlfc_unblock
(&
dhd
->
pub
);

5615  
BCME_OK
;

5618 
°©us
 = 
	`dhd_wlfc_FIFO¸edôm≠_upd©e
(
dhd
->
pub
.
wlfc_°©e
, 
evít_d©a
);

5619 
	`dhd_os_wlfc_unblock
(&
dhd
->
pub
);

5620  
°©us
;

5621 
	}
}

5623 
	$dhd_wlfc_evít
(
dhd_öfo
 *
dhd
)

5625 
°©us
;

5627 
	`dhd_os_wlfc_block
(&
dhd
->
pub
);

5628 
°©us
 = 
	`dhd_wlfc_íabÀ
(&
dhd
->
pub
);

5629 
	`dhd_os_wlfc_unblock
(&
dhd
->
pub
);

5630  
°©us
;

5631 
	}
}

5634 #ifde‡
BCMDBGFS


5636 
	~<löux/debugfs.h
>

5638 
uöt32
 
dhd_ªadªgl
(*
bp
, uöt32 
addr
);

5639 
uöt32
 
dhd_wrôîegl
(*
bp
, uöt32 
addr
, uöt32 
d©a
);

5641 
	sdhd_dbgfs
 {

5642 
díåy
 *
	mdebugfs_dú
;

5643 
díåy
 *
	mdebugfs_mem
;

5644 
dhd_pub_t
 *
	mdhdp
;

5645 
uöt32
 
	msize
;

5646 } 
	tdhd_dbgfs_t
;

5648 
dhd_dbgfs_t
 
	gg_dbgfs
;

5651 
	$dhd_dbg_°©e_›í
(
öode
 *öode, 
fûe
 *file)

5653 
fûe
->
¥iv©e_d©a
 = 
öode
->
i_¥iv©e
;

5655 
	}
}

5657 
ssize_t


5658 
	$dhd_dbg_°©e_ªad
(
fûe
 *fûe, 
__u£r
 *
ubuf
,

5659 
size_t
 
cou¡
, 
loff_t
 *
µos
)

5661 
ssize_t
 
rvÆ
;

5662 
uöt32
 
tmp
;

5663 
loff_t
 
pos
 = *
µos
;

5664 
size_t
 
ªt
;

5666 i‡(
pos
 < 0)

5667  -
EINVAL
;

5668 i‡(
pos
 >
g_dbgfs
.
size
 || !
cou¡
)

5670 i‡(
cou¡
 > 
g_dbgfs
.
size
 - 
pos
)

5671 
cou¡
 = 
g_dbgfs
.
size
 - 
pos
;

5674 
tmp
 = 
	`dhd_ªadªgl
(
g_dbgfs
.
dhdp
->
bus
, 
fûe
->
f_pos
 & (~3));

5676 
ªt
 = 
	`c›y_to_u£r
(
ubuf
, &
tmp
, 4);

5677 i‡(
ªt
 =
cou¡
)

5678  -
EFAULT
;

5680 
cou¡
 -
ªt
;

5681 *
µos
 = 
pos
 + 
cou¡
;

5682 
rvÆ
 = 
cou¡
;

5684  
rvÆ
;

5685 
	}
}

5688 
ssize_t


5689 
	$dhd_debugfs_wrôe
(
fûe
 *fûe, c⁄° 
__u£r
 *
ubuf
, 
size_t
 
cou¡
, 
loff_t
 *
µos
)

5691 
loff_t
 
pos
 = *
µos
;

5692 
size_t
 
ªt
;

5693 
uöt32
 
buf
;

5695 i‡(
pos
 < 0)

5696  -
EINVAL
;

5697 i‡(
pos
 >
g_dbgfs
.
size
 || !
cou¡
)

5699 i‡(
cou¡
 > 
g_dbgfs
.
size
 - 
pos
)

5700 
cou¡
 = 
g_dbgfs
.
size
 - 
pos
;

5702 
ªt
 = 
	`c›y_‰om_u£r
(&
buf
, 
ubuf
, (
uöt32
));

5703 i‡(
ªt
 =
cou¡
)

5704  -
EFAULT
;

5707 
	`dhd_wrôîegl
(
g_dbgfs
.
dhdp
->
bus
, 
fûe
->
f_pos
 & (~3), 
buf
);

5709  
cou¡
;

5710 
	}
}

5713 
loff_t


5714 
	$dhd_debugfs_l£ek
(
fûe
 *fûe, 
loff_t
 
off
, 
whí˚
)

5716 
loff_t
 
pos
 = -1;

5718 
whí˚
) {

5720 
pos
 = 
off
;

5723 
pos
 = 
fûe
->
f_pos
 + 
off
;

5726 
pos
 = 
g_dbgfs
.
size
 - 
off
;

5728  (
pos
 < 0 ||Öo†> 
g_dbgfs
.
size
Ë? -
EINVAL
 : (
fûe
->
f_pos
 =Öos);

5729 
	}
}

5731 c⁄° 
fûe_›î©i⁄s
 
	gdhd_dbg_°©e_›s
 = {

5732 .
ªad
 = 
dhd_dbg_°©e_ªad
,

5733 .
	gwrôe
 = 
dhd_debugfs_wrôe
,

5734 .
	g›í
 = 
dhd_dbg_°©e_›í
,

5735 .
	gŒ£ek
 = 
dhd_debugfs_l£ek


5738 
	$dhd_dbg_¸óã
()

5740 i‡(
g_dbgfs
.
debugfs_dú
) {

5741 
g_dbgfs
.
debugfs_mem
 = 
	`debugfs_¸óã_fûe
("mem", 0644, g_dbgfs.
debugfs_dú
,

5742 
NULL
, &
dhd_dbg_°©e_›s
);

5744 
	}
}

5746 
	$dhd_dbg_öô
(
dhd_pub_t
 *
dhdp
)

5748 
îr
;

5750 
g_dbgfs
.
dhdp
 = dhdp;

5751 
g_dbgfs
.
size
 = 0x20000000;

5753 
g_dbgfs
.
debugfs_dú
 = 
	`debugfs_¸óã_dú
("dhd", 0);

5754 i‡(
	`IS_ERR
(
g_dbgfs
.
debugfs_dú
)) {

5755 
îr
 = 
	`PTR_ERR
(
g_dbgfs
.
debugfs_dú
);

5756 
g_dbgfs
.
debugfs_dú
 = 
NULL
;

5760 
	`dhd_dbg_¸óã
();

5763 
	}
}

5765 
	$dhd_dbg_ªmove
()

5767 
	`debugfs_ªmove
(
g_dbgfs
.
debugfs_mem
);

5768 
	`debugfs_ªmove
(
g_dbgfs
.
debugfs_dú
);

5770 
	`bzîo
((*Ë&
g_dbgfs
, (g_dbgfs));

5772 
	}
}

5775 #ifde‡
WLMEDIA_HTSF


5778 
	$dhd_htsf_addtxts
(
dhd_pub_t
 *
dhdp
, *
pktbuf
)

5780 
dhd_öfo_t
 *
dhd
 = (dhd_öfo_à*)(
dhdp
->
öfo
);

5781 
sk_buff
 *
skb
;

5782 
uöt32
 
htsf
 = 0;

5783 
uöt16
 
dp‹t
 = 0, 
ﬁdmagic
 = 0xACAC;

5784 *
p1
;

5785 
hts·s_t
 
ts
;

5789 
p1
 = (*Ë
	`PKTDATA
(
dhdp
->
osh
, 
pktbuf
);

5791 i‡(
	`PKTLEN
(
dhdp
->
osh
, 
pktbuf
Ë> 
HTSF_MINLEN
) {

5793 
	`mem˝y
(&
dp‹t
, 
p1
+40, 2);

5795 
dp‹t
 = 
	`¡oh16
(dport);

5800 i‡(
dp‹t
 >
t•‹t
 && dport <=Åsport + 20) {

5802 
skb
 = (
sk_buff
 *Ë
pktbuf
;

5804 
htsf
 = 
	`dhd_gë_htsf
(
dhd
, 0);

5805 
	`mem£t
(
skb
->
d©a
 + 44, 0, 2);

5806 
	`mem˝y
(
skb
->
d©a
+82, &
ﬁdmagic
, 2);

5807 
	`mem˝y
(
skb
->
d©a
+84, &
htsf
, 4);

5809 
	`mem£t
(&
ts
, 0, (
hts·s_t
));

5810 
ts
.
magic
 = 
HTSFMAGIC
;

5811 
ts
.
¥io
 = 
	`PKTPRIO
(
pktbuf
);

5812 
ts
.
£qnum
 = 
htsf_£qnum
++;

5813 
ts
.
c10
 = 
	`gë_cy˛es
();

5814 
ts
.
t10
 = 
htsf
;

5815 
ts
.
ídmagic
 = 
HTSFENDMAGIC
;

5817 
	`mem˝y
(
skb
->
d©a
 + 
HTSF_HOSTOFFSET
, &
ts
, (ts));

5819 
	}
}

5821 
	$dhd_dump_htsfhi°o
(
hi°o_t
 *
his
, *
s
)

5823 
pkt˙t
 = 0, 
curvÆ
 = 0, 
i
;

5824 
i
 = 0; i < (
NUMBIN
-2); i++) {

5825 
curvÆ
 += 500;

5826 
	`¥ötf
("%d ", 
his
->
bö
[
i
]);

5827 
pkt˙t
 +
his
->
bö
[
i
];

5829 
	`¥ötf
(" max: %d TŸPkt: %dÇeg: %d [%s]\n", 
his
->
bö
[
NUMBIN
-2], 
pkt˙t
,

5830 
his
->
bö
[
NUMBIN
-1], 
s
);

5831 
	}
}

5834 
	$s‹âobö
(
vÆue
, 
hi°o_t
 *
hi°o
)

5836 
i
, 
bövÆ
 = 0;

5838 i‡(
vÆue
 < 0) {

5839 
hi°o
->
bö
[
NUMBIN
-1]++;

5842 i‡(
vÆue
 > 
hi°o
->
bö
[
NUMBIN
-2])

5843 
hi°o
->
bö
[
NUMBIN
-2] = 
vÆue
;

5845 
i
 = 0; i < (
NUMBIN
-2); i++) {

5846 
bövÆ
 += 500;

5847 i‡(
vÆue
 <
bövÆ
) {

5848 
hi°o
->
bö
[
i
]++;

5852 
hi°o
->
bö
[
NUMBIN
-3]++;

5853 
	}
}

5856 
	$dhd_htsf_addrxts
(
dhd_pub_t
 *
dhdp
, *
pktbuf
)

5858 
dhd_öfo_t
 *
dhd
 = (dhd_öfo_à*)
dhdp
->
öfo
;

5859 
sk_buff
 *
skb
;

5860 *
p1
;

5861 
uöt16
 
ﬁd_magic
;

5862 
d1
, 
d2
, 
d3
, 
íd2íd
;

5863 
hts·s_t
 *
htsf_ts
;

5864 
uöt32
 
htsf
;

5866 
skb
 = 
	`PKTTONATIVE
(
dhdp
->
osh
, 
pktbuf
);

5867 
p1
 = (*)
	`PKTDATA
(
dhdp
->
osh
, 
pktbuf
);

5869 i‡(
	`PKTLEN
(
osh
, 
pktbuf
Ë> 
HTSF_MINLEN
) {

5870 
	`mem˝y
(&
ﬁd_magic
, 
p1
+78, 2);

5871 
htsf_ts
 = (
hts·s_t
*Ë(
p1
 + 
HTSF_HOSTOFFSET
 - 4);

5876 i‡(
htsf_ts
->
magic
 =
HTSFMAGIC
) {

5877 
htsf_ts
->
tE0
 = 
	`dhd_gë_htsf
(
dhd
, 0);

5878 
htsf_ts
->
cE0
 = 
	`gë_cy˛es
();

5881 i‡(
ﬁd_magic
 == 0xACAC) {

5883 
t•kt˙t
++;

5884 
htsf
 = 
	`dhd_gë_htsf
(
dhd
, 0);

5885 
	`mem˝y
(
skb
->
d©a
+92, &
htsf
, (
uöt32
));

5887 
	`mem˝y
(&
ts
[
tsidx
].
t1
, 
skb
->
d©a
+80, 16);

5889 
d1
 = 
ts
[
tsidx
].
t2
 -Ås[tsidx].
t1
;

5890 
d2
 = 
ts
[
tsidx
].
t3
 -Ås[tsidx].
t2
;

5891 
d3
 = 
ts
[
tsidx
].
t4
 -Ås[tsidx].
t3
;

5892 
íd2íd
 = 
ts
[
tsidx
].
t4
 -Ås[tsidx].
t1
;

5894 
	`s‹âobö
(
d1
, &
vi_d1
);

5895 
	`s‹âobö
(
d2
, &
vi_d2
);

5896 
	`s‹âobö
(
d3
, &
vi_d3
);

5897 
	`s‹âobö
(
íd2íd
, &
vi_d4
);

5899 i‡(
íd2íd
 > 0 &&Énd2íd > 
maxdñay
) {

5900 
maxdñay
 = 
íd2íd
;

5901 
maxdñaypkäo
 = 
t•kt˙t
;

5902 
	`mem˝y
(&
maxdñayts
, &
ts
[
tsidx
], 16);

5904 i‡(++
tsidx
 >
TSMAX
)

5905 
tsidx
 = 0;

5907 
	}
}

5909 
uöt32
 
	$dhd_gë_htsf
(
dhd_öfo_t
 *
dhd
, 
ifidx
)

5911 
uöt32
 
htsf
 = 0, 
cur_cy˛e
, 
dñè
, 
dñè_us
;

5912 
uöt32
 
Á˘‹
, 
ba£vÆ
, 
ba£vÆ2
;

5913 
cy˛es_t
 
t
;

5915 
t
 = 
	`gë_cy˛es
();

5916 
cur_cy˛e
 = 
t
;

5918 i‡(
cur_cy˛e
 > 
dhd
->
htsf
.
œ°_cy˛e
)

5919 
dñè
 = 
cur_cy˛e
 - 
dhd
->
htsf
.
œ°_cy˛e
;

5921 
dñè
 = 
cur_cy˛e
 + (0xFFFFFFFF - 
dhd
->
htsf
.
œ°_cy˛e
);

5924 
dñè
 = delta >> 4;

5926 i‡(
dhd
->
htsf
.
c€f
) {

5928 
Á˘‹
 = (
dhd
->
htsf
.
c€f
*10 + dhd->htsf.
c€fdec1
);

5929 
ba£vÆ
 = (
dñè
*10)/
Á˘‹
;

5930 
ba£vÆ2
 = (
dñè
*10)/(
Á˘‹
+1);

5931 
dñè_us
 = (
ba£vÆ
 - (((ba£vÆ - 
ba£vÆ2
Ë* 
dhd
->
htsf
.
c€fdec2
)) / 10);

5932 
htsf
 = (
dñè_us
 << 4Ë+ 
dhd
->htsf.
œ°_tsf
 + 
HTSF_BUS_DELAY
;

5935 
	`DHD_ERROR
(("-------dhd->htsf.coef = 0 -------\n"));

5938  
htsf
;

5939 
	}
}

5941 
	$dhd_dump_œãncy
()

5943 
i
, 
max
 = 0;

5944 
d1
, 
d2
, 
d3
, 
d4
, 
d5
;

5946 
	`¥ötf
("T1 T2 T3 T4 d1 d2Å4-t1 i \n");

5947 
i
 = 0; i < 
TSMAX
; i++) {

5948 
d1
 = 
ts
[
i
].
t2
 -Ås[i].
t1
;

5949 
d2
 = 
ts
[
i
].
t3
 -Ås[i].
t2
;

5950 
d3
 = 
ts
[
i
].
t4
 -Ås[i].
t3
;

5951 
d4
 = 
ts
[
i
].
t4
 -Ås[i].
t1
;

5952 
d5
 = 
ts
[
max
].
t4
-ts[max].
t1
;

5953 i‡(
d4
 > 
d5
 && d4 > 0) {

5954 
max
 = 
i
;

5956 
	`¥ötf
("%08X %08X %08X %08X \t%d %d %d %d i=%d\n",

5957 
ts
[
i
].
t1
,Ås[i].
t2
,Ås[i].
t3
,Ås[i].
t4
,

5958 
d1
, 
d2
, 
d3
, 
d4
, 
i
);

5961 
	`¥ötf
("cuºíàidx = %d \n", 
tsidx
);

5963 
	`¥ötf
("Highe°Ü©ícy %dÖkàno.%dÅŸÆ=%d\n", 
maxdñay
, 
maxdñaypkäo
, 
t•kt˙t
);

5964 
	`¥ötf
("%08X %08X %08X %08X \t%d %d %d %d\n",

5965 
maxdñayts
.
t1
, maxdñayts.
t2
, maxdñayts.
t3
, maxdñayts.
t4
,

5966 
maxdñayts
.
t2
 - maxdñayts.
t1
,

5967 
maxdñayts
.
t3
 - maxdñayts.
t2
,

5968 
maxdñayts
.
t4
 - maxdñayts.
t3
,

5969 
maxdñayts
.
t4
 - maxdñayts.
t1
);

5970 
	}
}

5974 
	$dhd_io˘l_htsf_gë
(
dhd_öfo_t
 *
dhd
, 
ifidx
)

5976 
wl_io˘l_t
 
ioc
;

5977 
buf
[32];

5978 
ªt
;

5979 
uöt32
 
s1
, 
s2
;

5981 
	stsf
 {

5982 
uöt32
 
low
;

5983 
uöt32
 
high
;

5984 } 
tsf_buf
;

5986 
	`mem£t
(&
ioc
, 0, (ioc));

5987 
	`mem£t
(&
tsf_buf
, 0, (tsf_buf));

5989 
ioc
.
cmd
 = 
WLC_GET_VAR
;

5990 
ioc
.
buf
 = buf;

5991 
ioc
.
Àn
 = (
uöt
)(
buf
);

5992 
ioc
.
£t
 = 
FALSE
;

5994 
	`°∫˝y
(
buf
, "tsf", (buf) - 1);

5995 
buf
[(buf) - 1] = '\0';

5996 
s1
 = 
	`dhd_gë_htsf
(
dhd
, 0);

5997 i‡((
ªt
 = 
	`dhd_wl_io˘l
(&
dhd
->
pub
, 
ifidx
, &
ioc
, ioc.
buf
, ioc.
Àn
)) < 0) {

5998 i‡(
ªt
 =-
EIO
) {

5999 
	`DHD_ERROR
(("%s:Åsf isÇot supported by device\n",

6000 
	`dhd_i‚ame
(&
dhd
->
pub
, 
ifidx
)));

6001  -
EOPNOTSUPP
;

6003  
ªt
;

6005 
s2
 = 
	`dhd_gë_htsf
(
dhd
, 0);

6007 
	`mem˝y
(&
tsf_buf
, 
buf
, (tsf_buf));

6008 
	`¥ötf
(" TSF_h=%04XÜo=%08X Calc:htsf=%08X, coef=%d.%d%d delta=%d ",

6009 
tsf_buf
.
high
,Åsf_buf.
low
, 
s2
, 
dhd
->
htsf
.
c€f
, dhd->htsf.
c€fdec1
,

6010 
dhd
->
htsf
.
c€fdec2
, 
s2
-
tsf_buf
.
low
);

6011 
	`¥ötf
("œ°tsf=%08XÜa°cy˛e=%08X\n", 
dhd
->
htsf
.
œ°_tsf
, dhd->htsf.
œ°_cy˛e
);

6013 
	}
}

6015 
	$htsf_upd©e
(
dhd_öfo_t
 *
dhd
, *
d©a
)

6017 
ul⁄g
 
cur_cy˛e
 = 0, 
¥ev_cy˛e
 = 0;

6018 
uöt32
 
htsf
, 
tsf_dñè
 = 0;

6019 
uöt32
 
hÁ˘‹
 = 0, 
cyc_dñè
, 
dec1
 = 0, 
dec2
, 
dec3
, 
tmp
;

6020 
ul⁄g
 
b
, 
a
;

6021 
cy˛es_t
 
t
;

6025 
t
 = 
	`gë_cy˛es
();

6027 
¥ev_cy˛e
 = 
cur_cy˛e
;

6028 
cur_cy˛e
 = 
t
;

6030 i‡(
cur_cy˛e
 > 
¥ev_cy˛e
)

6031 
cyc_dñè
 = 
cur_cy˛e
 - 
¥ev_cy˛e
;

6033 
b
 = 
cur_cy˛e
;

6034 
a
 = 
¥ev_cy˛e
;

6035 
cyc_dñè
 = 
cur_cy˛e
 + (0xFFFFFFFF - 
¥ev_cy˛e
);

6038 i‡(
d©a
 =
NULL
)

6039 
	`¥ötf
("Åsf updateátaÖointÉr isÇull \n");

6041 
	`mem˝y
(&
¥ev_tsf
, &
cur_tsf
, (
tsf_t
));

6042 
	`mem˝y
(&
cur_tsf
, 
d©a
, (
tsf_t
));

6044 i‡(
cur_tsf
.
low
 == 0) {

6045 
	`DHD_INFO
((" ---- 0 TSF, doÇot update,Ñeturn\n"));

6049 i‡(
cur_tsf
.
low
 > 
¥ev_tsf
.low)

6050 
tsf_dñè
 = (
cur_tsf
.
low
 - 
¥ev_tsf
.low);

6052 
	`DHD_INFO
((" ----ÅsfÜow is smaller cur_tsf= %08X,Örev_tsf=%08X, \n",

6053 
cur_tsf
.
low
, 
¥ev_tsf
.low));

6054 i‡(
cur_tsf
.
high
 > 
¥ev_tsf
.high) {

6055 
tsf_dñè
 = 
cur_tsf
.
low
 + (0xFFFFFFFF - 
¥ev_tsf
.low);

6056 
	`DHD_INFO
((" ---- Wø∞¨oundÅs‡couäîádju°ed TSF=%08X\n", 
tsf_dñè
));

6062 i‡(
tsf_dñè
) {

6063 
hÁ˘‹
 = 
cyc_dñè
 / 
tsf_dñè
;

6064 
tmp
 = (
cyc_dñè
 - (
hÁ˘‹
 * 
tsf_dñè
))*10;

6065 
dec1
 = 
tmp
/
tsf_dñè
;

6066 
dec2
 = ((
tmp
 - 
dec1
*
tsf_dñè
)*10) /Åsf_delta;

6067 
tmp
 = (tm∞- (
dec1
*
tsf_dñè
))*10;

6068 
dec3
 = ((
tmp
 - 
dec2
*
tsf_dñè
)*10) /Åsf_delta;

6070 i‡(
dec3
 > 4) {

6071 i‡(
dec2
 == 9) {

6072 
dec2
 = 0;

6073 i‡(
dec1
 == 9) {

6074 
dec1
 = 0;

6075 
hÁ˘‹
++;

6078 
dec1
++;

6082 
dec2
++;

6086 i‡(
hÁ˘‹
) {

6087 
htsf
 = ((
cyc_dñè
 * 10Ë/ (
hÁ˘‹
*10+
dec1
)Ë+ 
¥ev_tsf
.
low
;

6088 
dhd
->
htsf
.
c€f
 = 
hÁ˘‹
;

6089 
dhd
->
htsf
.
œ°_cy˛e
 = 
cur_cy˛e
;

6090 
dhd
->
htsf
.
œ°_tsf
 = 
cur_tsf
.
low
;

6091 
dhd
->
htsf
.
c€fdec1
 = 
dec1
;

6092 
dhd
->
htsf
.
c€fdec2
 = 
dec2
;

6095 
htsf
 = 
¥ev_tsf
.
low
;

6097 
	}
}

	@dhd_linux_sched.c

26 
	~<löux/kî√l.h
>

27 
	~<löux/moduÀ.h
>

28 
	~<löux/sched.h
>

29 
	~<ty≥defs.h
>

30 
	~<löuxvî.h
>

32 
	$£tScheduÀr
(
èsk_°ru˘
 *
p
, 
pﬁicy
, 
sched_∑øm
 *
∑øm
)

34 
rc
 = 0;

35 #i‡(
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 0))

36 
rc
 = 
	`sched_£tscheduÀr
(
p
, 
pﬁicy
, 
∑øm
);

38  
rc
;

39 
	}
}

	@dhd_sdio.c

27 
	~<ty≥defs.h
>

28 
	~<o¶.h
>

29 
	~<bcmsdh.h
>

31 #ifde‡
BCMEMBEDIMAGE


32 #ö˛udê
BCMEMBEDIMAGE


35 
	~<bcmdefs.h
>

36 
	~<bcmutûs.h
>

37 
	~<bcmídün.h
>

38 
	~<bcmdevs.h
>

40 
	~<siutûs.h
>

41 
	~<hndpmu.h
>

42 
	~<hndsoc.h
>

43 
	~<bcmsdpcm.h
>

44 #i‡
deföed
(
DHD_DEBUG
)

45 
	~<hndπe_¨må≠.h
>

46 
	~<hndπe_c⁄s.h
>

48 
	~<sbchùc.h
>

49 
	~<sbhnddma.h
>

51 
	~<sdio.h
>

52 
	~<sbsdio.h
>

53 
	~<sbsdpcmdev.h
>

54 
	~<bcmsdpcm.h
>

55 
	~<bcmsdbus.h
>

57 
	~<¥Ÿo/ëhî√t.h
>

58 
	~<¥Ÿo/802.1d.h
>

59 
	~<¥Ÿo/802.11.h
>

61 
	~<dngl_°©s.h
>

62 
	~<dhd.h
>

63 
	~<dhd_bus.h
>

64 
	~<dhd_¥Ÿo.h
>

65 
	~<dhd_dbg.h
>

66 
	~<dhdio˘l.h
>

67 
	~<sdiov¨.h
>

69 #i‚de‡
DHDSDIO_MEM_DUMP_FNAME


70 
	#DHDSDIO_MEM_DUMP_FNAME
 "mem_dump"

	)

73 
	#QLEN
 256

	)

74 
	#FCHI
 (
QLEN
 - 10)

	)

75 
	#FCLOW
 (
FCHI
 / 2)

	)

76 
	#PRIOMASK
 7

	)

78 
	#TXRETRIES
 2

	)

80 
	#DHD_RXBOUND
 50

	)

82 
	#DHD_TXBOUND
 20

	)

84 
	#DHD_TXMINMAX
 1

	)

86 
	#MEMBLOCK
 2048

	)

87 
	#MAX_NVRAMBUF_SIZE
 4096

	)

88 
	#MAX_DATA_BUF
 (32 * 1024Ë

	)

90 #i‚de‡
DHD_FIRSTREAD


91 
	#DHD_FIRSTREAD
 32

	)

93 #i‡!
ISPOWEROF2
(
DHD_FIRSTREAD
)

94 #îr‹ 
DHD_FIRSTREAD
 
is
 
nŸ
 
a
 
powî
 
of
 2!

97 #ifde‡
BCMSDIOH_TXGLOM


99 
	#SDPCM_HDRLEN
 (
SDPCM_FRAMETAG_LEN
 + 
SDPCM_HWEXT_LEN
 + 
SDPCM_SWHEADER_LEN
)

	)

103 
	#SDPCM_HDRLEN
 (
SDPCM_FRAMETAG_LEN
 + 
SDPCM_SWHEADER_LEN
)

	)

106 
	#SDPCM_HDRLEN_RX
 (
SDPCM_FRAMETAG_LEN
 + 
SDPCM_SWHEADER_LEN
)

	)

108 #ifde‡
SDTEST


109 
	#SDPCM_RESERVE
 (
SDPCM_HDRLEN
 + 
SDPCM_TEST_HDRLEN
 + 
DHD_SDALIGN
)

	)

111 
	#SDPCM_RESERVE
 (
SDPCM_HDRLEN
 + 
DHD_SDALIGN
)

	)

115 #i‚de‡
MAX_HDR_READ


116 
	#MAX_HDR_READ
 32

	)

118 #i‡!
ISPOWEROF2
(
MAX_HDR_READ
)

119 #îr‹ 
MAX_HDR_READ
 
is
 
nŸ
 
a
 
powî
 
of
 2!

122 
	#MAX_RX_DATASZ
 2048

	)

125 
	#DHD_WAIT_F2RDY
 3000

	)

132 #i‡(
PMU_MAX_TRANSITION_DLY
 <= 1000000)

133 #unde‡
PMU_MAX_TRANSITION_DLY


134 
	#PMU_MAX_TRANSITION_DLY
 1000000

	)

138 
	#DHD_INIT_CLKCTL1
 (
SBSDIO_FORCE_HW_CLKREQ_OFF
 | 
SBSDIO_ALP_AVAIL_REQ
)

	)

139 
	#DHD_INIT_CLKCTL2
 (
SBSDIO_FORCE_HW_CLKREQ_OFF
 | 
SBSDIO_FORCE_ALP
)

	)

142 
	#F2SYNC
 (
SDIO_REQ_4BYTE
 | 
SDIO_REQ_FIXED
)

	)

147 
	#PKTFREE2
(Ëi‡((
bus
->bu†!
SPI_BUS
Ë|| bus->
u£buÂoﬁ
) \

148 
	`PKTFREE
(
bus
->
dhd
->
osh
, 
pkt
, 
FALSE
);

	)

149 
DHD_SPINWAIT_SLEEP_INIT
(
sdioh_•öwaô_¶ìp
);

150 #i‡
deföed
(
OOB_INTR_ONLY
)

151 
bcmsdh_£t_úq
(
Êag
);

153 #ifde‡
PROP_TXSTATUS


154 
dhd_wlfc_txcom∂ëe
(
dhd_pub_t
 *
dhd
, *
txp
, 
boﬁ
 
suc˚ss
);

155 
dhd_wlfc_åiggî_pktcommô
(
dhd_pub_t
 *
dhd
);

157 #i‡(
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2, 6, 25))

158 
DEFINE_MUTEX
(
_dhd_sdio_muãx_lock_
);

161 #ifde‡
DHD_DEBUG


163 
	#CONSOLE_LINE_MAX
 192

	)

164 
	#CONSOLE_BUFFER_MAX
 2024

	)

165 
	sdhd_c⁄sﬁe
 {

166 
uöt
 
	mcou¡
;

167 
uöt
 
	mlog_addr
;

168 
hndπe_log_t
 
	mlog
;

169 
uöt
 
	mbufsize
;

170 
uöt8
 *
	mbuf
;

171 
uöt
 
	mœ°
;

172 } 
	tdhd_c⁄sﬁe_t
;

175 
	#REMAP_ENAB
(
bus
Ë((bus)->
ªm≠
)

	)

176 
	#REMAP_ISADDR
(
bus
, 
a
Ë((◊Ë>((bus)->
‹ig_ømsize
)Ë&& (◊Ë< ((bus)->
ømsize
)))

	)

177 
	#KSO_ENAB
(
bus
Ë((bus)->
kso
)

	)

178 
	#SR_ENAB
(
bus
Ë((bus)->
_§íab
)

	)

179 
	#SLPAUTO_ENAB
(
bus
Ë((
	`SR_ENAB
(bus)Ë&& ((bus)->
_¶∑uto
))

	)

180 
	#MIN_RSRC_ADDR
 (
SI_ENUM_BASE
 + 0x618)

	)

181 
	#MIN_RSRC_SR
 0x3

	)

182 
	#CORE_CAPEXT_ADDR
 (
SI_ENUM_BASE
 + 0x64c)

	)

183 
	#CORE_CAPEXT_SR_SUPPORTED_MASK
 (1 << 1)

	)

184 
	#RCTL_MACPHY_DISABLE_MASK
 (1 << 26)

	)

185 
	#RCTL_LOGIC_DISABLE_MASK
 (1 << 27)

	)

187 
	#OOB_WAKEUP_ENAB
(
bus
Ë((bus)->
_oobwakeup
)

	)

188 
	#GPIO_DEV_SRSTATE
 16

	)

189 
	#GPIO_DEV_SRSTATE_TIMEOUT
 320000

	)

190 
	#GPIO_DEV_WAKEUP
 17

	)

191 
	#CC_CHIPCTRL2_GPIO1_WAKEUP
 (1 << 0)

	)

193 
	#CC_PMUCC3
 (0x3)

	)

195 
	sdhd_bus
 {

196 
dhd_pub_t
 *
	mdhd
;

198 
bcmsdh_öfo_t
 *
	msdh
;

199 
si_t
 *
	msih
;

200 *
	mv¨s
;

201 
uöt
 
	mv¨sz
;

202 
uöt32
 
	msbaddr
;

204 
sdpcmd_ªgs_t
 *
	mªgs
;

205 
uöt
 
	msdpcmªv
;

206 
uöt
 
	m¨mªv
;

207 
uöt
 
	mømªv
;

208 
uöt32
 
	mømsize
;

209 
uöt32
 
	m‹ig_ømsize
;

210 
uöt32
 
	m§memsize
;

212 
uöt32
 
	mbus
;

213 
uöt32
 
	mho°ötmask
;

214 
uöt32
 
	möt°©us
;

215 
boﬁ
 
	mdpc_sched
;

216 
boﬁ
 
	mfc°©e
;

218 
uöt16
 
	m˛_devid
;

219 *
	mfw_∑th
;

220 *
	mnv_∑th
;

221 c⁄° *
	mnvøm_∑øms
;

223 
uöt
 
	mblocksize
;

224 
uöt
 
	mroundup
;

226 
pktq
 
	mtxq
;

227 
uöt8
 
	mÊowc⁄åﬁ
;

228 
uöt8
 
	mtx_£q
;

229 
uöt8
 
	mtx_max
;

231 
uöt8
 
	mhdrbuf
[
MAX_HDR_READ
 + 
DHD_SDALIGN
];

232 
uöt8
 *
	mrxhdr
;

233 
uöt16
 
	m√xéí
;

234 
uöt8
 
	mrx_£q
;

235 
boﬁ
 
	mrxskù
;

237 *
	mglomd
;

238 *
	mglom
;

239 
uöt
 
	mglomîr
;

241 
uöt8
 *
	mrxbuf
;

242 
uöt
 
	mrxbÀn
;

243 
uöt8
 *
	mrx˘l
;

244 
uöt8
 *
	md©abuf
;

245 
uöt8
 *
	md©≠å
;

246 
uöt
 
	mrxÀn
;

248 
uöt8
 
	msdpcm_vî
;

250 
boﬁ
 
	möå
;

251 
boﬁ
 
	mpﬁl
;

252 
boﬁ
 
	mùíd
;

253 
boﬁ
 
	mötdis
;

254 
uöt
 
	möåcou¡
;

255 
uöt
 
	mœ°öås
;

256 
uöt
 
	m•urious
;

257 
uöt
 
	mpﬁÃ©e
;

258 
uöt
 
	mpﬁ…ick
;

259 
uöt
 
	mpﬁl˙t
;

261 #ifde‡
DHD_DEBUG


262 
dhd_c⁄sﬁe_t
 
	mc⁄sﬁe
;

263 
uöt
 
	mc⁄sﬁe_addr
;

266 
uöt
 
	mªgÁûs
;

268 
uöt
 
	m˛k°©e
;

269 
boﬁ
 
	ma˘ivôy
;

270 
öt32
 
	midÀtime
;

271 
öt32
 
	midÀcou¡
;

272 
öt32
 
	midÀ˛ock
;

273 
öt32
 
	msd_divis‹
;

274 
öt32
 
	msd_mode
;

275 
öt32
 
	msd_rxchaö
;

276 
boﬁ
 
	mu£_rxchaö
;

277 
boﬁ
 
	m¶ìpög
;

278 
uöt
 
	mrxÊow_mode
;

279 
boﬁ
 
	mrxÊow
;

280 
uöt
 
	m¥ev_rxlim_hô
;

281 
boﬁ
 
	mÆp_⁄ly
;

283 
boﬁ
 
	mu£buÂoﬁ
;

285 #ifde‡
SDTEST


287 
boﬁ
 
	mext_lo›
;

288 
uöt8
 
	mlo›id
;

291 
uöt
 
	mpktgí_‰eq
;

292 
uöt
 
	mpktgí_cou¡
;

293 
uöt
 
	mpktgí_¥öt
;

294 
uöt
 
	mpktgí_tŸÆ
;

295 
uöt
 
	mpktgí_möÀn
;

296 
uöt
 
	mpktgí_maxÀn
;

297 
uöt
 
	mpktgí_mode
;

298 
uöt
 
	mpktgí_°›
;

301 
uöt
 
	mpktgí_tick
;

302 
uöt
 
	mpktgí_±ick
;

303 
uöt
 
	mpktgí_£¡
;

304 
uöt
 
	mpktgí_rcvd
;

305 
uöt
 
	mpktgí_¥ev_time
;

306 
uöt
 
	mpktgí_¥ev_£¡
;

309 
uöt
 
	mpktgí_¥ev_rcvd
;

312 
uöt
 
	mpktgí_Áû
;

313 
uöt16
 
	mpktgí_Àn
;

314 
	#PKTGEN_RCV_IDLE
 (0)

	)

315 
	#PKTGEN_RCV_ONGOING
 (1)

	)

316 
uöt16
 
	mpktgí_rcv_°©e
;

317 
uöt
 
	mpktgí_rcvd_rcv£ssi⁄
;

321 
uöt
 
	mtx_sdîrs
;

322 
uöt
 
	mfcqueued
;

323 
uöt
 
	mrxπx
;

324 
uöt
 
	mrx_toﬁ⁄g
;

325 
uöt
 
	mrxc_îr‹s
;

326 
uöt
 
	mrx_hdrÁû
;

327 
uöt
 
	mrx_badhdr
;

328 
uöt
 
	mrx_bad£q
;

329 
uöt
 
	mfc_rcvd
;

330 
uöt
 
	mfc_xoff
;

331 
uöt
 
	mfc_x⁄
;

332 
uöt
 
	mrxglomÁû
;

333 
uöt
 
	mrxglom‰ames
;

334 
uöt
 
	mrxglompkts
;

335 
uöt
 
	mf2rxhdrs
;

336 
uöt
 
	mf2rxd©a
;

337 
uöt
 
	mf2txd©a
;

338 
uöt
 
	mf1ªgd©a
;

340 
uöt8
 *
	m˘æ_‰ame_buf
;

341 
uöt32
 
	m˘æ_‰ame_Àn
;

342 
boﬁ
 
	m˘æ_‰ame_°©
;

343 
uöt32
 
	mrxöt_mode
;

344 
boﬁ
 
	mªm≠
;

348 
boﬁ
 
	mkso
;

349 
boﬁ
 
	m_¶∑uto
;

350 
boﬁ
 
	m_oobwakeup
;

351 
boﬁ
 
	m_§íab
;

352 
boﬁ
 
	mªad‰ames
;

353 
boﬁ
 
	mªqbus¶ìp
;

354 
uöt32
 
	mª£tö°r
;

355 
uöt32
 
	md⁄gÀ_øm_ba£
;

356 #ifde‡
BCMSDIOH_TXGLOM


357 *
	mglom_pkt_¨r
[
SDPCM_MAXGLOM_SIZE
];

358 
uöt16
 
	mglom_˙t
;

359 
uöt16
 
	mglom_tŸÆ_Àn
;

360 
boﬁ
 
	mglom_íabÀ
;

361 
uöt8
 
	mglom_mode
;

362 
uöt32
 
	mglomsize
;

364 } 
	tdhd_bus_t
;

367 
	#CLK_NONE
 0

	)

368 
	#CLK_SDONLY
 1

	)

369 
	#CLK_PENDING
 2

	)

370 
	#CLK_AVAIL
 3

	)

372 
	#DHD_NOPMU
(
dhd
Ë(
FALSE
)

	)

374 #ifde‡
DHD_DEBUG


375 
	gqcou¡
[
NUMPRIO
];

376 
	gtx_∑ckës
[
NUMPRIO
];

380 c⁄° 
uöt
 
	gdhd_de„ºed_tx
 = 1;

382 
uöt
 
dhd_w©chdog_ms
;

383 
dhd_os_wd_timî
(*
bus
, 
uöt
 
wdtick
);

386 
uöt
 
	gdhd_txbound
;

387 
uöt
 
	gdhd_rxbound
;

388 
uöt
 
	gdhd_txmömax
 = 
DHD_TXMINMAX
;

391 
	#DONGLE_MIN_MEMSIZE
 (128 *1024)

	)

392 
	gdhd_d⁄gÀ_memsize
;

394 
boﬁ
 
	gdhd_doÊow
;

395 
boﬁ
 
	gdhd_Æign˘l
;

397 
boﬁ
 
	gsd1idÀ
;

399 
boﬁ
 
	gªåyd©a
;

400 
	#RETRYCHAN
(
ch™
Ë(((ch™Ë=
SDPCM_EVENT_CHANNEL
Ë|| 
ªåyd©a
)

	)

402 #i‡
deföed
(
SDIO_CRC_ERROR_FIX
)

403 
uöt
 
	gw©îm¨k
 = 48;

404 
uöt
 
	gmesbusy˘æ
 = 80;

406 c⁄° 
uöt
 
	gw©îm¨k
 = 8;

407 c⁄° 
uöt
 
	gmesbusy˘æ
 = 0;

409 c⁄° 
uöt
 
	gfú°ªad
 = 
DHD_FIRSTREAD
;

411 
	#HDATLEN
 (
fú°ªad
 - (
SDPCM_HDRLEN
))

	)

414 c⁄° 
uöt
 
	gªåy_limô
 = 2;

417 
boﬁ
 
	gf‹˚Æign
;

419 
	#FW_TYPE_STA
 0

	)

420 
	#FW_TYPE_APSTA
 1

	)

421 
	#FW_TYPE_P2P
 2

	)

422 
	#FW_TYPE_MFG
 3

	)

423 
	#FW_TYPE_G
 0

	)

424 
	#FW_TYPE_AG
 1

	)

426 c⁄° *
	gbcm40183b2_fw_«me
[] = {

433 c⁄° *
	gbcm40183b2ag_fw_«me
[] = {

440 c⁄° *
	gbcm40181a0_fw_«me
[] = {

447 c⁄° *
	gbcm40181a2_fw_«me
[] = {

454 c⁄° *
	gbcm43341b0ag_fw_«me
[] = {

461 c⁄° *
	gbcm43241b4ag_fw_«me
[] = {

468 
	#BCM4330B2_CHIP_REV
 4

	)

469 
	#BCM43362A0_CHIP_REV
 0

	)

470 
	#BCM43362A2_CHIP_REV
 1

	)

471 
	#BCM43341B0_CHIP_REV
 2

	)

472 
	#BCM43241B4_CHIP_REV
 5

	)

474 
	#ALIGNMENT
 4

	)

476 #i‡
deföed
(
OOB_INTR_ONLY
Ë&& deföed(
HW_OOB
)

477 
bcmsdh_íabÀ_hw_oob_öå
(*
sdh
, 
boﬁ
 
íabÀ
);

480 #i‡
deföed
(
OOB_INTR_ONLY
Ë&& deföed(
SDIO_ISR_THREAD
)

481 #îr‹ 
OOB_INTR_ONLY
 
is
 
NOT
 
w‹kög
 
wôh
 
SDIO_ISR_THREAD


483 
	#PKTALIGN
(
osh
, 
p
, 
Àn
, 
Æign
) \

485 
uöt
 
d©Æign
; \

486 
d©Æign
 = (
uöçå
)
	`PKTDATA
((
osh
), (
p
)); \

487 
d©Æign
 = 
	`ROUNDUP
(d©Æign, (
Æign
)) - datalign; \

488 
	`ASSERT
(
d©Æign
 < (
Æign
)); \

489 
	`ASSERT
(
	`PKTLEN
((
osh
), (
p
)Ë>((
Àn
Ë+ 
d©Æign
)); \

490 i‡(
d©Æign
) \

491 
	`PKTPULL
((
osh
), (
p
), 
d©Æign
); \

492 
	`PKTSETLEN
((
osh
), (
p
), (
Àn
)); \

493 } 0)

	)

496 c⁄° 
uöt
 
	gmax_roundup
 = 512;

499 
boﬁ
 
	gdhd_ªadahód
;

503 
	#DATAOK
(
bus
) \

504 (((
uöt8
)(
bus
->
tx_max
 - bus->
tx_£q
) > 1) && \

505 (((
uöt8
)(
bus
->
tx_max
 - bus->
tx_£q
Ë& 0x80Ë=0))

	)

508 
	#TXCTLOK
(
bus
) \

509 (((
uöt8
)(
bus
->
tx_max
 - bus->
tx_£q
) != 0) && \

510 (((
uöt8
)(
bus
->
tx_max
 - bus->
tx_£q
Ë& 0x80Ë=0))

	)

513 
	#DATABUFCNT
(
bus
) \

514 ((
uöt8
)(
bus
->
tx_max
 - bus->
tx_£q
Ë- 1)

	)

518 
	#R_SDREG
(
ªgv¨
, 
ªgaddr
, 
ªåyv¨
) \

520 
ªåyv¨
 = 0; \

522 
ªgv¨
 = 
	`R_REG
(
bus
->
dhd
->
osh
, 
ªgaddr
); \

523 } 
	`bcmsdh_ªgÁû
(
bus
->
sdh
Ë&& (++
ªåyv¨
 <
ªåy_limô
)); \

524 i‡(
ªåyv¨
) { \

525 
bus
->
ªgÁûs
 +(
ªåyv¨
-1); \

526 i‡(
ªåyv¨
 > 
ªåy_limô
) { \

527 
	`DHD_ERROR
(("%s: FAILED" #regvar "READ, LINE %d\n", \

528 
__FUNCTION__
, 
__LINE__
)); \

529 
ªgv¨
 = 0; \

532 } 0)

	)

534 
	#W_SDREG
(
ªgvÆ
, 
ªgaddr
, 
ªåyv¨
) \

536 
ªåyv¨
 = 0; \

538 
	`W_REG
(
bus
->
dhd
->
osh
, 
ªgaddr
, 
ªgvÆ
); \

539 } 
	`bcmsdh_ªgÁû
(
bus
->
sdh
Ë&& (++
ªåyv¨
 <
ªåy_limô
)); \

540 i‡(
ªåyv¨
) { \

541 
bus
->
ªgÁûs
 +(
ªåyv¨
-1); \

542 i‡(
ªåyv¨
 > 
ªåy_limô
) \

543 
	`DHD_ERROR
(("%s: FAILED REGISTER WRITE, LINE %d\n", \

544 
__FUNCTION__
, 
__LINE__
)); \

546 } 0)

	)

548 
	#BUS_WAKE
(
bus
) \

550 
bus
->
idÀcou¡
 = 0; \

551 i‡((
bus
)->
¶ìpög
) \

552 
	`dhdsdio_bus¶ìp
((
bus
), 
FALSE
); \

553 } 0);

	)

572 
	#SDIO_DEVICE_HMB_RXINT
 0

	)

573 
	#SDIO_DEVICE_RXDATAINT_MODE_0
 1

	)

574 
	#SDIO_DEVICE_RXDATAINT_MODE_1
 2

	)

577 
	#FRAME_AVAIL_MASK
(
bus
) \

578 ((
bus
->
rxöt_mode
 =
SDIO_DEVICE_HMB_RXINT
Ë? 
I_HMB_FRAME_IND
 : 
I_XMTDATA_AVAIL
)

	)

580 
	#DHD_BUS
 
SDIO_BUS


	)

582 
	#PKT_AVAILABLE
(
bus
, 
öt°©us
Ë((öt°©usË& (
	`FRAME_AVAIL_MASK
(bus)))

	)

584 
	#HOSTINTMASK
 (
I_HMB_SW_MASK
 | 
I_CHIPACTIVE
)

	)

586 
	#GSPI_PR55150_BAILOUT


	)

588 #ifde‡
SDTEST


589 
dhdsdio_ã°rcv
(
dhd_bus_t
 *
bus
, *
pkt
, 
uöt
 
£q
);

590 
dhdsdio_sdã°_£t
(
dhd_bus_t
 *
bus
, 
uöt
 
cou¡
);

593 #ifde‡
DHD_DEBUG


594 
dhdsdio_checkdõd
(
dhd_bus_t
 *
bus
, *
d©a
, 
uöt
 
size
);

595 
dhd_£rülc⁄sﬁe
(
dhd_bus_t
 *
bus
, 
boﬁ
 
gë
, boﬁ 
íabÀ
, *
bcmîr‹
);

598 
dhdsdio_devˇp_£t
(
dhd_bus_t
 *
bus
, 
uöt8
 
ˇp
);

599 
dhdsdio_dow∆ﬂd_°©e
(
dhd_bus_t
 *
bus
, 
boﬁ
 
íãr
);

601 
dhdsdio_ªÀa£
(
dhd_bus_t
 *
bus
, 
o¶_t
 *
osh
);

602 
dhdsdio_ªÀa£_mÆloc
(
dhd_bus_t
 *
bus
, 
o¶_t
 *
osh
);

603 
dhdsdio_disc⁄√˘
(*
±r
);

604 
boﬁ
 
dhdsdio_chùm©ch
(
uöt16
 
chùid
);

605 
boﬁ
 
dhdsdio_¥obe_©èch
(
dhd_bus_t
 *
bus
, 
o¶_t
 *
osh
, *
sdh
,

606 * 
ªgsva
, 
uöt16
 
devid
);

607 
boﬁ
 
dhdsdio_¥obe_mÆloc
(
dhd_bus_t
 *
bus
, 
o¶_t
 *
osh
, *
sdh
);

608 
boﬁ
 
dhdsdio_¥obe_öô
(
dhd_bus_t
 *
bus
, 
o¶_t
 *
osh
, *
sdh
);

609 
dhdsdio_ªÀa£_d⁄gÀ
(
dhd_bus_t
 *
bus
, 
o¶_t
 *
osh
, 
boﬁ
 
d⁄gÀ_isﬁ©i⁄
,

610 
boﬁ
 
ª£t_Êag
);

612 
dhd_d⁄gÀ_£tmemsize
(
dhd_bus
 *
bus
, 
mem_size
);

613 
dhd_bcmsdh_ªcv_buf
(
dhd_bus_t
 *
bus
, 
uöt32
 
addr
, 
uöt
 
‚
, uöà
Êags
,

614 
uöt8
 *
buf
, 
uöt
 
nbyãs
,

615 *
pkt
, 
bcmsdh_cm∂t_‚_t
 
com∂ëe
, *
h™dÀ
);

616 
dhd_bcmsdh_£nd_buf
(
dhd_bus_t
 *
bus
, 
uöt32
 
addr
, 
uöt
 
‚
, uöà
Êags
,

617 
uöt8
 *
buf
, 
uöt
 
nbyãs
,

618 *
pkt
, 
bcmsdh_cm∂t_‚_t
 
com∂ëe
, *
h™dÀ
);

619 #ifde‡
BCMSDIOH_TXGLOM


620 
dhd_bcmsdh_glom_po°
(
dhd_bus_t
 *
bus
, 
uöt8
 *
‰ame
, 
uöt
 
Àn
);

621 
dhd_bcmsdh_glom_˛ór
(
dhd_bus_t
 *
bus
);

624 
boﬁ
 
dhdsdio_dow∆ﬂd_fúmw¨e
(
dhd_bus_t
 *
bus
, 
o¶_t
 *
osh
, *
sdh
);

625 
_dhdsdio_dow∆ﬂd_fúmw¨e
(
dhd_bus_t
 *
bus
);

627 
dhdsdio_dow∆ﬂd_code_fûe
(
dhd_bus_t
 *
bus
, *
image_∑th
);

628 
dhdsdio_dow∆ﬂd_nvøm
(
dhd_bus_t
 *
bus
);

629 #ifde‡
BCMEMBEDIMAGE


630 
dhdsdio_dow∆ﬂd_code_¨øy
(
dhd_bus_t
 *
bus
);

632 
dhdsdio_bus¶ìp
(
dhd_bus_t
 *
bus
, 
boﬁ
 
¶ìp
);

633 
dhdsdio_˛k˘l
(
dhd_bus_t
 *
bus
, 
uöt
 
èrgë
, 
boﬁ
 
≥ndok
);

634 
uöt8
 
dhdsdio_¶ìpc§_gë
(
dhd_bus_t
 *
bus
);

636 #ifde‡
WLMEDIA_HTSF


637 
	~<htsf.h
>

638 
uöt32
 
dhd_gë_htsf
(*
dhd
, 
ifidx
);

642 
	$dhd_d⁄gÀ_£tmemsize
(
dhd_bus
 *
bus
, 
mem_size
)

644 
öt32
 
mö_size
 = 
DONGLE_MIN_MEMSIZE
;

646 
	`DHD_ERROR
(("user: RestrictÅhe dongleÑam sizeÅo %d, mináccepted %d\n",

647 
dhd_d⁄gÀ_memsize
, 
mö_size
));

648 i‡((
dhd_d⁄gÀ_memsize
 > 
mö_size
) &&

649 (
dhd_d⁄gÀ_memsize
 < (
öt32
)
bus
->
‹ig_ømsize
))

650 
bus
->
ømsize
 = 
dhd_d⁄gÀ_memsize
;

651 
	}
}

654 
	$dhdsdio_£t_süddr_wödow
(
dhd_bus_t
 *
bus
, 
uöt32
 
addªss
)

656 
îr
 = 0;

657 
	`bcmsdh_cfg_wrôe
(
bus
->
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_FUNC1_SBADDRLOW
,

658 (
addªss
 >> 8Ë& 
SBSDIO_SBADDRLOW_MASK
, &
îr
);

659 i‡(!
îr
)

660 
	`bcmsdh_cfg_wrôe
(
bus
->
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_FUNC1_SBADDRMID
,

661 (
addªss
 >> 16Ë& 
SBSDIO_SBADDRMID_MASK
, &
îr
);

662 i‡(!
îr
)

663 
	`bcmsdh_cfg_wrôe
(
bus
->
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_FUNC1_SBADDRHIGH
,

664 (
addªss
 >> 24Ë& 
SBSDIO_SBADDRHIGH_MASK
, &
îr
);

665  
îr
;

666 
	}
}

669 #ifde‡
USE_OOB_GPIO1


671 
	$dhdsdio_oobwakeup_öô
(
dhd_bus_t
 *
bus
)

673 
uöt32
 
vÆ
, 
addr
, 
d©a
;

675 
	`bcmsdh_gpioouãn
(
bus
->
sdh
, 
GPIO_DEV_WAKEUP
);

677 
addr
 = 
SI_ENUM_BASE
 + 
	`OFFSETOF
(
chù¸egs_t
, 
chùc⁄åﬁ_addr
);

678 
d©a
 = 
SI_ENUM_BASE
 + 
	`OFFSETOF
(
chù¸egs_t
, 
chùc⁄åﬁ_d©a
);

681 
	`bcmsdh_ªg_wrôe
(
bus
->
sdh
, 
addr
, 4, 2);

682 
vÆ
 = 
	`bcmsdh_ªg_ªad
(
bus
->
sdh
, 
d©a
, 4);

683 
vÆ
 |
CC_CHIPCTRL2_GPIO1_WAKEUP
;

684 
	`bcmsdh_ªg_wrôe
(
bus
->
sdh
, 
d©a
, 4, 
vÆ
);

686 
bus
->
_oobwakeup
 = 
TRUE
;

689 
	}
}

695 
boﬁ


696 
	$dhdsdio_§_ˇp
(
dhd_bus_t
 *
bus
)

698 
boﬁ
 
ˇp
 = 
FALSE
;

699 
uöt32
 
mö
 = 0, 
c‹e_ˇ≥xt
, 
addr
, 
d©a
;

700 i‡(
bus
->
sih
->
chù
 =
BCM4324_CHIP_ID
) {

701 
addr
 = 
SI_ENUM_BASE
 + 
	`OFFSETOF
(
chù¸egs_t
, 
chùc⁄åﬁ_addr
);

702 
d©a
 = 
SI_ENUM_BASE
 + 
	`OFFSETOF
(
chù¸egs_t
, 
chùc⁄åﬁ_d©a
);

703 
	`bcmsdh_ªg_wrôe
(
bus
->
sdh
, 
addr
, 4, 3);

704 
c‹e_ˇ≥xt
 = 
	`bcmsdh_ªg_ªad
(
bus
->
sdh
, 
d©a
, 4);

705 } i‡(
bus
->
sih
->
chù
 =
BCM4330_CHIP_ID
 || bus->sih->chù =
BCM43362_CHIP_ID
) {

706 
c‹e_ˇ≥xt
 = 
FALSE
;

707 } i‡(
bus
->
sih
->
chù
 =
BCM4335_CHIP_ID
) {

708 
c‹e_ˇ≥xt
 = 
TRUE
;

710 
c‹e_ˇ≥xt
 = 
	`bcmsdh_ªg_ªad
(
bus
->
sdh
, 
CORE_CAPEXT_ADDR
, 4);

711 
c‹e_ˇ≥xt
 = (c‹e_ˇ≥xà& 
CORE_CAPEXT_SR_SUPPORTED_MASK
);

713 i‡(!(
c‹e_ˇ≥xt
))

714  
FALSE
;

716 i‡(
bus
->
sih
->
chù
 =
BCM4324_CHIP_ID
) {

718 
mö
 = 
	`bcmsdh_ªg_ªad
(
bus
->
sdh
, 
MIN_RSRC_ADDR
, 4);

719 i‡(
mö
 =
MIN_RSRC_SR
)

720 
ˇp
 = 
TRUE
;

721 } i‡(
bus
->
sih
->
chù
 =
BCM4335_CHIP_ID
) {

722 
uöt32
 
íabvÆ
 = 0;

723 
addr
 = 
SI_ENUM_BASE
 + 
	`OFFSETOF
(
chù¸egs_t
, 
chùc⁄åﬁ_addr
);

724 
d©a
 = 
SI_ENUM_BASE
 + 
	`OFFSETOF
(
chù¸egs_t
, 
chùc⁄åﬁ_d©a
);

725 
	`bcmsdh_ªg_wrôe
(
bus
->
sdh
, 
addr
, 4, 
CC_PMUCC3
);

726 
íabvÆ
 = 
	`bcmsdh_ªg_ªad
(
bus
->
sdh
, 
d©a
, 4);

728 i‡(
íabvÆ
)

729 
ˇp
 = 
TRUE
;

731 
d©a
 = 
	`bcmsdh_ªg_ªad
(
bus
->
sdh
,

732 
SI_ENUM_BASE
 + 
	`OFFSETOF
(
chù¸egs_t
, 
ªã¡i⁄_˘l
), 4);

733 i‡((
d©a
 & (
RCTL_MACPHY_DISABLE_MASK
 | 
RCTL_LOGIC_DISABLE_MASK
)) == 0)

734 
ˇp
 = 
TRUE
;

737  
ˇp
;

738 
	}
}

741 
	$dhdsdio_§w¨_öô
(
dhd_bus_t
 *
bus
)

744 
	`bcmsdh_gpio_öô
(
bus
->
sdh
);

746 #ifde‡
USE_OOB_GPIO1


747 
	`dhdsdio_oobwakeup_öô
(
bus
);

752 
	}
}

755 
	$dhdsdio_§_öô
(
dhd_bus_t
 *
bus
)

757 
uöt8
 
vÆ
;

758 
îr
 = 0;

760 i‡((
bus
->
sih
->
chù
 =
BCM4334_CHIP_ID
Ë&& (bus->sih->
chùªv
 == 2))

761 
	`dhdsdio_§w¨_öô
(
bus
);

763 
vÆ
 = 
	`bcmsdh_cfg_ªad
(
bus
->
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_FUNC1_WAKEUPCTRL
, 
NULL
);

764 
vÆ
 |1 << 
SBSDIO_FUNC1_WCTRL_HTWAIT_SHIFT
;

765 
	`bcmsdh_cfg_wrôe
(
bus
->
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_FUNC1_WAKEUPCTRL
,

766 1 << 
SBSDIO_FUNC1_WCTRL_HTWAIT_SHIFT
, &
îr
);

767 
vÆ
 = 
	`bcmsdh_cfg_ªad
(
bus
->
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_FUNC1_WAKEUPCTRL
, 
NULL
);

770 
	`dhdsdio_devˇp_£t
(
bus
,

771 (
SDIOD_CCCR_BRCM_CARDCAP_CMD14_SUPPORT
 | 
SDIOD_CCCR_BRCM_CARDCAP_CMD14_EXT
));

773 
	`bcmsdh_cfg_wrôe
(
bus
->
sdh
, 
SDIO_FUNC_1
,

774 
SBSDIO_FUNC1_CHIPCLKCSR
, 
SBSDIO_FORCE_HT
, &
îr
);

776 
bus
->
_¶∑uto
 = 
dhd_¶∑uto
 ? 
TRUE
 : 
FALSE
;

778 
bus
->
_§íab
 = 
TRUE
;

781 
	}
}

788 
	$dhdsdio_˛k_kso_öô
(
dhd_bus_t
 *
bus
)

790 
uöt8
 
vÆ
;

791 
îr
 = 0;

794 
bus
->
kso
 = 
TRUE
;

800 
vÆ
 = 
	`bcmsdh_cfg_ªad
(
bus
->
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_FUNC1_SLEEPCSR
, 
NULL
);

801 i‡(!(
vÆ
 & 
SBSDIO_FUNC1_SLEEPCSR_KSO_MASK
)) {

802 
vÆ
 |(
SBSDIO_FUNC1_SLEEPCSR_KSO_EN
 << 
SBSDIO_FUNC1_SLEEPCSR_KSO_SHIFT
);

803 
	`bcmsdh_cfg_wrôe
(
bus
->
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_FUNC1_SLEEPCSR
, 
vÆ
, &
îr
);

804 i‡(
îr
)

805 
	`DHD_ERROR
(("%s: SBSDIO_FUNC1_SLEEPCSRÉº: 0x%x\n", 
__FUNCTION__
, 
îr
));

809 
	}
}

811 
	#KSO_DBG
(
x
)

	)

812 
	#MAX_KSO_ATTEMPTS
 64

	)

814 
	$dhdsdio_˛k_kso_íab
(
dhd_bus_t
 *
bus
, 
boﬁ
 
⁄
)

816 
uöt8
 
wr_vÆ
 = 0, 
rd_vÆ
, 
cmp_vÆ
, 
bmask
;

817 
îr
 = 0;

818 
åy_˙t
 = 0;

820 
	`KSO_DBG
(("%s> op:%s\n", 
__FUNCTION__
, (
⁄
 ? "KSO_SET" : "KSO_CLR")));

822 
wr_vÆ
 |(
⁄
 << 
SBSDIO_FUNC1_SLEEPCSR_KSO_SHIFT
);

824 
	`bcmsdh_cfg_wrôe
(
bus
->
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_FUNC1_SLEEPCSR
, 
wr_vÆ
, &
îr
);

826 i‡(
⁄
) {

827 
cmp_vÆ
 = 
SBSDIO_FUNC1_SLEEPCSR_KSO_MASK
 | 
SBSDIO_FUNC1_SLEEPCSR_DEVON_MASK
;

828 
bmask
 = 
cmp_vÆ
;

830 
	`m¶ìp
(3);

834 
cmp_vÆ
 = 0;

835 
bmask
 = 
SBSDIO_FUNC1_SLEEPCSR_KSO_MASK
;

839 
rd_vÆ
 = 
	`bcmsdh_cfg_ªad
(
bus
->
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_FUNC1_SLEEPCSR
, &
îr
);

840 i‡(((
rd_vÆ
 & 
bmask
Ë=
cmp_vÆ
Ë&& !
îr
)

843 
	`KSO_DBG
(("%s> KSO wr/rdÑëry:%d, ERR:%x \n", 
__FUNCTION__
, 
åy_˙t
, 
îr
));

844 
	`OSL_DELAY
(50);

846 
	`bcmsdh_cfg_wrôe
(
bus
->
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_FUNC1_SLEEPCSR
, 
wr_vÆ
, &
îr
);

848 } 
åy_˙t
++ < 
MAX_KSO_ATTEMPTS
);

851 i‡(
åy_˙t
 > 1) {

852 
	`KSO_DBG
(("%s> op:%s,Åry_cnt:%d,Ñd_val:%x, ERR:%x \n",

853 
__FUNCTION__
, (
⁄
 ? "KSO_SET" : "KSO_CLR"), 
åy_˙t
, 
rd_vÆ
, 
îr
));

856 i‡(
åy_˙t
 > 
MAX_KSO_ATTEMPTS
) {

857 
	`DHD_ERROR
(("%s> op:%s, ERROR:Åry_cnt:%d,Ñd_val:%x, ERR:%x \n",

858 
__FUNCTION__
, (
⁄
 ? "KSO_SET" : "KSO_CLR"), 
åy_˙t
, 
rd_vÆ
, 
îr
));

860  
îr
;

861 
	}
}

864 
	$dhdsdio_˛k_kso_iov¨
(
dhd_bus_t
 *
bus
, 
boﬁ
 
⁄
)

866 
îr
 = 0;

868 i‡(
⁄
 =
FALSE
) {

870 
	`BUS_WAKE
(
bus
);

871 
	`dhdsdio_˛k˘l
(
bus
, 
CLK_AVAIL
, 
FALSE
);

873 
	`DHD_ERROR
(("%s: KSO dißbÀ clk: 0x%x\n", 
__FUNCTION__
,

874 
	`bcmsdh_cfg_ªad
(
bus
->
sdh
, 
SDIO_FUNC_1
,

875 
SBSDIO_FUNC1_CHIPCLKCSR
, &
îr
)));

876 
	`dhdsdio_˛k_kso_íab
(
bus
, 
FALSE
);

878 
	`DHD_ERROR
(("%s: KSOÉ«bÀ\n", 
__FUNCTION__
));

881 i‡(
bus
->
˛k°©e
 =
CLK_NONE
) {

882 
	`DHD_ERROR
(("%s: Reque° SD clk\n", 
__FUNCTION__
));

883 
	`dhdsdio_˛k˘l
(
bus
, 
CLK_SDONLY
, 
FALSE
);

887 
	`dhdsdio_˛k_kso_íab
(
bus
, 
TRUE
);

888 
	`dhdsdio_˛k_kso_íab
(
bus
, 
TRUE
);

889 
	`OSL_DELAY
(4000);

892 
	`SPINWAIT
(((
	`dhdsdio_¶ìpc§_gë
(
bus
)) !=

893 (
SBSDIO_FUNC1_SLEEPCSR_KSO_MASK
 |

894 
SBSDIO_FUNC1_SLEEPCSR_DEVON_MASK
)),

897 
	`DHD_ERROR
(("%s: sÀïc§: 0x%x\n", 
__FUNCTION__
,

898 
	`dhdsdio_¶ìpc§_gë
(
bus
)));

901 
bus
->
kso
 = 
⁄
;

902 
	`BCM_REFERENCE
(
îr
);

905 
	}
}

907 
uöt8


908 
	$dhdsdio_¶ìpc§_gë
(
dhd_bus_t
 *
bus
)

910 
îr
 = 0;

911 
uöt8
 
vÆ
 = 0;

913 
vÆ
 = 
	`bcmsdh_cfg_ªad
(
bus
->
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_FUNC1_SLEEPCSR
, &
îr
);

914 i‡(
îr
)

915 
	`DHD_TRACE
(("FaûedÅÿªad SLEEPCSR: %d\n", 
îr
));

917  
vÆ
;

918 
	}
}

920 
uöt8


921 
	$dhdsdio_devˇp_gë
(
dhd_bus_t
 *
bus
)

923  
	`bcmsdh_cfg_ªad
(
bus
->
sdh
, 
SDIO_FUNC_0
, 
SDIOD_CCCR_BRCM_CARDCAP
, 
NULL
);

924 
	}
}

927 
	$dhdsdio_devˇp_£t
(
dhd_bus_t
 *
bus
, 
uöt8
 
ˇp
)

929 
îr
 = 0;

931 
	`bcmsdh_cfg_wrôe
(
bus
->
sdh
, 
SDIO_FUNC_0
, 
SDIOD_CCCR_BRCM_CARDCAP
, 
ˇp
, &
îr
);

932 i‡(
îr
)

933 
	`DHD_ERROR
(("%s: devˇ∞£àîr: 0x%x\n", 
__FUNCTION__
, 
îr
));

936 
	}
}

939 
	$dhdsdio_˛k_dev¶ìp_iov¨
(
dhd_bus_t
 *
bus
, 
boﬁ
 
⁄
)

941 
îr
 = 0, 
ªåy
;

942 
uöt8
 
vÆ
;

944 
ªåy
 = 0;

945 i‡(
⁄
 =
TRUE
) {

952 i‡(!
	`SLPAUTO_ENAB
(
bus
))

953 
	`dhdsdio_˛k˘l
(
bus
, 
CLK_AVAIL
, 
FALSE
);

955 
vÆ
 = 
	`bcmsdh_cfg_ªad
(
bus
->
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_FUNC1_CHIPCLKCSR
, &
îr
);

956 i‡((
vÆ
 & 
SBSDIO_CSR_MASK
) == 0) {

957 
	`DHD_ERROR
(("%s: No clock beforeÉnter sleep:0x%x\n",

958 
__FUNCTION__
, 
vÆ
));

961 
	`bcmsdh_cfg_wrôe
(
bus
->
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_FUNC1_CHIPCLKCSR
,

962 
SBSDIO_ALP_AVAIL_REQ
, &
îr
);

963 
	`DHD_ERROR
(("%s: clock bef‹ê¶ìp:0x%x\n", 
__FUNCTION__
,

964 
	`bcmsdh_cfg_ªad
(
bus
->
sdh
, 
SDIO_FUNC_1
,

965 
SBSDIO_FUNC1_CHIPCLKCSR
, &
îr
)));

969 
	`DHD_TRACE
(("%s: clk bef‹ê¶ìp: 0x%x\n", 
__FUNCTION__
,

970 
	`bcmsdh_cfg_ªad
(
bus
->
sdh
, 
SDIO_FUNC_1
,

971 
SBSDIO_FUNC1_CHIPCLKCSR
, &
îr
)));

972 #ifde‡
USE_CMD14


973 
îr
 = 
	`bcmsdh_¶ìp
(
bus
->
sdh
, 
TRUE
);

975 
îr
 = 
	`dhdsdio_˛k_kso_íab
(
bus
, 
FALSE
);

976 i‡(
	`OOB_WAKEUP_ENAB
(
bus
))

977 
îr
 = 
	`bcmsdh_gpioout
(
bus
->
sdh
, 
GPIO_DEV_WAKEUP
, 
FALSE
);

982 i‡(
bus
->
˛k°©e
 =
CLK_NONE
) {

983 
	`DHD_TRACE
(("%s: Reque° SD clk\n", 
__FUNCTION__
));

984 
	`dhdsdio_˛k˘l
(
bus
, 
CLK_SDONLY
, 
FALSE
);

987 i‡((
bus
->
sih
->
chù
 =
BCM4334_CHIP_ID
Ë&& (bus->sih->
chùªv
 == 2)) {

988 
	`SPINWAIT
((
	`bcmsdh_gpioö
(
bus
->
sdh
, 
GPIO_DEV_SRSTATE
Ë!
TRUE
),

989 
GPIO_DEV_SRSTATE_TIMEOUT
);

991 i‡(
	`bcmsdh_gpioö
(
bus
->
sdh
, 
GPIO_DEV_SRSTATE
Ë=
FALSE
) {

992 
	`DHD_ERROR
(("ERROR: GPIO_DEV_SRSTATE stillÜow!\n"));

995 #ifde‡
USE_CMD14


996 
îr
 = 
	`bcmsdh_¶ìp
(
bus
->
sdh
, 
FALSE
);

997 i‡(
	`SLPAUTO_ENAB
(
bus
Ë&& (
îr
 != 0)) {

998 
	`OSL_DELAY
(10000);

999 
	`DHD_TRACE
(("%s: Resyn¯devi˚ sÀï\n", 
__FUNCTION__
));

1002 
îr
 = 
	`bcmsdh_¶ìp
(
bus
->
sdh
, 
TRUE
);

1003 
	`OSL_DELAY
(10000);

1004 
îr
 = 
	`bcmsdh_¶ìp
(
bus
->
sdh
, 
FALSE
);

1006 i‡(
îr
) {

1007 
	`OSL_DELAY
(10000);

1008 
	`DHD_ERROR
(("%s: CMD14Éxô faûedágaö!\n", 
__FUNCTION__
));

1011 
îr
 = 
	`bcmsdh_¶ìp
(
bus
->
sdh
, 
TRUE
);

1012 
	`OSL_DELAY
(10000);

1013 
îr
 = 
	`bcmsdh_¶ìp
(
bus
->
sdh
, 
FALSE
);

1014 i‡(
îr
) {

1015 
	`DHD_ERROR
(("%s: CMD14Éxô faûedÅwi˚!\n", 
__FUNCTION__
));

1016 
	`DHD_ERROR
(("%s: FATAL: DeviceÇon-response!\n",

1017 
__FUNCTION__
));

1018 
îr
 = 0;

1023 i‡(
	`OOB_WAKEUP_ENAB
(
bus
))

1024 
îr
 = 
	`bcmsdh_gpioout
(
bus
->
sdh
, 
GPIO_DEV_WAKEUP
, 
TRUE
);

1027 
îr
 = 
	`dhdsdio_˛k_kso_íab
(
bus
, 
TRUE
);

1028 i‡(
îr
)

1029 
	`OSL_DELAY
(10000);

1030 } (
îr
 !0Ë&& (++
ªåy
 < 3));

1032 i‡(
îr
 != 0) {

1033 
	`DHD_ERROR
(("ERROR: ksÿ£àÁûedÑëry: %d\n", 
ªåy
));

1034 
îr
 = 0;

1038 i‡(
îr
 == 0) {

1039 
uöt8
 
c§
;

1042 
	`SPINWAIT
((((
c§
 = 
	`dhdsdio_¶ìpc§_gë
(
bus
)) &

1043 
SBSDIO_FUNC1_SLEEPCSR_DEVON_MASK
) !=

1044 (
SBSDIO_FUNC1_SLEEPCSR_DEVON_MASK
)), (20000));

1046 
	`DHD_TRACE
(("%s: ExôSÀï sÀïc§: 0x%x\n", 
__FUNCTION__
, 
c§
));

1048 i‡(!(
c§
 & 
SBSDIO_FUNC1_SLEEPCSR_DEVON_MASK
)) {

1049 
	`DHD_ERROR
(("%s:ERROR: ExitSleep device NOT Ready! 0x%x\n",

1050 
__FUNCTION__
, 
c§
));

1051 
îr
 = 
BCME_NODEVICE
;

1054 
	`SPINWAIT
((((
c§
 = 
	`bcmsdh_cfg_ªad
(
bus
->
sdh
, 
SDIO_FUNC_1
,

1055 
SBSDIO_FUNC1_CHIPCLKCSR
, &
îr
)Ë& 
SBSDIO_HT_AVAIL
) !=

1056 (
SBSDIO_HT_AVAIL
)), (10000));

1062 i‡(
îr
 == 0)

1063 
bus
->
kso
 = 
⁄
 ? 
FALSE
 : 
TRUE
;

1065 
	`DHD_ERROR
(("%s: SÀïÑeque° faûed: on:%dÉº:%d\n", 
__FUNCTION__
, 
⁄
, 
îr
));

1066 i‡(!
⁄
 && 
ªåy
 > 2)

1067 
bus
->
kso
 = 
TRUE
;

1070  
îr
;

1071 
	}
}

1075 
	$dhdsdio_ht˛k
(
dhd_bus_t
 *
bus
, 
boﬁ
 
⁄
, boﬁ 
≥ndok
)

1077 
	#HT_AVAIL_ERROR_MAX
 10

	)

1078 
ht_avaû_îr‹
 = 0;

1079 
îr
;

1080 
uöt8
 
˛k˘l
, 
˛kªq
, 
dev˘l
;

1081 
bcmsdh_öfo_t
 *
sdh
;

1083 
	`DHD_TRACE
(("%s: E¡î\n", 
__FUNCTION__
));

1085 #i‡
	`deföed
(
OOB_INTR_ONLY
)

1086 
≥ndok
 = 
FALSE
;

1088 
˛k˘l
 = 0;

1089 
sdh
 = 
bus
->sdh;

1092 i‡(!
	`KSO_ENAB
(
bus
))

1093  
BCME_OK
;

1095 i‡(
	`SLPAUTO_ENAB
(
bus
)) {

1096 
bus
->
˛k°©e
 = (
⁄
 ? 
CLK_AVAIL
 : 
CLK_SDONLY
);

1097  
BCME_OK
;

1100 i‡(
⁄
) {

1102 
˛kªq
 = 
bus
->
Æp_⁄ly
 ? 
SBSDIO_ALP_AVAIL_REQ
 : 
SBSDIO_HT_AVAIL_REQ
;

1106 
	`bcmsdh_cfg_wrôe
(
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_FUNC1_CHIPCLKCSR
, 
˛kªq
, &
îr
);

1107 i‡(
îr
) {

1108 
ht_avaû_îr‹
++;

1109 i‡(
ht_avaû_îr‹
 < 
HT_AVAIL_ERROR_MAX
) {

1110 
	`DHD_ERROR
(("%s: HT AvaûÑeque°Éº‹: %d\n", 
__FUNCTION__
, 
îr
));

1113 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 27)

1114 i‡(
ht_avaû_îr‹
 =
HT_AVAIL_ERROR_MAX
) {

1115 
	`dhd_os_£nd_h™g_mesßge
(
bus
->
dhd
);

1118  
BCME_ERROR
;

1120 
ht_avaû_îr‹
 = 0;

1123 i‡(
≥ndok
 &&

1124 ((
bus
->
sih
->
busc‹ëy≥
 =
PCMCIA_CORE_ID
Ë&& (bus->sih->
busc‹îev
 == 9))) {

1125 
uöt32
 
dummy
, 
ªåõs
;

1126 
	`R_SDREG
(
dummy
, &
bus
->
ªgs
->
˛ock˘l°©us
, 
ªåõs
);

1127 
	`BCM_REFERENCE
(
dummy
);

1131 
˛k˘l
 = 
	`bcmsdh_cfg_ªad
(
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_FUNC1_CHIPCLKCSR
, &
îr
);

1132 i‡(
îr
) {

1133 
	`DHD_ERROR
(("%s: HT AvaûÑódÉº‹: %d\n", 
__FUNCTION__
, 
îr
));

1134  
BCME_ERROR
;

1138 i‡(!
	`SBSDIO_CLKAV
(
˛k˘l
, 
bus
->
Æp_⁄ly
Ë&& 
≥ndok
) {

1140 
dev˘l
 = 
	`bcmsdh_cfg_ªad
(
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_DEVICE_CTL
, &
îr
);

1141 i‡(
îr
) {

1142 
	`DHD_ERROR
(("%s: DevctláccessÉrror setting CA: %d\n",

1143 
__FUNCTION__
, 
îr
));

1144  
BCME_ERROR
;

1147 
dev˘l
 |
SBSDIO_DEVCTL_CA_INT_ONLY
;

1148 
	`bcmsdh_cfg_wrôe
(
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_DEVICE_CTL
, 
dev˘l
, &
îr
);

1149 
	`DHD_INFO
(("CLKCTL: set PENDING\n"));

1150 
bus
->
˛k°©e
 = 
CLK_PENDING
;

1151  
BCME_OK
;

1152 } i‡(
bus
->
˛k°©e
 =
CLK_PENDING
) {

1154 
dev˘l
 = 
	`bcmsdh_cfg_ªad
(
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_DEVICE_CTL
, &
îr
);

1155 
dev˘l
 &~
SBSDIO_DEVCTL_CA_INT_ONLY
;

1156 
	`bcmsdh_cfg_wrôe
(
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_DEVICE_CTL
, 
dev˘l
, &
îr
);

1160 i‡(!
	`SBSDIO_CLKAV
(
˛k˘l
, 
bus
->
Æp_⁄ly
)) {

1161 
	`SPINWAIT_SLEEP
(
sdioh_•öwaô_¶ìp
,

1162 ((
˛k˘l
 = 
	`bcmsdh_cfg_ªad
(
sdh
, 
SDIO_FUNC_1
,

1163 
SBSDIO_FUNC1_CHIPCLKCSR
, &
îr
)),

1164 !
	`SBSDIO_CLKAV
(
˛k˘l
, 
bus
->
Æp_⁄ly
)), 
PMU_MAX_TRANSITION_DLY
);

1166 i‡(
îr
) {

1167 
	`DHD_ERROR
(("%s: HT AvaûÑeque°Éº‹: %d\n", 
__FUNCTION__
, 
îr
));

1168  
BCME_ERROR
;

1170 i‡(!
	`SBSDIO_CLKAV
(
˛k˘l
, 
bus
->
Æp_⁄ly
)) {

1171 
	`DHD_ERROR
(("%s: HT AvailÅimeout (%d): clkctl 0x%02x\n",

1172 
__FUNCTION__
, 
PMU_MAX_TRANSITION_DLY
, 
˛k˘l
));

1173  
BCME_ERROR
;

1177 
bus
->
˛k°©e
 = 
CLK_AVAIL
;

1178 
	`DHD_INFO
(("CLKCTL:Åurned ON\n"));

1180 #i‡
	`deföed
(
DHD_DEBUG
)

1181 i‡(
bus
->
Æp_⁄ly
 =
TRUE
) {

1182 #i‡!
	`deföed
(
BCMLXSDMMC
)

1183 i‡(!
	`SBSDIO_ALPONLY
(
˛k˘l
)) {

1184 
	`DHD_ERROR
(("%s: HT Clock, whí ALP O∆y\n", 
__FUNCTION__
));

1188 i‡(
	`SBSDIO_ALPONLY
(
˛k˘l
)) {

1189 
	`DHD_ERROR
(("%s: HT Clock should bê⁄.\n", 
__FUNCTION__
));

1194 
bus
->
a˘ivôy
 = 
TRUE
;

1195 #ifde‡
DHD_USE_IDLECOUNT


1196 
bus
->
idÀcou¡
 = 0;

1199 
˛kªq
 = 0;

1200 i‡(
bus
->
˛k°©e
 =
CLK_PENDING
) {

1202 
dev˘l
 = 
	`bcmsdh_cfg_ªad
(
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_DEVICE_CTL
, &
îr
);

1203 
dev˘l
 &~
SBSDIO_DEVCTL_CA_INT_ONLY
;

1204 
	`bcmsdh_cfg_wrôe
(
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_DEVICE_CTL
, 
dev˘l
, &
îr
);

1207 
bus
->
˛k°©e
 = 
CLK_SDONLY
;

1208 i‡(!
	`SR_ENAB
(
bus
)) {

1209 
	`bcmsdh_cfg_wrôe
(
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_FUNC1_CHIPCLKCSR
, 
˛kªq
, &
îr
);

1210 
	`DHD_INFO
(("CLKCTL:Åurned OFF\n"));

1211 i‡(
îr
) {

1212 
	`DHD_ERROR
(("%s: FailedáccessÅurning clock off: %d\n",

1213 
__FUNCTION__
, 
îr
));

1214  
BCME_ERROR
;

1218  
BCME_OK
;

1219 
	}
}

1223 
	$dhdsdio_sd˛k
(
dhd_bus_t
 *
bus
, 
boﬁ
 
⁄
)

1225 
îr
;

1226 
öt32
 
iovÆue
;

1228 
	`DHD_TRACE
(("%s: E¡î\n", 
__FUNCTION__
));

1230 i‡(
⁄
) {

1231 i‡(
bus
->
idÀ˛ock
 =
DHD_IDLE_STOP
) {

1233 
iovÆue
 = 1;

1234 
îr
 = 
	`bcmsdh_iov¨_›
(
bus
->
sdh
, "sd_˛ock", 
NULL
, 0,

1235 &
iovÆue
, (iovÆue), 
TRUE
);

1236 i‡(
îr
) {

1237 
	`DHD_ERROR
(("%s:ÉrrorÉnabling sd_clock: %d\n",

1238 
__FUNCTION__
, 
îr
));

1239  
BCME_ERROR
;

1242 
iovÆue
 = 
bus
->
sd_mode
;

1243 
îr
 = 
	`bcmsdh_iov¨_›
(
bus
->
sdh
, "sd_mode", 
NULL
, 0,

1244 &
iovÆue
, (iovÆue), 
TRUE
);

1245 i‡(
îr
) {

1246 
	`DHD_ERROR
(("%s:Érror changing sd_mode: %d\n",

1247 
__FUNCTION__
, 
îr
));

1248  
BCME_ERROR
;

1250 } i‡(
bus
->
idÀ˛ock
 !
DHD_IDLE_ACTIVE
) {

1252 
iovÆue
 = 
bus
->
sd_divis‹
;

1253 
îr
 = 
	`bcmsdh_iov¨_›
(
bus
->
sdh
, "sd_divis‹", 
NULL
, 0,

1254 &
iovÆue
, (iovÆue), 
TRUE
);

1255 i‡(
îr
) {

1256 
	`DHD_ERROR
(("%s:ÉrrorÑestoring sd_divisor: %d\n",

1257 
__FUNCTION__
, 
îr
));

1258  
BCME_ERROR
;

1261 
bus
->
˛k°©e
 = 
CLK_SDONLY
;

1264 i‡((
bus
->
sd_divis‹
 =-1Ë|| (bus->
sd_mode
 == -1)) {

1265 
	`DHD_TRACE
(("%s: can't idle clock, divisor %d mode %d\n",

1266 
__FUNCTION__
, 
bus
->
sd_divis‹
, bus->
sd_mode
));

1267  
BCME_ERROR
;

1269 i‡(
bus
->
idÀ˛ock
 =
DHD_IDLE_STOP
) {

1270 i‡(
sd1idÀ
) {

1272 
iovÆue
 = 1;

1273 
îr
 = 
	`bcmsdh_iov¨_›
(
bus
->
sdh
, "sd_mode", 
NULL
, 0,

1274 &
iovÆue
, (iovÆue), 
TRUE
);

1275 i‡(
îr
) {

1276 
	`DHD_ERROR
(("%s:Érror changing sd_clock: %d\n",

1277 
__FUNCTION__
, 
îr
));

1278  
BCME_ERROR
;

1282 
iovÆue
 = 0;

1283 
îr
 = 
	`bcmsdh_iov¨_›
(
bus
->
sdh
, "sd_˛ock", 
NULL
, 0,

1284 &
iovÆue
, (iovÆue), 
TRUE
);

1285 i‡(
îr
) {

1286 
	`DHD_ERROR
(("%s:Érror disabling sd_clock: %d\n",

1287 
__FUNCTION__
, 
îr
));

1288  
BCME_ERROR
;

1290 } i‡(
bus
->
idÀ˛ock
 !
DHD_IDLE_ACTIVE
) {

1292 
iovÆue
 = 
bus
->
idÀ˛ock
;

1293 
îr
 = 
	`bcmsdh_iov¨_›
(
bus
->
sdh
, "sd_divis‹", 
NULL
, 0,

1294 &
iovÆue
, (iovÆue), 
TRUE
);

1295 i‡(
îr
) {

1296 
	`DHD_ERROR
(("%s:Érror changing sd_divisor: %d\n",

1297 
__FUNCTION__
, 
îr
));

1298  
BCME_ERROR
;

1301 
bus
->
˛k°©e
 = 
CLK_NONE
;

1304  
BCME_OK
;

1305 
	}
}

1309 
	$dhdsdio_˛k˘l
(
dhd_bus_t
 *
bus
, 
uöt
 
èrgë
, 
boﬁ
 
≥ndok
)

1311 
ªt
 = 
BCME_OK
;

1312 #ifde‡
DHD_DEBUG


1313 
uöt
 
ﬁd°©e
 = 
bus
->
˛k°©e
;

1316 
	`DHD_TRACE
(("%s: E¡î\n", 
__FUNCTION__
));

1319 i‡(
bus
->
˛k°©e
 =
èrgë
) {

1320 i‡(
èrgë
 =
CLK_AVAIL
) {

1321 
	`dhd_os_wd_timî
(
bus
->
dhd
, 
dhd_w©chdog_ms
);

1322 
bus
->
a˘ivôy
 = 
TRUE
;

1323 #ifde‡
DHD_USE_IDLECOUNT


1324 
bus
->
idÀcou¡
 = 0;

1327  
ªt
;

1330 
èrgë
) {

1331 
CLK_AVAIL
:

1333 i‡(
bus
->
˛k°©e
 =
CLK_NONE
)

1334 
	`dhdsdio_sd˛k
(
bus
, 
TRUE
);

1336 
ªt
 = 
	`dhdsdio_ht˛k
(
bus
, 
TRUE
, 
≥ndok
);

1337 i‡(
ªt
 =
BCME_OK
) {

1338 
	`dhd_os_wd_timî
(
bus
->
dhd
, 
dhd_w©chdog_ms
);

1339 
bus
->
a˘ivôy
 = 
TRUE
;

1340 #ifde‡
DHD_USE_IDLECOUNT


1341 
bus
->
idÀcou¡
 = 0;

1346 
CLK_SDONLY
:

1348 i‡(
bus
->
˛k°©e
 =
CLK_NONE
)

1349 
ªt
 = 
	`dhdsdio_sd˛k
(
bus
, 
TRUE
);

1350 i‡(
bus
->
˛k°©e
 =
CLK_AVAIL
)

1351 
ªt
 = 
	`dhdsdio_ht˛k
(
bus
, 
FALSE
, FALSE);

1353 
	`DHD_ERROR
(("dhdsdio_clkctl:Ñequest for %d -> %d\n",

1354 
bus
->
˛k°©e
, 
èrgë
));

1355 i‡(
ªt
 =
BCME_OK
) {

1356 
	`dhd_os_wd_timî
(
bus
->
dhd
, 
dhd_w©chdog_ms
);

1360 
CLK_NONE
:

1362 i‡(
bus
->
˛k°©e
 =
CLK_AVAIL
)

1363 
ªt
 = 
	`dhdsdio_ht˛k
(
bus
, 
FALSE
, FALSE);

1365 
ªt
 = 
	`dhdsdio_sd˛k
(
bus
, 
FALSE
);

1366 #ifde‡
DHD_DEBUG


1367 i‡(
dhd_c⁄sﬁe_ms
 == 0)

1369 i‡(
bus
->
pﬁl
 == 0)

1370 
	`dhd_os_wd_timî
(
bus
->
dhd
, 0);

1373 #ifde‡
DHD_DEBUG


1374 
	`DHD_INFO
(("dhdsdio_˛k˘l: %d -> %d\n", 
ﬁd°©e
, 
bus
->
˛k°©e
));

1377  
ªt
;

1378 
	}
}

1381 
	$dhdsdio_bus¶ìp
(
dhd_bus_t
 *
bus
, 
boﬁ
 
¶ìp
)

1383 
îr
 = 0;

1384 
bcmsdh_öfo_t
 *
sdh
 = 
bus
->sdh;

1385 
sdpcmd_ªgs_t
 *
ªgs
 = 
bus
->regs;

1386 
uöt
 
ªåõs
 = 0;

1388 
	`DHD_INFO
(("dhdsdio_bussleep:Ñequest %s (currently %s)\n",

1389 (
¶ìp
 ? "SLEEP" : "WAKE"),

1390 (
bus
->
¶ìpög
 ? "SLEEP" : "WAKE")));

1393 i‡(
¶ìp
 =
bus
->
¶ìpög
)

1394  
BCME_OK
;

1397 i‡(
¶ìp
) {

1399 i‡(
bus
->
dpc_sched
 || bus->
rxskù
 || 
	`pktq_Àn
(&bus->
txq
))

1400  
BCME_BUSY
;

1403 i‡(!
	`SLPAUTO_ENAB
(
bus
)) {

1405 
	`bcmsdh_öå_dißbÀ
(
bus
->
sdh
);

1408 
	`dhdsdio_˛k˘l
(
bus
, 
CLK_AVAIL
, 
FALSE
);

1411 
	`W_SDREG
(
SMB_USE_OOB
, &
ªgs
->
tosbmaûbox
, 
ªåõs
);

1412 i‡(
ªåõs
 > 
ªåy_limô
)

1413 
	`DHD_ERROR
(("CANNOT SIGNAL CHIP, WILL NOT WAKE UP!!\n"));

1416 
	`dhdsdio_˛k˘l
(
bus
, 
CLK_SDONLY
, 
FALSE
);

1418 
	`bcmsdh_cfg_wrôe
(
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_FUNC1_CHIPCLKCSR
,

1419 
SBSDIO_FORCE_HW_CLKREQ_OFF
, 
NULL
);

1422 i‡(
bus
->
sih
->
chù
 !
BCM4329_CHIP_ID
 &&

1423 
bus
->
sih
->
chù
 !
BCM4319_CHIP_ID
) {

1424 
	`bcmsdh_cfg_wrôe
(
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_DEVICE_CTL
,

1425 
SBSDIO_DEVCTL_PADS_ISO
, 
NULL
);

1431 
îr
 = 
	`dhdsdio_˛k_dev¶ìp_iov¨
(
bus
, 
TRUE
 );

1435 
bus
->
¶ìpög
 = 
TRUE
;

1440 i‡(!
	`SLPAUTO_ENAB
(
bus
)) {

1441 
	`bcmsdh_cfg_wrôe
(
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_FUNC1_CHIPCLKCSR
, 0, &
îr
);

1444 
	`bcmsdh_cfg_wrôe
(
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_DEVICE_CTL
, 0, 
NULL
);

1448 
	`dhdsdio_˛k˘l
(
bus
, 
CLK_AVAIL
, 
FALSE
);

1451 
	`W_SDREG
(0, &
ªgs
->
tosbmaûboxd©a
, 
ªåõs
);

1452 i‡(
ªåõs
 <
ªåy_limô
)

1453 
	`W_SDREG
(
SMB_DEV_INT
, &
ªgs
->
tosbmaûbox
, 
ªåõs
);

1455 i‡(
ªåõs
 > 
ªåy_limô
)

1456 
	`DHD_ERROR
(("CANNOT SIGNAL CHIP TO CLEAR OOB!!\n"));

1459 
	`dhdsdio_˛k˘l
(
bus
, 
CLK_SDONLY
, 
FALSE
);

1462 i‡(
bus
->
öå
 && (bus->
dhd
->
bus°©e
 =
DHD_BUS_DATA
)) {

1463 
bus
->
ötdis
 = 
FALSE
;

1464 
	`bcmsdh_öå_íabÀ
(
bus
->
sdh
);

1467 
îr
 = 
	`dhdsdio_˛k_dev¶ìp_iov¨
(
bus
, 
FALSE
 );

1470 i‡(
îr
 == 0) {

1472 
bus
->
¶ìpög
 = 
FALSE
;

1476  
îr
;

1477 
	}
}

1479 #i‡
deföed
(
OOB_INTR_ONLY
)

1481 
	$dhd_íabÀ_oob_öå
(
dhd_bus
 *
bus
, 
boﬁ
 
íabÀ
)

1483 #i‡
	`deföed
(
HW_OOB
)

1484 
	`bcmsdh_íabÀ_hw_oob_öå
(
bus
->
sdh
, 
íabÀ
);

1486 
sdpcmd_ªgs_t
 *
ªgs
 = 
bus
->regs;

1487 
uöt
 
ªåõs
 = 0;

1489 
	`dhdsdio_˛k˘l
(
bus
, 
CLK_AVAIL
, 
FALSE
);

1490 i‡(
íabÀ
 =
TRUE
) {

1493 
	`W_SDREG
(
SMB_USE_OOB
, &
ªgs
->
tosbmaûbox
, 
ªåõs
);

1494 i‡(
ªåõs
 > 
ªåy_limô
)

1495 
	`DHD_ERROR
(("CANNOT SIGNAL CHIP, WILL NOT WAKE UP!!\n"));

1499 
	`W_SDREG
(0, &
ªgs
->
tosbmaûboxd©a
, 
ªåõs
);

1500 i‡(
ªåõs
 <
ªåy_limô
)

1501 
	`W_SDREG
(
SMB_DEV_INT
, &
ªgs
->
tosbmaûbox
, 
ªåõs
);

1505 
	`dhdsdio_˛k˘l
(
bus
, 
CLK_SDONLY
, 
FALSE
);

1507 
	}
}

1513 
	$dhdsdio_txpkt
(
dhd_bus_t
 *
bus
, *
pkt
, 
uöt
 
ch™
, 
boﬁ
 
‰ì_pkt
, boﬁ 
queue_⁄ly
)

1515 
ªt
;

1516 
o¶_t
 *
osh
;

1517 
uöt8
 *
‰ame
;

1518 
uöt16
 
Àn
, 
∑d1
 = 0;

1519 
uöt32
 
swhódî
;

1520 
uöt
 
ªåõs
 = 0;

1521 
bcmsdh_öfo_t
 *
sdh
;

1522 *
√w
;

1523 
i
;

1524 
pkt_˙t
;

1525 #ifde‡
BCMSDIOH_TXGLOM


1526 
uöt8
 *
‰ame_tmp
;

1528 #ifde‡
WLMEDIA_HTSF


1529 *
p
;

1530 
hts·s_t
 *
htsf_ts
;

1534 
	`DHD_TRACE
(("%s: E¡î\n", 
__FUNCTION__
));

1536 
sdh
 = 
bus
->sdh;

1537 
osh
 = 
bus
->
dhd
->osh;

1539 i‡(
bus
->
dhd
->
d⁄gÀ_ª£t
) {

1540 
ªt
 = 
BCME_NOTREADY
;

1541 
d⁄e
;

1544 
‰ame
 = (
uöt8
*)
	`PKTDATA
(
osh
, 
pkt
);

1546 #ifde‡
WLMEDIA_HTSF


1547 i‡(
	`PKTLEN
(
osh
, 
pkt
) >= 100) {

1548 
p
 = 
	`PKTDATA
(
osh
, 
pkt
);

1549 
htsf_ts
 = (
hts·s_t
*Ë(
p
 + 
HTSF_HOSTOFFSET
 + 12);

1550 i‡(
htsf_ts
->
magic
 =
HTSFMAGIC
) {

1551 
htsf_ts
->
c20
 = 
	`gë_cy˛es
();

1552 
htsf_ts
->
t20
 = 
	`dhd_gë_htsf
(
bus
->
dhd
->
öfo
, 0);

1558 i‡(!((
uöçå
)
‰ame
 & 1Ë&& (
∑d1
 = ((uöçå)‰amê% 
DHD_SDALIGN
))) {

1559 i‡(
	`PKTHEADROOM
(
osh
, 
pkt
Ë< 
∑d1
) {

1560 
	`DHD_INFO
(("%s: insufficient headroom %d for %dÖad1\n",

1561 
__FUNCTION__
, ()
	`PKTHEADROOM
(
osh
, 
pkt
), 
∑d1
));

1562 
bus
->
dhd
->
tx_ªÆloc
++;

1563 
√w
 = 
	`PKTGET
(
osh
, (
	`PKTLEN
(osh, 
pkt
Ë+ 
DHD_SDALIGN
), 
TRUE
);

1564 i‡(!
√w
) {

1565 
	`DHD_ERROR
(("%s: couldn'tállocateÇew %d-byteÖacket\n",

1566 
__FUNCTION__
, 
	`PKTLEN
(
osh
, 
pkt
Ë+ 
DHD_SDALIGN
));

1567 
ªt
 = 
BCME_NOMEM
;

1568 
d⁄e
;

1571 
	`PKTALIGN
(
osh
, 
√w
, 
	`PKTLEN
(osh, 
pkt
), 
DHD_SDALIGN
);

1572 
	`bc›y
(
	`PKTDATA
(
osh
, 
pkt
), PKTDATA(osh, 
√w
), 
	`PKTLEN
(osh,Ökt));

1573 i‡(
‰ì_pkt
)

1574 
	`PKTFREE
(
osh
, 
pkt
, 
TRUE
);

1576 
‰ì_pkt
 = 
TRUE
;

1577 
pkt
 = 
√w
;

1578 
‰ame
 = (
uöt8
*)
	`PKTDATA
(
osh
, 
pkt
);

1579 
	`ASSERT
(((
uöçå
)
‰ame
 % 
DHD_SDALIGN
) == 0);

1580 
∑d1
 = 0;

1582 
	`PKTPUSH
(
osh
, 
pkt
, 
∑d1
);

1583 
‰ame
 = (
uöt8
*)
	`PKTDATA
(
osh
, 
pkt
);

1585 
	`ASSERT
((
∑d1
 + 
SDPCM_HDRLEN
Ë<(Ë
	`PKTLEN
(
osh
, 
pkt
));

1586 
	`bzîo
(
‰ame
, 
∑d1
 + 
SDPCM_HDRLEN
);

1589 
	`ASSERT
(
∑d1
 < 
DHD_SDALIGN
);

1592 
Àn
 = (
uöt16
)
	`PKTLEN
(
osh
, 
pkt
);

1593 *(
uöt16
*)
‰ame
 = 
	`htﬁ16
(
Àn
);

1594 *(((
uöt16
*)
‰ame
Ë+ 1Ë
	`htﬁ16
(~
Àn
);

1596 #ifde‡
BCMSDIOH_TXGLOM


1597 i‡(
bus
->
glom_íabÀ
) {

1598 
uöt32
 
hwhódî1
 = 0, 
hwhódî2
 = 0, 
a˘_Àn
 = 
Àn
;

1601 
swhódî
 = ((
ch™
 << 
SDPCM_CHANNEL_SHIFT
Ë& 
SDPCM_CHANNEL_MASK
) |

1602 ((
bus
->
tx_£q
 + bus->
glom_˙t
Ë% 
SDPCM_SEQUENCE_WRAP
) |

1603 (((
∑d1
 + 
SDPCM_HDRLEN
Ë<< 
SDPCM_DOFFSET_SHIFT
Ë& 
SDPCM_DOFFSET_MASK
);

1604 
	`htﬁ32_ua_°‹e
(
swhódî
, 
‰ame
 + 
SDPCM_FRAMETAG_LEN
 + 
SDPCM_HWEXT_LEN
);

1605 
	`htﬁ32_ua_°‹e
(0, 
‰ame
 + 
SDPCM_FRAMETAG_LEN
 + 
SDPCM_HWEXT_LEN
 + (
swhódî
));

1607 i‡(
queue_⁄ly
) {

1608 i‡(
f‹˚Æign
 && (
Àn
 & (
ALIGNMENT
 - 1)))

1609 
Àn
 = 
	`ROUNDUP
÷í, 
ALIGNMENT
);

1614 
hwhódî1
 = (
a˘_Àn
 - 
SDPCM_FRAMETAG_LEN
) | (0 << 24);

1615 
hwhódî2
 = (
Àn
 - 
a˘_Àn
) << 16;

1616 
	`htﬁ32_ua_°‹e
(
hwhódî1
, 
‰ame
 + 
SDPCM_FRAMETAG_LEN
);

1617 
	`htﬁ32_ua_°‹e
(
hwhódî2
, 
‰ame
 + 
SDPCM_FRAMETAG_LEN
 + 4);

1619 
	`dhd_bcmsdh_glom_po°
(
bus
, 
‰ame
, 
Àn
);

1621 
bus
->
glom_pkt_¨r
[bus->
glom_˙t
] = 
pkt
;

1622 
bus
->
glom_tŸÆ_Àn
 +
Àn
;

1623 
bus
->
glom_˙t
++;

1624  
BCME_OK
;

1627 i‡(
bus
->
roundup
 && bus->
blocksize
 &&

1628 ((
bus
->
glom_tŸÆ_Àn
 + 
Àn
Ë> bus->
blocksize
)) {

1629 
uöt16
 
∑d2
 = 
bus
->
blocksize
 -

1630 ((
bus
->
glom_tŸÆ_Àn
 + 
Àn
Ë% bus->
blocksize
);

1631 i‡((
∑d2
 <
bus
->
roundup
Ë&& (∑d2 < bus->
blocksize
)) {

1632 
Àn
 +
∑d2
;

1635 } i‡((
bus
->
glom_tŸÆ_Àn
 + 
Àn
Ë% 
DHD_SDALIGN
) {

1636 
Àn
 +
DHD_SDALIGN


1637 - ((
bus
->
glom_tŸÆ_Àn
 + 
Àn
Ë% 
DHD_SDALIGN
);

1639 i‡(
f‹˚Æign
 && (
Àn
 & (
ALIGNMENT
 - 1))) {

1640 
Àn
 = 
	`ROUNDUP
÷í, 
ALIGNMENT
);

1647 
hwhódî1
 = (
a˘_Àn
 - 
SDPCM_FRAMETAG_LEN
) | (1 << 24);

1648 
hwhódî2
 = (
Àn
 - 
a˘_Àn
) << 16;

1649 
	`htﬁ32_ua_°‹e
(
hwhódî1
, 
‰ame
 + 
SDPCM_FRAMETAG_LEN
);

1650 
	`htﬁ32_ua_°‹e
(
hwhódî2
, 
‰ame
 + 
SDPCM_FRAMETAG_LEN
 + 4);

1653 
	`dhd_bcmsdh_glom_po°
(
bus
, 
‰ame
, 
Àn
);

1655 
bus
->
glom_pkt_¨r
[bus->
glom_˙t
] = 
pkt
;

1656 
bus
->
glom_˙t
++;

1657 
bus
->
glom_tŸÆ_Àn
 +
Àn
;

1660 
‰ame_tmp
 = (
uöt8
*)
	`PKTDATA
(
osh
, 
bus
->
glom_pkt_¨r
[0]);

1661 *(
uöt16
*)
‰ame_tmp
 = 
	`htﬁ16
(
bus
->
glom_tŸÆ_Àn
);

1662 *(((
uöt16
*)
‰ame_tmp
Ë+ 1Ë
	`htﬁ16
(~
bus
->
glom_tŸÆ_Àn
);

1668 
swhódî
 = ((
ch™
 << 
SDPCM_CHANNEL_SHIFT
Ë& 
SDPCM_CHANNEL_MASK
Ë| 
bus
->
tx_£q
 |

1669 (((
∑d1
 + 
SDPCM_HDRLEN
Ë<< 
SDPCM_DOFFSET_SHIFT
Ë& 
SDPCM_DOFFSET_MASK
);

1670 
	`htﬁ32_ua_°‹e
(
swhódî
, 
‰ame
 + 
SDPCM_FRAMETAG_LEN
);

1671 
	`htﬁ32_ua_°‹e
(0, 
‰ame
 + 
SDPCM_FRAMETAG_LEN
 + (
swhódî
));

1673 #ifde‡
DHD_DEBUG


1674 i‡(
	`PKTPRIO
(
pkt
Ë< 
	`ARRAYSIZE
(
tx_∑ckës
)) {

1675 
tx_∑ckës
[
	`PKTPRIO
(
pkt
)]++;

1677 i‡(
	`DHD_BYTES_ON
() &&

1678 (((
	`DHD_CTL_ON
(Ë&& (
ch™
 =
SDPCM_CONTROL_CHANNEL
)) ||

1679 (
	`DHD_DATA_ON
(Ë&& (
ch™
 !
SDPCM_CONTROL_CHANNEL
))))) {

1680 
	`¥hex
("Tx Føme", 
‰ame
, 
Àn
);

1681 } i‡(
	`DHD_HDRS_ON
()) {

1682 
	`¥hex
("TxHdr", 
‰ame
, 
	`MIN
(
Àn
, 16));

1687 i‡(
bus
->
roundup
 && bus->
blocksize
 && (
Àn
 > bus->blocksize)) {

1688 
uöt16
 
∑d2
 = 
bus
->
blocksize
 - (
Àn
 % bus->blocksize);

1689 i‡((
∑d2
 <
bus
->
roundup
Ë&& (∑d2 < bus->
blocksize
))

1690 #ifde‡
NOTUSED


1691 i‡(
∑d2
 <
	`PKTTAILROOM
(
osh
, 
pkt
))

1693 
Àn
 +
∑d2
;

1694 } i‡(
Àn
 % 
DHD_SDALIGN
) {

1695 
Àn
 +
DHD_SDALIGN
 - (len % DHD_SDALIGN);

1699 i‡(
f‹˚Æign
 && (
Àn
 & (
ALIGNMENT
 - 1))) {

1700 #ifde‡
NOTUSED


1701 i‡(
	`PKTTAILROOM
(
osh
, 
pkt
))

1703 
Àn
 = 
	`ROUNDUP
÷í, 
ALIGNMENT
);

1704 #ifde‡
NOTUSED


1706 
	`DHD_ERROR
(("%s: sídög uƒounded %d-byãÖackë\n", 
__FUNCTION__
, 
Àn
));

1712 
ªt
 = 
	`dhd_bcmsdh_£nd_buf
(
bus
, 
	`bcmsdh_cur_sbwad
(
sdh
), 
SDIO_FUNC_2
, 
F2SYNC
,

1713 
‰ame
, 
Àn
, 
pkt
, 
NULL
, NULL);

1714 
bus
->
f2txd©a
++;

1715 
	`ASSERT
(
ªt
 !
BCME_PENDING
);

1717 i‡(
ªt
 =
BCME_NODEVICE
) {

1718 
	`DHD_ERROR
(("%s: Devi˚á¶ì∞Æªady\n", 
__FUNCTION__
));

1719 } i‡(
ªt
 < 0) {

1721 
	`DHD_ERROR
(("%s: sdioÉrror %d,ábort commandándÅerminate frame.\n",

1722 
__FUNCTION__
, 
ªt
));

1723 
bus
->
tx_sdîrs
++;

1725 
	`bcmsdh_ab‹t
(
sdh
, 
SDIO_FUNC_2
);

1726 
	`bcmsdh_cfg_wrôe
(
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_FUNC1_FRAMECTRL
,

1727 
SFC_WF_TERM
, 
NULL
);

1728 
bus
->
f1ªgd©a
++;

1730 
i
 = 0; i < 3; i++) {

1731 
uöt8
 
hi
, 
lo
;

1732 
hi
 = 
	`bcmsdh_cfg_ªad
(
sdh
, 
SDIO_FUNC_1
,

1733 
SBSDIO_FUNC1_WFRAMEBCHI
, 
NULL
);

1734 
lo
 = 
	`bcmsdh_cfg_ªad
(
sdh
, 
SDIO_FUNC_1
,

1735 
SBSDIO_FUNC1_WFRAMEBCLO
, 
NULL
);

1736 
bus
->
f1ªgd©a
 += 2;

1737 i‡((
hi
 =0Ë&& (
lo
 == 0))

1741 i‡(
ªt
 == 0) {

1742 #ifde‡
BCMSDIOH_TXGLOM


1743 i‡(
bus
->
glom_íabÀ
) {

1744 
bus
->
tx_£q
 = (bus->tx_£q + bus->
glom_˙t
Ë% 
SDPCM_SEQUENCE_WRAP
;

1748 
bus
->
tx_£q
 = (bus->tx_£q + 1Ë% 
SDPCM_SEQUENCE_WRAP
;

1751 } (
ªt
 < 0Ë&& 
ªåyd©a
 && 
ªåõs
++ < 
TXRETRIES
);

1753 
d⁄e
:

1755 #ifde‡
BCMSDIOH_TXGLOM


1756 i‡(
bus
->
glom_íabÀ
) {

1757 
	`dhd_bcmsdh_glom_˛ór
(
bus
);

1758 
pkt_˙t
 = 
bus
->
glom_˙t
;

1762 
pkt_˙t
 = 1;

1765 
pkt_˙t
) {

1766 #ifde‡
BCMSDIOH_TXGLOM


1767 
uöt32
 
doff
;

1768 i‡(
bus
->
glom_íabÀ
) {

1769 
pkt
 = 
bus
->
glom_pkt_¨r
[bus->
glom_˙t
 - 
pkt_˙t
];

1770 
‰ame
 = (
uöt8
*)
	`PKTDATA
(
osh
, 
pkt
);

1771 
doff
 = 
	`…oh32_ua
(
‰ame
 + 
SDPCM_FRAMETAG_LEN
 + 
SDPCM_HWEXT_LEN
);

1772 
doff
 = (dof‡& 
SDPCM_DOFFSET_MASK
Ë>> 
SDPCM_DOFFSET_SHIFT
;

1773 
	`PKTPULL
(
osh
, 
pkt
, 
doff
);

1777 
	`PKTPULL
(
osh
, 
pkt
, 
SDPCM_HDRLEN
 + 
∑d1
);

1779 #ifde‡
PROP_TXSTATUS


1780 i‡(
bus
->
dhd
->
wlfc_°©e
) {

1781 
	`dhd_os_sdu∆ock
(
bus
->
dhd
);

1782 
	`dhd_wlfc_txcom∂ëe
(
bus
->
dhd
, 
pkt
, 
ªt
 == 0);

1783 
	`dhd_os_sdlock
(
bus
->
dhd
);

1786 #ifde‡
SDTEST


1787 i‡(
ch™
 !
SDPCM_TEST_CHANNEL
) {

1788 
	`dhd_txcom∂ëe
(
bus
->
dhd
, 
pkt
, 
ªt
 != 0);

1791 
	`dhd_txcom∂ëe
(
bus
->
dhd
, 
pkt
, 
ªt
 != 0);

1793 i‡(
‰ì_pkt
)

1794 
	`PKTFREE
(
osh
, 
pkt
, 
TRUE
);

1796 #ifde‡
PROP_TXSTATUS


1799 
pkt_˙t
--;

1802 #ifde‡
BCMSDIOH_TXGLOM


1804 i‡(
bus
->
glom_íabÀ
) {

1805 
bus
->
glom_˙t
 = 0;

1806 
bus
->
glom_tŸÆ_Àn
 = 0;

1809  
ªt
;

1810 
	}
}

1813 
	$dhd_bus_txd©a
(
dhd_bus
 *
bus
, *
pkt
)

1815 
ªt
 = 
BCME_ERROR
;

1816 
o¶_t
 *
osh
;

1817 
uöt
 
d©Æí
, 
¥ec
;

1818 #ifde‡
DHD_TX_DUMP


1819 
uöt8
 *
dump_d©a
;

1820 
uöt16
 
¥Ÿocﬁ
;

1821 #ifde‡
DHD_TX_FULL_DUMP


1822 
i
;

1825 
	`DHD_TRACE
(("%s: E¡î\n", 
__FUNCTION__
));

1827 
osh
 = 
bus
->
dhd
->osh;

1828 
d©Æí
 = 
	`PKTLEN
(
osh
, 
pkt
);

1830 #ifde‡
SDTEST


1832 i‡(
bus
->
ext_lo›
) {

1833 
uöt8
* 
d©a
;

1834 
	`PKTPUSH
(
osh
, 
pkt
, 
SDPCM_TEST_HDRLEN
);

1835 
d©a
 = 
	`PKTDATA
(
osh
, 
pkt
);

1836 *
d©a
++ = 
SDPCM_TEST_ECHOREQ
;

1837 *
d©a
++ = (
uöt8
)
bus
->
lo›id
++;

1838 *
d©a
++ = (
d©Æí
 >> 0);

1839 *
d©a
++ = (
d©Æí
 >> 8);

1840 
d©Æí
 +
SDPCM_TEST_HDRLEN
;

1844 #ifde‡
DHD_TX_DUMP


1845 
dump_d©a
 = 
	`PKTDATA
(
osh
, 
pkt
);

1846 
dump_d©a
 += 4;

1847 
¥Ÿocﬁ
 = (
dump_d©a
[12] << 8) | dump_data[13];

1848 #ifde‡
DHD_TX_FULL_DUMP


1849 
	`DHD_ERROR
(("TX DUMP\n"));

1851 
i
 = 0; i < (
d©Æí
 - 4); i++) {

1852 
	`DHD_ERROR
(("%02X ", 
dump_d©a
[
i
]));

1853 i‡((
i
 & 15) == 15)

1854 
	`¥ötk
("\n");

1856 
	`DHD_ERROR
(("\n"));

1859 i‡(
¥Ÿocﬁ
 =
ETHER_TYPE_802_1X
) {

1860 
	`DHD_ERROR
(("ETHER_TYPE_802_1X: ver %d,Åype %d,Ñeplay %d\n",

1861 
dump_d©a
[14], dump_data[15], dump_data[30]));

1866 
	`PKTPUSH
(
osh
, 
pkt
, 
SDPCM_HDRLEN
);

1867 
	`ASSERT
(
	`ISALIGNED
((
uöçå
)
	`PKTDATA
(
osh
, 
pkt
), 2));

1869 
¥ec
 = 
	`PRIO2PREC
((
	`PKTPRIO
(
pkt
Ë& 
PRIOMASK
));

1870 #i‚de‡
DHDTHREAD


1872 
	`dhd_os_sdlock
(
bus
->
dhd
);

1876 i‡(
dhd_de„ºed_tx
 || 
bus
->
fc°©e
 || 
	`pktq_Àn
(&bus->
txq
Ë|| bus->
dpc_sched
 ||

1877 (!
	`DATAOK
(
bus
)Ë|| (bus->
Êowc⁄åﬁ
 & 
	`NBITVAL
(
¥ec
)) ||

1878 (
bus
->
˛k°©e
 !
CLK_AVAIL
)) {

1879 
	`DHD_TRACE
(("%s: de„ºögÖktqÜí %d\n", 
__FUNCTION__
,

1880 
	`pktq_Àn
(&
bus
->
txq
)));

1881 
bus
->
fcqueued
++;

1884 
	`dhd_os_sdlock_txq
(
bus
->
dhd
);

1885 i‡(
	`dhd_¥ec_íq
(
bus
->
dhd
, &bus->
txq
, 
pkt
, 
¥ec
Ë=
FALSE
) {

1886 
	`PKTPULL
(
osh
, 
pkt
, 
SDPCM_HDRLEN
);

1887 #i‚de‡
DHDTHREAD


1893 
	`dhd_os_sdu∆ock_txq
(
bus
->
dhd
);

1894 
	`dhd_os_sdu∆ock
(
bus
->
dhd
);

1896 #ifde‡
PROP_TXSTATUS


1897 i‡(
bus
->
dhd
->
wlfc_°©e
)

1898 
	`dhd_wlfc_txcom∂ëe
(
bus
->
dhd
, 
pkt
, 
FALSE
);

1901 
	`dhd_txcom∂ëe
(
bus
->
dhd
, 
pkt
, 
FALSE
);

1902 #i‚de‡
DHDTHREAD


1903 
	`dhd_os_sdlock
(
bus
->
dhd
);

1904 
	`dhd_os_sdlock_txq
(
bus
->
dhd
);

1906 #ifde‡
PROP_TXSTATUS


1908 i‡(!
bus
->
dhd
->
wlfc_°©e
)

1910 
	`PKTFREE
(
osh
, 
pkt
, 
TRUE
);

1911 
ªt
 = 
BCME_NORESOURCE
;

1914 
ªt
 = 
BCME_OK
;

1915 
	`dhd_os_sdu∆ock_txq
(
bus
->
dhd
);

1917 i‡((
	`pktq_Àn
(&
bus
->
txq
Ë>
FCHI
Ë&& 
dhd_doÊow
)

1918 
	`dhd_txÊowc⁄åﬁ
(
bus
->
dhd
, 
ALL_INTERFACES
, 
ON
);

1920 #ifde‡
DHD_DEBUG


1921 i‡(
	`pktq_∂í
(&
bus
->
txq
, 
¥ec
Ë> 
qcou¡
[prec])

1922 
qcou¡
[
¥ec
] = 
	`pktq_∂í
(&
bus
->
txq
,Örec);

1925 i‡(
dhd_de„ºed_tx
 && !
bus
->
dpc_sched
) {

1926 
bus
->
dpc_sched
 = 
TRUE
;

1927 
	`dhd_sched_dpc
(
bus
->
dhd
);

1930 #ifde‡
DHDTHREAD


1932 
	`dhd_os_sdlock
(
bus
->
dhd
);

1936 
	`BUS_WAKE
(
bus
);

1938 
	`dhdsdio_˛k˘l
(
bus
, 
CLK_AVAIL
, 
TRUE
);

1939 #i‚de‡
SDTEST


1940 
ªt
 = 
	`dhdsdio_txpkt
(
bus
, 
pkt
, 
SDPCM_DATA_CHANNEL
, 
TRUE
, 
FALSE
);

1942 
ªt
 = 
	`dhdsdio_txpkt
(
bus
, 
pkt
,

1943 (
bus
->
ext_lo›
 ? 
SDPCM_TEST_CHANNEL
 : 
SDPCM_DATA_CHANNEL
), 
TRUE
, 
FALSE
);

1945 i‡(
ªt
)

1946 
bus
->
dhd
->
tx_îr‹s
++;

1948 
bus
->
dhd
->
d°©s
.
tx_byãs
 +
d©Æí
;

1950 i‡((
bus
->
idÀtime
 =
DHD_IDLE_IMMEDIATE
Ë&& !bus->
dpc_sched
) {

1951 
bus
->
a˘ivôy
 = 
FALSE
;

1952 
	`dhdsdio_˛k˘l
(
bus
, 
CLK_NONE
, 
TRUE
);

1955 #ifde‡
DHDTHREAD


1956 
	`dhd_os_sdu∆ock
(
bus
->
dhd
);

1960 #i‚de‡
DHDTHREAD


1961 
	`dhd_os_sdu∆ock
(
bus
->
dhd
);

1964  
ªt
;

1965 
	}
}

1967 
uöt


1968 
	$dhdsdio_£nd‰omq
(
dhd_bus_t
 *
bus
, 
uöt
 
max‰ames
)

1970 *
pkt
;

1971 
uöt32
 
öt°©us
 = 0;

1972 
uöt
 
ªåõs
 = 0;

1973 
ªt
 = 0, 
¥ec_out
;

1974 
uöt
 
˙t
 = 0;

1975 
uöt
 
d©Æí
;

1976 
uöt8
 
tx_¥ec_m≠
;

1977 #ifde‡
BCMSDIOH_TXGLOM


1978 
uöt
 
i
;

1979 
uöt8
 
glom_˙t
;

1982 
dhd_pub_t
 *
dhd
 = 
bus
->dhd;

1983 
sdpcmd_ªgs_t
 *
ªgs
 = 
bus
->regs;

1985 
	`DHD_TRACE
(("%s: E¡î\n", 
__FUNCTION__
));

1987 i‡(!
	`KSO_ENAB
(
bus
)) {

1988 
	`DHD_ERROR
(("%s: Devi˚á¶ìp\n", 
__FUNCTION__
));

1989  
BCME_NODEVICE
;

1992 
tx_¥ec_m≠
 = ~
bus
->
Êowc⁄åﬁ
;

1995 
˙t
 = 0; (˙à< 
max‰ames
Ë&& 
	`DATAOK
(
bus
); cnt++) {

1996 #ifde‡
BCMSDIOH_TXGLOM


1997 i‡(
bus
->
glom_íabÀ
) {

1998 
glom_˙t
 = 
	`MIN
(
	`DATABUFCNT
(
bus
), bus->
glomsize
);

1999 
glom_˙t
 = 
	`MIN
(glom_˙t, 
	`pktq_mÀn
(&
bus
->
txq
, 
tx_¥ec_m≠
));

2000 
glom_˙t
 = 
	`MIN
(glom_˙t, 
max‰ames
-
˙t
);

2003 i‡(
bus
->
glom_mode
 =
SDPCM_TXGLOM_CPY
)

2004 
glom_˙t
 = 
	`MIN
(glom_cnt, 5);

2006 i‡(
glom_˙t
 == 0)

2008 
d©Æí
 = 0;

2009 
i
 = 0; i < 
glom_˙t
; i++) {

2010 
	`dhd_os_sdlock_txq
(
bus
->
dhd
);

2011 i‡((
pkt
 = 
	`pktq_mdeq
(&
bus
->
txq
, 
tx_¥ec_m≠
, &
¥ec_out
)Ë=
NULL
) {

2013 
	`DHD_ERROR
(("NoÖkts inÅhe queue for glomming\n"));

2014 
	`dhd_os_sdu∆ock_txq
(
bus
->
dhd
);

2017 
	`dhd_os_sdu∆ock_txq
(
bus
->
dhd
);

2019 
d©Æí
 +(
	`PKTLEN
(
bus
->
dhd
->
osh
, 
pkt
Ë- 
SDPCM_HDRLEN
);

2020 #i‚de‡
SDTEST


2021 
ªt
 = 
	`dhdsdio_txpkt
(
bus
,

2022 
pkt
,

2023 
SDPCM_DATA_CHANNEL
,

2024 
TRUE
,

2025 (
i
 =(
glom_˙t
-1))? 
FALSE
: 
TRUE
);

2027 
ªt
 = 
	`dhdsdio_txpkt
(
bus
,

2028 
pkt
,

2029 (
bus
->
ext_lo›
 ? 
SDPCM_TEST_CHANNEL
 : 
SDPCM_DATA_CHANNEL
),

2030 
TRUE
,

2031 (
i
 =(
glom_˙t
-1))? 
FALSE
: 
TRUE
);

2034 
˙t
 +
i
-1;

2038 
	`dhd_os_sdlock_txq
(
bus
->
dhd
);

2039 i‡((
pkt
 = 
	`pktq_mdeq
(&
bus
->
txq
, 
tx_¥ec_m≠
, &
¥ec_out
)Ë=
NULL
) {

2040 
	`dhd_os_sdu∆ock_txq
(
bus
->
dhd
);

2043 
	`dhd_os_sdu∆ock_txq
(
bus
->
dhd
);

2044 
d©Æí
 = 
	`PKTLEN
(
bus
->
dhd
->
osh
, 
pkt
Ë- 
SDPCM_HDRLEN
;

2046 #i‚de‡
SDTEST


2047 
ªt
 = 
	`dhdsdio_txpkt
(
bus
, 
pkt
, 
SDPCM_DATA_CHANNEL
, 
TRUE
, 
FALSE
);

2049 
ªt
 = 
	`dhdsdio_txpkt
(
bus
,

2050 
pkt
,

2051 (
bus
->
ext_lo›
 ? 
SDPCM_TEST_CHANNEL
 : 
SDPCM_DATA_CHANNEL
),

2052 
TRUE
,

2053 
FALSE
);

2057 i‡(
ªt
)

2058 
bus
->
dhd
->
tx_îr‹s
++;

2060 
bus
->
dhd
->
d°©s
.
tx_byãs
 +
d©Æí
;

2063 i‡(!
bus
->
öå
 && 
˙t
)

2066 
	`R_SDREG
(
öt°©us
, &
ªgs
->öt°©us, 
ªåõs
);

2067 
bus
->
f2txd©a
++;

2068 i‡(
	`bcmsdh_ªgÁû
(
bus
->
sdh
))

2070 i‡(
öt°©us
 & 
bus
->
ho°ötmask
)

2071 
bus
->
ùíd
 = 
TRUE
;

2076 i‡(
dhd_doÊow
 && 
dhd
->
up
 && (dhd->
bus°©e
 =
DHD_BUS_DATA
) &&

2077 
dhd
->
txoff
 && (
	`pktq_Àn
(&
bus
->
txq
Ë< 
FCLOW
))

2078 
	`dhd_txÊowc⁄åﬁ
(
dhd
, 
ALL_INTERFACES
, 
OFF
);

2080  
˙t
;

2081 
	}
}

2084 
	$dhd_bus_tx˘l
(
dhd_bus
 *
bus
, 
uch¨
 *
msg
, 
uöt
 
msgÀn
)

2086 
uöt8
 *
‰ame
;

2087 
uöt16
 
Àn
;

2088 
uöt32
 
swhódî
;

2089 
uöt
 
ªåõs
 = 0;

2090 
bcmsdh_öfo_t
 *
sdh
 = 
bus
->sdh;

2091 
uöt8
 
doff
 = 0;

2092 
ªt
 = -1;

2093 
i
;

2095 
	`DHD_TRACE
(("%s: E¡î\n", 
__FUNCTION__
));

2097 i‡(
bus
->
dhd
->
d⁄gÀ_ª£t
)

2098  -
EIO
;

2101 
‰ame
 = 
msg
 - 
SDPCM_HDRLEN
;

2102 
Àn
 = (
msgÀn
 +
SDPCM_HDRLEN
);

2105 i‡(
dhd_Æign˘l
) {

2106 i‡((
doff
 = ((
uöçå
)
‰ame
 % 
DHD_SDALIGN
))) {

2107 
‰ame
 -
doff
;

2108 
Àn
 +
doff
;

2109 
msgÀn
 +
doff
;

2110 
	`bzîo
(
‰ame
, 
doff
 + 
SDPCM_HDRLEN
);

2112 
	`ASSERT
(
doff
 < 
DHD_SDALIGN
);

2114 
doff
 +
SDPCM_HDRLEN
;

2117 i‡(
bus
->
roundup
 && bus->
blocksize
 && (
Àn
 > bus->blocksize)) {

2118 
uöt16
 
∑d
 = 
bus
->
blocksize
 - (
Àn
 % bus->blocksize);

2119 i‡((
∑d
 <
bus
->
roundup
Ë&& (∑d < bus->
blocksize
))

2120 
Àn
 +
∑d
;

2121 } i‡(
Àn
 % 
DHD_SDALIGN
) {

2122 
Àn
 +
DHD_SDALIGN
 - (len % DHD_SDALIGN);

2126 i‡(
f‹˚Æign
 && (
Àn
 & (
ALIGNMENT
 - 1)))

2127 
Àn
 = 
	`ROUNDUP
÷í, 
ALIGNMENT
);

2129 
	`ASSERT
(
	`ISALIGNED
((
uöçå
)
‰ame
, 2));

2133 
	`dhd_os_sdlock
(
bus
->
dhd
);

2135 
	`BUS_WAKE
(
bus
);

2138 
	`dhdsdio_˛k˘l
(
bus
, 
CLK_AVAIL
, 
FALSE
);

2141 *(
uöt16
*)
‰ame
 = 
	`htﬁ16
((uöt16)
msgÀn
);

2142 *(((
uöt16
*)
‰ame
Ë+ 1Ë
	`htﬁ16
(~
msgÀn
);

2144 #ifde‡
BCMSDIOH_TXGLOM


2145 i‡(
bus
->
glom_íabÀ
) {

2146 
uöt32
 
hwhódî1
, 
hwhódî2
;

2148 
swhódî
 = ((
SDPCM_CONTROL_CHANNEL
 << 
SDPCM_CHANNEL_SHIFT
Ë& 
SDPCM_CHANNEL_MASK
)

2149 | 
bus
->
tx_£q


2150 | ((
doff
 << 
SDPCM_DOFFSET_SHIFT
Ë& 
SDPCM_DOFFSET_MASK
);

2151 
	`htﬁ32_ua_°‹e
(
swhódî
, 
‰ame
 + 
SDPCM_FRAMETAG_LEN
 + 
SDPCM_HWEXT_LEN
);

2152 
	`htﬁ32_ua_°‹e
(0, 
‰ame
 + 
SDPCM_FRAMETAG_LEN


2153 + 
SDPCM_HWEXT_LEN
 + (
swhódî
));

2155 
hwhódî1
 = (
msgÀn
 - 
SDPCM_FRAMETAG_LEN
) | (1 << 24);

2156 
hwhódî2
 = (
Àn
 - (
msgÀn
)) << 16;

2157 
	`htﬁ32_ua_°‹e
(
hwhódî1
, 
‰ame
 + 
SDPCM_FRAMETAG_LEN
);

2158 
	`htﬁ32_ua_°‹e
(
hwhódî2
, 
‰ame
 + 
SDPCM_FRAMETAG_LEN
 + 4);

2160 *(
uöt16
*)
‰ame
 = 
	`htﬁ16
(
Àn
);

2161 *(((
uöt16
*)
‰ame
Ë+ 1Ë
	`htﬁ16
(~(
Àn
));

2166 
swhódî
 = ((
SDPCM_CONTROL_CHANNEL
 << 
SDPCM_CHANNEL_SHIFT
Ë& 
SDPCM_CHANNEL_MASK
)

2167 | 
bus
->
tx_£q
 | ((
doff
 << 
SDPCM_DOFFSET_SHIFT
Ë& 
SDPCM_DOFFSET_MASK
);

2168 
	`htﬁ32_ua_°‹e
(
swhódî
, 
‰ame
 + 
SDPCM_FRAMETAG_LEN
);

2169 
	`htﬁ32_ua_°‹e
(0, 
‰ame
 + 
SDPCM_FRAMETAG_LEN
 + (
swhódî
));

2171 i‡(!
	`TXCTLOK
(
bus
)) {

2172 
	`DHD_INFO
(("%s: No bus credit bus->tx_max %d, bus->tx_seq %d\n",

2173 
__FUNCTION__
, 
bus
->
tx_max
, bus->
tx_£q
));

2174 
bus
->
˘æ_‰ame_°©
 = 
TRUE
;

2176 
bus
->
˘æ_‰ame_buf
 = 
‰ame
;

2177 
bus
->
˘æ_‰ame_Àn
 = 
Àn
;

2179 i‡(!
bus
->
dpc_sched
) {

2180 
bus
->
dpc_sched
 = 
TRUE
;

2181 
	`dhd_sched_dpc
(
bus
->
dhd
);

2183 i‡(
bus
->
˘æ_‰ame_°©
) {

2184 
	`dhd_waô_f‹_evít
(
bus
->
dhd
, &bus->
˘æ_‰ame_°©
);

2187 i‡(
bus
->
˘æ_‰ame_°©
 =
FALSE
) {

2188 
	`DHD_INFO
(("%s: cål_‰ame_°© =FALSE\n", 
__FUNCTION__
));

2189 
ªt
 = 0;

2191 
bus
->
dhd
->
tx˙t_timeout
++;

2192 i‡(!
bus
->
dhd
->
h™g_was_£¡
) {

2193 
	`DHD_ERROR
(("%s: ctrl_frame_stat == TRUEÅxcnt_timeout=%d\n",

2194 
__FUNCTION__
, 
bus
->
dhd
->
tx˙t_timeout
));

2196 
ªt
 = -1;

2197 
bus
->
˘æ_‰ame_°©
 = 
FALSE
;

2198 
d⁄e
;

2202 
bus
->
dhd
->
tx˙t_timeout
 = 0;

2204 i‡(
ªt
 == -1) {

2205 #ifde‡
DHD_DEBUG


2206 i‡(
	`DHD_BYTES_ON
(Ë&& 
	`DHD_CTL_ON
()) {

2207 
	`¥hex
("Tx Føme", 
‰ame
, 
Àn
);

2208 } i‡(
	`DHD_HDRS_ON
()) {

2209 
	`¥hex
("TxHdr", 
‰ame
, 
	`MIN
(
Àn
, 16));

2214 
ªt
 = 
	`dhd_bcmsdh_£nd_buf
(
bus
, 
	`bcmsdh_cur_sbwad
(
sdh
), 
SDIO_FUNC_2
, 
F2SYNC
,

2215 
‰ame
, 
Àn
, 
NULL
, NULL, NULL);

2216 
	`ASSERT
(
ªt
 !
BCME_PENDING
);

2218 i‡(
ªt
 =
BCME_NODEVICE
) {

2219 
	`DHD_ERROR
(("%s: Devi˚á¶ì∞Æªady\n", 
__FUNCTION__
));

2220 } i‡(
ªt
 < 0) {

2222 
	`DHD_INFO
(("%s: sdioÉrror %d,ábort commandándÅerminate frame.\n",

2223 
__FUNCTION__
, 
ªt
));

2224 
bus
->
tx_sdîrs
++;

2226 
	`bcmsdh_ab‹t
(
sdh
, 
SDIO_FUNC_2
);

2228 
	`bcmsdh_cfg_wrôe
(
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_FUNC1_FRAMECTRL
,

2229 
SFC_WF_TERM
, 
NULL
);

2230 
bus
->
f1ªgd©a
++;

2232 
i
 = 0; i < 3; i++) {

2233 
uöt8
 
hi
, 
lo
;

2234 
hi
 = 
	`bcmsdh_cfg_ªad
(
sdh
, 
SDIO_FUNC_1
,

2235 
SBSDIO_FUNC1_WFRAMEBCHI
, 
NULL
);

2236 
lo
 = 
	`bcmsdh_cfg_ªad
(
sdh
, 
SDIO_FUNC_1
,

2237 
SBSDIO_FUNC1_WFRAMEBCLO
, 
NULL
);

2238 
bus
->
f1ªgd©a
 += 2;

2239 i‡((
hi
 =0Ë&& (
lo
 == 0))

2243 i‡(
ªt
 == 0) {

2244 
bus
->
tx_£q
 = (bus->tx_£q + 1Ë% 
SDPCM_SEQUENCE_WRAP
;

2246 } (
ªt
 < 0Ë&& 
ªåõs
++ < 
TXRETRIES
);

2249 
d⁄e
:

2250 i‡((
bus
->
idÀtime
 =
DHD_IDLE_IMMEDIATE
Ë&& !bus->
dpc_sched
) {

2251 
bus
->
a˘ivôy
 = 
FALSE
;

2252 
	`dhdsdio_˛k˘l
(
bus
, 
CLK_NONE
, 
TRUE
);

2255 
	`dhd_os_sdu∆ock
(
bus
->
dhd
);

2257 i‡(
ªt
)

2258 
bus
->
dhd
->
tx_˘Àºs
++;

2260 
bus
->
dhd
->
tx_˘Õkts
++;

2262 i‡(
bus
->
dhd
->
tx˙t_timeout
 >
MAX_CNTL_TIMEOUT
)

2263  -
ETIMEDOUT
;

2265  
ªt
 ? -
EIO
 : 0;

2266 
	}
}

2269 
	$dhd_bus_rx˘l
(
dhd_bus
 *
bus
, 
uch¨
 *
msg
, 
uöt
 
msgÀn
)

2271 
timñe·
;

2272 
uöt
 
rxÀn
 = 0;

2273 
boﬁ
 
≥ndög
;

2275 
	`DHD_TRACE
(("%s: E¡î\n", 
__FUNCTION__
));

2277 i‡(
bus
->
dhd
->
d⁄gÀ_ª£t
)

2278  -
EIO
;

2281 
timñe·
 = 
	`dhd_os_io˘l_ª•_waô
(
bus
->
dhd
, &bus->
rxÀn
, &
≥ndög
);

2283 
	`dhd_os_sdlock
(
bus
->
dhd
);

2284 
rxÀn
 = 
bus
->rxlen;

2285 
	`bc›y
(
bus
->
rx˘l
, 
msg
, 
	`MIN
(
msgÀn
, 
rxÀn
));

2286 
bus
->
rxÀn
 = 0;

2287 
	`dhd_os_sdu∆ock
(
bus
->
dhd
);

2289 i‡(
rxÀn
) {

2290 
	`DHD_CTL
(("%s:Ñesumed onÑxctl frame, got %dÉxpected %d\n",

2291 
__FUNCTION__
, 
rxÀn
, 
msgÀn
));

2292 } i‡(
timñe·
 == 0) {

2293 #ifde‡
DHD_DEBUG


2294 
uöt32
 
°©us
, 
ªåy
 = 0;

2295 
	`R_SDREG
(
°©us
, &
bus
->
ªgs
->
öt°©us
, 
ªåy
);

2296 
	`DHD_ERROR
(("%s:Ñesumed onÅimeout, INT status=0x%08X\n",

2297 
__FUNCTION__
, 
°©us
));

2299 
	`DHD_ERROR
(("%s:Ñesumed o¿timeout\n", 
__FUNCTION__
));

2301 #ifde‡
DHD_DEBUG


2302 
	`dhd_os_sdlock
(
bus
->
dhd
);

2303 
	`dhdsdio_checkdõd
(
bus
, 
NULL
, 0);

2304 
	`dhd_os_sdu∆ock
(
bus
->
dhd
);

2306 } i‡(
≥ndög
 =
TRUE
) {

2308 
	`DHD_ERROR
(("%s: sig«»≥ndög\n", 
__FUNCTION__
));

2309  -
EINTR
;

2311 
	`DHD_CTL
(("%s:Ñesumed f‹ unknow¿ªas⁄?\n", 
__FUNCTION__
));

2312 #ifde‡
DHD_DEBUG


2313 
	`dhd_os_sdlock
(
bus
->
dhd
);

2314 
	`dhdsdio_checkdõd
(
bus
, 
NULL
, 0);

2315 
	`dhd_os_sdu∆ock
(
bus
->
dhd
);

2318 i‡(
timñe·
 == 0) {

2319 
bus
->
dhd
->
rx˙t_timeout
++;

2320 
	`DHD_ERROR
(("%s:Ñx˙t_timeout=%d\n", 
__FUNCTION__
, 
bus
->
dhd
->
rx˙t_timeout
));

2323 
bus
->
dhd
->
rx˙t_timeout
 = 0;

2325 i‡(
rxÀn
)

2326 
bus
->
dhd
->
rx_˘Õkts
++;

2328 
bus
->
dhd
->
rx_˘Àºs
++;

2330 i‡(
bus
->
dhd
->
rx˙t_timeout
 >
MAX_CNTL_TIMEOUT
)

2331  -
ETIMEDOUT
;

2333 i‡(
bus
->
dhd
->
d⁄gÀ_å≠_occuªd
)

2334  -
EREMOTEIO
;

2336  
rxÀn
 ? (ÏxÀ¿: -
EIO
;

2337 
	}
}

2341 
	mIOV_INTR
 = 1,

2342 
	mIOV_POLLRATE
,

2343 
	mIOV_SDREG
,

2344 
	mIOV_SBREG
,

2345 
	mIOV_SDCIS
,

2346 
	mIOV_MEMBYTES
,

2347 
	mIOV_MEMSIZE
,

2348 #ifde‡
DHD_DEBUG


2349 
	mIOV_CHECKDIED
,

2350 
	mIOV_SERIALCONS
,

2352 
	mIOV_SET_DOWNLOAD_STATE
,

2353 
	mIOV_SOCRAM_STATE
,

2354 
	mIOV_FORCEEVEN
,

2355 
	mIOV_SDIOD_DRIVE
,

2356 
	mIOV_READAHEAD
,

2357 
	mIOV_SDRXCHAIN
,

2358 
	mIOV_ALIGNCTL
,

2359 
	mIOV_SDALIGN
,

2360 
	mIOV_DEVRESET
,

2361 
	mIOV_CPU
,

2362 #i‡
deföed
(
SDIO_CRC_ERROR_FIX
)

2363 
	mIOV_WATERMARK
,

2364 
	mIOV_MESBUSYCTRL
,

2366 #ifde‡
SDTEST


2367 
	mIOV_PKTGEN
,

2368 
	mIOV_EXTLOOP
,

2370 
	mIOV_SPROM
,

2371 
	mIOV_TXBOUND
,

2372 
	mIOV_RXBOUND
,

2373 
	mIOV_TXMINMAX
,

2374 
	mIOV_IDLETIME
,

2375 
	mIOV_IDLECLOCK
,

2376 
	mIOV_SD1IDLE
,

2377 
	mIOV_SLEEP
,

2378 
	mIOV_DONGLEISOLATION
,

2379 
	mIOV_KSO
,

2380 
	mIOV_DEVSLEEP
,

2381 
	mIOV_DEVCAP
,

2382 
	mIOV_VARS
,

2383 #ifde‡
SOFTAP


2384 
	mIOV_FWPATH
,

2386 
	mIOV_TXGLOMSIZE
,

2387 
	mIOV_TXGLOMMODE


2390 c⁄° 
bcm_iov¨_t
 
	gdhdsdio_iov¨s
[] = {

2391 {"öå", 
IOV_INTR
, 0, 
IOVT_BOOL
, 0 },

2392 {"¶ìp", 
IOV_SLEEP
, 0, 
IOVT_BOOL
, 0 },

2393 {"pﬁÃ©e", 
IOV_POLLRATE
, 0, 
IOVT_UINT32
, 0 },

2394 {"idÀtime", 
IOV_IDLETIME
, 0, 
IOVT_INT32
, 0 },

2395 {"idÀ˛ock", 
IOV_IDLECLOCK
, 0, 
IOVT_INT32
, 0 },

2396 {"sd1idÀ", 
IOV_SD1IDLE
, 0, 
IOVT_BOOL
, 0 },

2397 {"membyãs", 
IOV_MEMBYTES
, 0, 
IOVT_BUFFER
, 2 * () },

2398 {"memsize", 
IOV_MEMSIZE
, 0, 
IOVT_UINT32
, 0 },

2399 {"dw∆d°©e", 
IOV_SET_DOWNLOAD_STATE
, 0, 
IOVT_BOOL
, 0 },

2400 {"so¸am_°©e", 
IOV_SOCRAM_STATE
, 0, 
IOVT_BOOL
, 0 },

2401 {"v¨s", 
IOV_VARS
, 0, 
IOVT_BUFFER
, 0 },

2402 {"sdiod_drive", 
IOV_SDIOD_DRIVE
, 0, 
IOVT_UINT32
, 0 },

2403 {"ªadahód", 
IOV_READAHEAD
, 0, 
IOVT_BOOL
, 0 },

2404 {"sdrxchaö", 
IOV_SDRXCHAIN
, 0, 
IOVT_BOOL
, 0 },

2405 {"Æign˘l", 
IOV_ALIGNCTL
, 0, 
IOVT_BOOL
, 0 },

2406 {"sdÆign", 
IOV_SDALIGN
, 0, 
IOVT_BOOL
, 0 },

2407 {"devª£t", 
IOV_DEVRESET
, 0, 
IOVT_BOOL
, 0 },

2408 #ifde‡
DHD_DEBUG


2409 {"sdªg", 
IOV_SDREG
, 0, 
IOVT_BUFFER
, (
sdªg_t
) },

2410 {"sbªg", 
IOV_SBREG
, 0, 
IOVT_BUFFER
, (
sdªg_t
) },

2411 {"sd_cis", 
IOV_SDCIS
, 0, 
IOVT_BUFFER
, 
DHD_IOCTL_MAXLEN
 },

2412 {"f‹˚Æign", 
IOV_FORCEEVEN
, 0, 
IOVT_BOOL
, 0 },

2413 {"txbound", 
IOV_TXBOUND
, 0, 
IOVT_UINT32
, 0 },

2414 {"rxbound", 
IOV_RXBOUND
, 0, 
IOVT_UINT32
, 0 },

2415 {"txmömax", 
IOV_TXMINMAX
, 0, 
IOVT_UINT32
, 0 },

2416 {"˝u", 
IOV_CPU
, 0, 
IOVT_BOOL
, 0 },

2417 #ifde‡
DHD_DEBUG


2418 {"checkdõd", 
IOV_CHECKDIED
, 0, 
IOVT_BUFFER
, 0 },

2419 {"£rül", 
IOV_SERIALCONS
, 0, 
IOVT_UINT32
, 0 },

2422 #ifde‡
SDTEST


2423 {"exéo›", 
IOV_EXTLOOP
, 0, 
IOVT_BOOL
, 0 },

2424 {"pktgí", 
IOV_PKTGEN
, 0, 
IOVT_BUFFER
, (
dhd_pktgí_t
) },

2426 #i‡
deföed
(
SDIO_CRC_ERROR_FIX
)

2427 {"w©îm¨k", 
IOV_WATERMARK
, 0, 
IOVT_UINT32
, 0 },

2428 {"mesbusy˘æ", 
IOV_MESBUSYCTRL
, 0, 
IOVT_UINT32
, 0 },

2430 {"devˇp", 
IOV_DEVCAP
, 0, 
IOVT_UINT32
, 0 },

2431 {"dngl_isﬁ©i⁄", 
IOV_DONGLEISOLATION
, 0, 
IOVT_UINT32
, 0 },

2432 {"kso", 
IOV_KSO
, 0, 
IOVT_UINT32
, 0 },

2433 {"dev¶ìp", 
IOV_DEVSLEEP
, 0, 
IOVT_UINT32
, 0 },

2434 #ifde‡
SOFTAP


2435 {"fw∑th", 
IOV_FWPATH
, 0, 
IOVT_BUFFER
, 0 },

2437 {"txglomsize", 
IOV_TXGLOMSIZE
, 0, 
IOVT_UINT32
, 0 },

2438 {"txglommode", 
IOV_TXGLOMMODE
, 0, 
IOVT_UINT32
, 0 },

2439 {
NULL
, 0, 0, 0, 0 }

2443 
	$dhd_dump_p˘
(
bcm°rbuf
 *
°rbuf
, *
desc
, 
uöt
 
num
, uöà
div
)

2445 
uöt
 
q1
, 
q2
;

2447 i‡(!
div
) {

2448 
	`bcm_b¥ötf
(
°rbuf
, "%†N/A", 
desc
);

2450 
q1
 = 
num
 / 
div
;

2451 
q2
 = (100 * (
num
 - (
q1
 * 
div
))) / div;

2452 
	`bcm_b¥ötf
(
°rbuf
, "%†%d.%02d", 
desc
, 
q1
, 
q2
);

2454 
	}
}

2457 
	$dhd_bus_dump
(
dhd_pub_t
 *
dhdp
, 
bcm°rbuf
 *
°rbuf
)

2459 
dhd_bus_t
 *
bus
 = 
dhdp
->bus;

2461 
	`bcm_b¥ötf
(
°rbuf
, "Bus SDIO structure:\n");

2462 
	`bcm_b¥ötf
(
°rbuf
, "hostintmask 0x%08x intstatus 0x%08x sdpcm_ver %d\n",

2463 
bus
->
ho°ötmask
, bus->
öt°©us
, bus->
sdpcm_vî
);

2464 
	`bcm_b¥ötf
(
°rbuf
, "fcstate %d qlen %dÅx_seq %d, max %d,Ñxskip %dÑxlen %dÑx_seq %d\n",

2465 
bus
->
fc°©e
, 
	`pktq_Àn
(&bus->
txq
), bus->
tx_£q
, bus->
tx_max
, bus->
rxskù
,

2466 
bus
->
rxÀn
, bus->
rx_£q
);

2467 
	`bcm_b¥ötf
(
°rbuf
, "intr %d intrcount %dÜastintrs %d spurious %d\n",

2468 
bus
->
öå
, bus->
öåcou¡
, bus->
œ°öås
, bus->
•urious
);

2469 
	`bcm_b¥ötf
(
°rbuf
, "pollrate %dÖollcnt %dÑegfails %d\n",

2470 
bus
->
pﬁÃ©e
, bus->
pﬁl˙t
, bus->
ªgÁûs
);

2472 
	`bcm_b¥ötf
(
°rbuf
, "\nAdditional counters:\n");

2473 
	`bcm_b¥ötf
(
°rbuf
, "tx_sderrs %d fcqueued %dÑxrtx %dÑx_toolong %dÑxc_errors %d\n",

2474 
bus
->
tx_sdîrs
, bus->
fcqueued
, bus->
rxπx
, bus->
rx_toﬁ⁄g
,

2475 
bus
->
rxc_îr‹s
);

2476 
	`bcm_b¥ötf
(
°rbuf
, "rx_hdrfail %d badhdr %d badseq %d\n",

2477 
bus
->
rx_hdrÁû
, bus->
rx_badhdr
, bus->
rx_bad£q
);

2478 
	`bcm_b¥ötf
(
°rbuf
, "fc_rcvd %d, fc_xoff %d, fc_xon %d\n",

2479 
bus
->
fc_rcvd
, bus->
fc_xoff
, bus->
fc_x⁄
);

2480 
	`bcm_b¥ötf
(
°rbuf
, "rxglomfail %d,Ñxglomframes %d,Ñxglompkts %d\n",

2481 
bus
->
rxglomÁû
, bus->
rxglom‰ames
, bus->
rxglompkts
);

2482 
	`bcm_b¥ötf
(
°rbuf
, "f2rx (hdrs/data) %d (%d/%d), f2tx %d f1regs %d\n",

2483 (
bus
->
f2rxhdrs
 + bus->
f2rxd©a
), bus->f2rxhdrs, bus->f2rxdata,

2484 
bus
->
f2txd©a
, bus->
f1ªgd©a
);

2486 
	`dhd_dump_p˘
(
°rbuf
, "\nRx:Ökts/f2rd", 
bus
->
dhd
->
rx_∑ckës
,

2487 (
bus
->
f2rxhdrs
 + bus->
f2rxd©a
));

2488 
	`dhd_dump_p˘
(
°rbuf
, ",Ökts/f1sd", 
bus
->
dhd
->
rx_∑ckës
, bus->
f1ªgd©a
);

2489 
	`dhd_dump_p˘
(
°rbuf
, ",Ökts/sd", 
bus
->
dhd
->
rx_∑ckës
,

2490 (
bus
->
f2rxhdrs
 + bus->
f2rxd©a
 + bus->
f1ªgd©a
));

2491 
	`dhd_dump_p˘
(
°rbuf
, ",Ökts/öt", 
bus
->
dhd
->
rx_∑ckës
, bus->
öåcou¡
);

2492 
	`bcm_b¥ötf
(
°rbuf
, "\n");

2494 
	`dhd_dump_p˘
(
°rbuf
, "Rx: glomÖ˘", (100 * 
bus
->
rxglompkts
),

2495 
bus
->
dhd
->
rx_∑ckës
);

2496 
	`dhd_dump_p˘
(
°rbuf
, ",Ökts/glom", 
bus
->
rxglompkts
, bus->
rxglom‰ames
);

2497 
	`bcm_b¥ötf
(
°rbuf
, "\n");

2499 
	`dhd_dump_p˘
(
°rbuf
, "Tx:Ökts/f2wr", 
bus
->
dhd
->
tx_∑ckës
, bus->
f2txd©a
);

2500 
	`dhd_dump_p˘
(
°rbuf
, ",Ökts/f1sd", 
bus
->
dhd
->
tx_∑ckës
, bus->
f1ªgd©a
);

2501 
	`dhd_dump_p˘
(
°rbuf
, ",Ökts/sd", 
bus
->
dhd
->
tx_∑ckës
,

2502 (
bus
->
f2txd©a
 + bus->
f1ªgd©a
));

2503 
	`dhd_dump_p˘
(
°rbuf
, ",Ökts/öt", 
bus
->
dhd
->
tx_∑ckës
, bus->
öåcou¡
);

2504 
	`bcm_b¥ötf
(
°rbuf
, "\n");

2506 
	`dhd_dump_p˘
(
°rbuf
, "Total:Ökts/f2rw",

2507 (
bus
->
dhd
->
tx_∑ckës
 + bus->dhd->
rx_∑ckës
),

2508 (
bus
->
f2txd©a
 + bus->
f2rxhdrs
 + bus->
f2rxd©a
));

2509 
	`dhd_dump_p˘
(
°rbuf
, ",Ökts/f1sd",

2510 (
bus
->
dhd
->
tx_∑ckës
 + bus->dhd->
rx_∑ckës
), bus->
f1ªgd©a
);

2511 
	`dhd_dump_p˘
(
°rbuf
, ",Ökts/sd",

2512 (
bus
->
dhd
->
tx_∑ckës
 + bus->dhd->
rx_∑ckës
),

2513 (
bus
->
f2txd©a
 + bus->
f2rxhdrs
 + bus->
f2rxd©a
 + bus->
f1ªgd©a
));

2514 
	`dhd_dump_p˘
(
°rbuf
, ",Ökts/int",

2515 (
bus
->
dhd
->
tx_∑ckës
 + bus->dhd->
rx_∑ckës
), bus->
öåcou¡
);

2516 
	`bcm_b¥ötf
(
°rbuf
, "\n\n");

2519 #ifde‡
SDTEST


2520 i‡(
bus
->
pktgí_cou¡
) {

2521 
	`bcm_b¥ötf
(
°rbuf
, "pktgen configánd count:\n");

2522 
	`bcm_b¥ötf
(
°rbuf
, "freq %d count %dÖrint %dÅotal %d min %dÜen %d\n",

2523 
bus
->
pktgí_‰eq
, bus->
pktgí_cou¡
, bus->
pktgí_¥öt
,

2524 
bus
->
pktgí_tŸÆ
, bus->
pktgí_möÀn
, bus->
pktgí_maxÀn
);

2525 
	`bcm_b¥ötf
(
°rbuf
, "sendáttempts %dÑcvd %d fail %d\n",

2526 
bus
->
pktgí_£¡
, bus->
pktgí_rcvd
, bus->
pktgí_Áû
);

2529 #ifde‡
DHD_DEBUG


2530 
	`bcm_b¥ötf
(
°rbuf
, "dpc_sched %d host interrupt%spending\n",

2531 
bus
->
dpc_sched
, (
	`bcmsdh_öå_≥ndög
(bus->
sdh
) ? " " : "Çot "));

2532 
	`bcm_b¥ötf
(
°rbuf
, "blocksizê%dÑoundu∞%d\n", 
bus
->
blocksize
, bus->
roundup
);

2534 
	`bcm_b¥ötf
(
°rbuf
, "clkstate %dáctivity %d idletime %d idlecount %d sleeping %d\n",

2535 
bus
->
˛k°©e
, bus->
a˘ivôy
, bus->
idÀtime
, bus->
idÀcou¡
, bus->
¶ìpög
);

2536 
	}
}

2539 
	$dhd_bus_˛órcou¡s
(
dhd_pub_t
 *
dhdp
)

2541 
dhd_bus_t
 *
bus
 = (dhd_bus_à*)
dhdp
->bus;

2543 
bus
->
öåcou¡
 = bus->
œ°öås
 = bus->
•urious
 = bus->
ªgÁûs
 = 0;

2544 
bus
->
rxπx
 = bus->
rx_toﬁ⁄g
 = bus->
rxc_îr‹s
 = 0;

2545 
bus
->
rx_hdrÁû
 = bus->
rx_badhdr
 = bus->
rx_bad£q
 = 0;

2546 
bus
->
tx_sdîrs
 = bus->
fc_rcvd
 = bus->
fc_xoff
 = bus->
fc_x⁄
 = 0;

2547 
bus
->
rxglomÁû
 = bus->
rxglom‰ames
 = bus->
rxglompkts
 = 0;

2548 
bus
->
f2rxhdrs
 = bus->
f2rxd©a
 = bus->
f2txd©a
 = bus->
f1ªgd©a
 = 0;

2549 
	}
}

2551 #ifde‡
SDTEST


2553 
	$dhdsdio_pktgí_gë
(
dhd_bus_t
 *
bus
, 
uöt8
 *
¨g
)

2555 
dhd_pktgí_t
 
pktgí
;

2557 
pktgí
.
vîsi⁄
 = 
DHD_PKTGEN_VERSION
;

2558 
pktgí
.
‰eq
 = 
bus
->
pktgí_‰eq
;

2559 
pktgí
.
cou¡
 = 
bus
->
pktgí_cou¡
;

2560 
pktgí
.
¥öt
 = 
bus
->
pktgí_¥öt
;

2561 
pktgí
.
tŸÆ
 = 
bus
->
pktgí_tŸÆ
;

2562 
pktgí
.
möÀn
 = 
bus
->
pktgí_möÀn
;

2563 
pktgí
.
maxÀn
 = 
bus
->
pktgí_maxÀn
;

2564 
pktgí
.
num£¡
 = 
bus
->
pktgí_£¡
;

2565 
pktgí
.
numrcvd
 = 
bus
->
pktgí_rcvd
;

2566 
pktgí
.
numÁû
 = 
bus
->
pktgí_Áû
;

2567 
pktgí
.
mode
 = 
bus
->
pktgí_mode
;

2568 
pktgí
.
°›
 = 
bus
->
pktgí_°›
;

2570 
	`bc›y
(&
pktgí
, 
¨g
, (pktgen));

2573 
	}
}

2576 
	$dhdsdio_pktgí_£t
(
dhd_bus_t
 *
bus
, 
uöt8
 *
¨g
)

2578 
dhd_pktgí_t
 
pktgí
;

2579 
uöt
 
ﬁd˙t
, 
ﬁdmode
;

2581 
	`bc›y
(
¨g
, &
pktgí
, (pktgen));

2582 i‡(
pktgí
.
vîsi⁄
 !
DHD_PKTGEN_VERSION
)

2583  
BCME_BADARG
;

2585 
ﬁd˙t
 = 
bus
->
pktgí_cou¡
;

2586 
ﬁdmode
 = 
bus
->
pktgí_mode
;

2588 
bus
->
pktgí_‰eq
 = 
pktgí
.
‰eq
;

2589 
bus
->
pktgí_cou¡
 = 
pktgí
.
cou¡
;

2590 
bus
->
pktgí_¥öt
 = 
pktgí
.
¥öt
;

2591 
bus
->
pktgí_tŸÆ
 = 
pktgí
.
tŸÆ
;

2592 
bus
->
pktgí_möÀn
 = 
pktgí
.
möÀn
;

2593 
bus
->
pktgí_maxÀn
 = 
pktgí
.
maxÀn
;

2594 
bus
->
pktgí_mode
 = 
pktgí
.
mode
;

2595 
bus
->
pktgí_°›
 = 
pktgí
.
°›
;

2597 
bus
->
pktgí_tick
 = bus->
pktgí_±ick
 = 0;

2598 
bus
->
pktgí_¥ev_time
 = 
jiffõs
;

2599 
bus
->
pktgí_Àn
 = 
	`MAX
(bus->pktgí_Àn, bus->
pktgí_möÀn
);

2600 
bus
->
pktgí_Àn
 = 
	`MIN
(bus->pktgí_Àn, bus->
pktgí_maxÀn
);

2603 i‡(
bus
->
pktgí_cou¡
 && (!
ﬁd˙t
 || 
ﬁdmode
 !bus->
pktgí_mode
)) {

2604 
bus
->
pktgí_£¡
 = bus->
pktgí_¥ev_£¡
 = bus->
pktgí_rcvd
 = 0;

2605 
bus
->
pktgí_¥ev_rcvd
 = bus->
pktgí_Áû
 = 0;

2609 
	}
}

2613 
	$dhdsdio_devøm_ªm≠
(
dhd_bus_t
 *
bus
, 
boﬁ
 
vÆ
)

2615 
uöt8
 
íabÀ
, 
¥Ÿe˘
, 
ªm≠
;

2617 
	`si_socdevøm
(
bus
->
sih
, 
FALSE
, &
íabÀ
, &
¥Ÿe˘
, &
ªm≠
);

2618 
ªm≠
 = 
vÆ
 ? 
TRUE
 : 
FALSE
;

2619 
	`si_socdevøm
(
bus
->
sih
, 
TRUE
, &
íabÀ
, &
¥Ÿe˘
, &
ªm≠
);

2620 
	}
}

2623 
	$dhdsdio_membyãs
(
dhd_bus_t
 *
bus
, 
boﬁ
 
wrôe
, 
uöt32
 
addªss
, 
uöt8
 *
d©a
, 
uöt
 
size
)

2625 
bcmîr‹
 = 0;

2626 
uöt32
 
sdaddr
;

2627 
uöt
 
dsize
;

2633 i‡(
	`REMAP_ENAB
(
bus
Ë&& 
	`REMAP_ISADDR
(bus, 
addªss
)) {

2634 
addªss
 -
bus
->
‹ig_ømsize
;

2635 
addªss
 +
SOCDEVRAM_BP_ADDR
;

2639 
sdaddr
 = 
addªss
 & 
SBSDIO_SB_OFT_ADDR_MASK
;

2640 i‡((
sdaddr
 + 
size
Ë& 
SBSDIO_SBWINDOW_MASK
)

2641 
dsize
 = (
SBSDIO_SB_OFT_ADDR_LIMIT
 - 
sdaddr
);

2643 
dsize
 = 
size
;

2646 i‡((
bcmîr‹
 = 
	`dhdsdio_£t_süddr_wödow
(
bus
, 
addªss
))) {

2647 
	`DHD_ERROR
(("%s: wödow ch™gêÁûed\n", 
__FUNCTION__
));

2648 
x„r_d⁄e
;

2652 
size
) {

2653 
	`DHD_INFO
(("%s: %s %d bytesát offset 0x%08x in window 0x%08x\n",

2654 
__FUNCTION__
, (
wrôe
 ? "wrôe" : "ªad"), 
dsize
, 
sdaddr
,

2655 (
addªss
 & 
SBSDIO_SBWINDOW_MASK
)));

2656 i‡((
bcmîr‹
 = 
	`bcmsdh_rwd©a
(
bus
->
sdh
, 
wrôe
, 
sdaddr
, 
d©a
, 
dsize
))) {

2657 
	`DHD_ERROR
(("%s: membyã†å™s„∏Áûed\n", 
__FUNCTION__
));

2662 i‡((
size
 -
dsize
)) {

2663 
d©a
 +
dsize
;

2664 
addªss
 +
dsize
;

2665 i‡((
bcmîr‹
 = 
	`dhdsdio_£t_süddr_wödow
(
bus
, 
addªss
))) {

2666 
	`DHD_ERROR
(("%s: wödow ch™gêÁûed\n", 
__FUNCTION__
));

2669 
sdaddr
 = 0;

2670 
dsize
 = 
	`MIN
(
SBSDIO_SB_OFT_ADDR_LIMIT
, 
size
);

2675 
x„r_d⁄e
:

2677 i‡(
	`dhdsdio_£t_süddr_wödow
(
bus
, 
	`bcmsdh_cur_sbwad
(bus->
sdh
))) {

2678 
	`DHD_ERROR
(("%s: FAILEDÅÿ£àwödow backÅÿ0x%x\n", 
__FUNCTION__
,

2679 
	`bcmsdh_cur_sbwad
(
bus
->
sdh
)));

2682  
bcmîr‹
;

2683 
	}
}

2685 #ifde‡
DHD_DEBUG


2687 
	$dhdsdio_ªadsh¨ed
(
dhd_bus_t
 *
bus
, 
sdpcm_sh¨ed_t
 *
sh
)

2689 
uöt32
 
addr
;

2690 
rv
, 
i
;

2691 
uöt32
 
shaddr
 = 0;

2693 
shaddr
 = 
bus
->
d⁄gÀ_øm_ba£
 + bus->
ømsize
 - 4;

2694 
i
 = 0;

2697 i‡((
rv
 = 
	`dhdsdio_membyãs
(
bus
, 
FALSE
, 
shaddr
, (
uöt8
 *)&
addr
, 4)) < 0)

2698  
rv
;

2700 
addr
 = 
	`…oh32
(addr);

2702 
	`DHD_INFO
(("sdpcm_sh¨edáddªs†0x%08X\n", 
addr
));

2708 i‡(
addr
 == 0 || ((~addr >> 16) & 0xffff) == (addr & 0xffff)) {

2709 i‡((
bus
->
§memsize
 > 0Ë&& (
i
++ == 0)) {

2710 
shaddr
 -
bus
->
§memsize
;

2712 
	`DHD_ERROR
(("%s:áddress (0x%08x) of sdpcm_shared invalid\n",

2713 
__FUNCTION__
, 
addr
));

2714  
BCME_ERROR
;

2718 } 
i
 < 2);

2721 i‡((
rv
 = 
	`dhdsdio_membyãs
(
bus
, 
FALSE
, 
addr
, (
uöt8
 *)
sh
, (
sdpcm_sh¨ed_t
))) < 0)

2722  
rv
;

2725 
sh
->
Êags
 = 
	`…oh32
(sh->flags);

2726 
sh
->
å≠_addr
 = 
	`…oh32
(sh->trap_addr);

2727 
sh
->
as£π_exp_addr
 = 
	`…oh32
(sh->assert_exp_addr);

2728 
sh
->
as£π_fûe_addr
 = 
	`…oh32
(sh->assert_file_addr);

2729 
sh
->
as£π_löe
 = 
	`…oh32
(sh->assert_line);

2730 
sh
->
c⁄sﬁe_addr
 = 
	`…oh32
(sh->console_addr);

2731 
sh
->
msgåa˚_addr
 = 
	`…oh32
(sh->msgtrace_addr);

2733 i‡((
sh
->
Êags
 & 
SDPCM_SHARED_VERSION_MASK
Ë=3 && 
SDPCM_SHARED_VERSION
 == 1)

2734  
BCME_OK
;

2736 i‡((
sh
->
Êags
 & 
SDPCM_SHARED_VERSION_MASK
Ë!
SDPCM_SHARED_VERSION
) {

2737 
	`DHD_ERROR
(("%s: sdpcm_shared version %d in dhd "

2739 
__FUNCTION__
, 
SDPCM_SHARED_VERSION
,

2740 
sh
->
Êags
 & 
SDPCM_SHARED_VERSION_MASK
));

2741  
BCME_ERROR
;

2744  
BCME_OK
;

2745 
	}
}

2747 
	#CONSOLE_LINE_MAX
 192

	)

2750 
	$dhdsdio_ªadc⁄sﬁe
(
dhd_bus_t
 *
bus
)

2752 
dhd_c⁄sﬁe_t
 *
c
 = &
bus
->
c⁄sﬁe
;

2753 
uöt8
 
löe
[
CONSOLE_LINE_MAX
], 
ch
;

2754 
uöt32
 
n
, 
idx
, 
addr
;

2755 
rv
;

2758 i‡(
bus
->
c⁄sﬁe_addr
 == 0)

2761 i‡(!
	`KSO_ENAB
(
bus
))

2765 
addr
 = 
bus
->
c⁄sﬁe_addr
 + 
	`OFFSETOF
(
hndπe_c⁄s_t
, 
log
);

2766 i‡((
rv
 = 
	`dhdsdio_membyãs
(
bus
, 
FALSE
, 
addr
, (
uöt8
 *)&
c
->
log
, (c->log))) < 0)

2767  
rv
;

2770 i‡(
c
->
buf
 =
NULL
) {

2771 
c
->
bufsize
 = 
	`…oh32
(c->
log
.
buf_size
);

2772 i‡((
c
->
buf
 = 
	`MALLOC
(
bus
->
dhd
->
osh
, c->
bufsize
)Ë=
NULL
)

2773  
BCME_NOMEM
;

2776 
idx
 = 
	`…oh32
(
c
->
log
.idx);

2779 i‡(
idx
 > 
c
->
bufsize
)

2780  
BCME_ERROR
;

2783 i‡(
idx
 =
c
->
œ°
)

2784  
BCME_OK
;

2787 
addr
 = 
	`…oh32
(
c
->
log
.
buf
);

2788 i‡((
rv
 = 
	`dhdsdio_membyãs
(
bus
, 
FALSE
, 
addr
, 
c
->
buf
, c->
bufsize
)) < 0)

2789  
rv
;

2791 
c
->
œ°
 !
idx
) {

2792 
n
 = 0;Ç < 
CONSOLE_LINE_MAX
 - 2;Ç++) {

2793 i‡(
c
->
œ°
 =
idx
) {

2797 i‡(
c
->
œ°
 >
n
)

2798 
c
->
œ°
 -
n
;

2800 
c
->
œ°
 = c->
bufsize
 - 
n
;

2801 
bªak2
;

2803 
ch
 = 
c
->
buf
[c->
œ°
];

2804 
c
->
œ°
 = (c->œ° + 1Ë% c->
bufsize
;

2805 i‡(
ch
 == '\n')

2807 
löe
[
n
] = 
ch
;

2810 i‡(
n
 > 0) {

2811 i‡(
löe
[
n
 - 1] == '\r')

2812 
n
--;

2813 
löe
[
n
] = 0;

2814 
	`¥ötf
("CONSOLE: %s\n", 
löe
);

2817 
bªak2
:

2819  
BCME_OK
;

2820 
	}
}

2823 
	$dhdsdio_checkdõd
(
dhd_bus_t
 *
bus
, *
d©a
, 
uöt
 
size
)

2825 
bcmîr‹
 = 0;

2826 
uöt
 
msize
 = 512;

2827 *
mbuf„r
 = 
NULL
;

2828 *
c⁄sﬁe_buf„r
 = 
NULL
;

2829 
uöt
 
max°æí
 = 256;

2830 *
°r
 = 
NULL
;

2831 
å≠_t
 
å
;

2832 
sdpcm_sh¨ed_t
 
sdpcm_sh¨ed
;

2833 
bcm°rbuf
 
°rbuf
;

2834 
uöt32
 
c⁄sﬁe_±r
, 
c⁄sﬁe_size
, 
c⁄sﬁe_ödex
;

2835 
uöt8
 
löe
[
CONSOLE_LINE_MAX
], 
ch
;

2836 
uöt32
 
n
, 
i
, 
addr
;

2837 
rv
;

2839 
	`DHD_TRACE
(("%s: E¡î\n", 
__FUNCTION__
));

2841 i‡(
d©a
 =
NULL
) {

2846 
size
 = 
msize
;

2847 
mbuf„r
 = 
d©a
 = 
	`MALLOC
(
bus
->
dhd
->
osh
, 
msize
);

2848 i‡(
mbuf„r
 =
NULL
) {

2849 
	`DHD_ERROR
(("%s: MALLOC(%dËÁûed \n", 
__FUNCTION__
, 
msize
));

2850 
bcmîr‹
 = 
BCME_NOMEM
;

2851 
d⁄e
;

2855 i‡((
°r
 = 
	`MALLOC
(
bus
->
dhd
->
osh
, 
max°æí
)Ë=
NULL
) {

2856 
	`DHD_ERROR
(("%s: MALLOC(%dËÁûed \n", 
__FUNCTION__
, 
max°æí
));

2857 
bcmîr‹
 = 
BCME_NOMEM
;

2858 
d⁄e
;

2861 i‡((
bcmîr‹
 = 
	`dhdsdio_ªadsh¨ed
(
bus
, &
sdpcm_sh¨ed
)) < 0)

2862 
d⁄e
;

2864 
	`bcm_böô
(&
°rbuf
, 
d©a
, 
size
);

2866 
	`bcm_b¥ötf
(&
°rbuf
, "msgtraceáddress : 0x%08X\nconsoleáddress : 0x%08X\n",

2867 
sdpcm_sh¨ed
.
msgåa˚_addr
, sdpcm_sh¨ed.
c⁄sﬁe_addr
);

2869 i‡((
sdpcm_sh¨ed
.
Êags
 & 
SDPCM_SHARED_ASSERT_BUILT
) == 0) {

2873 
	`bcm_b¥ötf
(&
°rbuf
, "AssrtÇot built in dongle\n");

2876 i‡((
sdpcm_sh¨ed
.
Êags
 & (
SDPCM_SHARED_ASSERT
|
SDPCM_SHARED_TRAP
)) == 0) {

2880 
	`bcm_b¥ötf
(&
°rbuf
, "NoÅrap%s in dongle",

2881 (
sdpcm_sh¨ed
.
Êags
 & 
SDPCM_SHARED_ASSERT_BUILT
)

2884 i‡(
sdpcm_sh¨ed
.
Êags
 & 
SDPCM_SHARED_ASSERT
) {

2886 
	`bcm_b¥ötf
(&
°rbuf
, "Dongleássert");

2887 i‡(
sdpcm_sh¨ed
.
as£π_exp_addr
 != 0) {

2888 
°r
[0] = '\0';

2889 i‡((
bcmîr‹
 = 
	`dhdsdio_membyãs
(
bus
, 
FALSE
,

2890 
sdpcm_sh¨ed
.
as£π_exp_addr
,

2891 (
uöt8
 *)
°r
, 
max°æí
)) < 0)

2892 
d⁄e
;

2894 
°r
[
max°æí
 - 1] = '\0';

2895 
	`bcm_b¥ötf
(&
°rbuf
, "Éx¥ \"%s\"", 
°r
);

2898 i‡(
sdpcm_sh¨ed
.
as£π_fûe_addr
 != 0) {

2899 
°r
[0] = '\0';

2900 i‡((
bcmîr‹
 = 
	`dhdsdio_membyãs
(
bus
, 
FALSE
,

2901 
sdpcm_sh¨ed
.
as£π_fûe_addr
,

2902 (
uöt8
 *)
°r
, 
max°æí
)) < 0)

2903 
d⁄e
;

2905 
°r
[
max°æí
 - 1] = '\0';

2906 
	`bcm_b¥ötf
(&
°rbuf
, " fûê\"%s\"", 
°r
);

2909 
	`bcm_b¥ötf
(&
°rbuf
, "Üöê%d ", 
sdpcm_sh¨ed
.
as£π_löe
);

2912 i‡(
sdpcm_sh¨ed
.
Êags
 & 
SDPCM_SHARED_TRAP
) {

2913 
bus
->
dhd
->
d⁄gÀ_å≠_occuªd
 = 
TRUE
;

2914 i‡((
bcmîr‹
 = 
	`dhdsdio_membyãs
(
bus
, 
FALSE
,

2915 
sdpcm_sh¨ed
.
å≠_addr
,

2916 (
uöt8
*)&
å
, (
å≠_t
))) < 0)

2917 
d⁄e
;

2919 
	`bcm_b¥ötf
(&
°rbuf
,

2924 
	`…oh32
(
å
.
ty≥
),Ütoh32—r.
ïc
),Ütoh32—r.
˝§
),Ütoh32—r.
•§
),

2925 
	`…oh32
(
å
.
r13
),Ütoh32—r.
r14
),Ütoh32—r.
pc
),

2926 
	`…oh32
(
sdpcm_sh¨ed
.
å≠_addr
),

2927 
	`…oh32
(
å
.
r0
),Ütoh32—r.
r1
),Ütoh32—r.
r2
),Ütoh32—r.
r3
),

2928 
	`…oh32
(
å
.
r4
),Ütoh32—r.
r5
),Ütoh32—r.
r6
),Ütoh32—r.
r7
));

2930 
addr
 = 
sdpcm_sh¨ed
.
c⁄sﬁe_addr
 + 
	`OFFSETOF
(
hndπe_c⁄s_t
, 
log
);

2931 i‡((
rv
 = 
	`dhdsdio_membyãs
(
bus
, 
FALSE
, 
addr
,

2932 (
uöt8
 *)&
c⁄sﬁe_±r
, (console_ptr))) < 0)

2933 
¥ötbuf
;

2935 
addr
 = 
sdpcm_sh¨ed
.
c⁄sﬁe_addr
 + 
	`OFFSETOF
(
hndπe_c⁄s_t
, 
log
.
buf_size
);

2936 i‡((
rv
 = 
	`dhdsdio_membyãs
(
bus
, 
FALSE
, 
addr
,

2937 (
uöt8
 *)&
c⁄sﬁe_size
, (console_size))) < 0)

2938 
¥ötbuf
;

2940 
addr
 = 
sdpcm_sh¨ed
.
c⁄sﬁe_addr
 + 
	`OFFSETOF
(
hndπe_c⁄s_t
, 
log
.
idx
);

2941 i‡((
rv
 = 
	`dhdsdio_membyãs
(
bus
, 
FALSE
, 
addr
,

2942 (
uöt8
 *)&
c⁄sﬁe_ödex
, (console_index))) < 0)

2943 
¥ötbuf
;

2945 
c⁄sﬁe_±r
 = 
	`…oh32
(console_ptr);

2946 
c⁄sﬁe_size
 = 
	`…oh32
(console_size);

2947 
c⁄sﬁe_ödex
 = 
	`…oh32
(console_index);

2949 i‡(
c⁄sﬁe_size
 > 
CONSOLE_BUFFER_MAX
 ||

2950 !(
c⁄sﬁe_buf„r
 = 
	`MALLOC
(
bus
->
dhd
->
osh
, 
c⁄sﬁe_size
)))

2951 
¥ötbuf
;

2953 i‡((
rv
 = 
	`dhdsdio_membyãs
(
bus
, 
FALSE
, 
c⁄sﬁe_±r
,

2954 (
uöt8
 *)
c⁄sﬁe_buf„r
, 
c⁄sﬁe_size
)) < 0)

2955 
¥ötbuf
;

2957 
i
 = 0, 
n
 = 0; i < 
c⁄sﬁe_size
; i +=Ç + 1) {

2958 
n
 = 0;Ç < 
CONSOLE_LINE_MAX
 - 2;Ç++) {

2959 
ch
 = 
c⁄sﬁe_buf„r
[(
c⁄sﬁe_ödex
 + 
i
 + 
n
Ë% 
c⁄sﬁe_size
];

2960 i‡(
ch
 == '\n')

2962 
löe
[
n
] = 
ch
;

2966 i‡(
n
 > 0) {

2967 i‡(
löe
[
n
 - 1] == '\r')

2968 
n
--;

2969 
löe
[
n
] = 0;

2975 i‡(
dhd_msg_Àvñ
 & 
DHD_ERROR_VAL
)

2976 
	`¥ötf
("CONSOLE: %s\n", 
löe
);

2982 
¥ötbuf
:

2983 i‡(
sdpcm_sh¨ed
.
Êags
 & (
SDPCM_SHARED_ASSERT
 | 
SDPCM_SHARED_TRAP
)) {

2984 
	`DHD_ERROR
(("%s: %s\n", 
__FUNCTION__
, 
°rbuf
.
‹igbuf
));

2988 
d⁄e
:

2989 i‡(
mbuf„r
)

2990 
	`MFREE
(
bus
->
dhd
->
osh
, 
mbuf„r
, 
msize
);

2991 i‡(
°r
)

2992 
	`MFREE
(
bus
->
dhd
->
osh
, 
°r
, 
max°æí
);

2993 i‡(
c⁄sﬁe_buf„r
)

2994 
	`MFREE
(
bus
->
dhd
->
osh
, 
c⁄sﬁe_buf„r
, 
c⁄sﬁe_size
);

2996  
bcmîr‹
;

2997 
	}
}

3002 
	$dhdsdio_dow∆ﬂdv¨s
(
dhd_bus_t
 *
bus
, *
¨g
, 
Àn
)

3004 
bcmîr‹
 = 
BCME_OK
;

3006 
	`DHD_TRACE
(("%s: E¡î\n", 
__FUNCTION__
));

3009 i‡(
bus
->
dhd
->
up
) {

3010 
bcmîr‹
 = 
BCME_NOTDOWN
;

3011 
îr
;

3013 i‡(!
Àn
) {

3014 
bcmîr‹
 = 
BCME_BUFTOOSHORT
;

3015 
îr
;

3019 i‡(
bus
->
v¨s
)

3020 
	`MFREE
(
bus
->
dhd
->
osh
, bus->
v¨s
, bus->
v¨sz
);

3022 
bus
->
v¨s
 = 
	`MALLOC
(bus->
dhd
->
osh
, 
Àn
);

3023 
bus
->
v¨sz
 = bus->
v¨s
 ? 
Àn
 : 0;

3024 i‡(
bus
->
v¨s
 =
NULL
) {

3025 
bcmîr‹
 = 
BCME_NOMEM
;

3026 
îr
;

3030 
	`bc›y
(
¨g
, 
bus
->
v¨s
, bus->
v¨sz
);

3031 
îr
:

3032  
bcmîr‹
;

3033 
	}
}

3035 #ifde‡
DHD_DEBUG


3037 
	#CC_PLL_CHIPCTRL_SERIAL_ENAB
 (1 << 24)

	)

3038 
	#CC_CHIPCTRL_JTAG_SEL
 (1 << 3)

	)

3039 
	#CC_CHIPCTRL_GPIO_SEL
 (0x3)

	)

3040 
	#CC_PLL_CHIPCTRL_SERIAL_ENAB_4334
 (1 << 28)

	)

3043 
	$dhd_£rülc⁄sﬁe
(
dhd_bus_t
 *
bus
, 
boﬁ
 
£t
, boﬁ 
íabÀ
, *
bcmîr‹
)

3045 
öt_vÆ
;

3046 
uöt32
 
addr
, 
d©a
, 
u¨t_íab
 = 0;

3047 
uöt32
 
jèg_£l
 = 
CC_CHIPCTRL_JTAG_SEL
;

3048 
uöt32
 
gpio_£l
 = 
CC_CHIPCTRL_GPIO_SEL
;

3050 
addr
 = 
SI_ENUM_BASE
 + 
	`OFFSETOF
(
chù¸egs_t
, 
chùc⁄åﬁ_addr
);

3051 
d©a
 = 
SI_ENUM_BASE
 + 
	`OFFSETOF
(
chù¸egs_t
, 
chùc⁄åﬁ_d©a
);

3052 *
bcmîr‹
 = 0;

3054 
	`bcmsdh_ªg_wrôe
(
bus
->
sdh
, 
addr
, 4, 1);

3055 i‡(
	`bcmsdh_ªgÁû
(
bus
->
sdh
)) {

3056 *
bcmîr‹
 = 
BCME_SDIO_ERROR
;

3059 
öt_vÆ
 = 
	`bcmsdh_ªg_ªad
(
bus
->
sdh
, 
d©a
, 4);

3060 i‡(
	`bcmsdh_ªgÁû
(
bus
->
sdh
)) {

3061 *
bcmîr‹
 = 
BCME_SDIO_ERROR
;

3064 i‡(
bus
->
sih
->
chù
 =
BCM4330_CHIP_ID
) {

3065 
u¨t_íab
 = 
CC_PLL_CHIPCTRL_SERIAL_ENAB
;

3067 i‡(
bus
->
sih
->
chù
 =
BCM4334_CHIP_ID
 ||

3068 
bus
->
sih
->
chù
 =
BCM43341_CHIP_ID
) {

3069 i‡(
íabÀ
) {

3071 
öt_vÆ
 &~
gpio_£l
;

3072 
öt_vÆ
 |
jèg_£l
;

3074 
öt_vÆ
 |
gpio_£l
;

3075 
öt_vÆ
 &~
jèg_£l
;

3077 
u¨t_íab
 = 
CC_PLL_CHIPCTRL_SERIAL_ENAB_4334
;

3080 i‡(!
£t
)

3081  (
öt_vÆ
 & 
u¨t_íab
);

3082 i‡(
íabÀ
)

3083 
öt_vÆ
 |
u¨t_íab
;

3085 
öt_vÆ
 &~
u¨t_íab
;

3086 
	`bcmsdh_ªg_wrôe
(
bus
->
sdh
, 
d©a
, 4, 
öt_vÆ
);

3087 i‡(
	`bcmsdh_ªgÁû
(
bus
->
sdh
)) {

3088 *
bcmîr‹
 = 
BCME_SDIO_ERROR
;

3091 i‡(
bus
->
sih
->
chù
 =
BCM4330_CHIP_ID
) {

3092 
uöt32
 
chùc⁄åﬁ
;

3093 
addr
 = 
SI_ENUM_BASE
 + 
	`OFFSETOF
(
chù¸egs_t
, 
chùc⁄åﬁ
);

3094 
chùc⁄åﬁ
 = 
	`bcmsdh_ªg_ªad
(
bus
->
sdh
, 
addr
, 4);

3095 
chùc⁄åﬁ
 &~
jèg_£l
;

3096 i‡(
íabÀ
) {

3097 
chùc⁄åﬁ
 |
jèg_£l
;

3098 
chùc⁄åﬁ
 &~
gpio_£l
;

3100 
	`bcmsdh_ªg_wrôe
(
bus
->
sdh
, 
addr
, 4, 
chùc⁄åﬁ
);

3103  (
öt_vÆ
 & 
u¨t_íab
);

3104 
	}
}

3108 
	$dhdsdio_doiov¨
(
dhd_bus_t
 *
bus
, c⁄° 
bcm_iov¨_t
 *
vi
, 
uöt32
 
a˘i⁄id
, c⁄° *
«me
,

3109 *
∑øms
, 
∂í
, *
¨g
, 
Àn
, 
vÆ_size
)

3111 
bcmîr‹
 = 0;

3112 
öt32
 
öt_vÆ
 = 0;

3113 
boﬁ
 
boﬁ_vÆ
 = 0;

3115 
	`DHD_TRACE
(("%s: Enter,áction %dÇame %sÖarams %pÖlen %dárg %pÜen %d val_size %d\n",

3116 
__FUNCTION__
, 
a˘i⁄id
, 
«me
, 
∑øms
, 
∂í
, 
¨g
, 
Àn
, 
vÆ_size
));

3118 i‡((
bcmîr‹
 = 
	`bcm_iov¨_Àncheck
(
vi
, 
¨g
, 
Àn
, 
	`IOV_ISSET
(
a˘i⁄id
))) != 0)

3119 
exô
;

3121 i‡(
∂í
 >()(
öt_vÆ
))

3122 
	`bc›y
(
∑øms
, &
öt_vÆ
, (int_val));

3124 
boﬁ_vÆ
 = (
öt_vÆ
 !0Ë? 
TRUE
 : 
FALSE
;

3128 
	`dhd_os_sdlock
(
bus
->
dhd
);

3131 i‡(
bus
->
dhd
->
d⁄gÀ_ª£t
 && !(
a˘i⁄id
 =
	`IOV_SVAL
(
IOV_DEVRESET
) ||

3132 
a˘i⁄id
 =
	`IOV_GVAL
(
IOV_DEVRESET
))) {

3133 
bcmîr‹
 = 
BCME_NOTREADY
;

3134 
exô
;

3140 i‡((
vi
->
v¨id
 =
IOV_KSO
Ë&& (
	`IOV_ISSET
(
a˘i⁄id
))) {

3141 
	`dhdsdio_˛k_kso_iov¨
(
bus
, 
boﬁ_vÆ
);

3142 
exô
;

3143 } i‡((
vi
->
v¨id
 =
IOV_DEVSLEEP
Ë&& (
	`IOV_ISSET
(
a˘i⁄id
))) {

3145 
	`dhdsdio_˛k_dev¶ìp_iov¨
(
bus
, 
boﬁ_vÆ
);

3146 i‡(!
	`SLPAUTO_ENAB
(
bus
Ë&& (
boﬁ_vÆ
 =
FALSE
Ë&& (bus->
ùíd
)) {

3147 
	`DHD_ERROR
(("INTÖending in devsleep 1, dpc_sched: %d\n",

3148 
bus
->
dpc_sched
));

3149 i‡(!
bus
->
dpc_sched
) {

3150 
bus
->
dpc_sched
 = 
TRUE
;

3151 
	`dhd_sched_dpc
(
bus
->
dhd
);

3155 
exô
;

3159 i‡(
vi
->
v¨id
 =
IOV_SLEEP
) {

3160 i‡(
	`IOV_ISSET
(
a˘i⁄id
)) {

3161 
bcmîr‹
 = 
	`dhdsdio_bus¶ìp
(
bus
, 
boﬁ_vÆ
);

3163 
öt_vÆ
 = (
öt32
)
bus
->
¶ìpög
;

3164 
	`bc›y
(&
öt_vÆ
, 
¨g
, 
vÆ_size
);

3166 
exô
;

3170 i‡(!
bus
->
dhd
->
d⁄gÀ_ª£t
) {

3171 
	`BUS_WAKE
(
bus
);

3172 
	`dhdsdio_˛k˘l
(
bus
, 
CLK_AVAIL
, 
FALSE
);

3175 
a˘i⁄id
) {

3176 
	`IOV_GVAL
(
IOV_INTR
):

3177 
öt_vÆ
 = (
öt32
)
bus
->
öå
;

3178 
	`bc›y
(&
öt_vÆ
, 
¨g
, 
vÆ_size
);

3181 
	`IOV_SVAL
(
IOV_INTR
):

3182 
bus
->
öå
 = 
boﬁ_vÆ
;

3183 
bus
->
ötdis
 = 
FALSE
;

3184 i‡(
bus
->
dhd
->
up
) {

3185 i‡(
bus
->
öå
) {

3186 
	`DHD_INTR
(("%s:É«bÀ SDIO devi˚ i¡îru±s\n", 
__FUNCTION__
));

3187 
	`bcmsdh_öå_íabÀ
(
bus
->
sdh
);

3189 
	`DHD_INTR
(("%s: dißbÀ SDIO i¡îru±s\n", 
__FUNCTION__
));

3190 
	`bcmsdh_öå_dißbÀ
(
bus
->
sdh
);

3195 
	`IOV_GVAL
(
IOV_POLLRATE
):

3196 
öt_vÆ
 = (
öt32
)
bus
->
pﬁÃ©e
;

3197 
	`bc›y
(&
öt_vÆ
, 
¨g
, 
vÆ_size
);

3200 
	`IOV_SVAL
(
IOV_POLLRATE
):

3201 
bus
->
pﬁÃ©e
 = (
uöt
)
öt_vÆ
;

3202 
bus
->
pﬁl
 = (bus->
pﬁÃ©e
 != 0);

3205 
	`IOV_GVAL
(
IOV_IDLETIME
):

3206 
öt_vÆ
 = 
bus
->
idÀtime
;

3207 
	`bc›y
(&
öt_vÆ
, 
¨g
, 
vÆ_size
);

3210 
	`IOV_SVAL
(
IOV_IDLETIME
):

3211 i‡((
öt_vÆ
 < 0Ë&& (öt_vÆ !
DHD_IDLE_IMMEDIATE
)) {

3212 
bcmîr‹
 = 
BCME_BADARG
;

3214 
bus
->
idÀtime
 = 
öt_vÆ
;

3218 
	`IOV_GVAL
(
IOV_IDLECLOCK
):

3219 
öt_vÆ
 = (
öt32
)
bus
->
idÀ˛ock
;

3220 
	`bc›y
(&
öt_vÆ
, 
¨g
, 
vÆ_size
);

3223 
	`IOV_SVAL
(
IOV_IDLECLOCK
):

3224 
bus
->
idÀ˛ock
 = 
öt_vÆ
;

3227 
	`IOV_GVAL
(
IOV_SD1IDLE
):

3228 
öt_vÆ
 = (
öt32
)
sd1idÀ
;

3229 
	`bc›y
(&
öt_vÆ
, 
¨g
, 
vÆ_size
);

3232 
	`IOV_SVAL
(
IOV_SD1IDLE
):

3233 
sd1idÀ
 = 
boﬁ_vÆ
;

3237 
	`IOV_SVAL
(
IOV_MEMBYTES
):

3238 
	`IOV_GVAL
(
IOV_MEMBYTES
):

3240 
uöt32
 
addªss
;

3241 
uöt
 
size
, 
dsize
;

3242 
uöt8
 *
d©a
;

3244 
boﬁ
 
£t
 = (
a˘i⁄id
 =
	`IOV_SVAL
(
IOV_MEMBYTES
));

3246 
	`ASSERT
(
∂í
 >= 2*());

3248 
addªss
 = (
uöt32
)
öt_vÆ
;

3249 
	`bc›y
((*)
∑øms
 + (
öt_vÆ
), &int_val, (int_val));

3250 
size
 = (
uöt
)
öt_vÆ
;

3253 
dsize
 = 
£t
 ? 
∂í
 - (2 * ()Ë: 
Àn
;

3254 i‡(
dsize
 < 
size
) {

3255 
	`DHD_ERROR
(("%s:Érror on %s membytes,áddr 0x%08x size %d dsize %d\n",

3256 
__FUNCTION__
, (
£t
 ? "£t" : "gë"), 
addªss
, 
size
, 
dsize
));

3257 
bcmîr‹
 = 
BCME_BADARG
;

3261 
	`DHD_INFO
(("%s: Reque°Åÿ%†%d byã†©áddªs†0x%08x\n", 
__FUNCTION__
,

3262 (
£t
 ? "wrôe" : "ªad"), 
size
, 
addªss
));

3265 i‡((
bus
->
‹ig_ømsize
) &&

3266 ((
addªss
 > 
bus
->
‹ig_ømsize
Ë|| (addªs†+ 
size
 > bus->orig_ramsize)))

3268 
uöt8
 
íabÀ
, 
¥Ÿe˘
, 
ªm≠
;

3269 
	`si_socdevøm
(
bus
->
sih
, 
FALSE
, &
íabÀ
, &
¥Ÿe˘
, &
ªm≠
);

3270 i‡(!
íabÀ
 || 
¥Ÿe˘
) {

3271 
	`DHD_ERROR
(("%s:Ñamsize 0x%08x doesn't have %d bytesát 0x%08x\n",

3272 
__FUNCTION__
, 
bus
->
‹ig_ømsize
, 
size
, 
addªss
));

3273 
	`DHD_ERROR
(("%s: socramÉnable %d,Örotect %d\n",

3274 
__FUNCTION__
, 
íabÀ
, 
¥Ÿe˘
));

3275 
bcmîr‹
 = 
BCME_BADARG
;

3279 i‡(!
	`REMAP_ENAB
(
bus
Ë&& (
addªss
 >
SOCDEVRAM_ARM_ADDR
)) {

3280 
uöt32
 
devømsize
 = 
	`si_socdevøm_size
(
bus
->
sih
);

3281 i‡((
addªss
 < 
SOCDEVRAM_ARM_ADDR
) ||

3282 (
addªss
 + 
size
 > (
SOCDEVRAM_ARM_ADDR
 + 
devømsize
))) {

3283 
	`DHD_ERROR
(("%s: badáddress 0x%08x, size 0x%08x\n",

3284 
__FUNCTION__
, 
addªss
, 
size
));

3285 
	`DHD_ERROR
(("%s: socramÑange 0x%08x,size 0x%08x\n",

3286 
__FUNCTION__
, 
SOCDEVRAM_ARM_ADDR
, 
devømsize
));

3287 
bcmîr‹
 = 
BCME_BADARG
;

3291 
addªss
 -
SOCDEVRAM_ARM_ADDR
;

3292 
addªss
 +
SOCDEVRAM_BP_ADDR
;

3293 
	`DHD_INFO
(("%s: RequestÅo %s %d bytes @ Mappedáddress 0x%08x\n",

3294 
__FUNCTION__
, (
£t
 ? "wrôe" : "ªad"), 
size
, 
addªss
));

3295 } i‡(
	`REMAP_ENAB
(
bus
Ë&& 
	`REMAP_ISADDR
(bus, 
addªss
Ë&& 
ªm≠
) {

3299 
	`DHD_ERROR
(("%s: NeedÅo disableÑemap foráddress 0x%08x\n",

3300 
__FUNCTION__
, 
addªss
));

3301 
bcmîr‹
 = 
BCME_ERROR
;

3307 
d©a
 = 
£t
 ? (
uöt8
*)
∑øms
 + 2 * (): (uöt8*)
¨g
;

3310 
bcmîr‹
 = 
	`dhdsdio_membyãs
(
bus
, 
£t
, 
addªss
, 
d©a
, 
size
);

3315 
	`IOV_GVAL
(
IOV_MEMSIZE
):

3316 
öt_vÆ
 = (
öt32
)
bus
->
ømsize
;

3317 
	`bc›y
(&
öt_vÆ
, 
¨g
, 
vÆ_size
);

3320 
	`IOV_GVAL
(
IOV_SDIOD_DRIVE
):

3321 
öt_vÆ
 = (
öt32
)
dhd_sdiod_drive_°ªngth
;

3322 
	`bc›y
(&
öt_vÆ
, 
¨g
, 
vÆ_size
);

3325 
	`IOV_SVAL
(
IOV_SDIOD_DRIVE
):

3326 
dhd_sdiod_drive_°ªngth
 = 
öt_vÆ
;

3327 
	`si_sdiod_drive_°ªngth_öô
(
bus
->
sih
, bus->
dhd
->
osh
, 
dhd_sdiod_drive_°ªngth
);

3330 
	`IOV_SVAL
(
IOV_SET_DOWNLOAD_STATE
):

3331 
bcmîr‹
 = 
	`dhdsdio_dow∆ﬂd_°©e
(
bus
, 
boﬁ_vÆ
);

3334 
	`IOV_SVAL
(
IOV_SOCRAM_STATE
):

3335 
bcmîr‹
 = 
	`dhdsdio_dow∆ﬂd_°©e
(
bus
, 
boﬁ_vÆ
);

3338 
	`IOV_SVAL
(
IOV_VARS
):

3339 
bcmîr‹
 = 
	`dhdsdio_dow∆ﬂdv¨s
(
bus
, 
¨g
, 
Àn
);

3342 
	`IOV_GVAL
(
IOV_READAHEAD
):

3343 
öt_vÆ
 = (
öt32
)
dhd_ªadahód
;

3344 
	`bc›y
(&
öt_vÆ
, 
¨g
, 
vÆ_size
);

3347 
	`IOV_SVAL
(
IOV_READAHEAD
):

3348 i‡(
boﬁ_vÆ
 && !
dhd_ªadahód
)

3349 
bus
->
√xéí
 = 0;

3350 
dhd_ªadahód
 = 
boﬁ_vÆ
;

3353 
	`IOV_GVAL
(
IOV_SDRXCHAIN
):

3354 
öt_vÆ
 = (
öt32
)
bus
->
u£_rxchaö
;

3355 
	`bc›y
(&
öt_vÆ
, 
¨g
, 
vÆ_size
);

3358 
	`IOV_SVAL
(
IOV_SDRXCHAIN
):

3359 i‡(
boﬁ_vÆ
 && !
bus
->
sd_rxchaö
)

3360 
bcmîr‹
 = 
BCME_UNSUPPORTED
;

3362 
bus
->
u£_rxchaö
 = 
boﬁ_vÆ
;

3364 
	`IOV_GVAL
(
IOV_ALIGNCTL
):

3365 
öt_vÆ
 = (
öt32
)
dhd_Æign˘l
;

3366 
	`bc›y
(&
öt_vÆ
, 
¨g
, 
vÆ_size
);

3369 
	`IOV_SVAL
(
IOV_ALIGNCTL
):

3370 
dhd_Æign˘l
 = 
boﬁ_vÆ
;

3373 
	`IOV_GVAL
(
IOV_SDALIGN
):

3374 
öt_vÆ
 = 
DHD_SDALIGN
;

3375 
	`bc›y
(&
öt_vÆ
, 
¨g
, 
vÆ_size
);

3378 #ifde‡
DHD_DEBUG


3379 
	`IOV_GVAL
(
IOV_VARS
):

3380 i‡(
bus
->
v¨sz
 < (
uöt
)
Àn
)

3381 
	`bc›y
(
bus
->
v¨s
, 
¨g
, bus->
v¨sz
);

3383 
bcmîr‹
 = 
BCME_BUFTOOSHORT
;

3387 #ifde‡
DHD_DEBUG


3388 
	`IOV_GVAL
(
IOV_SDREG
):

3390 
sdªg_t
 *
sd_±r
;

3391 
uöt32
 
addr
, 
size
;

3393 
sd_±r
 = (
sdªg_t
 *)
∑øms
;

3395 
addr
 = (
uöçå
)
bus
->
ªgs
 + 
sd_±r
->
off£t
;

3396 
size
 = 
sd_±r
->
func
;

3397 
öt_vÆ
 = (
öt32
)
	`bcmsdh_ªg_ªad
(
bus
->
sdh
, 
addr
, 
size
);

3398 i‡(
	`bcmsdh_ªgÁû
(
bus
->
sdh
))

3399 
bcmîr‹
 = 
BCME_SDIO_ERROR
;

3400 
	`bc›y
(&
öt_vÆ
, 
¨g
, (
öt32
));

3404 
	`IOV_SVAL
(
IOV_SDREG
):

3406 
sdªg_t
 *
sd_±r
;

3407 
uöt32
 
addr
, 
size
;

3409 
sd_±r
 = (
sdªg_t
 *)
∑øms
;

3411 
addr
 = (
uöçå
)
bus
->
ªgs
 + 
sd_±r
->
off£t
;

3412 
size
 = 
sd_±r
->
func
;

3413 
	`bcmsdh_ªg_wrôe
(
bus
->
sdh
, 
addr
, 
size
, 
sd_±r
->
vÆue
);

3414 i‡(
	`bcmsdh_ªgÁû
(
bus
->
sdh
))

3415 
bcmîr‹
 = 
BCME_SDIO_ERROR
;

3420 
	`IOV_GVAL
(
IOV_SBREG
):

3422 
sdªg_t
 
sdªg
;

3423 
uöt32
 
addr
, 
size
;

3425 
	`bc›y
(
∑øms
, &
sdªg
, (sdreg));

3427 
addr
 = 
SI_ENUM_BASE
 + 
sdªg
.
off£t
;

3428 
size
 = 
sdªg
.
func
;

3429 
öt_vÆ
 = (
öt32
)
	`bcmsdh_ªg_ªad
(
bus
->
sdh
, 
addr
, 
size
);

3430 i‡(
	`bcmsdh_ªgÁû
(
bus
->
sdh
))

3431 
bcmîr‹
 = 
BCME_SDIO_ERROR
;

3432 
	`bc›y
(&
öt_vÆ
, 
¨g
, (
öt32
));

3436 
	`IOV_SVAL
(
IOV_SBREG
):

3438 
sdªg_t
 
sdªg
;

3439 
uöt32
 
addr
, 
size
;

3441 
	`bc›y
(
∑øms
, &
sdªg
, (sdreg));

3443 
addr
 = 
SI_ENUM_BASE
 + 
sdªg
.
off£t
;

3444 
size
 = 
sdªg
.
func
;

3445 
	`bcmsdh_ªg_wrôe
(
bus
->
sdh
, 
addr
, 
size
, 
sdªg
.
vÆue
);

3446 i‡(
	`bcmsdh_ªgÁû
(
bus
->
sdh
))

3447 
bcmîr‹
 = 
BCME_SDIO_ERROR
;

3451 
	`IOV_GVAL
(
IOV_SDCIS
):

3453 *(*)
¨g
 = 0;

3455 
	`bcm°rˇt
(
¨g
, "\nFunc 0\n");

3456 
	`bcmsdh_cis_ªad
(
bus
->
sdh
, 0x10, (
uöt8
 *)
¨g
 + 
	`°æí
◊rg), 
SBSDIO_CIS_SIZE_LIMIT
);

3457 
	`bcm°rˇt
(
¨g
, "\nFunc 1\n");

3458 
	`bcmsdh_cis_ªad
(
bus
->
sdh
, 0x11, (
uöt8
 *)
¨g
 + 
	`°æí
◊rg), 
SBSDIO_CIS_SIZE_LIMIT
);

3459 
	`bcm°rˇt
(
¨g
, "\nFunc 2\n");

3460 
	`bcmsdh_cis_ªad
(
bus
->
sdh
, 0x12, (
uöt8
 *)
¨g
 + 
	`°æí
◊rg), 
SBSDIO_CIS_SIZE_LIMIT
);

3464 
	`IOV_GVAL
(
IOV_FORCEEVEN
):

3465 
öt_vÆ
 = (
öt32
)
f‹˚Æign
;

3466 
	`bc›y
(&
öt_vÆ
, 
¨g
, 
vÆ_size
);

3469 
	`IOV_SVAL
(
IOV_FORCEEVEN
):

3470 
f‹˚Æign
 = 
boﬁ_vÆ
;

3473 
	`IOV_GVAL
(
IOV_TXBOUND
):

3474 
öt_vÆ
 = (
öt32
)
dhd_txbound
;

3475 
	`bc›y
(&
öt_vÆ
, 
¨g
, 
vÆ_size
);

3478 
	`IOV_SVAL
(
IOV_TXBOUND
):

3479 
dhd_txbound
 = (
uöt
)
öt_vÆ
;

3482 
	`IOV_GVAL
(
IOV_RXBOUND
):

3483 
öt_vÆ
 = (
öt32
)
dhd_rxbound
;

3484 
	`bc›y
(&
öt_vÆ
, 
¨g
, 
vÆ_size
);

3487 
	`IOV_SVAL
(
IOV_RXBOUND
):

3488 
dhd_rxbound
 = (
uöt
)
öt_vÆ
;

3491 
	`IOV_GVAL
(
IOV_TXMINMAX
):

3492 
öt_vÆ
 = (
öt32
)
dhd_txmömax
;

3493 
	`bc›y
(&
öt_vÆ
, 
¨g
, 
vÆ_size
);

3496 
	`IOV_SVAL
(
IOV_TXMINMAX
):

3497 
dhd_txmömax
 = (
uöt
)
öt_vÆ
;

3500 
	`IOV_GVAL
(
IOV_SERIALCONS
):

3501 
öt_vÆ
 = 
	`dhd_£rülc⁄sﬁe
(
bus
, 
FALSE
, 0, &
bcmîr‹
);

3502 i‡(
bcmîr‹
 != 0)

3505 
	`bc›y
(&
öt_vÆ
, 
¨g
, 
vÆ_size
);

3508 
	`IOV_SVAL
(
IOV_SERIALCONS
):

3509 
	`dhd_£rülc⁄sﬁe
(
bus
, 
TRUE
, 
boﬁ_vÆ
, &
bcmîr‹
);

3517 #ifde‡
SDTEST


3518 
	`IOV_GVAL
(
IOV_EXTLOOP
):

3519 
öt_vÆ
 = (
öt32
)
bus
->
ext_lo›
;

3520 
	`bc›y
(&
öt_vÆ
, 
¨g
, 
vÆ_size
);

3523 
	`IOV_SVAL
(
IOV_EXTLOOP
):

3524 
bus
->
ext_lo›
 = 
boﬁ_vÆ
;

3527 
	`IOV_GVAL
(
IOV_PKTGEN
):

3528 
bcmîr‹
 = 
	`dhdsdio_pktgí_gë
(
bus
, 
¨g
);

3531 
	`IOV_SVAL
(
IOV_PKTGEN
):

3532 
bcmîr‹
 = 
	`dhdsdio_pktgí_£t
(
bus
, 
¨g
);

3536 #i‡
	`deföed
(
SDIO_CRC_ERROR_FIX
)

3537 
	`IOV_GVAL
(
IOV_WATERMARK
):

3538 
öt_vÆ
 = (
öt32
)
w©îm¨k
;

3539 
	`bc›y
(&
öt_vÆ
, 
¨g
, 
vÆ_size
);

3542 
	`IOV_SVAL
(
IOV_WATERMARK
):

3543 
w©îm¨k
 = (
uöt
)
öt_vÆ
;

3544 
w©îm¨k
 = (w©îm¨k > 
SBSDIO_WATERMARK_MASK
) ? SBSDIO_WATERMARK_MASK : watermark;

3545 
	`DHD_ERROR
(("Sëtög w©îm¨ká†0x%x.\n", 
w©îm¨k
));

3546 
	`bcmsdh_cfg_wrôe
(
bus
->
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_WATERMARK
, (
uöt8
)
w©îm¨k
, 
NULL
);

3549 
	`IOV_GVAL
(
IOV_MESBUSYCTRL
):

3550 
öt_vÆ
 = (
öt32
)
mesbusy˘æ
;

3551 
	`bc›y
(&
öt_vÆ
, 
¨g
, 
vÆ_size
);

3554 
	`IOV_SVAL
(
IOV_MESBUSYCTRL
):

3555 
mesbusy˘æ
 = (
uöt
)
öt_vÆ
;

3556 
mesbusy˘æ
 = (mesbusy˘æ > 
SBSDIO_MESBUSYCTRL_MASK
)

3557 ? 
SBSDIO_MESBUSYCTRL_MASK
 : 
mesbusy˘æ
;

3558 
	`DHD_ERROR
(("Sëtög mesbusy˘æá†0x%x.\n", 
mesbusy˘æ
));

3559 
	`bcmsdh_cfg_wrôe
(
bus
->
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_FUNC1_MESBUSYCTRL
,

3560 ((
uöt8
)
mesbusy˘æ
 | 0x80), 
NULL
);

3564 
	`IOV_GVAL
(
IOV_DONGLEISOLATION
):

3565 
öt_vÆ
 = 
bus
->
dhd
->
d⁄gÀ_isﬁ©i⁄
;

3566 
	`bc›y
(&
öt_vÆ
, 
¨g
, 
vÆ_size
);

3569 
	`IOV_SVAL
(
IOV_DONGLEISOLATION
):

3570 
bus
->
dhd
->
d⁄gÀ_isﬁ©i⁄
 = 
boﬁ_vÆ
;

3573 
	`IOV_SVAL
(
IOV_DEVRESET
):

3574 
	`DHD_TRACE
(("%s: Called set IOV_DEVRESET=%d dongle_reset=%d busstate=%d\n",

3575 
__FUNCTION__
, 
boﬁ_vÆ
, 
bus
->
dhd
->
d⁄gÀ_ª£t
,

3576 
bus
->
dhd
->
bus°©e
));

3578 
	`ASSERT
(
bus
->
dhd
->
osh
);

3581 
	`dhd_bus_devª£t
(
bus
->
dhd
, (
uöt8
)
boﬁ_vÆ
);

3584 #ifde‡
SOFTAP


3585 
	`IOV_GVAL
(
IOV_FWPATH
):

3587 
uöt32
 
fw_∑th_Àn
;

3589 
fw_∑th_Àn
 = 
	`°æí
(
bus
->
fw_∑th
);

3590 
	`DHD_INFO
(("[so·≠] gë fw∑th,Ü=%d\n", 
Àn
));

3592 i‡(
fw_∑th_Àn
 > 
Àn
-1) {

3593 
bcmîr‹
 = 
BCME_BUFTOOSHORT
;

3597 i‡(
fw_∑th_Àn
) {

3598 
	`bc›y
(
bus
->
fw_∑th
, 
¨g
, 
fw_∑th_Àn
);

3599 ((
uch¨
*)
¨g
)[
fw_∑th_Àn
] = 0;

3604 
	`IOV_SVAL
(
IOV_FWPATH
):

3605 
	`DHD_INFO
(("[so·≠] së fw∑th, idx=%d\n", 
öt_vÆ
));

3607 
öt_vÆ
) {

3609 
bus
->
fw_∑th
 = fw_path;

3612 
bus
->
fw_∑th
 = 
fw_∑th2
;

3615 
bcmîr‹
 = 
BCME_BADARG
;

3619 
	`DHD_INFO
(("[so·≠]Çew fwÖ©h: %s\n", (
bus
->
fw_∑th
[0] ? bus->fw_path : "NULL")));

3623 
	`IOV_GVAL
(
IOV_DEVRESET
):

3624 
	`DHD_TRACE
(("%s: CÆÀd gë IOV_DEVRESET\n", 
__FUNCTION__
));

3627 
öt_vÆ
 = (
boﬁ
Ë
bus
->
dhd
->
d⁄gÀ_ª£t
;

3628 
	`bc›y
(&
öt_vÆ
, 
¨g
, 
vÆ_size
);

3632 
	`IOV_GVAL
(
IOV_KSO
):

3633 
öt_vÆ
 = 
	`dhdsdio_¶ìpc§_gë
(
bus
);

3634 
	`bc›y
(&
öt_vÆ
, 
¨g
, 
vÆ_size
);

3637 
	`IOV_GVAL
(
IOV_DEVCAP
):

3638 
öt_vÆ
 = 
	`dhdsdio_devˇp_gë
(
bus
);

3639 
	`bc›y
(&
öt_vÆ
, 
¨g
, 
vÆ_size
);

3642 
	`IOV_SVAL
(
IOV_DEVCAP
):

3643 
	`dhdsdio_devˇp_£t
(
bus
, (
uöt8
Ë
öt_vÆ
);

3646 #ifde‡
BCMSDIOH_TXGLOM


3647 
	`IOV_GVAL
(
IOV_TXGLOMSIZE
):

3648 
öt_vÆ
 = (
öt32
)
bus
->
glomsize
;

3649 
	`bc›y
(&
öt_vÆ
, 
¨g
, 
vÆ_size
);

3652 
	`IOV_SVAL
(
IOV_TXGLOMSIZE
):

3653 i‡(
öt_vÆ
 > 
SDPCM_MAXGLOM_SIZE
) {

3654 
bcmîr‹
 = 
BCME_ERROR
;

3656 
bus
->
glomsize
 = (
uöt
)
öt_vÆ
;

3659 
	`IOV_GVAL
(
IOV_TXGLOMMODE
):

3660 
öt_vÆ
 = (
öt32
)
bus
->
glom_mode
;

3661 
	`bc›y
(&
öt_vÆ
, 
¨g
, 
vÆ_size
);

3664 
	`IOV_SVAL
(
IOV_TXGLOMMODE
):

3665 i‡((
öt_vÆ
 !
SDPCM_TXGLOM_CPY
Ë&& (öt_vÆ !
SDPCM_TXGLOM_MDESC
)) {

3666 
bcmîr‹
 = 
BCME_RANGE
;

3668 i‡((
bus
->
glom_mode
 = 
	`bcmsdh_£t_mode
(bus->
sdh
, (
uöt
)
öt_vÆ
)) != int_val)

3669 
bcmîr‹
 = 
BCME_ERROR
;

3674 
bcmîr‹
 = 
BCME_UNSUPPORTED
;

3678 
exô
:

3679 i‡((
bus
->
idÀtime
 =
DHD_IDLE_IMMEDIATE
Ë&& !bus->
dpc_sched
) {

3680 
bus
->
a˘ivôy
 = 
FALSE
;

3681 
	`dhdsdio_˛k˘l
(
bus
, 
CLK_NONE
, 
TRUE
);

3684 
	`dhd_os_sdu∆ock
(
bus
->
dhd
);

3686  
bcmîr‹
;

3687 
	}
}

3690 
	$dhdsdio_wrôe_v¨s
(
dhd_bus_t
 *
bus
)

3692 
bcmîr‹
 = 0;

3693 
uöt32
 
v¨size
, 
phys_size
;

3694 
uöt32
 
v¨addr
;

3695 
uöt8
 *
vbuf„r
;

3696 
uöt32
 
v¨sizew
;

3697 #ifde‡
DHD_DEBUG


3698 
uöt8
 *
nvøm_uœºay
;

3702 
v¨size
 = 
bus
->
v¨sz
 ? 
	`ROUNDUP
(bus->varsz, 4) : 0;

3703 
v¨addr
 = (
bus
->
ømsize
 - 4Ë- 
v¨size
;

3705 
v¨addr
 +
bus
->
d⁄gÀ_øm_ba£
;

3707 i‡(
bus
->
v¨s
) {

3708 i‡((
bus
->
sih
->
busc‹ëy≥
 =
SDIOD_CORE_ID
Ë&& (bus->
sdpcmªv
 == 7)) {

3709 i‡(((
v¨addr
 & 0x3CË=0x3CË&& (
v¨size
 > 4)) {

3710 
	`DHD_ERROR
(("PR85623WAR inÖlace\n"));

3711 
v¨size
 += 4;

3712 
v¨addr
 -= 4;

3716 
vbuf„r
 = (
uöt8
 *)
	`MALLOC
(
bus
->
dhd
->
osh
, 
v¨size
);

3717 i‡(!
vbuf„r
)

3718  
BCME_NOMEM
;

3720 
	`bzîo
(
vbuf„r
, 
v¨size
);

3721 
	`bc›y
(
bus
->
v¨s
, 
vbuf„r
, bus->
v¨sz
);

3724 
bcmîr‹
 = 
	`dhdsdio_membyãs
(
bus
, 
TRUE
, 
v¨addr
, 
vbuf„r
, 
v¨size
);

3725 #ifde‡
DHD_DEBUG


3727 
	`DHD_INFO
(("Com∑ª NVRAM d»& ul; v¨size=%d\n", 
v¨size
));

3728 
nvøm_uœºay
 = (
uöt8
*)
	`MALLOC
(
bus
->
dhd
->
osh
, 
v¨size
);

3729 i‡(!
nvøm_uœºay
)

3730  
BCME_NOMEM
;

3733 
	`mem£t
(
nvøm_uœºay
, 0xØ, 
v¨size
);

3736 
bcmîr‹
 = 
	`dhdsdio_membyãs
(
bus
, 
FALSE
, 
v¨addr
, 
nvøm_uœºay
, 
v¨size
);

3737 i‡(
bcmîr‹
) {

3738 
	`DHD_ERROR
(("%s:Érror %d onÑeading %dÇvram bytesát 0x%08x\n",

3739 
__FUNCTION__
, 
bcmîr‹
, 
v¨size
, 
v¨addr
));

3742 i‡(
	`memcmp
(
vbuf„r
, 
nvøm_uœºay
, 
v¨size
)) {

3743 
	`DHD_ERROR
(("%s: Dow∆ﬂded NVRAM imagêi†c‹ru±ed.\n", 
__FUNCTION__
));

3745 
	`DHD_ERROR
(("%s: Download, Uploadánd compare of NVRAM succeeded.\n",

3746 
__FUNCTION__
));

3748 
	`MFREE
(
bus
->
dhd
->
osh
, 
nvøm_uœºay
, 
v¨size
);

3751 
	`MFREE
(
bus
->
dhd
->
osh
, 
vbuf„r
, 
v¨size
);

3754 
phys_size
 = 
	`REMAP_ENAB
(
bus
Ë? bus->
ømsize
 : bus->
‹ig_ømsize
;

3756 
phys_size
 +
bus
->
d⁄gÀ_øm_ba£
;

3759 
	`DHD_INFO
(("Physical memory size: %d, usable memory size: %d\n",

3760 
phys_size
, 
bus
->
ømsize
));

3761 
	`DHD_INFO
(("Varsáreát %d, orig varsize is %d\n",

3762 
v¨addr
, 
v¨size
));

3763 
v¨size
 = ((
phys_size
 - 4Ë- 
v¨addr
);

3769 i‡(
bcmîr‹
) {

3770 
v¨sizew
 = 0;

3772 
v¨sizew
 = 
v¨size
 / 4;

3773 
v¨sizew
 = (~varsizew << 16) | (varsizew & 0x0000FFFF);

3774 
v¨sizew
 = 
	`htﬁ32
(varsizew);

3777 
	`DHD_INFO
(("New v¨sizêi†%d,ÜígthÅokí=0x%08x\n", 
v¨size
, 
v¨sizew
));

3780 
bcmîr‹
 = 
	`dhdsdio_membyãs
(
bus
, 
TRUE
, (
phys_size
 - 4),

3781 (
uöt8
*)&
v¨sizew
, 4);

3783  
bcmîr‹
;

3784 
	}
}

3787 
	$dhdsdio_dow∆ﬂd_°©e
(
dhd_bus_t
 *
bus
, 
boﬁ
 
íãr
)

3789 
uöt
 
ªåõs
;

3790 
bcmîr‹
 = 0;

3791 
found¸4
 = 0;

3796 i‡(
íãr
) {

3797 
bus
->
Æp_⁄ly
 = 
TRUE
;

3799 i‡(!(
	`si_£tc‹e
(
bus
->
sih
, 
ARM7S_CORE_ID
, 0)) &&

3800 !(
	`si_£tc‹e
(
bus
->
sih
, 
ARMCM3_CORE_ID
, 0))) {

3801 i‡(
	`si_£tc‹e
(
bus
->
sih
, 
ARMCR4_CORE_ID
, 0)) {

3802 
found¸4
 = 1;

3804 
	`DHD_ERROR
(("%s: FaûedÅÿföd ARM c‹e!\n", 
__FUNCTION__
));

3805 
bcmîr‹
 = 
BCME_ERROR
;

3806 
Áû
;

3810 i‡(!
found¸4
) {

3811 
	`si_c‹e_dißbÀ
(
bus
->
sih
, 0);

3812 i‡(
	`bcmsdh_ªgÁû
(
bus
->
sdh
)) {

3813 
bcmîr‹
 = 
BCME_SDIO_ERROR
;

3814 
Áû
;

3817 i‡(!(
	`si_£tc‹e
(
bus
->
sih
, 
SOCRAM_CORE_ID
, 0))) {

3818 
	`DHD_ERROR
(("%s: FaûedÅÿföd SOCRAM c‹e!\n", 
__FUNCTION__
));

3819 
bcmîr‹
 = 
BCME_ERROR
;

3820 
Áû
;

3823 
	`si_c‹e_ª£t
(
bus
->
sih
, 0, 0);

3824 i‡(
	`bcmsdh_ªgÁû
(
bus
->
sdh
)) {

3825 
	`DHD_ERROR
(("%s: FaûuªÅryögÑe£àSOCRAM c‹e?\n", 
__FUNCTION__
));

3826 
bcmîr‹
 = 
BCME_SDIO_ERROR
;

3827 
Áû
;

3831 i‡(
	`REMAP_ENAB
(
bus
Ë&& 
	`si_socdevøm_ªm≠_i£nb
(bus->
sih
))

3832 
	`dhdsdio_devøm_ªm≠
(
bus
, 
FALSE
);

3835 i‡(
bus
->
ømsize
) {

3836 
uöt32
 
zîos
 = 0;

3837 i‡(
	`dhdsdio_membyãs
(
bus
, 
TRUE
, bus->
ømsize
 - 4, (
uöt8
*)&
zîos
, 4) < 0) {

3838 
bcmîr‹
 = 
BCME_SDIO_ERROR
;

3839 
Áû
;

3852 
	`si_c‹e_ª£t
(
bus
->
sih
, 
SICF_CPUHALT
, SICF_CPUHALT);

3855 i‡(!
	`si_£tc‹e
(
bus
->
sih
, 
ARMCR4_CORE_ID
, 0)) {

3856 i‡(!(
	`si_£tc‹e
(
bus
->
sih
, 
SOCRAM_CORE_ID
, 0))) {

3857 
	`DHD_ERROR
(("%s: FaûedÅÿföd SOCRAM c‹e!\n", 
__FUNCTION__
));

3858 
bcmîr‹
 = 
BCME_ERROR
;

3859 
Áû
;

3862 i‡(!
	`si_isc‹eup
(
bus
->
sih
)) {

3863 
	`DHD_ERROR
(("%s: SOCRAM c‹êi†dow¿a·îÑe£t?\n", 
__FUNCTION__
));

3864 
bcmîr‹
 = 
BCME_ERROR
;

3865 
Áû
;

3868 i‡((
bcmîr‹
 = 
	`dhdsdio_wrôe_v¨s
(
bus
))) {

3869 
	`DHD_ERROR
(("%s: couldÇŸ wrôêv¨†tÿRAM\n", 
__FUNCTION__
));

3870 
Áû
;

3876 i‡(
	`REMAP_ENAB
(
bus
Ë&& !
	`si_socdevøm_ªm≠_i£nb
(bus->
sih
))

3877 
	`dhdsdio_devøm_ªm≠
(
bus
, 
TRUE
);

3879 i‡(!
	`si_£tc‹e
(
bus
->
sih
, 
PCMCIA_CORE_ID
, 0) &&

3880 !
	`si_£tc‹e
(
bus
->
sih
, 
SDIOD_CORE_ID
, 0)) {

3881 
	`DHD_ERROR
(("%s: C™'àch™gêbackÅÿSDIO c‹e?\n", 
__FUNCTION__
));

3882 
bcmîr‹
 = 
BCME_ERROR
;

3883 
Áû
;

3885 
	`W_SDREG
(0xFFFFFFFF, &
bus
->
ªgs
->
öt°©us
, 
ªåõs
);

3888 i‡(!(
	`si_£tc‹e
(
bus
->
sih
, 
ARM7S_CORE_ID
, 0)) &&

3889 !(
	`si_£tc‹e
(
bus
->
sih
, 
ARMCM3_CORE_ID
, 0))) {

3890 
	`DHD_ERROR
(("%s: FaûedÅÿföd ARM c‹e!\n", 
__FUNCTION__
));

3891 
bcmîr‹
 = 
BCME_ERROR
;

3892 
Áû
;

3897 i‡((
bcmîr‹
 = 
	`dhdsdio_wrôe_v¨s
(
bus
))) {

3898 
	`DHD_ERROR
(("%s: couldÇŸ wrôêv¨†tÿRAM\n", 
__FUNCTION__
));

3899 
Áû
;

3902 i‡(!
	`si_£tc‹e
(
bus
->
sih
, 
PCMCIA_CORE_ID
, 0) &&

3903 !
	`si_£tc‹e
(
bus
->
sih
, 
SDIOD_CORE_ID
, 0)) {

3904 
	`DHD_ERROR
(("%s: C™'àch™gêbackÅÿSDIO c‹e?\n", 
__FUNCTION__
));

3905 
bcmîr‹
 = 
BCME_ERROR
;

3906 
Áû
;

3908 
	`W_SDREG
(0xFFFFFFFF, &
bus
->
ªgs
->
öt°©us
, 
ªåõs
);

3911 i‡(!(
	`si_£tc‹e
(
bus
->
sih
, 
ARMCR4_CORE_ID
, 0))) {

3912 
	`DHD_ERROR
(("%s: FaûedÅÿföd ARM CR4 c‹e!\n", 
__FUNCTION__
));

3913 
bcmîr‹
 = 
BCME_ERROR
;

3914 
Áû
;

3917 
bcmîr‹
 = 
	`dhdsdio_membyãs
(
bus
, 
TRUE
, 0,

3918 (
uöt8
 *)&
bus
->
ª£tö°r
, (bus->resetinstr));

3923 
	`si_c‹e_ª£t
(
bus
->
sih
, 0, 0);

3924 i‡(
	`bcmsdh_ªgÁû
(
bus
->
sdh
)) {

3925 
	`DHD_ERROR
(("%s: FaûuªÅryögÅÿª£àARM c‹e?\n", 
__FUNCTION__
));

3926 
bcmîr‹
 = 
BCME_SDIO_ERROR
;

3927 
Áû
;

3931 
bus
->
Æp_⁄ly
 = 
FALSE
;

3933 
bus
->
dhd
->
bus°©e
 = 
DHD_BUS_LOAD
;

3936 
Áû
:

3938 i‡(!
	`si_£tc‹e
(
bus
->
sih
, 
PCMCIA_CORE_ID
, 0))

3939 
	`si_£tc‹e
(
bus
->
sih
, 
SDIOD_CORE_ID
, 0);

3941  
bcmîr‹
;

3942 
	}
}

3945 
	$dhd_bus_iov¨_›
(
dhd_pub_t
 *
dhdp
, c⁄° *
«me
,

3946 *
∑øms
, 
∂í
, *
¨g
, 
Àn
, 
boﬁ
 
£t
)

3948 
dhd_bus_t
 *
bus
 = 
dhdp
->bus;

3949 c⁄° 
bcm_iov¨_t
 *
vi
 = 
NULL
;

3950 
bcmîr‹
 = 0;

3951 
vÆ_size
;

3952 
uöt32
 
a˘i⁄id
;

3954 
	`DHD_TRACE
(("%s: E¡î\n", 
__FUNCTION__
));

3956 
	`ASSERT
(
«me
);

3957 
	`ASSERT
(
Àn
 >= 0);

3960 
	`ASSERT
(
£t
 || (
¨g
 && 
Àn
));

3963 
	`ASSERT
(!
£t
 || (!
∑øms
 && !
∂í
));

3966 i‡((
vi
 = 
	`bcm_iov¨_lookup
(
dhdsdio_iov¨s
, 
«me
)Ë=
NULL
) {

3967 
	`dhd_os_sdlock
(
bus
->
dhd
);

3969 
	`BUS_WAKE
(
bus
);

3972 
	`dhdsdio_˛k˘l
(
bus
, 
CLK_AVAIL
, 
FALSE
);

3974 
bcmîr‹
 = 
	`bcmsdh_iov¨_›
(
bus
->
sdh
, 
«me
, 
∑øms
, 
∂í
, 
¨g
, 
Àn
, 
£t
);

3979 i‡(
£t
 && 
	`°rcmp
(
«me
, "sd_divisor") == 0) {

3980 i‡(
	`bcmsdh_iov¨_›
(
bus
->
sdh
, "sd_divis‹", 
NULL
, 0,

3981 &
bus
->
sd_divis‹
, (
öt32
), 
FALSE
Ë!
BCME_OK
) {

3982 
bus
->
sd_divis‹
 = -1;

3983 
	`DHD_ERROR
(("%s: faû o¿%†gë\n", 
__FUNCTION__
, 
«me
));

3985 
	`DHD_INFO
(("%s:Çoted %s update, valueÇow %d\n",

3986 
__FUNCTION__
, 
«me
, 
bus
->
sd_divis‹
));

3990 i‡(
£t
 && 
	`°rcmp
(
«me
, "sd_mode") == 0) {

3991 i‡(
	`bcmsdh_iov¨_›
(
bus
->
sdh
, "sd_mode", 
NULL
, 0,

3992 &
bus
->
sd_mode
, (
öt32
), 
FALSE
Ë!
BCME_OK
) {

3993 
bus
->
sd_mode
 = -1;

3994 
	`DHD_ERROR
(("%s: faû o¿%†gë\n", 
__FUNCTION__
, 
«me
));

3996 
	`DHD_INFO
(("%s:Çoted %s update, valueÇow %d\n",

3997 
__FUNCTION__
, 
«me
, 
bus
->
sd_mode
));

4001 i‡(
£t
 && 
	`°rcmp
(
«me
, "sd_blocksize") == 0) {

4002 
öt32
 
‚um
 = 2;

4003 i‡(
	`bcmsdh_iov¨_›
(
bus
->
sdh
, "sd_blocksize", &
‚um
, (
öt32
),

4004 &
bus
->
blocksize
, (
öt32
), 
FALSE
Ë!
BCME_OK
) {

4005 
bus
->
blocksize
 = 0;

4006 
	`DHD_ERROR
(("%s: faû o¿%†gë\n", 
__FUNCTION__
, "sd_blocksize"));

4008 
	`DHD_INFO
(("%s:Çoted %s update, valueÇow %d\n",

4009 
__FUNCTION__
, "sd_blocksize", 
bus
->
blocksize
));

4012 
bus
->
roundup
 = 
	`MIN
(
max_roundup
, bus->
blocksize
);

4014 i‡((
bus
->
idÀtime
 =
DHD_IDLE_IMMEDIATE
Ë&& !bus->
dpc_sched
) {

4015 
bus
->
a˘ivôy
 = 
FALSE
;

4016 
	`dhdsdio_˛k˘l
(
bus
, 
CLK_NONE
, 
TRUE
);

4019 
	`dhd_os_sdu∆ock
(
bus
->
dhd
);

4020 
exô
;

4023 
	`DHD_CTL
(("%s: %†%s,Üí %dÖÀ¿%d\n", 
__FUNCTION__
,

4024 
«me
, (
£t
 ? "£t" : "gë"), 
Àn
, 
∂í
));

4029 i‡(
∑øms
 =
NULL
) {

4030 
∑øms
 = 
¨g
;

4031 
∂í
 = 
Àn
;

4034 i‡(
vi
->
ty≥
 =
IOVT_VOID
)

4035 
vÆ_size
 = 0;

4036 i‡(
vi
->
ty≥
 =
IOVT_BUFFER
)

4037 
vÆ_size
 = 
Àn
;

4040 
vÆ_size
 = ();

4042 
a˘i⁄id
 = 
£t
 ? 
	`IOV_SVAL
(
vi
->
v¨id
Ë: 
	`IOV_GVAL
(vi->varid);

4043 
bcmîr‹
 = 
	`dhdsdio_doiov¨
(
bus
, 
vi
, 
a˘i⁄id
, 
«me
, 
∑øms
, 
∂í
, 
¨g
, 
Àn
, 
vÆ_size
);

4045 
exô
:

4046  
bcmîr‹
;

4047 
	}
}

4050 
	$dhd_bus_°›
(
dhd_bus
 *
bus
, 
boﬁ
 
íf‹˚_muãx
)

4052 
o¶_t
 *
osh
;

4053 
uöt32
 
loˇl_ho°ötmask
;

4054 
uöt8
 
ßve˛k
, 
d©
;

4055 
uöt
 
ªåõs
;

4056 
îr
;

4057 i‡(!
bus
->
dhd
)

4060 
osh
 = 
bus
->
dhd
->osh;

4061 
	`DHD_TRACE
(("%s: E¡î\n", 
__FUNCTION__
));

4063 
	`bcmsdh_waôlock‰ì
(
NULL
);

4065 i‡(
íf‹˚_muãx
)

4066 
	`dhd_os_sdlock
(
bus
->
dhd
);

4068 i‡((
bus
->
dhd
->
bus°©e
 =
DHD_BUS_DOWN
Ë|| bus->dhd->
h™g_was_£¡
) {

4070 
bus
->
dhd
->
bus°©e
 = 
DHD_BUS_DOWN
;

4071 
bus
->
ho°ötmask
 = 0;

4072 
	`bcmsdh_öå_dißbÀ
(
bus
->
sdh
);

4074 
	`BUS_WAKE
(
bus
);

4076 i‡(
	`KSO_ENAB
(
bus
)) {

4078 
d©
 = 
	`bcmsdh_cfg_ªad
(
bus
->
sdh
, 
SDIO_FUNC_0
, 
SDIOD_CCCR_INTEN
, 
NULL
);

4079 
d©
 &~(
INTR_CTL_FUNC1_EN
 | 
INTR_CTL_FUNC2_EN
);

4080 
	`bcmsdh_cfg_wrôe
(
bus
->
sdh
, 
SDIO_FUNC_0
, 
SDIOD_CCCR_INTEN
, 
d©
, 
NULL
);

4084 
bus
->
dhd
->
bus°©e
 = 
DHD_BUS_DOWN
;

4086 i‡(
	`KSO_ENAB
(
bus
)) {

4089 
	`dhdsdio_˛k˘l
(
bus
, 
CLK_AVAIL
, 
FALSE
);

4092 
	`W_SDREG
(0, &
bus
->
ªgs
->
ho°ötmask
, 
ªåõs
);

4093 
loˇl_ho°ötmask
 = 
bus
->
ho°ötmask
;

4094 
bus
->
ho°ötmask
 = 0;

4097 
ßve˛k
 = 
	`bcmsdh_cfg_ªad
(
bus
->
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_FUNC1_CHIPCLKCSR
, &
îr
);

4098 i‡(!
îr
) {

4099 
	`bcmsdh_cfg_wrôe
(
bus
->
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_FUNC1_CHIPCLKCSR
,

4100 (
ßve˛k
 | 
SBSDIO_FORCE_HT
), &
îr
);

4102 i‡(
îr
) {

4103 
	`DHD_ERROR
(("%s: FaûedÅÿf‹˚ clock f‹ F2:Éº %d\n", 
__FUNCTION__
, 
îr
));

4107 
	`DHD_INTR
(("%s: dißbÀ SDIO i¡îru±s\n", 
__FUNCTION__
));

4108 
	`bcmsdh_öå_dißbÀ
(
bus
->
sdh
);

4109 
	`bcmsdh_cfg_wrôe
(
bus
->
sdh
, 
SDIO_FUNC_0
, 
SDIOD_CCCR_IOEN
, 
SDIO_FUNC_ENABLE_1
, 
NULL
);

4112 
	`W_SDREG
(
loˇl_ho°ötmask
, &
bus
->
ªgs
->
öt°©us
, 
ªåõs
);

4116 
	`dhdsdio_˛k˘l
(
bus
, 
CLK_SDONLY
, 
FALSE
);

4120 
	`pktq_Êush
(
osh
, &
bus
->
txq
, 
TRUE
, 
NULL
, 0);

4123 i‡(
bus
->
glomd
)

4124 
	`PKTFREE
(
osh
, 
bus
->
glomd
, 
FALSE
);

4126 i‡(
bus
->
glom
)

4127 
	`PKTFREE
(
osh
, 
bus
->
glom
, 
FALSE
);

4129 
bus
->
glom
 = bus->
glomd
 = 
NULL
;

4132 
bus
->
rxÀn
 = 0;

4133 
	`dhd_os_io˘l_ª•_wake
(
bus
->
dhd
);

4136 
bus
->
rxskù
 = 
FALSE
;

4137 
bus
->
tx_£q
 = bus->
rx_£q
 = 0;

4139 i‡(
íf‹˚_muãx
)

4140 
	`dhd_os_sdu∆ock
(
bus
->
dhd
);

4141 
	}
}

4143 #ifde‡
BCMSDIOH_TXGLOM


4145 
	$dhd_txglom_íabÀ
(
dhd_pub_t
 *
dhdp
, 
boﬁ
 
íabÀ
)

4147 
dhd_bus_t
 *
bus
 = 
dhdp
->bus;

4149 
buf
[256];

4150 
uöt32
 
rxglom
;

4151 
öt32
 
ªt
;

4153 i‡(
íabÀ
) {

4154 
rxglom
 = 1;

4155 
	`mem£t
(
buf
, 0, (buf));

4156 
	`bcm_mkiov¨
("bus:rxglom",

4157 (*)&
rxglom
,

4158 4, 
buf
, (buf));

4159 
ªt
 = 
	`dhd_wl_io˘l_cmd
(
dhdp
,

4160 
WLC_SET_VAR
, 
buf
,

4161 (
buf
), 
TRUE
, 0);

4162 i‡(!(
ªt
 < 0)) {

4163 
bus
->
glom_íabÀ
 = 
TRUE
;

4166 
bus
->
glom_íabÀ
 = 
FALSE
;

4168 
	}
}

4172 
	$dhd_bus_öô
(
dhd_pub_t
 *
dhdp
, 
boﬁ
 
íf‹˚_muãx
)

4174 
dhd_bus_t
 *
bus
 = 
dhdp
->bus;

4175 
dhd_timeout_t
 
tmo
;

4176 
uöt
 
ªåõs
 = 0;

4177 
uöt8
 
ªady
, 
íabÀ
;

4178 
îr
, 
ªt
 = 0;

4179 
uöt8
 
ßve˛k
;

4181 
	`DHD_TRACE
(("%s: E¡î\n", 
__FUNCTION__
));

4183 
	`ASSERT
(
bus
->
dhd
);

4184 i‡(!
bus
->
dhd
)

4187 i‡(
íf‹˚_muãx
)

4188 
	`dhd_os_sdlock
(
bus
->
dhd
);

4191 
	`dhdsdio_˛k˘l
(
bus
, 
CLK_AVAIL
, 
FALSE
);

4192 i‡(
bus
->
˛k°©e
 !
CLK_AVAIL
) {

4193 
	`DHD_ERROR
(("%s: clock sèã i†wr⁄g. sèã = %d\n", 
__FUNCTION__
, 
bus
->
˛k°©e
));

4194 
ªt
 = -1;

4195 
exô
;

4200 
ßve˛k
 = 
	`bcmsdh_cfg_ªad
(
bus
->
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_FUNC1_CHIPCLKCSR
, &
îr
);

4201 i‡(!
îr
) {

4202 
	`bcmsdh_cfg_wrôe
(
bus
->
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_FUNC1_CHIPCLKCSR
,

4203 (
ßve˛k
 | 
SBSDIO_FORCE_HT
), &
îr
);

4205 i‡(
îr
) {

4206 
	`DHD_ERROR
(("%s: FaûedÅÿf‹˚ clock f‹ F2:Éº %d\n", 
__FUNCTION__
, 
îr
));

4207 
ªt
 = -1;

4208 
exô
;

4212 
	`W_SDREG
((
SDPCM_PROT_VERSION
 << 
SMB_DATA_VERSION_SHIFT
),

4213 &
bus
->
ªgs
->
tosbmaûboxd©a
, 
ªåõs
);

4214 
íabÀ
 = (
SDIO_FUNC_ENABLE_1
 | 
SDIO_FUNC_ENABLE_2
);

4216 
	`bcmsdh_cfg_wrôe
(
bus
->
sdh
, 
SDIO_FUNC_0
, 
SDIOD_CCCR_IOEN
, 
íabÀ
, 
NULL
);

4219 
	`dhd_timeout_°¨t
(&
tmo
, 
DHD_WAIT_F2RDY
 * 1000);

4221 
ªady
 = 0;

4222 
ªady
 !
íabÀ
 && !
	`dhd_timeout_expúed
(&
tmo
))

4223 
ªady
 = 
	`bcmsdh_cfg_ªad
(
bus
->
sdh
, 
SDIO_FUNC_0
, 
SDIOD_CCCR_IORDY
, 
NULL
);

4225 
	`DHD_ERROR
(("%s:Énable 0x%02x,Ñeady 0x%02x (waited %uus)\n",

4226 
__FUNCTION__
, 
íabÀ
, 
ªady
, 
tmo
.
ñ≠£d
));

4230 i‡(
ªady
 =
íabÀ
) {

4232 i‡(!(
bus
->
ªgs
 = 
	`si_£tc‹e
(bus->
sih
, 
PCMCIA_CORE_ID
, 0)))

4233 
bus
->
ªgs
 = 
	`si_£tc‹e
(bus->
sih
, 
SDIOD_CORE_ID
, 0);

4234 
	`ASSERT
(
bus
->
ªgs
 !
NULL
);

4237 
bus
->
ho°ötmask
 = 
HOSTINTMASK
;

4239 i‡((
bus
->
sih
->
busc‹ëy≥
 =
SDIOD_CORE_ID
Ë&& (bus->
sdpcmªv
 == 4) &&

4240 (
bus
->
rxöt_mode
 !
SDIO_DEVICE_HMB_RXINT
)) {

4241 
bus
->
ho°ötmask
 &~
I_HMB_FRAME_IND
;

4242 
bus
->
ho°ötmask
 |
I_XMTDATA_AVAIL
;

4244 
	`W_SDREG
(
bus
->
ho°ötmask
, &bus->
ªgs
->ho°ötmask, 
ªåõs
);

4245 #ifde‡
SDIO_CRC_ERROR_FIX


4246 i‡(
bus
->
blocksize
 < 512) {

4247 
mesbusy˘æ
 = 
w©îm¨k
 = 
bus
->
blocksize
 / 4;

4251 
	`bcmsdh_cfg_wrôe
(
bus
->
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_WATERMARK
, (
uöt8
)
w©îm¨k
, &
îr
);

4252 #ifde‡
SDIO_CRC_ERROR_FIX


4253 
	`bcmsdh_cfg_wrôe
(
bus
->
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_FUNC1_MESBUSYCTRL
,

4254 (
uöt8
)
mesbusy˘æ
|0x80, &
îr
);

4255 
	`bcmsdh_cfg_wrôe
(
bus
->
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_DEVICE_CTL
,

4256 
SBSDIO_DEVCTL_EN_F2_BLK_WATERMARK
, 
NULL
);

4260 
dhdp
->
bus°©e
 = 
DHD_BUS_DATA
;

4264 
bus
->
ötdis
 = 
FALSE
;

4265 i‡(
bus
->
öå
) {

4266 
	`DHD_INTR
(("%s:É«bÀ SDIO devi˚ i¡îru±s\n", 
__FUNCTION__
));

4267 
	`bcmsdh_öå_íabÀ
(
bus
->
sdh
);

4269 
	`DHD_INTR
(("%s: dißbÀ SDIO i¡îru±s\n", 
__FUNCTION__
));

4270 
	`bcmsdh_öå_dißbÀ
(
bus
->
sdh
);

4278 
íabÀ
 = 
SDIO_FUNC_ENABLE_1
;

4279 
	`bcmsdh_cfg_wrôe
(
bus
->
sdh
, 
SDIO_FUNC_0
, 
SDIOD_CCCR_IOEN
, 
íabÀ
, 
NULL
);

4282 i‡(
	`dhdsdio_§_ˇp
(
bus
))

4283 
	`dhdsdio_§_öô
(
bus
);

4285 
	`bcmsdh_cfg_wrôe
(
bus
->
sdh
, 
SDIO_FUNC_1
,

4286 
SBSDIO_FUNC1_CHIPCLKCSR
, 
ßve˛k
, &
îr
);

4289 i‡(
dhdp
->
bus°©e
 !
DHD_BUS_DATA
)

4290 
	`dhdsdio_˛k˘l
(
bus
, 
CLK_NONE
, 
FALSE
);

4292 
exô
:

4293 i‡(
íf‹˚_muãx
)

4294 
	`dhd_os_sdu∆ock
(
bus
->
dhd
);

4296  
ªt
;

4297 
	}
}

4300 
	$dhdsdio_rxÁû
(
dhd_bus_t
 *
bus
, 
boﬁ
 
ab‹t
, boﬁ 
πx
)

4302 
bcmsdh_öfo_t
 *
sdh
 = 
bus
->sdh;

4303 
sdpcmd_ªgs_t
 *
ªgs
 = 
bus
->regs;

4304 
uöt
 
ªåõs
 = 0;

4305 
uöt16
 
œ°rbc
;

4306 
uöt8
 
hi
, 
lo
;

4307 
îr
;

4309 
	`DHD_ERROR
(("%s: %°îmö©ê‰ame%s\n", 
__FUNCTION__
,

4310 (
ab‹t
 ? "ab‹àcomm™d, " : ""), (
πx
 ? ", send NAK" : "")));

4312 i‡(!
	`KSO_ENAB
(
bus
)) {

4313 
	`DHD_ERROR
(("%s: Devi˚á¶ìp\n", 
__FUNCTION__
));

4317 i‡(
ab‹t
) {

4318 
	`bcmsdh_ab‹t
(
sdh
, 
SDIO_FUNC_2
);

4321 
	`bcmsdh_cfg_wrôe
(
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_FUNC1_FRAMECTRL
, 
SFC_RF_TERM
, &
îr
);

4322 
bus
->
f1ªgd©a
++;

4325 
œ°rbc
 = 
ªåõs
 = 0xffff;Ñetries > 0;Ñetries--) {

4326 
hi
 = 
	`bcmsdh_cfg_ªad
(
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_FUNC1_RFRAMEBCHI
, 
NULL
);

4327 
lo
 = 
	`bcmsdh_cfg_ªad
(
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_FUNC1_RFRAMEBCLO
, 
NULL
);

4328 
bus
->
f1ªgd©a
 += 2;

4330 i‡((
hi
 =0Ë&& (
lo
 == 0))

4333 i‡((
hi
 > (
œ°rbc
 >> 8)Ë&& (
lo
 > (lastrbc & 0x00ff))) {

4334 
	`DHD_ERROR
(("%s: count growing:Üast 0x%04xÇow 0x%04x\n",

4335 
__FUNCTION__
, 
œ°rbc
, ((
hi
 << 8Ë+ 
lo
)));

4337 
œ°rbc
 = (
hi
 << 8Ë+ 
lo
;

4340 i‡(!
ªåõs
) {

4341 
	`DHD_ERROR
(("%s: cou¡Çevî zî€d:Üa° 0x%04x\n", 
__FUNCTION__
, 
œ°rbc
));

4343 
	`DHD_INFO
(("%s: flushÅook %d iãøti⁄s\n", 
__FUNCTION__
, (0xfff‡- 
ªåõs
)));

4346 i‡(
πx
) {

4347 
bus
->
rxπx
++;

4348 
	`W_SDREG
(
SMB_NAK
, &
ªgs
->
tosbmaûbox
, 
ªåõs
);

4349 
bus
->
f1ªgd©a
++;

4350 i‡(
ªåõs
 <
ªåy_limô
) {

4351 
bus
->
rxskù
 = 
TRUE
;

4356 
bus
->
√xéí
 = 0;

4359 i‡(
îr
 || 
	`bcmsdh_ªgÁû
(
sdh
))

4360 
bus
->
dhd
->
bus°©e
 = 
DHD_BUS_DOWN
;

4361 
	}
}

4364 
	$dhdsdio_ªad_c⁄åﬁ
(
dhd_bus_t
 *
bus
, 
uöt8
 *
hdr
, 
uöt
 
Àn
, uöà
doff
)

4366 
bcmsdh_öfo_t
 *
sdh
 = 
bus
->sdh;

4367 
uöt
 
rdÀn
, 
∑d
;

4369 
sdªt
;

4371 
	`DHD_TRACE
(("%s: E¡î\n", 
__FUNCTION__
));

4374 i‡((
bus
->bu†=
SPI_BUS
Ë&& (!bus->
u£buÂoﬁ
))

4375 
gŸpkt
;

4377 
	`ASSERT
(
bus
->
rxbuf
);

4379 
bus
->
rx˘l
 = bus->
rxbuf
;

4380 i‡(
dhd_Æign˘l
) {

4381 
bus
->
rx˘l
 +
fú°ªad
;

4382 i‡((
∑d
 = ((
uöçå
)
bus
->
rx˘l
 % 
DHD_SDALIGN
)))

4383 
bus
->
rx˘l
 +(
DHD_SDALIGN
 - 
∑d
);

4384 
bus
->
rx˘l
 -
fú°ªad
;

4386 
	`ASSERT
(
bus
->
rx˘l
 >bus->
rxbuf
);

4389 
	`bc›y
(
hdr
, 
bus
->
rx˘l
, 
fú°ªad
);

4390 i‡(
Àn
 <
fú°ªad
)

4391 
gŸpkt
;

4394 i‡(
bus
->bu†=
SPI_BUS
) {

4395 
	`bc›y
(
hdr
, 
bus
->
rx˘l
, 
Àn
);

4396 
gŸpkt
;

4400 
rdÀn
 = 
Àn
 - 
fú°ªad
;

4401 i‡(
bus
->
roundup
 && bus->
blocksize
 && (
rdÀn
 > bus->blocksize)) {

4402 
∑d
 = 
bus
->
blocksize
 - (
rdÀn
 % bus->blocksize);

4403 i‡((
∑d
 <
bus
->
roundup
Ë&& (∑d < bus->
blocksize
) &&

4404 ((
Àn
 + 
∑d
Ë< 
bus
->
dhd
->
max˘l
))

4405 
rdÀn
 +
∑d
;

4406 } i‡(
rdÀn
 % 
DHD_SDALIGN
) {

4407 
rdÀn
 +
DHD_SDALIGN
 - (rdlen % DHD_SDALIGN);

4411 i‡(
f‹˚Æign
 && (
rdÀn
 & (
ALIGNMENT
 - 1)))

4412 
rdÀn
 = 
	`ROUNDUP
‘dÀn, 
ALIGNMENT
);

4415 i‡((
rdÀn
 + 
fú°ªad
Ë> 
bus
->
dhd
->
max˘l
) {

4416 
	`DHD_ERROR
(("%s: %d-byte controlÑeadÉxceeds %d-byte buffer\n",

4417 
__FUNCTION__
, 
rdÀn
, 
bus
->
dhd
->
max˘l
));

4418 
bus
->
dhd
->
rx_îr‹s
++;

4419 
	`dhdsdio_rxÁû
(
bus
, 
FALSE
, FALSE);

4420 
d⁄e
;

4423 i‡((
Àn
 - 
doff
Ë> 
bus
->
dhd
->
max˘l
) {

4424 
	`DHD_ERROR
(("%s: %d-byte ctl frame (%d-byte ctl data)Éxceeds %d-byteÜimit\n",

4425 
__FUNCTION__
, 
Àn
, (À¿- 
doff
), 
bus
->
dhd
->
max˘l
));

4426 
bus
->
dhd
->
rx_îr‹s
++; bus->
rx_toﬁ⁄g
++;

4427 
	`dhdsdio_rxÁû
(
bus
, 
FALSE
, FALSE);

4428 
d⁄e
;

4433 
sdªt
 = 
	`dhd_bcmsdh_ªcv_buf
(
bus
, 
	`bcmsdh_cur_sbwad
(
sdh
), 
SDIO_FUNC_2
, 
F2SYNC
,

4434 (
bus
->
rx˘l
 + 
fú°ªad
), 
rdÀn
, 
NULL
, NULL, NULL);

4435 
bus
->
f2rxd©a
++;

4436 
	`ASSERT
(
sdªt
 !
BCME_PENDING
);

4439 i‡(
sdªt
 < 0) {

4440 
	`DHD_ERROR
(("%s:Ñód %d c⁄åﬁ byã†Áûed: %d\n", 
__FUNCTION__
, 
rdÀn
, 
sdªt
));

4441 
bus
->
rxc_îr‹s
++;

4442 
	`dhdsdio_rxÁû
(
bus
, 
TRUE
, TRUE);

4443 
d⁄e
;

4446 
gŸpkt
:

4448 #ifde‡
DHD_DEBUG


4449 i‡(
	`DHD_BYTES_ON
(Ë&& 
	`DHD_CTL_ON
()) {

4450 
	`¥hex
("RxCål", 
bus
->
rx˘l
, 
Àn
);

4455 
bus
->
rx˘l
 +
doff
;

4456 
bus
->
rxÀn
 = 
Àn
 - 
doff
;

4458 
d⁄e
:

4460 
	`dhd_os_io˘l_ª•_wake
(
bus
->
dhd
);

4461 
	}
}

4463 
uöt8


4464 
	$dhdsdio_rxglom
(
dhd_bus_t
 *
bus
, 
uöt8
 
rx£q
)

4466 
uöt16
 
dÀn
, 
tŸÀn
;

4467 
uöt8
 *
d±r
, 
num
 = 0;

4469 
uöt16
 
subÀn
, 
check
;

4470 *
pfú°
, *
∂a°
, *
≤ext
;

4471 * 
li°_èû
[
DHD_MAX_IFS
] = { 
NULL
 };

4472 * 
li°_hód
[
DHD_MAX_IFS
] = { 
NULL
 };

4473 
uöt8
 
idx
;

4474 
o¶_t
 *
osh
 = 
bus
->
dhd
->osh;

4476 
îrcode
;

4477 
uöt8
 
ch™
, 
£q
, 
doff
, 
sfdoff
;

4478 
uöt8
 
txmax
;

4479 
uch¨
 
ª‹dî_öfo_buf
[
WLHOST_REORDERDATA_TOTLEN
];

4480 
uöt
 
ª‹dî_öfo_Àn
;

4482 
ifidx
 = 0;

4483 
boﬁ
 
u£chaö
 = 
bus
->
u£_rxchaö
;

4488 
	`DHD_TRACE
(("dhdsdio_rxglom: sèπ: glomd %∞glom %p\n", 
bus
->
glomd
, bus->
glom
));

4491 i‡(
bus
->
glomd
) {

4492 
	`dhd_os_sdlock_rxq
(
bus
->
dhd
);

4494 
pfú°
 = 
∂a°
 = 
≤ext
 = 
NULL
;

4495 
dÀn
 = (
uöt16
)
	`PKTLEN
(
osh
, 
bus
->
glomd
);

4496 
d±r
 = 
	`PKTDATA
(
osh
, 
bus
->
glomd
);

4497 i‡(!
dÀn
 || (dlen & 1)) {

4498 
	`DHD_ERROR
(("%s: bad glomdÜen (%d), ignore descriptor\n",

4499 
__FUNCTION__
, 
dÀn
));

4500 
dÀn
 = 0;

4503 
tŸÀn
 = 
num
 = 0; 
dÀn
;Çum++) {

4505 
subÀn
 = 
	`…oh16_ua
(
d±r
);

4506 
dÀn
 -(
uöt16
);

4507 
d±r
 +(
uöt16
);

4508 i‡((
subÀn
 < 
SDPCM_HDRLEN_RX
) ||

4509 ((
num
 =0Ë&& (
subÀn
 < (2 * 
SDPCM_HDRLEN_RX
)))) {

4510 
	`DHD_ERROR
(("%s: descriptorÜen %d bad: %d\n",

4511 
__FUNCTION__
, 
num
, 
subÀn
));

4512 
≤ext
 = 
NULL
;

4515 i‡(
subÀn
 % 
DHD_SDALIGN
) {

4516 
	`DHD_ERROR
(("%s: sublen %dÇotá multiple of %d\n",

4517 
__FUNCTION__
, 
subÀn
, 
DHD_SDALIGN
));

4518 
u£chaö
 = 
FALSE
;

4520 
tŸÀn
 +
subÀn
;

4523 i‡(!
dÀn
) {

4524 
subÀn
 +(
	`ROUNDUP
(
tŸÀn
, 
bus
->
blocksize
) -Åotlen);

4525 
tŸÀn
 = 
	`ROUNDUP
—ŸÀn, 
bus
->
blocksize
);

4529 i‡((
≤ext
 = 
	`PKTGET
(
osh
, 
subÀn
 + 
DHD_SDALIGN
, 
FALSE
)Ë=
NULL
) {

4530 
	`DHD_ERROR
(("%s: PKTGET failed,Çum %dÜen %d\n",

4531 
__FUNCTION__
, 
num
, 
subÀn
));

4534 
	`ASSERT
(!
	`PKTLINK
(
≤ext
));

4535 i‡(!
pfú°
) {

4536 
	`ASSERT
(!
∂a°
);

4537 
pfú°
 = 
∂a°
 = 
≤ext
;

4539 
	`ASSERT
(
∂a°
);

4540 
	`PKTSETNEXT
(
osh
, 
∂a°
, 
≤ext
);

4541 
∂a°
 = 
≤ext
;

4545 
	`PKTALIGN
(
osh
, 
≤ext
, 
subÀn
, 
DHD_SDALIGN
);

4549 i‡(
≤ext
) {

4550 
	`DHD_GLOM
(("%s:állocated %d-byteÖacket chain for %d subframes\n",

4551 
__FUNCTION__
, 
tŸÀn
, 
num
));

4552 i‡(
	`DHD_GLOM_ON
(Ë&& 
bus
->
√xéí
) {

4553 i‡(
tŸÀn
 !
bus
->
√xéí
) {

4554 
	`DHD_GLOM
(("%s: glomdesc mismatch:Çextlen %d glomdesc %d "

4555 "rx£q %d\n", 
__FUNCTION__
, 
bus
->
√xéí
,

4556 
tŸÀn
, 
rx£q
));

4559 
bus
->
glom
 = 
pfú°
;

4560 
pfú°
 = 
≤ext
 = 
NULL
;

4562 i‡(
pfú°
)

4563 
	`PKTFREE
(
osh
, 
pfú°
, 
FALSE
);

4564 
bus
->
glom
 = 
NULL
;

4565 
num
 = 0;

4569 
	`PKTFREE
(
osh
, 
bus
->
glomd
, 
FALSE
);

4570 
bus
->
glomd
 = 
NULL
;

4571 
bus
->
√xéí
 = 0;

4573 
	`dhd_os_sdu∆ock_rxq
(
bus
->
dhd
);

4577 i‡(
bus
->
glom
) {

4578 i‡(
	`DHD_GLOM_ON
()) {

4579 
	`DHD_GLOM
(("%s:áâem± su≥r‰amêªad,Öackë chaö:\n", 
__FUNCTION__
));

4580 
≤ext
 = 
bus
->
glom
;Ö√xt;Ö√xà
	`PKTNEXT
(
osh
,Önext)) {

4581 
	`DHD_GLOM
((" %p: %pÜen 0x%04x (%d)\n",

4582 
≤ext
, (
uöt8
*)
	`PKTDATA
(
osh
,Önext),

4583 
	`PKTLEN
(
osh
, 
≤ext
), PKTLEN(osh,Önext)));

4587 
pfú°
 = 
bus
->
glom
;

4588 
dÀn
 = (
uöt16
)
	`pkâŸÀn
(
osh
, 
pfú°
);

4594 i‡(
u£chaö
) {

4595 
îrcode
 = 
	`dhd_bcmsdh_ªcv_buf
(
bus
,

4596 
	`bcmsdh_cur_sbwad
(
bus
->
sdh
), 
SDIO_FUNC_2
,

4597 
F2SYNC
, (
uöt8
*)
	`PKTDATA
(
osh
, 
pfú°
),

4598 
dÀn
, 
pfú°
, 
NULL
, NULL);

4599 } i‡(
bus
->
d©≠å
) {

4600 
îrcode
 = 
	`dhd_bcmsdh_ªcv_buf
(
bus
,

4601 
	`bcmsdh_cur_sbwad
(
bus
->
sdh
), 
SDIO_FUNC_2
,

4602 
F2SYNC
, 
bus
->
d©≠å
,

4603 
dÀn
, 
NULL
, NULL, NULL);

4604 
subÀn
 = (
uöt16
)
	`pkt‰ombuf
(
osh
, 
pfú°
, 0, 
dÀn
, 
bus
->
d©≠å
);

4605 i‡(
subÀn
 !
dÀn
) {

4606 
	`DHD_ERROR
(("%s: FAILED TO COPY, dlen %d sublen %d\n",

4607 
__FUNCTION__
, 
dÀn
, 
subÀn
));

4608 
îrcode
 = -1;

4610 
≤ext
 = 
NULL
;

4612 
	`DHD_ERROR
(("COULDN'T ALLOC %d-BYTE GLOM, FORCE FAILURE\n", 
dÀn
));

4613 
îrcode
 = -1;

4615 
bus
->
f2rxd©a
++;

4616 
	`ASSERT
(
îrcode
 !
BCME_PENDING
);

4619 i‡(
îrcode
 < 0) {

4620 
	`DHD_ERROR
(("%s: glomÑead of %d bytes failed: %d\n",

4621 
__FUNCTION__
, 
dÀn
, 
îrcode
));

4622 
bus
->
dhd
->
rx_îr‹s
++;

4624 i‡(
bus
->
glomîr
++ < 3) {

4625 
	`dhdsdio_rxÁû
(
bus
, 
TRUE
, TRUE);

4627 
bus
->
glomîr
 = 0;

4628 
	`dhdsdio_rxÁû
(
bus
, 
TRUE
, 
FALSE
);

4629 
	`dhd_os_sdlock_rxq
(
bus
->
dhd
);

4630 
	`PKTFREE
(
osh
, 
bus
->
glom
, 
FALSE
);

4631 
	`dhd_os_sdu∆ock_rxq
(
bus
->
dhd
);

4632 
bus
->
rxglomÁû
++;

4633 
bus
->
glom
 = 
NULL
;

4638 #ifde‡
DHD_DEBUG


4639 i‡(
	`DHD_GLOM_ON
()) {

4640 
	`¥hex
("SUPERFRAME", 
	`PKTDATA
(
osh
, 
pfú°
),

4641 
	`MIN
(
	`PKTLEN
(
osh
, 
pfú°
), 48));

4647 
d±r
 = (
uöt8
 *)
	`PKTDATA
(
osh
, 
pfú°
);

4648 
subÀn
 = 
	`…oh16_ua
(
d±r
);

4649 
check
 = 
	`…oh16_ua
(
d±r
 + (
uöt16
));

4651 
ch™
 = 
	`SDPCM_PACKET_CHANNEL
(&
d±r
[
SDPCM_FRAMETAG_LEN
]);

4652 
£q
 = 
	`SDPCM_PACKET_SEQUENCE
(&
d±r
[
SDPCM_FRAMETAG_LEN
]);

4653 
bus
->
√xéí
 = 
d±r
[
SDPCM_FRAMETAG_LEN
 + 
SDPCM_NEXTLEN_OFFSET
];

4654 i‡((
bus
->
√xéí
 << 4Ë> 
MAX_RX_DATASZ
) {

4655 
	`DHD_INFO
(("%s: got frame w/nextlenÅooÜarge (%d) seq %d\n",

4656 
__FUNCTION__
, 
bus
->
√xéí
, 
£q
));

4657 
bus
->
√xéí
 = 0;

4659 
doff
 = 
	`SDPCM_DOFFSET_VALUE
(&
d±r
[
SDPCM_FRAMETAG_LEN
]);

4660 
txmax
 = 
	`SDPCM_WINDOW_VALUE
(&
d±r
[
SDPCM_FRAMETAG_LEN
]);

4662 
îrcode
 = 0;

4663 i‡((
uöt16
)~(
subÀn
^
check
)) {

4664 
	`DHD_ERROR
(("%s (superframe): HW hdrÉrror:Üen/check 0x%04x/0x%04x\n",

4665 
__FUNCTION__
, 
subÀn
, 
check
));

4666 
îrcode
 = -1;

4667 } i‡(
	`ROUNDUP
(
subÀn
, 
bus
->
blocksize
Ë!
dÀn
) {

4668 
	`DHD_ERROR
(("%s (superframe):Üen 0x%04x,Ñounded 0x%04x,Éxpect 0x%04x\n",

4669 
__FUNCTION__
, 
subÀn
, 
	`ROUNDUP
(subÀn, 
bus
->
blocksize
), 
dÀn
));

4670 
îrcode
 = -1;

4671 } i‡(
	`SDPCM_PACKET_CHANNEL
(&
d±r
[
SDPCM_FRAMETAG_LEN
]Ë!
SDPCM_GLOM_CHANNEL
) {

4672 
	`DHD_ERROR
(("%†(su≥r‰ame): bad ch™√»%d\n", 
__FUNCTION__
,

4673 
	`SDPCM_PACKET_CHANNEL
(&
d±r
[
SDPCM_FRAMETAG_LEN
])));

4674 
îrcode
 = -1;

4675 } i‡(
	`SDPCM_GLOMDESC
(&
d±r
[
SDPCM_FRAMETAG_LEN
])) {

4676 
	`DHD_ERROR
(("%†(su≥r‰ame): gŸ sec⁄d des¸ùt‹?\n", 
__FUNCTION__
));

4677 
îrcode
 = -1;

4678 } i‡((
doff
 < 
SDPCM_HDRLEN_RX
) ||

4679 (
doff
 > (
	`PKTLEN
(
osh
, 
pfú°
Ë- 
SDPCM_HDRLEN_RX
))) {

4680 
	`DHD_ERROR
(("%s (superframe): Bad data offset %d: HW %dÖkt %d min %d\n",

4681 
__FUNCTION__
, 
doff
, 
subÀn
, 
	`PKTLEN
(
osh
, 
pfú°
),

4682 
SDPCM_HDRLEN_RX
));

4683 
îrcode
 = -1;

4687 i‡(
rx£q
 !
£q
) {

4688 
	`DHD_INFO
(("%s: (superframe)Ñx_seq %d,Éxpected %d\n",

4689 
__FUNCTION__
, 
£q
, 
rx£q
));

4690 
bus
->
rx_bad£q
++;

4691 
rx£q
 = 
£q
;

4695 i‡((
uöt8
)(
txmax
 - 
bus
->
tx_£q
) > 0x40) {

4696 
	`DHD_ERROR
(("%s: got unlikelyÅx max %d withÅx_seq %d\n",

4697 
__FUNCTION__
, 
txmax
, 
bus
->
tx_£q
));

4698 
txmax
 = 
bus
->
tx_max
;

4700 
bus
->
tx_max
 = 
txmax
;

4703 
	`PKTPULL
(
osh
, 
pfú°
, 
doff
);

4704 
sfdoff
 = 
doff
;

4707 
num
 = 0, 
≤ext
 = 
pfú°
;Ö√xà&& !
îrcode
;

4708 
num
++, 
≤ext
 = 
	`PKTNEXT
(
osh
,Önext)) {

4709 
d±r
 = (
uöt8
 *)
	`PKTDATA
(
osh
, 
≤ext
);

4710 
dÀn
 = (
uöt16
)
	`PKTLEN
(
osh
, 
≤ext
);

4711 
subÀn
 = 
	`…oh16_ua
(
d±r
);

4712 
check
 = 
	`…oh16_ua
(
d±r
 + (
uöt16
));

4713 
ch™
 = 
	`SDPCM_PACKET_CHANNEL
(&
d±r
[
SDPCM_FRAMETAG_LEN
]);

4714 
doff
 = 
	`SDPCM_DOFFSET_VALUE
(&
d±r
[
SDPCM_FRAMETAG_LEN
]);

4715 #ifde‡
DHD_DEBUG


4716 i‡(
	`DHD_GLOM_ON
()) {

4717 
	`¥hex
("sub‰ame", 
d±r
, 32);

4721 i‡((
uöt16
)~(
subÀn
^
check
)) {

4722 
	`DHD_ERROR
(("%s (subframe %d): HW hdrÉrror: "

4724 
__FUNCTION__
, 
num
, 
subÀn
, 
check
));

4725 
îrcode
 = -1;

4726 } i‡((
subÀn
 > 
dÀn
Ë|| (subÀ¿< 
SDPCM_HDRLEN_RX
)) {

4727 
	`DHD_ERROR
(("%s (subframe %d):Üength mismatch: "

4729 
__FUNCTION__
, 
num
, 
subÀn
, 
dÀn
));

4730 
îrcode
 = -1;

4731 } i‡((
ch™
 !
SDPCM_DATA_CHANNEL
) &&

4732 (
ch™
 !
SDPCM_EVENT_CHANNEL
)) {

4733 
	`DHD_ERROR
(("%s (subframe %d): bad channel %d\n",

4734 
__FUNCTION__
, 
num
, 
ch™
));

4735 
îrcode
 = -1;

4736 } i‡((
doff
 < 
SDPCM_HDRLEN_RX
Ë|| (dof‡> 
subÀn
)) {

4737 
	`DHD_ERROR
(("%s (subframe %d): Bad data offset %d: HW %d min %d\n",

4738 
__FUNCTION__
, 
num
, 
doff
, 
subÀn
, 
SDPCM_HDRLEN_RX
));

4739 
îrcode
 = -1;

4743 i‡(
îrcode
) {

4745 i‡(
bus
->
glomîr
++ < 3) {

4747 
	`PKTPUSH
(
osh
, 
pfú°
, 
sfdoff
);

4748 
	`dhdsdio_rxÁû
(
bus
, 
TRUE
, TRUE);

4750 
bus
->
glomîr
 = 0;

4751 
	`dhdsdio_rxÁû
(
bus
, 
TRUE
, 
FALSE
);

4752 
	`dhd_os_sdlock_rxq
(
bus
->
dhd
);

4753 
	`PKTFREE
(
osh
, 
bus
->
glom
, 
FALSE
);

4754 
	`dhd_os_sdu∆ock_rxq
(
bus
->
dhd
);

4755 
bus
->
rxglomÁû
++;

4756 
bus
->
glom
 = 
NULL
;

4758 
bus
->
√xéí
 = 0;

4763 
bus
->
glom
 = 
NULL
;

4764 
∂a°
 = 
NULL
;

4766 
	`dhd_os_sdlock_rxq
(
bus
->
dhd
);

4767 
num
 = 0; 
pfú°
; 
rx£q
++,Öfú° = 
≤ext
) {

4768 
≤ext
 = 
	`PKTNEXT
(
osh
, 
pfú°
);

4769 
	`PKTSETNEXT
(
osh
, 
pfú°
, 
NULL
);

4771 
d±r
 = (
uöt8
 *)
	`PKTDATA
(
osh
, 
pfú°
);

4772 
subÀn
 = 
	`…oh16_ua
(
d±r
);

4773 
ch™
 = 
	`SDPCM_PACKET_CHANNEL
(&
d±r
[
SDPCM_FRAMETAG_LEN
]);

4774 
£q
 = 
	`SDPCM_PACKET_SEQUENCE
(&
d±r
[
SDPCM_FRAMETAG_LEN
]);

4775 
doff
 = 
	`SDPCM_DOFFSET_VALUE
(&
d±r
[
SDPCM_FRAMETAG_LEN
]);

4777 
	`DHD_GLOM
(("%s: Get subframe %d, %p(%p/%d), sublen %d chan %d seq %d\n",

4778 
__FUNCTION__
, 
num
, 
pfú°
, 
	`PKTDATA
(
osh
,Öfirst),

4779 
	`PKTLEN
(
osh
, 
pfú°
), 
subÀn
, 
ch™
, 
£q
));

4781 
	`ASSERT
((
ch™
 =
SDPCM_DATA_CHANNEL
Ë|| (ch™ =
SDPCM_EVENT_CHANNEL
));

4783 i‡(
rx£q
 !
£q
) {

4784 
	`DHD_GLOM
(("%s:Ñx_seq %d,Éxpected %d\n",

4785 
__FUNCTION__
, 
£q
, 
rx£q
));

4786 
bus
->
rx_bad£q
++;

4787 
rx£q
 = 
£q
;

4790 #ifde‡
DHD_DEBUG


4791 i‡(
	`DHD_BYTES_ON
(Ë&& 
	`DHD_DATA_ON
()) {

4792 
	`¥hex
("Rx Sub‰amêD©a", 
d±r
, 
dÀn
);

4796 
	`PKTSETLEN
(
osh
, 
pfú°
, 
subÀn
);

4797 
	`PKTPULL
(
osh
, 
pfú°
, 
doff
);

4799 
ª‹dî_öfo_Àn
 = (
ª‹dî_öfo_buf
);

4801 i‡(
	`PKTLEN
(
osh
, 
pfú°
) == 0) {

4802 
	`PKTFREE
(
bus
->
dhd
->
osh
, 
pfú°
, 
FALSE
);

4804 } i‡(
	`dhd_¥Ÿ_hdΩuŒ
(
bus
->
dhd
, &
ifidx
, 
pfú°
, 
ª‹dî_öfo_buf
,

4805 &
ª‹dî_öfo_Àn
) != 0) {

4806 
	`DHD_ERROR
(("%s:ÑxÖrŸocﬁÉº‹\n", 
__FUNCTION__
));

4807 
bus
->
dhd
->
rx_îr‹s
++;

4808 
	`PKTFREE
(
osh
, 
pfú°
, 
FALSE
);

4811 i‡(
ª‹dî_öfo_Àn
) {

4812 
uöt32
 
‰ì_buf_cou¡
;

4813 *
µfú°
;

4815 
µfú°
 = 
pfú°
;

4817 
	`dhd_¥o˚ss_pkt_ª‹dî_öfo
(
bus
->
dhd
, 
ª‹dî_öfo_buf
,

4818 
ª‹dî_öfo_Àn
, &
µfú°
, &
‰ì_buf_cou¡
);

4820 i‡(
‰ì_buf_cou¡
 == 0) {

4824 *
ãmp
;

4827 
ãmp
 = 
µfú°
;

4828 
	`PKTNEXT
(
osh
, 
ãmp
Ë!
NULL
) {

4829 
ãmp
 = 
	`PKTNEXT
(
osh
,Åemp);

4831 
pfú°
 = 
ãmp
;

4832 i‡(
li°_èû
[
ifidx
] =
NULL
) {

4833 
li°_hód
[
ifidx
] = 
µfú°
;

4834 
li°_èû
[
ifidx
] = 
pfú°
;

4837 
	`PKTSETNEXT
(
osh
, 
li°_èû
[
ifidx
], 
µfú°
);

4838 
li°_èû
[
ifidx
] = 
pfú°
;

4842 
num
 +(
uöt8
)
‰ì_buf_cou¡
;

4847 i‡(
li°_èû
[
ifidx
] =
NULL
) {

4848 
li°_hód
[
ifidx
] = 
li°_èû
[ifidx] = 
pfú°
;

4851 
	`PKTSETNEXT
(
osh
, 
li°_èû
[
ifidx
], 
pfú°
);

4852 
li°_èû
[
ifidx
] = 
pfú°
;

4854 
num
++;

4856 #ifde‡
DHD_DEBUG


4857 i‡(
	`DHD_GLOM_ON
()) {

4858 
	`DHD_GLOM
(("%s subframe %dÅo stack, %p(%p/%d)Çxt/lnk %p/%p\n",

4859 
__FUNCTION__
, 
num
, 
pfú°
,

4860 
	`PKTDATA
(
osh
, 
pfú°
), 
	`PKTLEN
(osh,Öfirst),

4861 
	`PKTNEXT
(
osh
, 
pfú°
), 
	`PKTLINK
(pfirst)));

4862 
	`¥hex
("", (
uöt8
 *)
	`PKTDATA
(
osh
, 
pfú°
),

4863 
	`MIN
(
	`PKTLEN
(
osh
, 
pfú°
), 32));

4867 
	`dhd_os_sdu∆ock_rxq
(
bus
->
dhd
);

4869 
idx
 = 0; idx < 
DHD_MAX_IFS
; idx++) {

4870 i‡(
li°_hód
[
idx
]) {

4871 *
ãmp
;

4872 
uöt8
 
˙t
 = 0;

4873 
ãmp
 = 
li°_hód
[
idx
];

4875 
ãmp
 = 
	`PKTNEXT
(
osh
,Åemp);

4876 
˙t
++;

4877 } 
ãmp
);

4878 i‡(
˙t
) {

4879 
	`dhd_os_sdu∆ock
(
bus
->
dhd
);

4880 
	`dhd_rx_‰ame
(
bus
->
dhd
, 
idx
, 
li°_hód
[idx], 
˙t
, 0);

4881 
	`dhd_os_sdlock
(
bus
->
dhd
);

4885 
bus
->
rxglom‰ames
++;

4886 
bus
->
rxglompkts
 +
num
;

4888  
num
;

4889 
	}
}

4893 
uöt


4894 
	$dhdsdio_ªad‰ames
(
dhd_bus_t
 *
bus
, 
uöt
 
max‰ames
, 
boﬁ
 *
föished
)

4896 
o¶_t
 *
osh
 = 
bus
->
dhd
->osh;

4897 
bcmsdh_öfo_t
 *
sdh
 = 
bus
->sdh;

4899 
uöt16
 
Àn
, 
check
;

4900 
uöt8
 
ch™
, 
£q
, 
doff
;

4901 
uöt8
 
fcbôs
;

4902 
uöt8
 
dñè
;

4904 *
pkt
;

4905 
uöt16
 
∑d
;

4906 
uöt16
 
rdÀn
;

4907 
uöt8
 
rx£q
;

4908 
uöt
 
rxÀ·
 = 0;

4909 
sdªt
;

4910 
uöt8
 
txmax
;

4911 
boﬁ
 
Àn_c⁄si°ít
;

4912 
uöt8
 *
rxbuf
;

4913 
ifidx
 = 0;

4914 
uöt
 
rxcou¡
 = 0;

4915 
uch¨
 
ª‹dî_öfo_buf
[
WLHOST_REORDERDATA_TOTLEN
];

4916 
uöt
 
ª‹dî_öfo_Àn
;

4917 
uöt
 
pkt_cou¡
;

4919 #i‡
	`deföed
(
DHD_DEBUG
Ë|| deföed(
SDTEST
)

4920 
boﬁ
 
sdã°
 = 
FALSE
;

4923 
	`DHD_TRACE
(("%s: E¡î\n", 
__FUNCTION__
));

4925 
bus
->
ªad‰ames
 = 
TRUE
;

4927 i‡(!
	`KSO_ENAB
(
bus
)) {

4928 
	`DHD_ERROR
(("%s: KSO off\n", 
__FUNCTION__
));

4929 
bus
->
ªad‰ames
 = 
FALSE
;

4933 
	`ASSERT
(
max‰ames
);

4935 #ifde‡
SDTEST


4937 i‡(
bus
->
pktgí_cou¡
 && (bus->
pktgí_mode
 =
DHD_PKTGEN_RECV
)) {

4938 
max‰ames
 = 
bus
->
pktgí_cou¡
;

4939 
sdã°
 = 
TRUE
;

4944 *
föished
 = 
FALSE
;

4947 
rx£q
 = 
bus
->
rx_£q
, 
rxÀ·
 = 
max‰ames
;

4948 !
bus
->
rxskù
 && 
rxÀ·
 && bus->
dhd
->
bus°©e
 !
DHD_BUS_DOWN
;

4949 
rx£q
++, 
rxÀ·
--) {

4951 #ifde‡
DHDTHREAD


4953 i‡(
bus
->
sih
->
chù
!=
BCM43362_CHIP_ID
 && bus->sih->
chùªv
!=
BCM43362A0_CHIP_REV
) {

4955 i‡((
bus
->
˛k°©e
 =
CLK_AVAIL
Ë&& !bus->
fc°©e
 &&

4956 
	`pktq_mÀn
(&
bus
->
txq
, ~bus->
Êowc⁄åﬁ
Ë&& 
	`DATAOK
(bus)) {

4957 
	`dhdsdio_£nd‰omq
(
bus
, 
dhd_txbound
);

4963 i‡(
bus
->
glom
 || bus->
glomd
) {

4964 
uöt8
 
˙t
;

4965 
	`DHD_GLOM
(("%s: callingÑxglom: glomd %p, glom %p\n",

4966 
__FUNCTION__
, 
bus
->
glomd
, bus->
glom
));

4967 
˙t
 = 
	`dhdsdio_rxglom
(
bus
, 
rx£q
);

4968 
	`DHD_GLOM
(("%s:ÑxglomÑëu∫ed %d\n", 
__FUNCTION__
, 
˙t
));

4969 
rx£q
 +
˙t
 - 1;

4970 
rxÀ·
 = (rxÀ· > 
˙t
) ? (rxleft - cnt) : 1;

4975 i‡(
dhd_ªadahód
 && 
bus
->
√xéí
) {

4976 
uöt16
 
√xéí
 = 
bus
->nextlen;

4977 
bus
->
√xéí
 = 0;

4979 i‡(
bus
->bu†=
SPI_BUS
) {

4980 
rdÀn
 = 
Àn
 = 
√xéí
;

4983 
rdÀn
 = 
Àn
 = 
√xéí
 << 4;

4986 i‡(
bus
->
roundup
 && bus->
blocksize
 && (
rdÀn
 > bus->blocksize)) {

4987 
∑d
 = 
bus
->
blocksize
 - (
rdÀn
 % bus->blocksize);

4988 i‡((
∑d
 <
bus
->
roundup
Ë&& (∑d < bus->
blocksize
) &&

4989 ((
rdÀn
 + 
∑d
 + 
fú°ªad
Ë< 
MAX_RX_DATASZ
))

4990 
rdÀn
 +
∑d
;

4991 } i‡(
rdÀn
 % 
DHD_SDALIGN
) {

4992 
rdÀn
 +
DHD_SDALIGN
 - (rdlen % DHD_SDALIGN);

5003 
	`dhd_os_sdlock_rxq
(
bus
->
dhd
);

5004 i‡(!(
pkt
 = 
	`PKTGET
(
osh
, 
rdÀn
 + 
DHD_SDALIGN
, 
FALSE
))) {

5005 i‡(
bus
->bu†=
SPI_BUS
) {

5006 
bus
->
u£buÂoﬁ
 = 
FALSE
;

5007 
bus
->
rx˘l
 = bus->
rxbuf
;

5008 i‡(
dhd_Æign˘l
) {

5009 
bus
->
rx˘l
 +
fú°ªad
;

5010 i‡((
∑d
 = ((
uöçå
)
bus
->
rx˘l
 % 
DHD_SDALIGN
)))

5011 
bus
->
rx˘l
 +(
DHD_SDALIGN
 - 
∑d
);

5012 
bus
->
rx˘l
 -
fú°ªad
;

5014 
	`ASSERT
(
bus
->
rx˘l
 >bus->
rxbuf
);

5015 
rxbuf
 = 
bus
->
rx˘l
;

5017 
sdªt
 = 
	`dhd_bcmsdh_ªcv_buf
(
bus
,

5018 
	`bcmsdh_cur_sbwad
(
sdh
),

5019 
SDIO_FUNC_2
,

5020 
F2SYNC
, 
rxbuf
, 
rdÀn
,

5021 
NULL
, NULL, NULL);

5022 
bus
->
f2rxd©a
++;

5023 
	`ASSERT
(
sdªt
 !
BCME_PENDING
);

5027 i‡(
sdªt
 < 0) {

5028 
	`DHD_ERROR
(("%s:Ñead %d control bytes failed: %d\n",

5029 
__FUNCTION__
, 
rdÀn
, 
sdªt
));

5031 
bus
->
rxc_îr‹s
++;

5032 
	`dhd_os_sdu∆ock_rxq
(
bus
->
dhd
);

5033 
	`dhdsdio_rxÁû
(
bus
, 
TRUE
,

5034 (
bus
->bu†=
SPI_BUS
Ë? 
FALSE
 : 
TRUE
);

5039 
	`DHD_ERROR
(("%s (nextlen): PKTGET failed:Üen %dÑdlen %d "

5041 
__FUNCTION__
, 
Àn
, 
rdÀn
, 
rx£q
));

5043 
	`dhd_os_sdu∆ock_rxq
(
bus
->
dhd
);

5047 i‡(
bus
->bu†=
SPI_BUS
)

5048 
bus
->
u£buÂoﬁ
 = 
TRUE
;

5050 
	`ASSERT
(!
	`PKTLINK
(
pkt
));

5051 
	`PKTALIGN
(
osh
, 
pkt
, 
rdÀn
, 
DHD_SDALIGN
);

5052 
rxbuf
 = (
uöt8
 *)
	`PKTDATA
(
osh
, 
pkt
);

5054 
sdªt
 = 
	`dhd_bcmsdh_ªcv_buf
(
bus
, 
	`bcmsdh_cur_sbwad
(
sdh
),

5055 
SDIO_FUNC_2
,

5056 
F2SYNC
, 
rxbuf
, 
rdÀn
,

5057 
pkt
, 
NULL
, NULL);

5058 
bus
->
f2rxd©a
++;

5059 
	`ASSERT
(
sdªt
 !
BCME_PENDING
);

5061 i‡(
sdªt
 < 0) {

5062 
	`DHD_ERROR
(("%s (nextlen):Ñead %d bytes failed: %d\n",

5063 
__FUNCTION__
, 
rdÀn
, 
sdªt
));

5064 
	`PKTFREE
(
bus
->
dhd
->
osh
, 
pkt
, 
FALSE
);

5065 
bus
->
dhd
->
rx_îr‹s
++;

5066 
	`dhd_os_sdu∆ock_rxq
(
bus
->
dhd
);

5070 
	`dhdsdio_rxÁû
(
bus
, 
TRUE
,

5071 (
bus
->bu†=
SPI_BUS
Ë? 
FALSE
 : 
TRUE
);

5075 
	`dhd_os_sdu∆ock_rxq
(
bus
->
dhd
);

5078 
	`bc›y
(
rxbuf
, 
bus
->
rxhdr
, 
SDPCM_HDRLEN_RX
);

5081 
Àn
 = 
	`…oh16_ua
(
bus
->
rxhdr
);

5082 
check
 = 
	`…oh16_ua
(
bus
->
rxhdr
 + (
uöt16
));

5085 i‡(!(
Àn
|
check
)) {

5086 
	`DHD_INFO
(("%s (nextlen):Ñead zeros in HW header???\n",

5087 
__FUNCTION__
));

5088 
	`dhd_os_sdlock_rxq
(
bus
->
dhd
);

5089 
	`PKTFREE2
();

5090 
	`dhd_os_sdu∆ock_rxq
(
bus
->
dhd
);

5091 
GSPI_PR55150_BAILOUT
;

5096 i‡((
uöt16
)~(
Àn
^
check
)) {

5097 
	`DHD_ERROR
(("%s (nextlen): HW hdrÉrror:Çextlen/len/check"

5098 " 0x%04x/0x%04x/0x%04x\n", 
__FUNCTION__
, 
√xéí
,

5099 
Àn
, 
check
));

5100 
	`dhd_os_sdlock_rxq
(
bus
->
dhd
);

5101 
	`PKTFREE2
();

5102 
	`dhd_os_sdu∆ock_rxq
(
bus
->
dhd
);

5103 
bus
->
rx_badhdr
++;

5104 
	`dhdsdio_rxÁû
(
bus
, 
FALSE
, FALSE);

5105 
GSPI_PR55150_BAILOUT
;

5110 i‡(
Àn
 < 
SDPCM_HDRLEN_RX
) {

5111 
	`DHD_ERROR
(("%s (nextlen): HW hdrÜength invalid: %d\n",

5112 
__FUNCTION__
, 
Àn
));

5113 
	`dhd_os_sdlock_rxq
(
bus
->
dhd
);

5114 
	`PKTFREE2
();

5115 
	`dhd_os_sdu∆ock_rxq
(
bus
->
dhd
);

5116 
GSPI_PR55150_BAILOUT
;

5121 
Àn_c⁄si°ít
 = (
√xéí
 !(
	`ROUNDUP
(
Àn
, 16) >> 4));

5122 i‡(
Àn_c⁄si°ít
) {

5124 
	`DHD_ERROR
(("%s (nextlen): mismatch,Çextlen %dÜen %dÑnd %d; "

5126 
__FUNCTION__
, 
√xéí
, 
Àn
, 
	`ROUNDUP
÷í, 16), 
rx£q
));

5127 
	`dhd_os_sdlock_rxq
(
bus
->
dhd
);

5128 
	`PKTFREE2
();

5129 
	`dhd_os_sdu∆ock_rxq
(
bus
->
dhd
);

5130 
	`dhdsdio_rxÁû
(
bus
, 
TRUE
, (bus->bu†=
SPI_BUS
Ë? 
FALSE
 : TRUE);

5131 
GSPI_PR55150_BAILOUT
;

5137 
ch™
 = 
	`SDPCM_PACKET_CHANNEL
(&
bus
->
rxhdr
[
SDPCM_FRAMETAG_LEN
]);

5138 
£q
 = 
	`SDPCM_PACKET_SEQUENCE
(&
bus
->
rxhdr
[
SDPCM_FRAMETAG_LEN
]);

5139 
doff
 = 
	`SDPCM_DOFFSET_VALUE
(&
bus
->
rxhdr
[
SDPCM_FRAMETAG_LEN
]);

5140 
txmax
 = 
	`SDPCM_WINDOW_VALUE
(&
bus
->
rxhdr
[
SDPCM_FRAMETAG_LEN
]);

5142 
bus
->
√xéí
 =

5143 
bus
->
rxhdr
[
SDPCM_FRAMETAG_LEN
 + 
SDPCM_NEXTLEN_OFFSET
];

5144 i‡((
bus
->
√xéí
 << 4Ë> 
MAX_RX_DATASZ
) {

5145 
	`DHD_INFO
(("%s (nextlen): got frame w/nextlenÅooÜarge"

5146 " (%d), seq %d\n", 
__FUNCTION__
, 
bus
->
√xéí
,

5147 
£q
));

5148 
bus
->
√xéí
 = 0;

5151 
bus
->
dhd
->
rx_ªadahód_˙t
 ++;

5153 
fcbôs
 = 
	`SDPCM_FCMASK_VALUE
(&
bus
->
rxhdr
[
SDPCM_FRAMETAG_LEN
]);

5155 
dñè
 = 0;

5156 i‡(~
bus
->
Êowc⁄åﬁ
 & 
fcbôs
) {

5157 
bus
->
fc_xoff
++;

5158 
dñè
 = 1;

5160 i‡(
bus
->
Êowc⁄åﬁ
 & ~
fcbôs
) {

5161 
bus
->
fc_x⁄
++;

5162 
dñè
 = 1;

5165 i‡(
dñè
) {

5166 
bus
->
fc_rcvd
++;

5167 
bus
->
Êowc⁄åﬁ
 = 
fcbôs
;

5171 i‡(
rx£q
 !
£q
) {

5172 
	`DHD_INFO
(("%s (nextlen):Ñx_seq %d,Éxpected %d\n",

5173 
__FUNCTION__
, 
£q
, 
rx£q
));

5174 
bus
->
rx_bad£q
++;

5175 
rx£q
 = 
£q
;

5179 i‡((
uöt8
)(
txmax
 - 
bus
->
tx_£q
) > 0x40) {

5180 
	`DHD_ERROR
(("%s: got unlikelyÅx max %d withÅx_seq %d\n",

5181 
__FUNCTION__
, 
txmax
, 
bus
->
tx_£q
));

5182 
txmax
 = 
bus
->
tx_max
;

5184 
bus
->
tx_max
 = 
txmax
;

5186 #ifde‡
DHD_DEBUG


5187 i‡(
	`DHD_BYTES_ON
(Ë&& 
	`DHD_DATA_ON
()) {

5188 
	`¥hex
("Rx D©a", 
rxbuf
, 
Àn
);

5189 } i‡(
	`DHD_HDRS_ON
()) {

5190 
	`¥hex
("RxHdr", 
bus
->
rxhdr
, 
SDPCM_HDRLEN_RX
);

5194 i‡(
ch™
 =
SDPCM_CONTROL_CHANNEL
) {

5195 i‡(
bus
->bu†=
SPI_BUS
) {

5196 
	`dhdsdio_ªad_c⁄åﬁ
(
bus
, 
rxbuf
, 
Àn
, 
doff
);

5197 i‡(
bus
->
u£buÂoﬁ
) {

5198 
	`dhd_os_sdlock_rxq
(
bus
->
dhd
);

5199 
	`PKTFREE
(
bus
->
dhd
->
osh
, 
pkt
, 
FALSE
);

5200 
	`dhd_os_sdu∆ock_rxq
(
bus
->
dhd
);

5204 
	`DHD_ERROR
(("%s (nextlen):Ñeadahead on control"

5205 "Öackë %d?\n", 
__FUNCTION__
, 
£q
));

5207 
bus
->
√xéí
 = 0;

5208 
	`dhdsdio_rxÁû
(
bus
, 
FALSE
, 
TRUE
);

5209 
	`dhd_os_sdlock_rxq
(
bus
->
dhd
);

5210 
	`PKTFREE2
();

5211 
	`dhd_os_sdu∆ock_rxq
(
bus
->
dhd
);

5216 i‡((
bus
->bu†=
SPI_BUS
Ë&& !bus->
u£buÂoﬁ
) {

5217 
	`DHD_ERROR
(("Received %d bytes on %d channel. Running out of "

5218 "rxÖktbuf'†‹ÇŸ yë mÆlo˚d.\n", 
Àn
, 
ch™
));

5223 i‡((
doff
 < 
SDPCM_HDRLEN_RX
Ë|| (dof‡> 
Àn
)) {

5224 
	`DHD_ERROR
(("%s (nextlen): bad data offset %d: HWÜen %d min %d\n",

5225 
__FUNCTION__
, 
doff
, 
Àn
, 
SDPCM_HDRLEN_RX
));

5226 
	`dhd_os_sdlock_rxq
(
bus
->
dhd
);

5227 
	`PKTFREE2
();

5228 
	`dhd_os_sdu∆ock_rxq
(
bus
->
dhd
);

5229 
	`ASSERT
(0);

5230 
	`dhdsdio_rxÁû
(
bus
, 
FALSE
, FALSE);

5235 
dñivî
;

5238 i‡(
bus
->bu†=
SPI_BUS
) {

5243 
sdªt
 = 
	`dhd_bcmsdh_ªcv_buf
(
bus
, 
	`bcmsdh_cur_sbwad
(
sdh
), 
SDIO_FUNC_2
, 
F2SYNC
,

5244 
bus
->
rxhdr
, 
fú°ªad
, 
NULL
, NULL, NULL);

5245 
bus
->
f2rxhdrs
++;

5246 
	`ASSERT
(
sdªt
 !
BCME_PENDING
);

5248 i‡(
sdªt
 < 0) {

5249 
	`DHD_ERROR
(("%s: RXHEADER FAILED: %d\n", 
__FUNCTION__
, 
sdªt
));

5250 
bus
->
rx_hdrÁû
++;

5251 
	`dhdsdio_rxÁû
(
bus
, 
TRUE
, TRUE);

5255 #ifde‡
DHD_DEBUG


5256 i‡(
	`DHD_BYTES_ON
(Ë|| 
	`DHD_HDRS_ON
()) {

5257 
	`¥hex
("RxHdr", 
bus
->
rxhdr
, 
SDPCM_HDRLEN_RX
);

5262 
Àn
 = 
	`…oh16_ua
(
bus
->
rxhdr
);

5263 
check
 = 
	`…oh16_ua
(
bus
->
rxhdr
 + (
uöt16
));

5266 i‡(!(
Àn
|
check
)) {

5267 *
föished
 = 
TRUE
;

5272 i‡((
uöt16
)~(
Àn
^
check
)) {

5273 
	`DHD_ERROR
(("%s: HW hdrÉrror:Üen/check 0x%04x/0x%04x\n",

5274 
__FUNCTION__
, 
Àn
, 
check
));

5275 
bus
->
rx_badhdr
++;

5276 
	`dhdsdio_rxÁû
(
bus
, 
FALSE
, FALSE);

5281 i‡(
Àn
 < 
SDPCM_HDRLEN_RX
) {

5282 
	`DHD_ERROR
(("%s: HW hd∏Àngth invÆid: %d\n", 
__FUNCTION__
, 
Àn
));

5287 
ch™
 = 
	`SDPCM_PACKET_CHANNEL
(&
bus
->
rxhdr
[
SDPCM_FRAMETAG_LEN
]);

5288 
£q
 = 
	`SDPCM_PACKET_SEQUENCE
(&
bus
->
rxhdr
[
SDPCM_FRAMETAG_LEN
]);

5289 
doff
 = 
	`SDPCM_DOFFSET_VALUE
(&
bus
->
rxhdr
[
SDPCM_FRAMETAG_LEN
]);

5290 
txmax
 = 
	`SDPCM_WINDOW_VALUE
(&
bus
->
rxhdr
[
SDPCM_FRAMETAG_LEN
]);

5293 i‡((
doff
 < 
SDPCM_HDRLEN_RX
Ë|| (dof‡> 
Àn
)) {

5294 
	`DHD_ERROR
(("%s: Bad data offset %d: HWÜen %d, min %d seq %d\n",

5295 
__FUNCTION__
, 
doff
, 
Àn
, 
SDPCM_HDRLEN_RX
, 
£q
));

5296 
bus
->
rx_badhdr
++;

5297 
	`ASSERT
(0);

5298 
	`dhdsdio_rxÁû
(
bus
, 
FALSE
, FALSE);

5303 
bus
->
√xéí
 = bus->
rxhdr
[
SDPCM_FRAMETAG_LEN
 + 
SDPCM_NEXTLEN_OFFSET
];

5304 i‡((
bus
->
√xéí
 << 4Ë> 
MAX_RX_DATASZ
) {

5305 
	`DHD_INFO
(("%s (nextlen): got frame w/nextlenÅooÜarge (%d), seq %d\n",

5306 
__FUNCTION__
, 
bus
->
√xéí
, 
£q
));

5307 
bus
->
√xéí
 = 0;

5311 
fcbôs
 = 
	`SDPCM_FCMASK_VALUE
(&
bus
->
rxhdr
[
SDPCM_FRAMETAG_LEN
]);

5313 
dñè
 = 0;

5314 i‡(~
bus
->
Êowc⁄åﬁ
 & 
fcbôs
) {

5315 
bus
->
fc_xoff
++;

5316 
dñè
 = 1;

5318 i‡(
bus
->
Êowc⁄åﬁ
 & ~
fcbôs
) {

5319 
bus
->
fc_x⁄
++;

5320 
dñè
 = 1;

5323 i‡(
dñè
) {

5324 
bus
->
fc_rcvd
++;

5325 
bus
->
Êowc⁄åﬁ
 = 
fcbôs
;

5329 i‡(
rx£q
 !
£q
) {

5330 
	`DHD_INFO
(("%s:Ñx_£q %d,Éx≥˘ed %d\n", 
__FUNCTION__
, 
£q
, 
rx£q
));

5331 
bus
->
rx_bad£q
++;

5332 
rx£q
 = 
£q
;

5336 i‡((
uöt8
)(
txmax
 - 
bus
->
tx_£q
) > 0x40) {

5337 
	`DHD_ERROR
(("%s: got unlikelyÅx max %d withÅx_seq %d\n",

5338 
__FUNCTION__
, 
txmax
, 
bus
->
tx_£q
));

5339 
txmax
 = 
bus
->
tx_max
;

5341 
bus
->
tx_max
 = 
txmax
;

5344 i‡(
ch™
 =
SDPCM_CONTROL_CHANNEL
) {

5345 
	`dhdsdio_ªad_c⁄åﬁ
(
bus
, bus->
rxhdr
, 
Àn
, 
doff
);

5349 
	`ASSERT
((
ch™
 =
SDPCM_DATA_CHANNEL
Ë|| (ch™ =
SDPCM_EVENT_CHANNEL
) ||

5350 (
ch™
 =
SDPCM_TEST_CHANNEL
Ë|| (ch™ =
SDPCM_GLOM_CHANNEL
));

5353 
rdÀn
 = (
Àn
 > 
fú°ªad
) ? (len - firstread) : 0;

5356 i‡(
bus
->
roundup
 && bus->
blocksize
 && (
rdÀn
 > bus->blocksize)) {

5357 
∑d
 = 
bus
->
blocksize
 - (
rdÀn
 % bus->blocksize);

5358 i‡((
∑d
 <
bus
->
roundup
Ë&& (∑d < bus->
blocksize
) &&

5359 ((
rdÀn
 + 
∑d
 + 
fú°ªad
Ë< 
MAX_RX_DATASZ
))

5360 
rdÀn
 +
∑d
;

5361 } i‡(
rdÀn
 % 
DHD_SDALIGN
) {

5362 
rdÀn
 +
DHD_SDALIGN
 - (rdlen % DHD_SDALIGN);

5366 i‡(
f‹˚Æign
 && (
rdÀn
 & (
ALIGNMENT
 - 1)))

5367 
rdÀn
 = 
	`ROUNDUP
‘dÀn, 
ALIGNMENT
);

5369 i‡((
rdÀn
 + 
fú°ªad
Ë> 
MAX_RX_DATASZ
) {

5371 
	`DHD_ERROR
(("%s:Åoÿl⁄g:Üí %dÑdÀ¿%d\n", 
__FUNCTION__
, 
Àn
, 
rdÀn
));

5372 
bus
->
dhd
->
rx_îr‹s
++; bus->
rx_toﬁ⁄g
++;

5373 
	`dhdsdio_rxÁû
(
bus
, 
FALSE
, FALSE);

5377 
	`dhd_os_sdlock_rxq
(
bus
->
dhd
);

5378 i‡(!(
pkt
 = 
	`PKTGET
(
osh
, (
rdÀn
 + 
fú°ªad
 + 
DHD_SDALIGN
), 
FALSE
))) {

5380 
	`DHD_ERROR
(("%s: PKTGET failed:Ñdlen %d chan %d\n",

5381 
__FUNCTION__
, 
rdÀn
, 
ch™
));

5382 
bus
->
dhd
->
rx_dr›≥d
++;

5383 
	`dhd_os_sdu∆ock_rxq
(
bus
->
dhd
);

5384 
	`dhdsdio_rxÁû
(
bus
, 
FALSE
, 
	`RETRYCHAN
(
ch™
));

5387 
	`dhd_os_sdu∆ock_rxq
(
bus
->
dhd
);

5389 
	`ASSERT
(!
	`PKTLINK
(
pkt
));

5392 
	`ASSERT
(
fú°ªad
 < (
	`PKTLEN
(
osh
, 
pkt
)));

5393 
	`PKTPULL
(
osh
, 
pkt
, 
fú°ªad
);

5394 
	`PKTALIGN
(
osh
, 
pkt
, 
rdÀn
, 
DHD_SDALIGN
);

5397 
sdªt
 = 
	`dhd_bcmsdh_ªcv_buf
(
bus
, 
	`bcmsdh_cur_sbwad
(
sdh
), 
SDIO_FUNC_2
, 
F2SYNC
,

5398 ((
uöt8
 *)
	`PKTDATA
(
osh
, 
pkt
)), 
rdÀn
,Ökt, 
NULL
, NULL);

5399 
bus
->
f2rxd©a
++;

5400 
	`ASSERT
(
sdªt
 !
BCME_PENDING
);

5402 i‡(
sdªt
 < 0) {

5403 
	`DHD_ERROR
(("%s:Ñód %d %†byã†Áûed: %d\n", 
__FUNCTION__
, 
rdÀn
,

5404 ((
ch™
 =
SDPCM_EVENT_CHANNEL
) ? "event" :

5405 ((
ch™
 =
SDPCM_DATA_CHANNEL
Ë? "d©a" : "ã°")), 
sdªt
));

5406 
	`dhd_os_sdlock_rxq
(
bus
->
dhd
);

5407 
	`PKTFREE
(
bus
->
dhd
->
osh
, 
pkt
, 
FALSE
);

5408 
	`dhd_os_sdu∆ock_rxq
(
bus
->
dhd
);

5409 
bus
->
dhd
->
rx_îr‹s
++;

5410 
	`dhdsdio_rxÁû
(
bus
, 
TRUE
, 
	`RETRYCHAN
(
ch™
));

5415 
	`PKTPUSH
(
osh
, 
pkt
, 
fú°ªad
);

5416 
	`bc›y
(
bus
->
rxhdr
, 
	`PKTDATA
(
osh
, 
pkt
), 
fú°ªad
);

5418 #ifde‡
DHD_DEBUG


5419 i‡(
	`DHD_BYTES_ON
(Ë&& 
	`DHD_DATA_ON
()) {

5420 
	`¥hex
("Rx D©a", 
	`PKTDATA
(
osh
, 
pkt
), 
Àn
);

5424 
dñivî
:

5426 i‡(
ch™
 =
SDPCM_GLOM_CHANNEL
) {

5427 i‡(
	`SDPCM_GLOMDESC
(&
bus
->
rxhdr
[
SDPCM_FRAMETAG_LEN
])) {

5428 
	`DHD_GLOM
(("%s: got glom descriptor, %d bytes:\n",

5429 
__FUNCTION__
, 
Àn
));

5430 #ifde‡
DHD_DEBUG


5431 i‡(
	`DHD_GLOM_ON
()) {

5432 
	`¥hex
("Glom D©a", 
	`PKTDATA
(
osh
, 
pkt
), 
Àn
);

5435 
	`PKTSETLEN
(
osh
, 
pkt
, 
Àn
);

5436 
	`ASSERT
(
doff
 =
SDPCM_HDRLEN_RX
);

5437 
	`PKTPULL
(
osh
, 
pkt
, 
SDPCM_HDRLEN_RX
);

5438 
bus
->
glomd
 = 
pkt
;

5440 
	`DHD_ERROR
(("%s: glom su≥r‰amêw/ÿdes¸ùt‹!\n", 
__FUNCTION__
));

5441 
	`dhdsdio_rxÁû
(
bus
, 
FALSE
, FALSE);

5447 
	`PKTSETLEN
(
osh
, 
pkt
, 
Àn
);

5448 
	`PKTPULL
(
osh
, 
pkt
, 
doff
);

5450 #ifde‡
SDTEST


5452 i‡(
ch™
 =
SDPCM_TEST_CHANNEL
) {

5453 
	`dhdsdio_ã°rcv
(
bus
, 
pkt
, 
£q
);

5458 i‡(
	`PKTLEN
(
osh
, 
pkt
) == 0) {

5459 
	`dhd_os_sdlock_rxq
(
bus
->
dhd
);

5460 
	`PKTFREE
(
bus
->
dhd
->
osh
, 
pkt
, 
FALSE
);

5461 
	`dhd_os_sdu∆ock_rxq
(
bus
->
dhd
);

5463 } i‡(
	`dhd_¥Ÿ_hdΩuŒ
(
bus
->
dhd
, &
ifidx
, 
pkt
, 
ª‹dî_öfo_buf
,

5464 &
ª‹dî_öfo_Àn
) != 0) {

5465 
	`DHD_ERROR
(("%s:ÑxÖrŸocﬁÉº‹\n", 
__FUNCTION__
));

5466 
	`dhd_os_sdlock_rxq
(
bus
->
dhd
);

5467 
	`PKTFREE
(
bus
->
dhd
->
osh
, 
pkt
, 
FALSE
);

5468 
	`dhd_os_sdu∆ock_rxq
(
bus
->
dhd
);

5469 
bus
->
dhd
->
rx_îr‹s
++;

5472 i‡(
ª‹dî_öfo_Àn
) {

5474 
	`dhd_¥o˚ss_pkt_ª‹dî_öfo
(
bus
->
dhd
, 
ª‹dî_öfo_buf
, 
ª‹dî_öfo_Àn
,

5475 &
pkt
, &
pkt_cou¡
);

5476 i‡(
pkt_cou¡
 == 0)

5480 
pkt_cou¡
 = 1;

5484 
	`dhd_os_sdu∆ock
(
bus
->
dhd
);

5485 
	`dhd_rx_‰ame
(
bus
->
dhd
, 
ifidx
, 
pkt
, 
pkt_cou¡
, 
ch™
);

5486 
	`dhd_os_sdlock
(
bus
->
dhd
);

5488 
rxcou¡
 = 
max‰ames
 - 
rxÀ·
;

5489 #ifde‡
DHD_DEBUG


5491 i‡(!
rxÀ·
 && !
sdã°
)

5492 
	`DHD_DATA
(("%s: hôÑxÜimô o‡%d fømes\n", 
__FUNCTION__
, 
max‰ames
));

5495 
	`DHD_DATA
(("%s:Öro˚s£d %d fømes\n", 
__FUNCTION__
, 
rxcou¡
));

5497 i‡(
bus
->
rxskù
)

5498 
rx£q
--;

5499 
bus
->
rx_£q
 = 
rx£q
;

5501 i‡(
bus
->
ªqbus¶ìp
)

5503 
	`dhdsdio_bus¶ìp
(
bus
, 
TRUE
);

5504 
bus
->
ªqbus¶ìp
 = 
FALSE
;

5506 
bus
->
ªad‰ames
 = 
FALSE
;

5508  
rxcou¡
;

5509 
	}
}

5511 
uöt32


5512 
	$dhdsdio_ho°maû
(
dhd_bus_t
 *
bus
)

5514 
sdpcmd_ªgs_t
 *
ªgs
 = 
bus
->regs;

5515 
uöt32
 
öt°©us
 = 0;

5516 
uöt32
 
hmb_d©a
;

5517 
uöt8
 
fcbôs
;

5518 
uöt
 
ªåõs
 = 0;

5520 
	`DHD_TRACE
(("%s: E¡î\n", 
__FUNCTION__
));

5523 
	`R_SDREG
(
hmb_d©a
, &
ªgs
->
toho°maûboxd©a
, 
ªåõs
);

5524 i‡(
ªåõs
 <
ªåy_limô
)

5525 
	`W_SDREG
(
SMB_INT_ACK
, &
ªgs
->
tosbmaûbox
, 
ªåõs
);

5526 
bus
->
f1ªgd©a
 += 2;

5529 i‡(
hmb_d©a
 & 
HMB_DATA_NAKHANDLED
) {

5530 
	`DHD_INFO
(("D⁄gÀÑï‹t†NAK h™dÀd,Éx≥˘Ñtx o‡%d\n", 
bus
->
rx_£q
));

5531 i‡(!
bus
->
rxskù
) {

5532 
	`DHD_ERROR
(("%s: u√x≥˘ed NAKHANDLED!\n", 
__FUNCTION__
));

5534 
bus
->
rxskù
 = 
FALSE
;

5535 
öt°©us
 |
	`FRAME_AVAIL_MASK
(
bus
);

5541 i‡(
hmb_d©a
 & (
HMB_DATA_DEVREADY
 | 
HMB_DATA_FWREADY
)) {

5542 
bus
->
sdpcm_vî
 = (
hmb_d©a
 & 
HMB_DATA_VERSION_MASK
Ë>> 
HMB_DATA_VERSION_SHIFT
;

5543 i‡(
bus
->
sdpcm_vî
 !
SDPCM_PROT_VERSION
)

5544 
	`DHD_ERROR
(("Version mismatch, dongleÑeports %d,Éxpecting %d\n",

5545 
bus
->
sdpcm_vî
, 
SDPCM_PROT_VERSION
));

5547 
	`DHD_INFO
(("D⁄gÀÑódy,ÖrŸocﬁ vîsi⁄ %d\n", 
bus
->
sdpcm_vî
));

5549 i‡((
bus
->
sih
->
busc‹ëy≥
 =
SDIOD_CORE_ID
Ë&& (bus->
sdpcmªv
 >= 4) &&

5550 (
bus
->
rxöt_mode
 =
SDIO_DEVICE_RXDATAINT_MODE_1
)) {

5551 
uöt32
 
vÆ
;

5553 
vÆ
 = 
	`R_REG
(
bus
->
dhd
->
osh
, &bus->
ªgs
->
c‹ec⁄åﬁ
);

5554 
vÆ
 &~
CC_XMTDATAAVAIL_MODE
;

5555 
vÆ
 |
CC_XMTDATAAVAIL_CTRL
;

5556 
	`W_REG
(
bus
->
dhd
->
osh
, &bus->
ªgs
->
c‹ec⁄åﬁ
, 
vÆ
);

5558 
vÆ
 = 
	`R_REG
(
bus
->
dhd
->
osh
, &bus->
ªgs
->
c‹ec⁄åﬁ
);

5561 #ifde‡
DHD_DEBUG


5564 
sdpcm_sh¨ed_t
 
sh¨ed
;

5565 i‡(
	`dhdsdio_ªadsh¨ed
(
bus
, &
sh¨ed
) == 0)

5566 
bus
->
c⁄sﬁe_addr
 = 
sh¨ed
.console_addr;

5576 i‡(
hmb_d©a
 & 
HMB_DATA_FC
) {

5577 
fcbôs
 = (
hmb_d©a
 & 
HMB_DATA_FCDATA_MASK
Ë>> 
HMB_DATA_FCDATA_SHIFT
;

5579 i‡(
fcbôs
 & ~
bus
->
Êowc⁄åﬁ
)

5580 
bus
->
fc_xoff
++;

5581 i‡(
bus
->
Êowc⁄åﬁ
 & ~
fcbôs
)

5582 
bus
->
fc_x⁄
++;

5584 
bus
->
fc_rcvd
++;

5585 
bus
->
Êowc⁄åﬁ
 = 
fcbôs
;

5588 #ifde‡
DHD_DEBUG


5590 i‡(
hmb_d©a
 & 
HMB_DATA_FWHALT
) {

5591 
	`DHD_ERROR
(("INTERNAL ERROR: FIRMWARE HALTED : set BUS DOWN\n"));

5592 
	`dhdsdio_checkdõd
(
bus
, 
NULL
, 0);

5593 
bus
->
dhd
->
bus°©e
 = 
DHD_BUS_DOWN
;

5598 i‡(
hmb_d©a
 & ~(
HMB_DATA_DEVREADY
 |

5599 
HMB_DATA_FWHALT
 |

5600 
HMB_DATA_NAKHANDLED
 |

5601 
HMB_DATA_FC
 |

5602 
HMB_DATA_FWREADY
 |

5603 
HMB_DATA_FCDATA_MASK
 |

5604 
HMB_DATA_VERSION_MASK
)) {

5605 
	`DHD_ERROR
(("Unknow¿maûbox d©®c⁄ã¡: 0x%02x\n", 
hmb_d©a
));

5608  
öt°©us
;

5609 
	}
}

5611 
boﬁ


5612 
	$dhdsdio_dpc
(
dhd_bus_t
 *
bus
)

5614 
bcmsdh_öfo_t
 *
sdh
 = 
bus
->sdh;

5615 
sdpcmd_ªgs_t
 *
ªgs
 = 
bus
->regs;

5616 
uöt32
 
öt°©us
, 
√w°©us
 = 0;

5617 
uöt
 
ªåõs
 = 0;

5618 
uöt
 
rxlimô
 = 
dhd_rxbound
;

5619 
uöt
 
txlimô
 = 
dhd_txbound
;

5620 
uöt
 
‰ame˙t
 = 0;

5621 
boﬁ
 
rxd⁄e
 = 
TRUE
;

5622 
boﬁ
 
ªsched
 = 
FALSE
;

5624 
	`DHD_TRACE
(("%s: E¡î\n", 
__FUNCTION__
));

5626 i‡(
bus
->
dhd
->
bus°©e
 =
DHD_BUS_DOWN
) {

5627 
	`DHD_ERROR
(("%s: Bu†down,Ñë\n", 
__FUNCTION__
));

5628 
bus
->
öt°©us
 = 0;

5633 
öt°©us
 = 
bus
->intstatus;

5635 
	`dhd_os_sdlock
(
bus
->
dhd
);

5637 i‡(!
	`SLPAUTO_ENAB
(
bus
Ë&& !
	`KSO_ENAB
(bus)) {

5638 
	`DHD_ERROR
(("%s: Devi˚á¶ìp\n", 
__FUNCTION__
));

5639 
exô
;

5643 i‡(!
	`SLPAUTO_ENAB
(
bus
Ë&& (bus->
˛k°©e
 =
CLK_PENDING
)) {

5644 
îr
;

5645 
uöt8
 
˛k˘l
, 
dev˘l
 = 0;

5647 #ifde‡
DHD_DEBUG


5649 
dev˘l
 = 
	`bcmsdh_cfg_ªad
(
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_DEVICE_CTL
, &
îr
);

5650 i‡(
îr
) {

5651 
	`DHD_ERROR
(("%s:Éº‹Ñódög DEVCTL: %d\n", 
__FUNCTION__
, 
îr
));

5652 
bus
->
dhd
->
bus°©e
 = 
DHD_BUS_DOWN
;

5654 
	`ASSERT
(
dev˘l
 & 
SBSDIO_DEVCTL_CA_INT_ONLY
);

5659 
˛k˘l
 = 
	`bcmsdh_cfg_ªad
(
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_FUNC1_CHIPCLKCSR
, &
îr
);

5660 i‡(
îr
) {

5661 
	`DHD_ERROR
(("%s:Éº‹Ñódög CSR: %d\n", 
__FUNCTION__
, 
îr
));

5662 
bus
->
dhd
->
bus°©e
 = 
DHD_BUS_DOWN
;

5665 
	`DHD_INFO
(("DPC: PENDING, dev˘»0x%02x clk˘»0x%02x\n", 
dev˘l
, 
˛k˘l
));

5667 i‡(
	`SBSDIO_HTAV
(
˛k˘l
)) {

5668 
dev˘l
 = 
	`bcmsdh_cfg_ªad
(
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_DEVICE_CTL
, &
îr
);

5669 i‡(
îr
) {

5670 
	`DHD_ERROR
(("%s:ÉrrorÑeading DEVCTL: %d\n",

5671 
__FUNCTION__
, 
îr
));

5672 
bus
->
dhd
->
bus°©e
 = 
DHD_BUS_DOWN
;

5674 
dev˘l
 &~
SBSDIO_DEVCTL_CA_INT_ONLY
;

5675 
	`bcmsdh_cfg_wrôe
(
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_DEVICE_CTL
, 
dev˘l
, &
îr
);

5676 i‡(
îr
) {

5677 
	`DHD_ERROR
(("%s:Érror writing DEVCTL: %d\n",

5678 
__FUNCTION__
, 
îr
));

5679 
bus
->
dhd
->
bus°©e
 = 
DHD_BUS_DOWN
;

5681 
bus
->
˛k°©e
 = 
CLK_AVAIL
;

5683 
˛kwaô
;

5687 
	`BUS_WAKE
(
bus
);

5690 
	`dhdsdio_˛k˘l
(
bus
, 
CLK_AVAIL
, 
TRUE
);

5691 i‡(
bus
->
˛k°©e
 !
CLK_AVAIL
)

5692 
˛kwaô
;

5695 i‡(
bus
->
ùíd
) {

5696 
bus
->
ùíd
 = 
FALSE
;

5697 
	`R_SDREG
(
√w°©us
, &
ªgs
->
öt°©us
, 
ªåõs
);

5698 
bus
->
f1ªgd©a
++;

5699 i‡(
	`bcmsdh_ªgÁû
(
bus
->
sdh
))

5700 
√w°©us
 = 0;

5701 
√w°©us
 &
bus
->
ho°ötmask
;

5702 
bus
->
fc°©e
 = !!(
√w°©us
 & 
I_HMB_FC_STATE
);

5703 i‡(
√w°©us
) {

5704 
bus
->
f1ªgd©a
++;

5705 i‡((
bus
->
rxöt_mode
 =
SDIO_DEVICE_RXDATAINT_MODE_0
) &&

5706 (
√w°©us
 =
I_XMTDATA_AVAIL
)) {

5709 
	`W_SDREG
(
√w°©us
, &
ªgs
->
öt°©us
, 
ªåõs
);

5714 
öt°©us
 |
√w°©us
;

5715 
bus
->
öt°©us
 = 0;

5721 i‡(
öt°©us
 & 
I_HMB_FC_CHANGE
) {

5722 
öt°©us
 &~
I_HMB_FC_CHANGE
;

5723 
	`W_SDREG
(
I_HMB_FC_CHANGE
, &
ªgs
->
öt°©us
, 
ªåõs
);

5724 
	`R_SDREG
(
√w°©us
, &
ªgs
->
öt°©us
, 
ªåõs
);

5725 
bus
->
f1ªgd©a
 += 2;

5726 
bus
->
fc°©e
 = !!(
√w°©us
 & (
I_HMB_FC_STATE
 | 
I_HMB_FC_CHANGE
));

5727 
öt°©us
 |(
√w°©us
 & 
bus
->
ho°ötmask
);

5731 i‡(
öt°©us
 & 
I_CHIPACTIVE
) {

5733 
öt°©us
 &~
I_CHIPACTIVE
;

5737 i‡(
öt°©us
 & 
I_HMB_HOST_INT
) {

5738 
öt°©us
 &~
I_HMB_HOST_INT
;

5739 
öt°©us
 |
	`dhdsdio_ho°maû
(
bus
);

5743 i‡(
öt°©us
 & 
I_WR_OOSYNC
) {

5744 
	`DHD_ERROR
(("DongleÑeports WR_OOSYNC\n"));

5745 
öt°©us
 &~
I_WR_OOSYNC
;

5748 i‡(
öt°©us
 & 
I_RD_OOSYNC
) {

5749 
	`DHD_ERROR
(("DongleÑeports RD_OOSYNC\n"));

5750 
öt°©us
 &~
I_RD_OOSYNC
;

5753 i‡(
öt°©us
 & 
I_SBINT
) {

5754 
	`DHD_ERROR
(("DongleÑeports SBINT\n"));

5755 
öt°©us
 &~
I_SBINT
;

5759 i‡(
öt°©us
 & 
I_CHIPACTIVE
) {

5760 
	`DHD_INFO
(("DongleÑeports CHIPACTIVE\n"));

5761 
öt°©us
 &~
I_CHIPACTIVE
;

5765 i‡(
bus
->
rxskù
) {

5766 
öt°©us
 &~
	`FRAME_AVAIL_MASK
(
bus
);

5770 i‡(
	`PKT_AVAILABLE
(
bus
, 
öt°©us
)) {

5771 
‰ame˙t
 = 
	`dhdsdio_ªad‰ames
(
bus
, 
rxlimô
, &
rxd⁄e
);

5772 i‡(
rxd⁄e
 || 
bus
->
rxskù
)

5773 
öt°©us
 &~
	`FRAME_AVAIL_MASK
(
bus
);

5774 
rxlimô
 -
	`MIN
(
‰ame˙t
,Ñxlimit);

5778 
bus
->
öt°©us
 = intstatus;

5780 
˛kwaô
:

5785 i‡(
bus
->
öå
 && bus->
ötdis
 && !
	`bcmsdh_ªgÁû
(
sdh
)) {

5786 
	`DHD_INTR
(("%s:Énable SDIO interrupts,Ñxdone %d framecnt %d\n",

5787 
__FUNCTION__
, 
rxd⁄e
, 
‰ame˙t
));

5788 
bus
->
ötdis
 = 
FALSE
;

5789 #i‡
	`deföed
(
OOB_INTR_ONLY
)

5790 
	`bcmsdh_oob_öå_£t
(1);

5792 
	`bcmsdh_öå_íabÀ
(
sdh
);

5795 #i‡
	`deföed
(
OOB_INTR_ONLY
Ë&& !deföed(
HW_OOB
)

5802 
	`R_SDREG
(
√w°©us
, &
ªgs
->
öt°©us
, 
ªåõs
);

5803 i‡(
	`bcmsdh_ªgÁû
(
bus
->
sdh
))

5804 
√w°©us
 = 0;

5805 i‡(
√w°©us
 & 
bus
->
ho°ötmask
) {

5806 
bus
->
ùíd
 = 
TRUE
;

5807 
ªsched
 = 
TRUE
;

5810 #ifde‡
PROP_TXSTATUS


5811 
	`dhd_wlfc_åiggî_pktcommô
(
bus
->
dhd
);

5813 i‡(
	`TXCTLOK
(
bus
Ë&& bus->
˘æ_‰ame_°©
 && (bus->
˛k°©e
 =
CLK_AVAIL
)) {

5814 
ªt
, 
i
;

5816 
uöt8
* 
‰ame_£q
 = 
bus
->
˘æ_‰ame_buf
 + 
SDPCM_FRAMETAG_LEN
;

5818 i‡(*
‰ame_£q
 !
bus
->
tx_£q
) {

5819 
	`DHD_INFO
(("%s IOCTL frame seqÜag detected!"

5821 
__FUNCTION__
, *
‰ame_£q
, 
bus
->
tx_£q
));

5822 *
‰ame_£q
 = 
bus
->
tx_£q
;

5825 
ªt
 = 
	`dhd_bcmsdh_£nd_buf
(
bus
, 
	`bcmsdh_cur_sbwad
(
sdh
), 
SDIO_FUNC_2
, 
F2SYNC
,

5826 (
uöt8
 *)
bus
->
˘æ_‰ame_buf
, (
uöt32
)bus->
˘æ_‰ame_Àn
,

5827 
NULL
, NULL, NULL);

5828 
	`ASSERT
(
ªt
 !
BCME_PENDING
);

5829 i‡(
ªt
 =
BCME_NODEVICE
) {

5830 
	`DHD_ERROR
(("%s: Devi˚á¶ì∞Æªady\n", 
__FUNCTION__
));

5831 } i‡(
ªt
 < 0) {

5833 
	`DHD_INFO
(("%s: sdioÉrror %d,ábort commandándÅerminate frame.\n",

5834 
__FUNCTION__
, 
ªt
));

5835 
bus
->
tx_sdîrs
++;

5837 
	`bcmsdh_ab‹t
(
sdh
, 
SDIO_FUNC_2
);

5839 
	`bcmsdh_cfg_wrôe
(
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_FUNC1_FRAMECTRL
,

5840 
SFC_WF_TERM
, 
NULL
);

5841 
bus
->
f1ªgd©a
++;

5843 
i
 = 0; i < 3; i++) {

5844 
uöt8
 
hi
, 
lo
;

5845 
hi
 = 
	`bcmsdh_cfg_ªad
(
sdh
, 
SDIO_FUNC_1
,

5846 
SBSDIO_FUNC1_WFRAMEBCHI
, 
NULL
);

5847 
lo
 = 
	`bcmsdh_cfg_ªad
(
sdh
, 
SDIO_FUNC_1
,

5848 
SBSDIO_FUNC1_WFRAMEBCLO
, 
NULL
);

5849 
bus
->
f1ªgd©a
 += 2;

5850 i‡((
hi
 =0Ë&& (
lo
 == 0))

5854 i‡(
ªt
 == 0) {

5855 
bus
->
tx_£q
 = (bus->tx_£q + 1Ë% 
SDPCM_SEQUENCE_WRAP
;

5858 
bus
->
˘æ_‰ame_°©
 = 
FALSE
;

5859 
	`dhd_waô_evít_wakeup
(
bus
->
dhd
);

5862 i‡((
bus
->
˛k°©e
 =
CLK_AVAIL
Ë&& !bus->
fc°©e
 &&

5863 
	`pktq_mÀn
(&
bus
->
txq
, ~bus->
Êowc⁄åﬁ
Ë&& 
txlimô
 && 
	`DATAOK
(bus)) {

5864 
‰ame˙t
 = 
rxd⁄e
 ? 
txlimô
 : 
	`MIN
—xlimô, 
dhd_txmömax
);

5865 
‰ame˙t
 = 
	`dhdsdio_£nd‰omq
(
bus
, framecnt);

5866 
txlimô
 -
‰ame˙t
;

5869 i‡(
bus
->
˘æ_‰ame_°©
)

5870 
ªsched
 = 
TRUE
;

5874 i‡((
bus
->
dhd
->
bus°©e
 =
DHD_BUS_DOWN
Ë|| 
	`bcmsdh_ªgÁû
(
sdh
)) {

5875 i‡((
bus
->
sih
 && bus->sih->
busc‹îev
 >12Ë&& !(
	`dhdsdio_¶ìpc§_gë
(bus) &

5876 
SBSDIO_FUNC1_SLEEPCSR_KSO_MASK
)) {

5878 
	`DHD_ERROR
(("%s: Bu†Áûed duêtÿKSO\n", 
__FUNCTION__
));

5879 
bus
->
kso
 = 
FALSE
;

5881 
	`DHD_ERROR
(("%s: failed backplaneáccess over SDIO, halting operation\n",

5882 
__FUNCTION__
));

5883 
bus
->
dhd
->
bus°©e
 = 
DHD_BUS_DOWN
;

5884 
bus
->
öt°©us
 = 0;

5886 } i‡(
bus
->
˛k°©e
 =
CLK_PENDING
) {

5888 } i‡(
bus
->
öt°©us
 || bus->
ùíd
 ||

5889 (!
bus
->
fc°©e
 && 
	`pktq_mÀn
(&bus->
txq
, ~bus->
Êowc⁄åﬁ
Ë&& 
	`DATAOK
(bus)) ||

5890 
	`PKT_AVAILABLE
(
bus
, bus->
öt°©us
)) {

5891 
ªsched
 = 
TRUE
;

5894 
bus
->
dpc_sched
 = 
ªsched
;

5897 i‡((
bus
->
idÀtime
 =
DHD_IDLE_IMMEDIATE
Ë&& (bus->
˛k°©e
 !
CLK_PENDING
)) {

5898 
bus
->
a˘ivôy
 = 
FALSE
;

5899 
	`dhdsdio_˛k˘l
(
bus
, 
CLK_NONE
, 
FALSE
);

5902 
exô
:

5903 
	`dhd_os_sdu∆ock
(
bus
->
dhd
);

5904  
ªsched
;

5905 
	}
}

5907 
boﬁ


5908 
	$dhd_bus_dpc
(
dhd_bus
 *
bus
)

5910 
boﬁ
 
ªsched
;

5913 
	`DHD_TRACE
(("CÆlög dhdsdio_dpc(Ë‰om %s\n", 
__FUNCTION__
));

5914 
ªsched
 = 
	`dhdsdio_dpc
(
bus
);

5916  
ªsched
;

5917 
	}
}

5920 
	$dhdsdio_i§
(*
¨g
)

5922 
dhd_bus_t
 *
bus
 = (dhd_bus_t*)
¨g
;

5923 
bcmsdh_öfo_t
 *
sdh
;

5925 
	`DHD_TRACE
(("%s: E¡î\n", 
__FUNCTION__
));

5927 i‡(!
bus
) {

5928 
	`DHD_ERROR
(("%†: bu†i†nuŒÖoöã∏,Éxô \n", 
__FUNCTION__
));

5931 
sdh
 = 
bus
->sdh;

5933 i‡(
bus
->
dhd
->
bus°©e
 =
DHD_BUS_DOWN
) {

5934 
	`DHD_ERROR
(("%†: bu†i†down. wêhavênŸhögÅÿdo\n", 
__FUNCTION__
));

5938 
	`DHD_TRACE
(("%s: E¡î\n", 
__FUNCTION__
));

5941 
bus
->
öåcou¡
++;

5942 
bus
->
ùíd
 = 
TRUE
;

5945 i‡(!
	`SLPAUTO_ENAB
(
bus
)) {

5946 i‡(
bus
->
¶ìpög
) {

5947 
	`DHD_ERROR
(("INTERRUPT WHILE SLEEPING??\n"));

5949 } i‡(!
	`KSO_ENAB
(
bus
)) {

5950 
	`DHD_ERROR
(("ISR in devsleep 1\n"));

5955 i‡(
bus
->
öå
) {

5956 
	`DHD_INTR
(("%s: dißbÀ SDIO i¡îru±s\n", 
__FUNCTION__
));

5958 
	`DHD_ERROR
(("dhdsdio_isr() w/o interrupt configured!\n"));

5961 
	`bcmsdh_öå_dißbÀ
(
sdh
);

5962 
bus
->
ötdis
 = 
TRUE
;

5964 #i‡
	`deföed
(
SDIO_ISR_THREAD
)

5965 
	`DHD_TRACE
(("CÆlög dhdsdio_dpc(Ë‰om %s\n", 
__FUNCTION__
));

5966 
	`DHD_OS_WAKE_LOCK
(
bus
->
dhd
);

5967 
	`dhdsdio_dpc
(
bus
));

5968 
	`DHD_OS_WAKE_UNLOCK
(
bus
->
dhd
);

5970 
bus
->
dpc_sched
 = 
TRUE
;

5971 
	`dhd_sched_dpc
(
bus
->
dhd
);

5974 
	}
}

5976 #ifde‡
SDTEST


5978 
	$dhdsdio_pktgí_öô
(
dhd_bus_t
 *
bus
)

5981 i‡(
dhd_pktgí_Àn
) {

5982 
bus
->
pktgí_maxÀn
 = 
	`MIN
(
dhd_pktgí_Àn
, 
MAX_PKTGEN_LEN
);

5983 
bus
->
pktgí_möÀn
 = bus->
pktgí_maxÀn
;

5985 
bus
->
pktgí_maxÀn
 = 
MAX_PKTGEN_LEN
;

5986 
bus
->
pktgí_möÀn
 = 0;

5988 
bus
->
pktgí_Àn
 = (
uöt16
)bus->
pktgí_möÀn
;

5991 
bus
->
pktgí_‰eq
 = 1;

5992 
bus
->
pktgí_¥öt
 = 
dhd_w©chdog_ms
 ? (10000/dhd_watchdog_ms):0;

5993 
bus
->
pktgí_cou¡
 = (
dhd_pktgí
 * 
dhd_w©chdog_ms
 + 999) / 1000;

5996 
bus
->
pktgí_mode
 = 
DHD_PKTGEN_ECHO
;

5997 
bus
->
pktgí_°›
 = 1;

5998 
	}
}

6001 
	$dhdsdio_pktgí
(
dhd_bus_t
 *
bus
)

6003 *
pkt
;

6004 
uöt8
 *
d©a
;

6005 
uöt
 
pktcou¡
;

6006 
uöt
 
fûlbyã
;

6007 
o¶_t
 *
osh
 = 
bus
->
dhd
->osh;

6008 
uöt16
 
Àn
;

6009 
ul⁄g
 
time_œp£
;

6010 
uöt
 
£¡_pkts
;

6011 
uöt
 
rcvd_pkts
;

6014 i‡(
bus
->
pktgí_¥öt
 && (++bus->
pktgí_±ick
 >= bus->pktgen_print)) {

6015 
bus
->
pktgí_±ick
 = 0;

6016 
	`¥ötf
("%s: sendáttempts %d,Ñcvd %d,Érrors %d\n",

6017 
__FUNCTION__
, 
bus
->
pktgí_£¡
, bus->
pktgí_rcvd
, bus->
pktgí_Áû
);

6020 i‡(
bus
->
pktgí_möÀn
 =bus->
pktgí_maxÀn
) {

6021 
time_œp£
 = 
jiffõs
 - 
bus
->
pktgí_¥ev_time
;

6022 
bus
->
pktgí_¥ev_time
 = 
jiffõs
;

6023 
£¡_pkts
 = 
bus
->
pktgí_£¡
 - bus->
pktgí_¥ev_£¡
;

6024 
bus
->
pktgí_¥ev_£¡
 = bus->
pktgí_£¡
;

6025 
rcvd_pkts
 = 
bus
->
pktgí_rcvd
 - bus->
pktgí_¥ev_rcvd
;

6026 
bus
->
pktgí_¥ev_rcvd
 = bus->
pktgí_rcvd
;

6028 
	`¥ötf
("%s: Tx Throughput %d kbps, Rx Throughput %d kbps\n",

6029 
__FUNCTION__
,

6030 (
£¡_pkts
 * 
bus
->
pktgí_Àn
 / 
	`jiffõs_to_m£cs
(
time_œp£
)) * 8,

6031 (
rcvd_pkts
 * 
bus
->
pktgí_Àn
 / 
	`jiffõs_to_m£cs
(
time_œp£
)) * 8);

6036 i‡(
bus
->
pktgí_mode
 =
DHD_PKTGEN_RECV
) {

6037 i‡(
bus
->
pktgí_rcv_°©e
 =
PKTGEN_RCV_IDLE
) {

6038 
bus
->
pktgí_rcv_°©e
 = 
PKTGEN_RCV_ONGOING
;

6039 
	`dhdsdio_sdã°_£t
(
bus
, bus->
pktgí_tŸÆ
);

6045 
pktcou¡
 = 0;Öktcou¡ < 
bus
->
pktgí_cou¡
;Öktcount++) {

6047 i‡(
bus
->
pktgí_tŸÆ
 && (bus->
pktgí_£¡
 >= bus->pktgen_total)) {

6048 
bus
->
pktgí_cou¡
 = 0;

6053 i‡(
bus
->
pktgí_mode
 =
DHD_PKTGEN_RXBURST
) {

6054 
Àn
 = 
SDPCM_TEST_PKT_CNT_FLD_LEN
;

6056 
Àn
 = 
bus
->
pktgí_Àn
;

6058 i‡(!(
pkt
 = 
	`PKTGET
(
osh
, (
Àn
 + 
SDPCM_HDRLEN
 + 
SDPCM_TEST_HDRLEN
 + 
DHD_SDALIGN
),

6059 
TRUE
))) {;

6060 
	`DHD_ERROR
(("%s: PKTGET faûed!\n", 
__FUNCTION__
));

6063 
	`PKTALIGN
(
osh
, 
pkt
, (
Àn
 + 
SDPCM_HDRLEN
 + 
SDPCM_TEST_HDRLEN
), 
DHD_SDALIGN
);

6064 
d©a
 = (
uöt8
*)
	`PKTDATA
(
osh
, 
pkt
Ë+ 
SDPCM_HDRLEN
;

6067 
bus
->
pktgí_mode
) {

6068 
DHD_PKTGEN_ECHO
:

6069 *
d©a
++ = 
SDPCM_TEST_ECHOREQ
;

6070 *
d©a
++ = (
uöt8
)
bus
->
pktgí_£¡
;

6073 
DHD_PKTGEN_SEND
:

6074 *
d©a
++ = 
SDPCM_TEST_DISCARD
;

6075 *
d©a
++ = (
uöt8
)
bus
->
pktgí_£¡
;

6078 
DHD_PKTGEN_RXBURST
:

6079 *
d©a
++ = 
SDPCM_TEST_BURST
;

6080 *
d©a
++ = (
uöt8
)
bus
->
pktgí_cou¡
;

6084 
	`DHD_ERROR
(("UƒecognizedÖktgí modê%d\n", 
bus
->
pktgí_mode
));

6085 
	`PKTFREE
(
osh
, 
pkt
, 
TRUE
);

6086 
bus
->
pktgí_cou¡
 = 0;

6091 *
d©a
++ = (
bus
->
pktgí_Àn
 >> 0);

6092 *
d©a
++ = (
bus
->
pktgí_Àn
 >> 8);

6097 i‡(
bus
->
pktgí_mode
 =
DHD_PKTGEN_RXBURST
) {

6098 *
d©a
++ = (
uöt8
)(
bus
->
pktgí_cou¡
 >> 0);

6099 *
d©a
++ = (
uöt8
)(
bus
->
pktgí_cou¡
 >> 8);

6100 *
d©a
++ = (
uöt8
)(
bus
->
pktgí_cou¡
 >> 16);

6101 *
d©a
++ = (
uöt8
)(
bus
->
pktgí_cou¡
 >> 24);

6105 
fûlbyã
 = 0; fûlbyã < 
Àn
; fillbyte++)

6106 *
d©a
++ = 
	`SDPCM_TEST_FILL
(
fûlbyã
, (
uöt8
)
bus
->
pktgí_£¡
);

6109 #ifde‡
DHD_DEBUG


6110 i‡(
	`DHD_BYTES_ON
(Ë&& 
	`DHD_DATA_ON
()) {

6111 
d©a
 = (
uöt8
*)
	`PKTDATA
(
osh
, 
pkt
Ë+ 
SDPCM_HDRLEN
;

6112 
	`¥hex
("dhdsdio_pktgí: Tx D©a", 
d©a
, 
	`PKTLEN
(
osh
, 
pkt
Ë- 
SDPCM_HDRLEN
);

6117 i‡(
	`dhdsdio_txpkt
(
bus
, 
pkt
, 
SDPCM_TEST_CHANNEL
, 
TRUE
, 
FALSE
)) {

6118 
bus
->
pktgí_Áû
++;

6119 i‡(
bus
->
pktgí_°›
 && bus->pktgí_°› =bus->
pktgí_Áû
)

6120 
bus
->
pktgí_cou¡
 = 0;

6122 
bus
->
pktgí_£¡
++;

6125 i‡(++
bus
->
pktgí_Àn
 > bus->
pktgí_maxÀn
)

6126 
bus
->
pktgí_Àn
 = (
uöt16
)bus->
pktgí_möÀn
;

6129 i‡(
bus
->
pktgí_mode
 =
DHD_PKTGEN_RXBURST
)

6132 
	}
}

6135 
	$dhdsdio_sdã°_£t
(
dhd_bus_t
 *
bus
, 
uöt
 
cou¡
)

6137 *
pkt
;

6138 
uöt8
 *
d©a
;

6139 
o¶_t
 *
osh
 = 
bus
->
dhd
->osh;

6142 i‡(!(
pkt
 = 
	`PKTGET
(
osh
, 
SDPCM_HDRLEN
 + 
SDPCM_TEST_HDRLEN
 +

6143 
SDPCM_TEST_PKT_CNT_FLD_LEN
 + 
DHD_SDALIGN
, 
TRUE
))) {

6144 
	`DHD_ERROR
(("%s: PKTGET faûed!\n", 
__FUNCTION__
));

6147 
	`PKTALIGN
(
osh
, 
pkt
, (
SDPCM_HDRLEN
 + 
SDPCM_TEST_HDRLEN
 +

6148 
SDPCM_TEST_PKT_CNT_FLD_LEN
), 
DHD_SDALIGN
);

6149 
d©a
 = (
uöt8
*)
	`PKTDATA
(
osh
, 
pkt
Ë+ 
SDPCM_HDRLEN
;

6152 *
d©a
++ = 
SDPCM_TEST_SEND
;

6153 *
d©a
++ = (
cou¡
 > 0)?
TRUE
:
FALSE
;

6154 *
d©a
++ = (
bus
->
pktgí_maxÀn
 >> 0);

6155 *
d©a
++ = (
bus
->
pktgí_maxÀn
 >> 8);

6156 *
d©a
++ = (
uöt8
)(
cou¡
 >> 0);

6157 *
d©a
++ = (
uöt8
)(
cou¡
 >> 8);

6158 *
d©a
++ = (
uöt8
)(
cou¡
 >> 16);

6159 *
d©a
++ = (
uöt8
)(
cou¡
 >> 24);

6162 i‡(
	`dhdsdio_txpkt
(
bus
, 
pkt
, 
SDPCM_TEST_CHANNEL
, 
TRUE
, 
FALSE
))

6163 
bus
->
pktgí_Áû
++;

6164 
	}
}

6168 
	$dhdsdio_ã°rcv
(
dhd_bus_t
 *
bus
, *
pkt
, 
uöt
 
£q
)

6170 
o¶_t
 *
osh
 = 
bus
->
dhd
->osh;

6171 
uöt8
 *
d©a
;

6172 
uöt
 
pkéí
;

6174 
uöt8
 
cmd
;

6175 
uöt8
 
exåa
;

6176 
uöt16
 
Àn
;

6177 
uöt16
 
off£t
;

6180 i‡((
pkéí
 = 
	`PKTLEN
(
osh
, 
pkt
)Ë< 
SDPCM_TEST_HDRLEN
) {

6181 
	`DHD_ERROR
(("dhdsdio_ª°rcv:Åos†ru¡ føme,Ökéí %d\n", 
pkéí
));

6182 
	`PKTFREE
(
osh
, 
pkt
, 
FALSE
);

6187 
d©a
 = 
	`PKTDATA
(
osh
, 
pkt
);

6188 
cmd
 = *
d©a
++;

6189 
exåa
 = *
d©a
++;

6190 
Àn
 = *
d©a
++;Üen += *data++ << 8;

6191 
	`DHD_TRACE
(("%s:cmd:%d, xåa:%d,Àn:%d\n", 
__FUNCTION__
, 
cmd
, 
exåa
, 
Àn
));

6193 i‡(
cmd
 =
SDPCM_TEST_DISCARD
 || cmd =
SDPCM_TEST_ECHOREQ
 || cmd =
SDPCM_TEST_ECHORSP
) {

6194 i‡(
pkéí
 !
Àn
 + 
SDPCM_TEST_HDRLEN
) {

6195 
	`DHD_ERROR
(("dhdsdio_testrcv: frameÜength mismatch,Öktlen %d seq %d"

6196 " cmd %dÉxå®%dÜí %d\n", 
pkéí
, 
£q
, 
cmd
, 
exåa
, 
Àn
));

6197 
	`PKTFREE
(
osh
, 
pkt
, 
FALSE
);

6203 
cmd
) {

6204 
SDPCM_TEST_ECHOREQ
:

6206 *(
uöt8
 *)(
	`PKTDATA
(
osh
, 
pkt
)Ë
SDPCM_TEST_ECHORSP
;

6207 i‡(
	`dhdsdio_txpkt
(
bus
, 
pkt
, 
SDPCM_TEST_CHANNEL
, 
TRUE
, 
FALSE
) == 0) {

6208 
bus
->
pktgí_£¡
++;

6210 
bus
->
pktgí_Áû
++;

6211 
	`PKTFREE
(
osh
, 
pkt
, 
FALSE
);

6213 
bus
->
pktgí_rcvd
++;

6216 
SDPCM_TEST_ECHORSP
:

6217 i‡(
bus
->
ext_lo›
) {

6218 
	`PKTFREE
(
osh
, 
pkt
, 
FALSE
);

6219 
bus
->
pktgí_rcvd
++;

6223 
off£t
 = 0; off£à< 
Àn
; off£t++, 
d©a
++) {

6224 i‡(*
d©a
 !
	`SDPCM_TEST_FILL
(
off£t
, 
exåa
)) {

6225 
	`DHD_ERROR
(("dhdsdio_testrcv:Écho data mismatch: "

6227 
off£t
, 
Àn
, 
	`SDPCM_TEST_FILL
(off£t, 
exåa
), *
d©a
));

6231 
	`PKTFREE
(
osh
, 
pkt
, 
FALSE
);

6232 
bus
->
pktgí_rcvd
++;

6235 
SDPCM_TEST_DISCARD
:

6237 
i
 = 0;

6238 
uöt8
 *
¥n
 = 
d©a
;

6239 
uöt8
 
ã°vÆ
 = 
exåa
;

6240 
i
 = 0; i < 
Àn
; i++) {

6241 i‡(*
¥n
 !
ã°vÆ
) {

6242 
	`DHD_ERROR
(("DIErr@Pkt#:%d,Ix:%d,Éxpected:0x%x, got:0x%x\n",

6243 
i
, 
bus
->
pktgí_rcvd_rcv£ssi⁄
, 
ã°vÆ
, *
¥n
));

6244 
¥n
++; 
ã°vÆ
++;

6248 
	`PKTFREE
(
osh
, 
pkt
, 
FALSE
);

6249 
bus
->
pktgí_rcvd
++;

6252 
SDPCM_TEST_BURST
:

6253 
SDPCM_TEST_SEND
:

6255 
	`DHD_INFO
(("dhdsdio_testrcv: unsupported or unknown command,Öktlen %d seq %d"

6256 " cmd %dÉxå®%dÜí %d\n", 
pkéí
, 
£q
, 
cmd
, 
exåa
, 
Àn
));

6257 
	`PKTFREE
(
osh
, 
pkt
, 
FALSE
);

6262 i‡(
bus
->
pktgí_mode
 =
DHD_PKTGEN_RECV
) {

6263 i‡(
bus
->
pktgí_rcv_°©e
 !
PKTGEN_RCV_IDLE
) {

6264 
bus
->
pktgí_rcvd_rcv£ssi⁄
++;

6266 i‡(
bus
->
pktgí_tŸÆ
 &&

6267 (
bus
->
pktgí_rcvd_rcv£ssi⁄
 >bus->
pktgí_tŸÆ
)) {

6268 
bus
->
pktgí_cou¡
 = 0;

6269 
	`DHD_ERROR
(("Pktgen:rcvÅest complete!\n"));

6270 
bus
->
pktgí_rcv_°©e
 = 
PKTGEN_RCV_IDLE
;

6271 
	`dhdsdio_sdã°_£t
(
bus
, 
FALSE
);

6272 
bus
->
pktgí_rcvd_rcv£ssi⁄
 = 0;

6276 
	}
}

6280 
	$dhd_dißbÀ_öå
(
dhd_pub_t
 *
dhdp
)

6282 
dhd_bus_t
 *
bus
;

6283 
bus
 = 
dhdp
->bus;

6284 
	`bcmsdh_öå_dißbÀ
(
bus
->
sdh
);

6285 
	}
}

6287 
boﬁ


6288 
	$dhd_bus_w©chdog
(
dhd_pub_t
 *
dhdp
)

6290 
dhd_bus_t
 *
bus
;

6292 
	`DHD_TIMER
(("%s: E¡î\n", 
__FUNCTION__
));

6294 
bus
 = 
dhdp
->bus;

6296 i‡(
bus
->
dhd
->
d⁄gÀ_ª£t
)

6297  
FALSE
;

6300 i‡(!
	`SLPAUTO_ENAB
(
bus
Ë&& bus->
¶ìpög
)

6301  
FALSE
;

6303 i‡(
dhdp
->
bus°©e
 =
DHD_BUS_DOWN
)

6304  
FALSE
;

6307 i‡(!
	`SLPAUTO_ENAB
(
bus
Ë&& (bus->
pﬁl
 && (++bus->
pﬁ…ick
 >bus->
pﬁÃ©e
))) {

6308 
uöt32
 
öt°©us
 = 0;

6311 
bus
->
pﬁ…ick
 = 0;

6314 i‡(!
bus
->
öå
 || (bus->
öåcou¡
 =bus->
œ°öås
)) {

6316 i‡(!
bus
->
dpc_sched
) {

6317 
uöt8
 
dev≥nd
;

6318 
dev≥nd
 = 
	`bcmsdh_cfg_ªad
(
bus
->
sdh
, 
SDIO_FUNC_0
,

6319 
SDIOD_CCCR_INTPEND
, 
NULL
);

6320 
öt°©us
 = 
dev≥nd
 & (
INTR_STATUS_FUNC1
 | 
INTR_STATUS_FUNC2
);

6324 i‡(
öt°©us
) {

6325 
bus
->
pﬁl˙t
++;

6326 
bus
->
ùíd
 = 
TRUE
;

6327 i‡(
bus
->
öå
) {

6328 
	`bcmsdh_öå_dißbÀ
(
bus
->
sdh
);

6330 
bus
->
dpc_sched
 = 
TRUE
;

6331 
	`dhd_sched_dpc
(
bus
->
dhd
);

6337 
bus
->
œ°öås
 = bus->
öåcou¡
;

6340 #ifde‡
DHD_DEBUG


6342 i‡(
dhdp
->
bus°©e
 =
DHD_BUS_DATA
 && 
dhd_c⁄sﬁe_ms
 != 0) {

6343 
bus
->
c⁄sﬁe
.
cou¡
 +
dhd_w©chdog_ms
;

6344 i‡(
bus
->
c⁄sﬁe
.
cou¡
 >
dhd_c⁄sﬁe_ms
) {

6345 
bus
->
c⁄sﬁe
.
cou¡
 -
dhd_c⁄sﬁe_ms
;

6347 i‡(
	`SLPAUTO_ENAB
(
bus
))

6348 
	`dhdsdio_bus¶ìp
(
bus
, 
FALSE
);

6350 
	`dhdsdio_˛k˘l
(
bus
, 
CLK_AVAIL
, 
FALSE
);

6351 i‡(
	`dhdsdio_ªadc⁄sﬁe
(
bus
) < 0)

6352 
dhd_c⁄sﬁe_ms
 = 0;

6357 #ifde‡
SDTEST


6359 i‡(
bus
->
pktgí_cou¡
 && (++bus->
pktgí_tick
 >bus->
pktgí_‰eq
)) {

6361 i‡(
	`SLPAUTO_ENAB
(
bus
))

6362 
	`dhdsdio_bus¶ìp
(
bus
, 
FALSE
);

6364 
	`dhdsdio_˛k˘l
(
bus
, 
CLK_AVAIL
, 
FALSE
);

6365 
bus
->
pktgí_tick
 = 0;

6366 
	`dhdsdio_pktgí
(
bus
);

6371 #ifde‡
DHD_USE_IDLECOUNT


6372 i‡(
bus
->
a˘ivôy
)

6373 
bus
->
a˘ivôy
 = 
FALSE
;

6375 
bus
->
idÀcou¡
++;

6377 i‡(
bus
->
idÀcou¡
 >bus->
idÀtime
) {

6378 
	`DHD_TIMER
(("%s: DHD IdÀ sèã!!\n", 
__FUNCTION__
));

6380 i‡(
	`SLPAUTO_ENAB
(
bus
)) {

6381 i‡(
	`dhdsdio_bus¶ìp
(
bus
, 
TRUE
Ë!
BCME_BUSY
)

6382 
	`dhd_os_wd_timî
(
bus
->
dhd
, 0);

6384 
	`dhdsdio_˛k˘l
(
bus
, 
CLK_NONE
, 
FALSE
);

6386 
bus
->
idÀcou¡
 = 0;

6390 i‡((
bus
->
idÀtime
 > 0Ë&& (bus->
˛k°©e
 =
CLK_AVAIL
)) {

6391 i‡(++
bus
->
idÀcou¡
 > bus->
idÀtime
) {

6392 
bus
->
idÀcou¡
 = 0;

6393 i‡(
bus
->
a˘ivôy
) {

6394 
bus
->
a˘ivôy
 = 
FALSE
;

6395 i‡(
	`SLPAUTO_ENAB
(
bus
)) {

6396 i‡(!
bus
->
ªad‰ames
)

6397 
	`dhdsdio_bus¶ìp
(
bus
, 
TRUE
);

6399 
bus
->
ªqbus¶ìp
 = 
TRUE
;

6402 
	`dhdsdio_˛k˘l
(
bus
, 
CLK_NONE
, 
FALSE
);

6408  
bus
->
ùíd
;

6409 
	}
}

6411 #ifde‡
DHD_DEBUG


6413 
	$dhd_bus_c⁄sﬁe_ö
(
dhd_pub_t
 *
dhdp
, 
uch¨
 *
msg
, 
uöt
 
msgÀn
)

6415 
dhd_bus_t
 *
bus
 = 
dhdp
->bus;

6416 
uöt32
 
addr
, 
vÆ
;

6417 
rv
;

6418 *
pkt
;

6421 i‡(
bus
->
c⁄sﬁe_addr
 == 0)

6422  
BCME_UNSUPPORTED
;

6425 
	`dhd_os_sdlock
(
bus
->
dhd
);

6428 i‡(
bus
->
dhd
->
d⁄gÀ_ª£t
) {

6429 
	`dhd_os_sdu∆ock
(
bus
->
dhd
);

6430  
BCME_NOTREADY
;

6434 
	`BUS_WAKE
(
bus
);

6436 
	`dhdsdio_˛k˘l
(
bus
, 
CLK_AVAIL
, 
FALSE
);

6439 
addr
 = 
bus
->
c⁄sﬁe_addr
 + 
	`OFFSETOF
(
hndπe_c⁄s_t
, 
cbuf_idx
);

6440 
vÆ
 = 
	`htﬁ32
(0);

6441 i‡((
rv
 = 
	`dhdsdio_membyãs
(
bus
, 
TRUE
, 
addr
, (
uöt8
 *)&
vÆ
, (val))) < 0)

6442 
d⁄e
;

6445 
addr
 = 
bus
->
c⁄sﬁe_addr
 + 
	`OFFSETOF
(
hndπe_c⁄s_t
, 
cbuf
);

6446 i‡((
rv
 = 
	`dhdsdio_membyãs
(
bus
, 
TRUE
, 
addr
, (
uöt8
 *)
msg
, 
msgÀn
)) < 0)

6447 
d⁄e
;

6450 
addr
 = 
bus
->
c⁄sﬁe_addr
 + 
	`OFFSETOF
(
hndπe_c⁄s_t
, 
vc⁄s_ö
);

6451 
vÆ
 = 
	`htﬁ32
(
msgÀn
);

6452 i‡((
rv
 = 
	`dhdsdio_membyãs
(
bus
, 
TRUE
, 
addr
, (
uöt8
 *)&
vÆ
, (val))) < 0)

6453 
d⁄e
;

6458 i‡((
pkt
 = 
	`PKTGET
(
bus
->
dhd
->
osh
, 4 + 
SDPCM_RESERVE
, 
TRUE
)Ë!
NULL
)

6459 
	`dhdsdio_txpkt
(
bus
, 
pkt
, 
SDPCM_EVENT_CHANNEL
, 
TRUE
, 
FALSE
);

6461 
d⁄e
:

6462 i‡((
bus
->
idÀtime
 =
DHD_IDLE_IMMEDIATE
Ë&& !bus->
dpc_sched
) {

6463 
bus
->
a˘ivôy
 = 
FALSE
;

6464 
	`dhdsdio_˛k˘l
(
bus
, 
CLK_NONE
, 
TRUE
);

6467 
	`dhd_os_sdu∆ock
(
bus
->
dhd
);

6469  
rv
;

6470 
	}
}

6473 #ifde‡
DHD_DEBUG


6475 
	$dhd_dump_cis
(
uöt
 
‚
, 
uöt8
 *
cis
)

6477 
uöt
 
byã
, 
èg
, 
td©a
;

6478 
	`DHD_INFO
(("Fun˘i⁄ %d CIS:\n", 
‚
));

6480 
td©a
 = 
byã
 = 0; byã < 
SBSDIO_CIS_SIZE_LIMIT
; byte++) {

6481 i‡((
byã
 % 16) == 0)

6482 
	`DHD_INFO
((" "));

6483 
	`DHD_INFO
(("%02x ", 
cis
[
byã
]));

6484 i‡((
byã
 % 16) == 15)

6485 
	`DHD_INFO
(("\n"));

6486 i‡(!
td©a
--) {

6487 
èg
 = 
cis
[
byã
];

6488 i‡(
èg
 == 0xff)

6490 i‡(!
èg
)

6491 
td©a
 = 0;

6492 i‡((
byã
 + 1Ë< 
SBSDIO_CIS_SIZE_LIMIT
)

6493 
td©a
 = 
cis
[
byã
 + 1] + 1;

6495 
	`DHD_INFO
(("]"));

6498 i‡((
byã
 % 16) != 15)

6499 
	`DHD_INFO
(("\n"));

6500 
	}
}

6503 
boﬁ


6504 
	$dhdsdio_chùm©ch
(
uöt16
 
chùid
)

6506 i‡(
chùid
 =
BCM4325_CHIP_ID
)

6507  
TRUE
;

6508 i‡(
chùid
 =
BCM4329_CHIP_ID
)

6509  
TRUE
;

6510 i‡(
chùid
 =
BCM4315_CHIP_ID
)

6511  
TRUE
;

6512 i‡(
chùid
 =
BCM4319_CHIP_ID
)

6513  
TRUE
;

6514 i‡(
chùid
 =
BCM4336_CHIP_ID
)

6515  
TRUE
;

6516 i‡(
chùid
 =
BCM4330_CHIP_ID
)

6517  
TRUE
;

6518 i‡(
chùid
 =
BCM43237_CHIP_ID
)

6519  
TRUE
;

6520 i‡(
chùid
 =
BCM43362_CHIP_ID
)

6521  
TRUE
;

6522 i‡(
chùid
 =
BCM4314_CHIP_ID
)

6523  
TRUE
;

6524 i‡(
chùid
 =
BCM4334_CHIP_ID
)

6525  
TRUE
;

6526 i‡(
chùid
 =
BCM43341_CHIP_ID
)

6527  
TRUE
;

6528 i‡(
chùid
 =
BCM43239_CHIP_ID
)

6529  
TRUE
;

6530 i‡(
chùid
 =
BCM4324_CHIP_ID
)

6531  
TRUE
;

6532 i‡(
chùid
 =
BCM4335_CHIP_ID
)

6533  
TRUE
;

6534  
FALSE
;

6535 
	}
}

6538 
	$dhdsdio_¥obe
(
uöt16
 
víid
, uöt16 
devid
, uöt16 
bus_no
, uöt16 
¶Ÿ
,

6539 
uöt16
 
func
, 
uöt
 
bu°y≥
, *
ªgsva
, 
o¶_t
 * 
osh
, *
sdh
)

6541 
ªt
;

6542 
dhd_bus_t
 *
bus
;

6543 #ifde‡
GET_CUSTOM_MAC_ENABLE


6544 
ëhî_addr
 
ó_addr
;

6547 #i‡(
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 25))

6549 i‡(
	`muãx_is_locked
(&
_dhd_sdio_muãx_lock_
) == 0) {

6550 
	`DHD_ERROR
(("%†:Çÿmuãx hñd. sëÜock\n", 
__FUNCTION__
));

6553 
	`DHD_ERROR
(("%†: muãx i†locked!. waô f‹ u∆ockög\n", 
__FUNCTION__
));

6555 
	`muãx_lock
(&
_dhd_sdio_muãx_lock_
);

6564 
dhd_txbound
 = 
DHD_TXBOUND
;

6565 
dhd_rxbound
 = 
DHD_RXBOUND
;

6566 
dhd_Æign˘l
 = 
TRUE
;

6567 
sd1idÀ
 = 
TRUE
;

6568 
dhd_ªadahód
 = 
TRUE
;

6569 
ªåyd©a
 = 
FALSE
;

6570 
dhd_doÊow
 = 
FALSE
;

6571 
dhd_d⁄gÀ_memsize
 = 0;

6572 
dhd_txmömax
 = 
DHD_TXMINMAX
;

6574 
f‹˚Æign
 = 
TRUE
;

6576 
	`DHD_TRACE
(("%s: E¡î\n", 
__FUNCTION__
));

6577 
	`DHD_INFO
(("%s: víid 0x%04x devid 0x%04x\n", 
__FUNCTION__
, 
víid
, 
devid
));

6580 
	`ASSERT
((
uöçå
)
ªgsva
 =
SI_ENUM_BASE
);

6587 
víid
) {

6589 
VENDOR_BROADCOM
:

6592 
	`DHD_ERROR
(("%s: unknown vendor: 0x%04x\n",

6593 
__FUNCTION__
, 
víid
));

6594 
f‹˚ªtu∫
;

6598 
devid
) {

6599 
BCM4325_D11DUAL_ID
:

6600 
BCM4325_D11G_ID
:

6601 
BCM4325_D11A_ID
:

6602 
	`DHD_INFO
(("%s: found 4325 D⁄gÀ\n", 
__FUNCTION__
));

6604 
BCM4329_D11N_ID
:

6605 
BCM4329_D11N2G_ID
:

6606 
BCM4329_D11N5G_ID
:

6608 
	`DHD_INFO
(("%s: found 4329 D⁄gÀ\n", 
__FUNCTION__
));

6610 
BCM4315_D11DUAL_ID
:

6611 
BCM4315_D11G_ID
:

6612 
BCM4315_D11A_ID
:

6613 
	`DHD_INFO
(("%s: found 4315 D⁄gÀ\n", 
__FUNCTION__
));

6615 
BCM4319_D11N_ID
:

6616 
BCM4319_D11N2G_ID
:

6617 
BCM4319_D11N5G_ID
:

6618 
	`DHD_INFO
(("%s: found 4319 D⁄gÀ\n", 
__FUNCTION__
));

6621 
	`DHD_INFO
(("%s:állow device id 0, will check chip internals\n",

6622 
__FUNCTION__
));

6626 
	`DHD_ERROR
(("%s: skipping 0x%04x/0x%04x,Çotá dongle\n",

6627 
__FUNCTION__
, 
víid
, 
devid
));

6628 
f‹˚ªtu∫
;

6631 i‡(
osh
 =
NULL
) {

6633 i‡(!(
osh
 = 
	`dhd_o¶_©èch
(
sdh
, 
DHD_BUS
))) {

6634 
	`DHD_ERROR
(("%s: o¶_©èch faûed!\n", 
__FUNCTION__
));

6635 
f‹˚ªtu∫
;

6640 i‡(!(
bus
 = 
	`MALLOC
(
osh
, (
dhd_bus_t
)))) {

6641 
	`DHD_ERROR
(("%s: MALLOC o‡dhd_bus_àÁûed\n", 
__FUNCTION__
));

6642 
Áû
;

6644 
	`bzîo
(
bus
, (
dhd_bus_t
));

6645 
bus
->
sdh
 = sdh;

6646 
bus
->
˛_devid
 = (
uöt16
)
devid
;

6647 
bus
->bu†
DHD_BUS
;

6648 
bus
->
tx_£q
 = 
SDPCM_SEQUENCE_WRAP
 - 1;

6649 
bus
->
u£buÂoﬁ
 = 
FALSE
;

6652 
	`dhd_comm⁄_öô
(
osh
);

6655 i‡(!(
	`dhdsdio_¥obe_©èch
(
bus
, 
osh
, 
sdh
, 
ªgsva
, 
devid
))) {

6656 
	`DHD_ERROR
(("%s: dhdsdio_¥obe_©èch faûed\n", 
__FUNCTION__
));

6657 
Áû
;

6661 i‡(!(
bus
->
dhd
 = 
	`dhd_©èch
(
osh
, bus, 
SDPCM_RESERVE
))) {

6662 
	`DHD_ERROR
(("%s: dhd_©èch faûed\n", 
__FUNCTION__
));

6663 
Áû
;

6667 i‡(!(
	`dhdsdio_¥obe_mÆloc
(
bus
, 
osh
, 
sdh
))) {

6668 
	`DHD_ERROR
(("%s: dhdsdio_¥obe_mÆlo¯Áûed\n", 
__FUNCTION__
));

6669 
Áû
;

6672 i‡(!(
	`dhdsdio_¥obe_öô
(
bus
, 
osh
, 
sdh
))) {

6673 
	`DHD_ERROR
(("%s: dhdsdio_¥obe_öô faûed\n", 
__FUNCTION__
));

6674 
Áû
;

6677 i‡(
bus
->
öå
) {

6679 
	`DHD_INTR
(("%s: dißbÀ SDIO i¡îru±†“Ÿ i¡îe°ed yë)\n", 
__FUNCTION__
));

6680 
	`bcmsdh_öå_dißbÀ
(
sdh
);

6681 i‡((
ªt
 = 
	`bcmsdh_öå_ªg
(
sdh
, 
dhdsdio_i§
, 
bus
)) != 0) {

6682 
	`DHD_ERROR
(("%s: FAILED: bcmsdh_intr_regÑeturned %d\n",

6683 
__FUNCTION__
, 
ªt
));

6684 
Áû
;

6686 
	`DHD_INTR
(("%s:Ñegi°îed SDIO i¡îru± fun˘i⁄ ok\n", 
__FUNCTION__
));

6688 
	`DHD_INFO
(("%s: SDIO interrupt function is NOTÑegistered dueÅoÖolling mode\n",

6689 
__FUNCTION__
));

6692 
	`DHD_INFO
(("%s: com∂ëed!!\n", 
__FUNCTION__
));

6694 #ifde‡
GET_CUSTOM_MAC_ENABLE


6696 
	`mem£t
(&
ó_addr
, 0, (ea_addr));

6697 
ªt
 = 
	`dhd_cu°om_gë_mac_addªss
(
ó_addr
.
o˘ë
);

6698 i‡(!
ªt
) {

6699 
	`mem˝y
(
bus
->
dhd
->
mac
.
o˘ë
, (*)&
ó_addr
, 
ETHER_ADDR_LEN
);

6704 i‡(
dhd_dow∆ﬂd_fw_⁄_drivîlﬂd
) {

6705 i‡((
ªt
 = 
	`dhd_bus_°¨t
(
bus
->
dhd
)) != 0) {

6706 
	`DHD_ERROR
(("%s: dhd_bus_°¨àÁûed\n", 
__FUNCTION__
));

6707 
Áû
;

6711 i‡(
	`dhd_√t_©èch
(
bus
->
dhd
, 0) != 0) {

6712 
	`DHD_ERROR
(("%s: Nëáâach faûed!!\n", 
__FUNCTION__
));

6713 
Áû
;

6716 #i‡(
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 25))

6717 
	`muãx_u∆ock
(&
_dhd_sdio_muãx_lock_
);

6718 
	`DHD_ERROR
(("%†:Åhêlock i†ªÀa£d.\n", 
__FUNCTION__
));

6721  
bus
;

6723 
Áû
:

6724 
	`dhdsdio_ªÀa£
(
bus
, 
osh
);

6726 
f‹˚ªtu∫
:

6727 #i‡(
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 25))

6728 
	`muãx_u∆ock
(&
_dhd_sdio_muãx_lock_
);

6729 
	`DHD_ERROR
(("%†:Åhêlock i†ªÀa£d.\n", 
__FUNCTION__
));

6732  
NULL
;

6733 
	}
}

6735 
boﬁ


6736 
	$dhdsdio_¥obe_©èch
(
dhd_bus
 *
bus
, 
o¶_t
 *
osh
, *
sdh
, *
ªgsva
,

6737 
uöt16
 
devid
)

6739 
îr
 = 0;

6740 
uöt8
 
˛k˘l
 = 0;

6742 
bus
->
Æp_⁄ly
 = 
TRUE
;

6743 
bus
->
sih
 = 
NULL
;

6746 i‡(
	`dhdsdio_£t_süddr_wödow
(
bus
, 
SI_ENUM_BASE
)) {

6747 
	`DHD_ERROR
(("%s: FAILEDÅÿªtu∫ÅÿSI_ENUM_BASE\n", 
__FUNCTION__
));

6750 #ifde‡
DHD_DEBUG


6751 
	`DHD_ERROR
(("F1 signatureÑead @0x18000000=0x%4x\n",

6752 
	`bcmsdh_ªg_ªad
(
bus
->
sdh
, 
SI_ENUM_BASE
, 4)));

6761 
	`bcmsdh_cfg_wrôe
(
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_FUNC1_CHIPCLKCSR
, 
DHD_INIT_CLKCTL1
, &
îr
);

6762 i‡(!
îr
)

6763 
˛k˘l
 = 
	`bcmsdh_cfg_ªad
(
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_FUNC1_CHIPCLKCSR
, &
îr
);

6765 i‡(
îr
 || ((
˛k˘l
 & ~
SBSDIO_AVBITS
Ë!
DHD_INIT_CLKCTL1
)) {

6766 
	`DHD_ERROR
(("dhdsdio_probe: ChipClkCSRáccess:Érr %d wrote 0x%02xÑead 0x%02x\n",

6767 
îr
, 
DHD_INIT_CLKCTL1
, 
˛k˘l
));

6768 
Áû
;

6771 #ifde‡
DHD_DEBUG


6772 i‡(
	`DHD_INFO_ON
()) {

6773 
uöt
 
‚
, 
num‚
;

6774 
uöt8
 *
cis
[
SDIOD_MAX_IOFUNCS
];

6775 
îr
 = 0;

6777 
num‚
 = 
	`bcmsdh_quîy_io‚um
(
sdh
);

6778 
	`ASSERT
(
num‚
 <
SDIOD_MAX_IOFUNCS
);

6781 
	`SPINWAIT
(((
˛k˘l
 = 
	`bcmsdh_cfg_ªad
(
sdh
, 
SDIO_FUNC_1
,

6782 
SBSDIO_FUNC1_CHIPCLKCSR
, 
NULL
)),

6783 !
	`SBSDIO_ALPAV
(
˛k˘l
)), 
PMU_MAX_TRANSITION_DLY
);

6786 
	`bcmsdh_cfg_wrôe
(
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_FUNC1_CHIPCLKCSR
,

6787 
DHD_INIT_CLKCTL2
, &
îr
);

6788 
	`OSL_DELAY
(65);

6790 
‚
 = 0; f¿<
num‚
; fn++) {

6791 i‡(!(
cis
[
‚
] = 
	`MALLOC
(
osh
, 
SBSDIO_CIS_SIZE_LIMIT
))) {

6792 
	`DHD_INFO
(("dhdsdio_¥obe: f¿%d ci†mÆlo¯Áûed\n", 
‚
));

6795 
	`bzîo
(
cis
[
‚
], 
SBSDIO_CIS_SIZE_LIMIT
);

6797 i‡((
îr
 = 
	`bcmsdh_cis_ªad
(
sdh
, 
‚
, 
cis
[‚], 
SBSDIO_CIS_SIZE_LIMIT
))) {

6798 
	`DHD_INFO
(("dhdsdio_¥obe: f¿%d ci†ªadÉº %d\n", 
‚
, 
îr
));

6799 
	`MFREE
(
osh
, 
cis
[
‚
], 
SBSDIO_CIS_SIZE_LIMIT
);

6802 
	`dhd_dump_cis
(
‚
, 
cis
[fn]);

6805 
‚
-- > 0) {

6806 
	`ASSERT
(
cis
[
‚
]);

6807 
	`MFREE
(
osh
, 
cis
[
‚
], 
SBSDIO_CIS_SIZE_LIMIT
);

6810 i‡(
îr
) {

6811 
	`DHD_ERROR
(("dhdsdio_probe: failureÑeading orÖarsing CIS\n"));

6812 
Áû
;

6818 i‡(!(
bus
->
sih
 = 
	`si_©èch
((
uöt
)
devid
, 
osh
, 
ªgsva
, 
DHD_BUS
, 
sdh
,

6819 &
bus
->
v¨s
, &bus->
v¨sz
))) {

6820 
	`DHD_ERROR
(("%s: si_©èch faûed!\n", 
__FUNCTION__
));

6821 
Áû
;

6824 
	`bcmsdh_chùöfo
(
sdh
, 
bus
->
sih
->
chù
, bus->sih->
chùªv
);

6826 i‡(!
	`dhdsdio_chùm©ch
((
uöt16
)
bus
->
sih
->
chù
)) {

6827 
	`DHD_ERROR
(("%s: unsupported chip: 0x%04x\n",

6828 
__FUNCTION__
, 
bus
->
sih
->
chù
));

6829 
Áû
;

6832 i‡(
bus
->
sih
->
busc‹îev
 >= 12)

6833 
	`dhdsdio_˛k_kso_öô
(
bus
);

6835 
bus
->
kso
 = 
TRUE
;

6837 i‡(
	`CST4330_CHIPMODE_SDIOD
(
bus
->
sih
->
chù°
)) {

6840 
	`si_sdiod_drive_°ªngth_öô
(
bus
->
sih
, 
osh
, 
dhd_sdiod_drive_°ªngth
);

6844 i‡(!
	`DHD_NOPMU
(
bus
)) {

6845 i‡((
	`si_£tc‹e
(
bus
->
sih
, 
ARM7S_CORE_ID
, 0)) ||

6846 (
	`si_£tc‹e
(
bus
->
sih
, 
ARMCM3_CORE_ID
, 0)) ||

6847 (
	`si_£tc‹e
(
bus
->
sih
, 
ARMCR4_CORE_ID
, 0))) {

6848 
bus
->
¨mªv
 = 
	`si_c‹îev
(bus->
sih
);

6850 
	`DHD_ERROR
(("%s: faûedÅÿföd ARM c‹e!\n", 
__FUNCTION__
));

6851 
Áû
;

6854 i‡(!
	`si_£tc‹e
(
bus
->
sih
, 
ARMCR4_CORE_ID
, 0)) {

6855 i‡(!(
bus
->
‹ig_ømsize
 = 
	`si_so¸am_size
(bus->
sih
))) {

6856 
	`DHD_ERROR
(("%s: faûedÅÿföd SOCRAM mem‹y!\n", 
__FUNCTION__
));

6857 
Áû
;

6861 i‡(!(
bus
->
‹ig_ømsize
 = 
	`si_tcm_size
(bus->
sih
))) {

6862 
	`DHD_ERROR
(("%s: faûedÅÿföd CR4-TCM mem‹y!\n", 
__FUNCTION__
));

6863 
Áû
;

6866 
bus
->
d⁄gÀ_øm_ba£
 = 
CR4_RAM_BASE
;

6868 
bus
->
ømsize
 = bus->
‹ig_ømsize
;

6869 i‡(
dhd_d⁄gÀ_memsize
)

6870 
	`dhd_d⁄gÀ_£tmemsize
(
bus
, 
dhd_d⁄gÀ_memsize
);

6872 
	`DHD_ERROR
(("DHD: dongleÑam size is setÅo %d(orig %d)\n",

6873 
bus
->
ømsize
, bus->
‹ig_ømsize
));

6875 
bus
->
§memsize
 = 
	`si_so¸am_§mem_size
(bus->
sih
);

6879 i‡(!(
bus
->
ªgs
 = 
	`si_£tc‹e
(bus->
sih
, 
PCMCIA_CORE_ID
, 0)) &&

6880 !(
bus
->
ªgs
 = 
	`si_£tc‹e
(bus->
sih
, 
SDIOD_CORE_ID
, 0))) {

6881 
	`DHD_ERROR
(("%s: faûedÅÿföd SDIODEV c‹e!\n", 
__FUNCTION__
));

6882 
Áû
;

6884 
bus
->
sdpcmªv
 = 
	`si_c‹îev
(bus->
sih
);

6887 
	`OR_REG
(
osh
, &
bus
->
ªgs
->
c‹ec⁄åﬁ
, 
CC_BPRESEN
);

6888 
bus
->
rxöt_mode
 = 
SDIO_DEVICE_HMB_RXINT
;

6890 i‡((
bus
->
sih
->
busc‹ëy≥
 =
SDIOD_CORE_ID
Ë&& (bus->
sdpcmªv
 >= 4) &&

6891 (
bus
->
rxöt_mode
 =
SDIO_DEVICE_RXDATAINT_MODE_1
))

6893 
uöt32
 
vÆ
;

6895 
vÆ
 = 
	`R_REG
(
osh
, &
bus
->
ªgs
->
c‹ec⁄åﬁ
);

6896 
vÆ
 &~
CC_XMTDATAAVAIL_MODE
;

6897 
vÆ
 |
CC_XMTDATAAVAIL_CTRL
;

6898 
	`W_REG
(
osh
, &
bus
->
ªgs
->
c‹ec⁄åﬁ
, 
vÆ
);

6902 
	`pktq_öô
(&
bus
->
txq
, (
PRIOMASK
 + 1), 
QLEN
);

6905 
bus
->
rxhdr
 = (
uöt8
 *)
	`ROUNDUP
((
uöçå
)&bus->
hdrbuf
[0], 
DHD_SDALIGN
);

6908 
bus
->
öå
 = (
boﬁ
)
dhd_öå
;

6909 i‡((
bus
->
pﬁl
 = (
boﬁ
)
dhd_pﬁl
))

6910 
bus
->
pﬁÃ©e
 = 1;

6912 #ifde‡
BCMSDIOH_TXGLOM


6914 
bus
->
glom_mode
 = 
SDPCM_TXGLOM_CPY
;

6916 
bus
->
glomsize
 = 
SDPCM_DEFGLOM_SIZE
;

6919  
TRUE
;

6921 
Áû
:

6922 i‡(
bus
->
sih
 !
NULL
) {

6923 
	`si_dëach
(
bus
->
sih
);

6924 
bus
->
sih
 = 
NULL
;

6926  
FALSE
;

6927 
	}
}

6929 
boﬁ


6930 
	$dhdsdio_¥obe_mÆloc
(
dhd_bus_t
 *
bus
, 
o¶_t
 *
osh
, *
sdh
)

6932 
	`DHD_TRACE
(("%s: E¡î\n", 
__FUNCTION__
));

6934 i‡(
bus
->
dhd
->
max˘l
) {

6935 
bus
->
rxbÀn
 = 
	`ROUNDUP
((bus->
dhd
->
max˘l
 + 
SDPCM_HDRLEN
), 
ALIGNMENT
Ë+ 
DHD_SDALIGN
;

6936 i‡(!(
bus
->
rxbuf
 = 
	`DHD_OS_PREALLOC
(
osh
, 
DHD_PREALLOC_RXBUF
, bus->
rxbÀn
))) {

6937 
	`DHD_ERROR
(("%s: MALLOC of %d-byteÑxbuf failed\n",

6938 
__FUNCTION__
, 
bus
->
rxbÀn
));

6939 
Áû
;

6943 i‡(!(
bus
->
d©abuf
 = 
	`DHD_OS_PREALLOC
(
osh
, 
DHD_PREALLOC_DATABUF
, 
MAX_DATA_BUF
))) {

6944 
	`DHD_ERROR
(("%s: MALLOC of %d-byte databuf failed\n",

6945 
__FUNCTION__
, 
MAX_DATA_BUF
));

6947 i‡(!
bus
->
rxbÀn
)

6948 
	`DHD_OS_PREFREE
(
osh
, 
bus
->
rxbuf
, bus->
rxbÀn
);

6949 
Áû
;

6953 i‡((
uöçå
)
bus
->
d©abuf
 % 
DHD_SDALIGN
)

6954 
bus
->
d©≠å
 = bus->
d©abuf
 + (
DHD_SDALIGN
 - ((
uöçå
)bus->databuf % DHD_SDALIGN));

6956 
bus
->
d©≠å
 = bus->
d©abuf
;

6958  
TRUE
;

6960 
Áû
:

6961  
FALSE
;

6962 
	}
}

6964 
boﬁ


6965 
	$dhdsdio_¥obe_öô
(
dhd_bus_t
 *
bus
, 
o¶_t
 *
osh
, *
sdh
)

6967 
öt32
 
‚um
;

6969 
	`DHD_TRACE
(("%s: E¡î\n", 
__FUNCTION__
));

6971 #ifde‡
SDTEST


6972 
	`dhdsdio_pktgí_öô
(
bus
);

6976 
	`bcmsdh_cfg_wrôe
(
sdh
, 
SDIO_FUNC_0
, 
SDIOD_CCCR_IOEN
, 
SDIO_FUNC_ENABLE_1
, 
NULL
);

6978 
bus
->
dhd
->
bus°©e
 = 
DHD_BUS_DOWN
;

6979 
bus
->
¶ìpög
 = 
FALSE
;

6980 
bus
->
rxÊow
 = 
FALSE
;

6981 
bus
->
¥ev_rxlim_hô
 = 0;

6984 
	`bcmsdh_cfg_wrôe
(
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_FUNC1_CHIPCLKCSR
, 0, 
NULL
);

6987 
bus
->
˛k°©e
 = 
CLK_SDONLY
;

6988 
bus
->
idÀtime
 = (
öt32
)
dhd_idÀtime
;

6989 
bus
->
idÀ˛ock
 = 
DHD_IDLE_ACTIVE
;

6992 i‡(
	`bcmsdh_iov¨_›
(
sdh
, "sd_divis‹", 
NULL
, 0,

6993 &
bus
->
sd_divis‹
, (
öt32
), 
FALSE
Ë!
BCME_OK
) {

6994 
	`DHD_ERROR
(("%s: faû o¿%†gë\n", 
__FUNCTION__
, "sd_divisor"));

6995 
bus
->
sd_divis‹
 = -1;

6997 
	`DHD_INFO
(("%s: Initial value for %s is %d\n",

6998 
__FUNCTION__
, "sd_divis‹", 
bus
->
sd_divis‹
));

7002 i‡(
	`bcmsdh_iov¨_›
(
sdh
, "sd_mode", 
NULL
, 0,

7003 &
bus
->
sd_mode
, (
öt32
), 
FALSE
Ë!
BCME_OK
) {

7004 
	`DHD_ERROR
(("%s: faû o¿%†gë\n", 
__FUNCTION__
, "sd_mode"));

7005 
bus
->
sd_mode
 = -1;

7007 
	`DHD_INFO
(("%s: Initial value for %s is %d\n",

7008 
__FUNCTION__
, "sd_mode", 
bus
->
sd_mode
));

7012 
‚um
 = 2;

7013 i‡(
	`bcmsdh_iov¨_›
(
sdh
, "sd_blocksize", &
‚um
, (
öt32
),

7014 &
bus
->
blocksize
, (
öt32
), 
FALSE
Ë!
BCME_OK
) {

7015 
bus
->
blocksize
 = 0;

7016 
	`DHD_ERROR
(("%s: faû o¿%†gë\n", 
__FUNCTION__
, "sd_blocksize"));

7018 
	`DHD_INFO
(("%s: Initial value for %s is %d\n",

7019 
__FUNCTION__
, "sd_blocksize", 
bus
->
blocksize
));

7021 
bus
->
roundup
 = 
	`MIN
(
max_roundup
, bus->
blocksize
);

7024 i‡(
	`bcmsdh_iov¨_›
(
sdh
, "sd_rxchaö", 
NULL
, 0,

7025 &
bus
->
sd_rxchaö
, (
öt32
), 
FALSE
Ë!
BCME_OK
) {

7026 
bus
->
sd_rxchaö
 = 
FALSE
;

7028 
	`DHD_INFO
(("%s: bus module (through bcmsdh API) %s chaining\n",

7029 
__FUNCTION__
, (
bus
->
sd_rxchaö
 ? "supports" : "doesÇot support")));

7031 
bus
->
u£_rxchaö
 = (
boﬁ
)bus->
sd_rxchaö
;

7033  
TRUE
;

7034 
	}
}

7037 
	$dhd_bus_£À˘_fúmw¨e_«me_by_chù
(
dhd_bus
 *
bus
, *
d°
, *
§c
)

7039 
fw_ty≥
, 
ag_ty≥
;

7040 
uöt
 
chù
, 
chùªv
, 
fú°
=1;

7041 
i
;

7043 i‡(
fú°
) {

7044 
chù
 = 
bus
->
sih
->chip;

7045 
chùªv
 = 
bus
->
sih
->chiprev;

7046 
fú°
 = 0;

7049 i‡(
§c
[0] == '\0') {

7050 #ifde‡
CONFIG_BCMDHD_FW_PATH


7051 
	`bcm_°∫˝y_s
(
§c
, (
fw_∑th
), 
CONFIG_BCMDHD_FW_PATH
, 
MOD_PARAM_PATHLEN
-1);

7052 i‡(
§c
[0] == '\0')

7055 
	`¥ötf
("src firmwareÖath isÇull\n");

7060 
	`°r˝y
(
d°
, 
§c
);

7061 #i‚de‡
FW_PATH_AUTO_SELECT


7066 
i
 = 
	`°æí
(
d°
);

7067 
i
>0){

7068 i‡(
d°
[
i
] == '/') ;

7069 
i
--;

7071 #ifde‡
BAND_AG


7072 
ag_ty≥
 = 
FW_TYPE_AG
;

7074 
ag_ty≥
 = 
	`°r°r
(&
d°
[
i
], "_ag"Ë? 
FW_TYPE_AG
 : 
FW_TYPE_G
;

7076 
fw_ty≥
 = (
	`°r°r
(&
d°
[
i
], "_mfg") ?

7077 
FW_TYPE_MFG
 : (
	`°r°r
(&
d°
[
i
], "_apsta") ?

7078 
FW_TYPE_APSTA
 : (
	`°r°r
(&
d°
[
i
], "_p2p") ?

7079 
FW_TYPE_P2P
 : 
FW_TYPE_STA
)));

7081 
chù
) {

7082 
BCM4330_CHIP_ID
:

7083 i‡(
ag_ty≥
 =
FW_TYPE_G
) {

7084 i‡(
chùªv
 =
BCM4330B2_CHIP_REV
)

7085 
	`°r˝y
(&
d°
[
i
+1], 
bcm40183b2_fw_«me
[
fw_ty≥
]);

7088 i‡(
chùªv
 =
BCM4330B2_CHIP_REV
)

7089 
	`°r˝y
(&
d°
[
i
+1], 
bcm40183b2ag_fw_«me
[
fw_ty≥
]);

7092 
BCM43362_CHIP_ID
:

7093 i‡(
chùªv
 =
BCM43362A0_CHIP_REV
)

7094 
	`°r˝y
(&
d°
[
i
+1], 
bcm40181a0_fw_«me
[
fw_ty≥
]);

7096 
	`°r˝y
(&
d°
[
i
+1], 
bcm40181a2_fw_«me
[
fw_ty≥
]);

7098 
BCM43341_CHIP_ID
:

7099 i‡(
chùªv
 =
BCM43341B0_CHIP_REV
)

7100 
	`°r˝y
(&
d°
[
i
+1], 
bcm43341b0ag_fw_«me
[
fw_ty≥
]);

7102 
BCM4324_CHIP_ID
:

7103 i‡(
chùªv
 =
BCM43241B4_CHIP_REV
)

7104 
	`°r˝y
(&
d°
[
i
+1], 
bcm43241b4ag_fw_«me
[
fw_ty≥
]);

7108 
	`¥ötf
("%s: fúmw¨e_∑th=%s\n", 
__FUNCTION__
, 
d°
);

7109 
	}
}

7111 
boﬁ


7112 
	$dhd_bus_dow∆ﬂd_fúmw¨e
(
dhd_bus
 *
bus
, 
o¶_t
 *
osh
,

7113 *
pfw_∑th
, *
≤v_∑th
)

7115 
boﬁ
 
ªt
;

7116 
bus
->
fw_∑th
 = 
pfw_∑th
;

7117 
bus
->
nv_∑th
 = 
≤v_∑th
;

7119 
ªt
 = 
	`dhdsdio_dow∆ﬂd_fúmw¨e
(
bus
, 
osh
, bus->
sdh
);

7122  
ªt
;

7123 
	}
}

7125 
boﬁ


7126 
	$dhdsdio_dow∆ﬂd_fúmw¨e
(
dhd_bus
 *
bus
, 
o¶_t
 *
osh
, *
sdh
)

7128 
boﬁ
 
ªt
;

7130 
	`DHD_OS_WAKE_LOCK
(
bus
->
dhd
);

7133 
	`dhdsdio_˛k˘l
(
bus
, 
CLK_AVAIL
, 
FALSE
);

7135 
ªt
 = 
	`_dhdsdio_dow∆ﬂd_fúmw¨e
(
bus
) == 0;

7137 
	`dhdsdio_˛k˘l
(
bus
, 
CLK_SDONLY
, 
FALSE
);

7139 
	`DHD_OS_WAKE_UNLOCK
(
bus
->
dhd
);

7140  
ªt
;

7141 
	}
}

7145 
	$dhdsdio_ªÀa£
(
dhd_bus_t
 *
bus
, 
o¶_t
 *
osh
)

7147 
boﬁ
 
d⁄gÀ_isﬁ©i⁄
 = 
FALSE
;

7148 
	`DHD_TRACE
(("%s: E¡î\n", 
__FUNCTION__
));

7150 i‡(
bus
) {

7151 
	`ASSERT
(
osh
);

7153 i‡(
bus
->
dhd
) {

7154 
d⁄gÀ_isﬁ©i⁄
 = 
bus
->
dhd
->dongle_isolation;

7155 
	`dhd_dëach
(
bus
->
dhd
);

7159 
	`bcmsdh_öå_dißbÀ
(
bus
->
sdh
);

7160 
	`bcmsdh_öå_dîeg
(
bus
->
sdh
);

7162 i‡(
bus
->
dhd
) {

7163 
	`dhdsdio_ªÀa£_d⁄gÀ
(
bus
, 
osh
, 
d⁄gÀ_isﬁ©i⁄
, 
TRUE
);

7164 
	`dhd_‰ì
(
bus
->
dhd
);

7165 
bus
->
dhd
 = 
NULL
;

7168 
	`dhdsdio_ªÀa£_mÆloc
(
bus
, 
osh
);

7170 #ifde‡
DHD_DEBUG


7171 i‡(
bus
->
c⁄sﬁe
.
buf
 !
NULL
)

7172 
	`MFREE
(
osh
, 
bus
->
c⁄sﬁe
.
buf
, bus->c⁄sﬁe.
bufsize
);

7175 
	`MFREE
(
osh
, 
bus
, (
dhd_bus_t
));

7178 i‡(
osh
)

7179 
	`dhd_o¶_dëach
(
osh
);

7181 
	`DHD_TRACE
(("%s: Disc⁄√˘ed\n", 
__FUNCTION__
));

7182 
	}
}

7185 
	$dhdsdio_ªÀa£_mÆloc
(
dhd_bus_t
 *
bus
, 
o¶_t
 *
osh
)

7187 
	`DHD_TRACE
(("%s: E¡î\n", 
__FUNCTION__
));

7189 i‡(
bus
->
dhd
 && bus->dhd->
d⁄gÀ_ª£t
)

7192 i‡(
bus
->
rxbuf
) {

7193 #i‚de‡
CONFIG_DHD_USE_STATIC_BUF


7194 
	`MFREE
(
osh
, 
bus
->
rxbuf
, bus->
rxbÀn
);

7196 
bus
->
rx˘l
 = bus->
rxbuf
 = 
NULL
;

7197 
bus
->
rxÀn
 = 0;

7200 i‡(
bus
->
d©abuf
) {

7201 #i‚de‡
CONFIG_DHD_USE_STATIC_BUF


7202 
	`MFREE
(
osh
, 
bus
->
d©abuf
, 
MAX_DATA_BUF
);

7204 
bus
->
d©abuf
 = 
NULL
;

7207 i‡(
bus
->
v¨s
 && bus->
v¨sz
) {

7208 
	`MFREE
(
osh
, 
bus
->
v¨s
, bus->
v¨sz
);

7209 
bus
->
v¨s
 = 
NULL
;

7212 
	}
}

7216 
	$dhdsdio_ªÀa£_d⁄gÀ
(
dhd_bus_t
 *
bus
, 
o¶_t
 *
osh
, 
boﬁ
 
d⁄gÀ_isﬁ©i⁄
, boﬁ 
ª£t_Êag
)

7218 
	`DHD_TRACE
(("%s: E¡î bus->dhd %∞bus->dhd->d⁄gÀ_ª£à%d \n", 
__FUNCTION__
,

7219 
bus
->
dhd
, bus->dhd->
d⁄gÀ_ª£t
));

7221 i‡((
bus
->
dhd
 && bus->dhd->
d⁄gÀ_ª£t
Ë&& 
ª£t_Êag
)

7224 i‡(
bus
->
sih
) {

7225 #i‡!
	`deföed
(
BCMLXSDMMC
)

7226 i‡(
bus
->
dhd
) {

7227 
	`dhdsdio_˛k˘l
(
bus
, 
CLK_AVAIL
, 
FALSE
);

7229 i‡(
	`KSO_ENAB
(
bus
Ë&& (
d⁄gÀ_isﬁ©i⁄
 =
FALSE
))

7230 
	`si_w©chdog
(
bus
->
sih
, 4);

7232 i‡(
bus
->
dhd
) {

7233 
	`dhdsdio_˛k˘l
(
bus
, 
CLK_NONE
, 
FALSE
);

7235 
	`si_dëach
(
bus
->
sih
);

7236 
bus
->
sih
 = 
NULL
;

7237 i‡(
bus
->
v¨s
 && bus->
v¨sz
)

7238 
	`MFREE
(
osh
, 
bus
->
v¨s
, bus->
v¨sz
);

7239 
bus
->
v¨s
 = 
NULL
;

7242 
	`DHD_TRACE
(("%s: Disc⁄√˘ed\n", 
__FUNCTION__
));

7243 
	}
}

7246 
	$dhdsdio_disc⁄√˘
(*
±r
)

7248 
dhd_bus_t
 *
bus
 = (dhd_bus_à*)
±r
;

7250 #i‡(
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 25))

7252 i‡(
	`muãx_is_locked
(&
_dhd_sdio_muãx_lock_
) == 0) {

7253 
	`DHD_ERROR
(("%†:Çÿmuãx hñd. sëÜock\n", 
__FUNCTION__
));

7256 
	`DHD_ERROR
(("%†: muãx i†locked!. waô f‹ u∆ockög\n", 
__FUNCTION__
));

7258 
	`muãx_lock
(&
_dhd_sdio_muãx_lock_
);

7261 
	`DHD_TRACE
(("%s: E¡î\n", 
__FUNCTION__
));

7263 i‡(
bus
) {

7264 
	`ASSERT
(
bus
->
dhd
);

7265 
	`dhdsdio_ªÀa£
(
bus
, bus->
dhd
->
osh
);

7268 #i‡(
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 25))

7269 
	`muãx_u∆ock
(&
_dhd_sdio_muãx_lock_
);

7270 
	`DHD_ERROR
(("%†:Åhêlock i†ªÀa£d.\n", 
__FUNCTION__
));

7273 
	`DHD_TRACE
(("%s: Disc⁄√˘ed\n", 
__FUNCTION__
));

7274 
	}
}

7282 
bcmsdh_drivî_t
 
dhd_sdio
 = {

7283 
dhdsdio_¥obe
,

7284 
dhdsdio_disc⁄√˘


7288 
	$dhd_bus_ªgi°î
()

7290 
	`DHD_TRACE
(("%s: E¡î\n", 
__FUNCTION__
));

7292  
	`bcmsdh_ªgi°î
(&
dhd_sdio
);

7293 
	}
}

7296 
	$dhd_bus_uƒegi°î
()

7298 
	`DHD_TRACE
(("%s: E¡î\n", 
__FUNCTION__
));

7300 
	`bcmsdh_uƒegi°î
();

7301 
	}
}

7303 #i‡
deföed
(
BCMLXSDMMC
)

7305 
	$dhd_bus_ªg_sdio_nŸify
(* 
£m≠h‹e
)

7307  
	`bcmsdh_ªg_sdio_nŸify
(
£m≠h‹e
);

7308 
	}
}

7310 
	$dhd_bus_uƒeg_sdio_nŸify
()

7312 
	`bcmsdh_uƒeg_sdio_nŸify
();

7313 
	}
}

7316 #ifde‡
BCMEMBEDIMAGE


7318 
	$dhdsdio_dow∆ﬂd_code_¨øy
(
dhd_bus
 *
bus
)

7320 
bcmîr‹
 = -1;

7321 
off£t
 = 0;

7322 *
uœºay
 = 
NULL
;

7324 
	`DHD_INFO
(("%s: dow∆ﬂdÉmbedded fúmw¨e...\n", 
__FUNCTION__
));

7327 (
off£t
 + 
MEMBLOCK
Ë< (
dœºay
)) {

7328 
bcmîr‹
 = 
	`dhdsdio_membyãs
(
bus
, 
TRUE
, 
off£t
,

7329 (
uöt8
 *Ë(
dœºay
 + 
off£t
), 
MEMBLOCK
);

7330 i‡(
bcmîr‹
) {

7331 
	`DHD_ERROR
(("%s:Érror %d on writing %d membytesát 0x%08x\n",

7332 
__FUNCTION__
, 
bcmîr‹
, 
MEMBLOCK
, 
off£t
));

7333 
îr
;

7336 
off£t
 +
MEMBLOCK
;

7339 i‡(
off£t
 < (
dœºay
)) {

7340 
bcmîr‹
 = 
	`dhdsdio_membyãs
(
bus
, 
TRUE
, 
off£t
,

7341 (
uöt8
 *Ë(
dœºay
 + 
off£t
), (dlarray) - offset);

7342 i‡(
bcmîr‹
) {

7343 
	`DHD_ERROR
(("%s:Érror %d on writing %d membytesát 0x%08x\n",

7344 
__FUNCTION__
, 
bcmîr‹
, (
dœºay
Ë- 
off£t
, offset));

7345 
îr
;

7349 #ifde‡
DHD_DEBUG


7352 
uœºay
 = 
	`MALLOC
(
bus
->
dhd
->
osh
, bus->
ømsize
);

7354 
off£t
 = 0;

7355 
	`mem£t
(
uœºay
, 0xØ, 
bus
->
ømsize
);

7356 (
off£t
 + 
MEMBLOCK
Ë< (
dœºay
)) {

7357 
bcmîr‹
 = 
	`dhdsdio_membyãs
(
bus
, 
FALSE
, 
off£t
, 
uœºay
 + off£t, 
MEMBLOCK
);

7358 i‡(
bcmîr‹
) {

7359 
	`DHD_ERROR
(("%s:Érror %d onÑeading %d membytesát 0x%08x\n",

7360 
__FUNCTION__
, 
bcmîr‹
, 
MEMBLOCK
, 
off£t
));

7361 
îr
;

7364 
off£t
 +
MEMBLOCK
;

7367 i‡(
off£t
 < (
dœºay
)) {

7368 
bcmîr‹
 = 
	`dhdsdio_membyãs
(
bus
, 
FALSE
, 
off£t
,

7369 
uœºay
 + 
off£t
, (
dœºay
) - offset);

7370 i‡(
bcmîr‹
) {

7371 
	`DHD_ERROR
(("%s:Érror %d onÑeading %d membytesát 0x%08x\n",

7372 
__FUNCTION__
, 
bcmîr‹
, (
dœºay
Ë- 
off£t
, offset));

7373 
îr
;

7377 i‡(
	`memcmp
(
dœºay
, 
uœºay
, (dlarray))) {

7378 
	`DHD_ERROR
(("%s: Downloaded image is corrupted (%s, %s, %s).\n",

7379 
__FUNCTION__
, 
dlimagíame
, 
dlimagevî
, 
dlimaged©e
));

7380 
îr
;

7382 
	`DHD_ERROR
(("%s: Download, Uploadánd compare succeeded (%s, %s, %s).\n",

7383 
__FUNCTION__
, 
dlimagíame
, 
dlimagevî
, 
dlimaged©e
));

7388 
îr
:

7389 i‡(
uœºay
)

7390 
	`MFREE
(
bus
->
dhd
->
osh
, 
uœºay
, bus->
ømsize
);

7391  
bcmîr‹
;

7392 
	}
}

7396 
	$dhdsdio_dow∆ﬂd_code_fûe
(
dhd_bus
 *
bus
, *
pfw_∑th
)

7398 
bcmîr‹
 = -1;

7399 
off£t
 = 0;

7400 
Àn
;

7401 *
image
 = 
NULL
;

7402 
uöt8
 *
memblock
 = 
NULL
, *
mem±r
;

7403 
uöt8
 *
mem±r_tmp
 = 
NULL
;

7405 
	`DHD_INFO
(("%s: dow∆ﬂd fúmw¨ê%s\n", 
__FUNCTION__
, 
pfw_∑th
));

7407 
image
 = 
	`dhd_os_›í_image
(
pfw_∑th
);

7408 i‡(
image
 =
NULL
)

7409 
îr
;

7411 
mem±r
 = 
memblock
 = 
	`MALLOC
(
bus
->
dhd
->
osh
, 
MEMBLOCK
 + 
DHD_SDALIGN
);

7412 i‡(
memblock
 =
NULL
) {

7413 
	`DHD_ERROR
(("%s: FaûedÅÿÆloˇã mem‹y %d byãs\n", 
__FUNCTION__
, 
MEMBLOCK
));

7414 
îr
;

7416 i‡(
dhd_msg_Àvñ
 & 
DHD_TRACE_VAL
) {

7417 
mem±r_tmp
 = 
	`MALLOC
(
bus
->
dhd
->
osh
, 
MEMBLOCK
 + 
DHD_SDALIGN
);

7418 i‡(
mem±r_tmp
 =
NULL
) {

7419 
	`DHD_ERROR
(("%s: FaûedÅÿÆloˇã mem‹y %d byãs\n", 
__FUNCTION__
, 
MEMBLOCK
));

7420 
îr
;

7423 i‡((
uöt32
)(
uöçå
)
memblock
 % 
DHD_SDALIGN
)

7424 
mem±r
 +(
DHD_SDALIGN
 - ((
uöt32
)(
uöçå
)
memblock
 % DHD_SDALIGN));

7427 (
Àn
 = 
	`dhd_os_gë_image_block
((*)
mem±r
, 
MEMBLOCK
, 
image
))) {

7428 i‡(
Àn
 < 0) {

7429 
	`DHD_ERROR
(("%s: dhd_os_gë_image_block faûed (%d)\n", 
__FUNCTION__
, 
Àn
));

7430 
bcmîr‹
 = 
BCME_ERROR
;

7431 
îr
;

7433 
bcmîr‹
 = 
	`dhdsdio_membyãs
(
bus
, 
TRUE
, 
off£t
, 
mem±r
, 
Àn
);

7434 i‡(
bcmîr‹
) {

7435 
	`DHD_ERROR
(("%s:Érror %d on writing %d membytesát 0x%08x\n",

7436 
__FUNCTION__
, 
bcmîr‹
, 
MEMBLOCK
, 
off£t
));

7437 
îr
;

7440 i‡(
dhd_msg_Àvñ
 & 
DHD_TRACE_VAL
) {

7441 
bcmîr‹
 = 
	`dhdsdio_membyãs
(
bus
, 
FALSE
, 
off£t
, 
mem±r_tmp
, 
Àn
);

7442 i‡(
bcmîr‹
) {

7443 
	`DHD_ERROR
(("%s:Érror %d on writing %d membytesát 0x%08x\n",

7444 
__FUNCTION__
, 
bcmîr‹
, 
MEMBLOCK
, 
off£t
));

7445 
îr
;

7447 i‡(
	`memcmp
(
mem±r_tmp
, 
mem±r
, 
Àn
)) {

7448 
	`DHD_ERROR
(("%s: Dow∆ﬂded imagêi†c‹ru±ed.\n", 
__FUNCTION__
));

7449 
îr
;

7451 
	`DHD_INFO
(("%s: Dow∆ﬂd, U∂ﬂdánd com∑ª suc˚eded.\n", 
__FUNCTION__
));

7453 
off£t
 +
MEMBLOCK
;

7456 
îr
:

7457 i‡(
memblock
)

7458 
	`MFREE
(
bus
->
dhd
->
osh
, 
memblock
, 
MEMBLOCK
 + 
DHD_SDALIGN
);

7459 i‡(
dhd_msg_Àvñ
 & 
DHD_TRACE_VAL
) {

7460 i‡(
mem±r_tmp
)

7461 
	`MFREE
(
bus
->
dhd
->
osh
, 
mem±r_tmp
, 
MEMBLOCK
 + 
DHD_SDALIGN
);

7464 i‡(
image
)

7465 
	`dhd_os_˛o£_image
(
image
);

7467  
bcmîr‹
;

7468 
	}
}

7485 
	$dhd_bus_£t_nvøm_∑øms
(
dhd_bus
 * 
bus
, c⁄° *
nvøm_∑øms
)

7487 
bus
->
nvøm_∑øms
 =Çvram_params;

7488 
	}
}

7491 
	$dhdsdio_dow∆ﬂd_nvøm
(
dhd_bus
 *
bus
)

7493 
bcmîr‹
 = -1;

7494 
uöt
 
Àn
;

7495 * 
image
 = 
NULL
;

7496 * 
memblock
 = 
NULL
;

7497 *
buÂ
;

7498 *
≤v_∑th
;

7499 
boﬁ
 
nvøm_fûe_exi°s
;

7501 
≤v_∑th
 = 
bus
->
nv_∑th
;

7503 
nvøm_fûe_exi°s
 = ((
≤v_∑th
 !
NULL
) && (pnv_path[0] != '\0'));

7504 i‡(!
nvøm_fûe_exi°s
 && (
bus
->
nvøm_∑øms
 =
NULL
))

7507 i‡(
nvøm_fûe_exi°s
) {

7508 
image
 = 
	`dhd_os_›í_image
(
≤v_∑th
);

7509 i‡(
image
 =
NULL
)

7510 
îr
;

7513 
memblock
 = 
	`MALLOC
(
bus
->
dhd
->
osh
, 
MAX_NVRAMBUF_SIZE
);

7514 i‡(
memblock
 =
NULL
) {

7515 
	`DHD_ERROR
(("%s: FailedÅoállocate memory %d bytes\n",

7516 
__FUNCTION__
, 
MAX_NVRAMBUF_SIZE
));

7517 
îr
;

7521 i‡(
nvøm_fûe_exi°s
) {

7522 
Àn
 = 
	`dhd_os_gë_image_block
(
memblock
, 
MAX_NVRAMBUF_SIZE
, 
image
);

7525 
Àn
 = 
	`°æí
(
bus
->
nvøm_∑øms
);

7526 
	`ASSERT
(
Àn
 <
MAX_NVRAMBUF_SIZE
);

7527 
	`mem˝y
(
memblock
, 
bus
->
nvøm_∑øms
, 
Àn
);

7529 i‡(
Àn
 > 0 &&Üí < 
MAX_NVRAMBUF_SIZE
) {

7530 
buÂ
 = (*)
memblock
;

7531 
buÂ
[
Àn
] = 0;

7532 
Àn
 = 
	`¥o˚ss_nvøm_v¨s
(
buÂ
,Üen);

7533 i‡(
Àn
 % 4) {

7534 
Àn
 += 4 - (len % 4);

7536 
buÂ
 +
Àn
;

7537 *
buÂ
++ = 0;

7538 i‡(
Àn
)

7539 
bcmîr‹
 = 
	`dhdsdio_dow∆ﬂdv¨s
(
bus
, 
memblock
, 
Àn
 + 1);

7540 i‡(
bcmîr‹
) {

7541 
	`DHD_ERROR
(("%s:Érror downloading vars: %d\n",

7542 
__FUNCTION__
, 
bcmîr‹
));

7546 
	`DHD_ERROR
(("%s:ÉrrorÑeadingÇvram file: %d\n",

7547 
__FUNCTION__
, 
Àn
));

7548 
bcmîr‹
 = 
BCME_SDIO_ERROR
;

7551 
îr
:

7552 i‡(
memblock
)

7553 
	`MFREE
(
bus
->
dhd
->
osh
, 
memblock
, 
MAX_NVRAMBUF_SIZE
);

7555 i‡(
image
)

7556 
	`dhd_os_˛o£_image
(
image
);

7558  
bcmîr‹
;

7559 
	}
}

7562 
	$_dhdsdio_dow∆ﬂd_fúmw¨e
(
dhd_bus
 *
bus
)

7564 
bcmîr‹
 = -1;

7566 
boﬁ
 
embed
 = 
FALSE
;

7567 
boﬁ
 
dlok
 = 
FALSE
;

7570 i‡((
bus
->
fw_∑th
 =
NULL
) || (bus->fw_path[0] == '\0')) {

7571 #ifde‡
BCMEMBEDIMAGE


7572 
embed
 = 
TRUE
;

7579 i‡(
	`dhdsdio_dow∆ﬂd_°©e
(
bus
, 
TRUE
)) {

7580 
	`DHD_ERROR
(("%s:Éº‹Öœcög ARM c‹êöÑe£t\n", 
__FUNCTION__
));

7581 
îr
;

7585 i‡((
bus
->
fw_∑th
 !
NULL
) && (bus->fw_path[0] != '\0')) {

7586 i‡(
	`dhdsdio_dow∆ﬂd_code_fûe
(
bus
, bus->
fw_∑th
)) {

7587 
	`DHD_ERROR
(("%s: d⁄gÀ imagêfûêdow∆ﬂd faûed\n", 
__FUNCTION__
));

7588 #ifde‡
BCMEMBEDIMAGE


7589 
embed
 = 
TRUE
;

7591 
îr
;

7595 
embed
 = 
FALSE
;

7596 
dlok
 = 
TRUE
;

7599 #ifde‡
BCMEMBEDIMAGE


7600 i‡(
embed
) {

7601 i‡(
	`dhdsdio_dow∆ﬂd_code_¨øy
(
bus
)) {

7602 
	`DHD_ERROR
(("%s: d⁄gÀ imagê¨øy dow∆ﬂd faûed\n", 
__FUNCTION__
));

7603 
îr
;

7606 
dlok
 = 
TRUE
;

7610 
	`BCM_REFERENCE
(
embed
);

7612 i‡(!
dlok
) {

7613 
	`DHD_ERROR
(("%s: d⁄gÀ imagêdow∆ﬂd faûed\n", 
__FUNCTION__
));

7614 
îr
;

7622 i‡(
	`dhdsdio_dow∆ﬂd_nvøm
(
bus
)) {

7623 
	`DHD_ERROR
(("%s: d⁄gÀÇvøm fûêdow∆ﬂd faûed\n", 
__FUNCTION__
));

7624 
îr
;

7628 i‡(
	`dhdsdio_dow∆ﬂd_°©e
(
bus
, 
FALSE
)) {

7629 
	`DHD_ERROR
(("%s:Éº‹ gëtög ouào‡ARM c‹êª£t\n", 
__FUNCTION__
));

7630 
îr
;

7633 
bcmîr‹
 = 0;

7635 
îr
:

7636  
bcmîr‹
;

7637 
	}
}

7640 
	$dhd_bcmsdh_ªcv_buf
(
dhd_bus_t
 *
bus
, 
uöt32
 
addr
, 
uöt
 
‚
, uöà
Êags
, 
uöt8
 *
buf
, uöà
nbyãs
,

7641 *
pkt
, 
bcmsdh_cm∂t_‚_t
 
com∂ëe
, *
h™dÀ
)

7643 
°©us
;

7645 i‡(!
	`KSO_ENAB
(
bus
)) {

7646 
	`DHD_ERROR
(("%s: Devi˚á¶ìp\n", 
__FUNCTION__
));

7647  
BCME_NODEVICE
;

7650 
°©us
 = 
	`bcmsdh_ªcv_buf
(
bus
->
sdh
, 
addr
, 
‚
, 
Êags
, 
buf
, 
nbyãs
, 
pkt
, 
com∂ëe
, 
h™dÀ
);

7652  
°©us
;

7653 
	}
}

7656 
	$dhd_bcmsdh_£nd_buf
(
dhd_bus_t
 *
bus
, 
uöt32
 
addr
, 
uöt
 
‚
, uöà
Êags
, 
uöt8
 *
buf
, uöà
nbyãs
,

7657 *
pkt
, 
bcmsdh_cm∂t_‚_t
 
com∂ëe
, *
h™dÀ
)

7659 i‡(!
	`KSO_ENAB
(
bus
)) {

7660 
	`DHD_ERROR
(("%s: Devi˚á¶ìp\n", 
__FUNCTION__
));

7661  
BCME_NODEVICE
;

7664  (
	`bcmsdh_£nd_buf
(
bus
->
sdh
, 
addr
, 
‚
, 
Êags
, 
buf
, 
nbyãs
, 
pkt
, 
com∂ëe
, 
h™dÀ
));

7665 
	}
}

7667 #ifde‡
BCMSDIOH_TXGLOM


7669 
	$dhd_bcmsdh_glom_po°
(
dhd_bus_t
 *
bus
, 
uöt8
 *
‰ame
, 
uöt
 
Àn
)

7671 
	`bcmsdh_glom_po°
(
bus
->
sdh
, 
‰ame
, 
Àn
);

7672 
	}
}

7675 
	$dhd_bcmsdh_glom_˛ór
(
dhd_bus_t
 *
bus
)

7677 
	`bcmsdh_glom_˛ór
(
bus
->
sdh
);

7678 
	}
}

7681 
uöt


7682 
	$dhd_bus_chù
(
dhd_bus
 *
bus
)

7684 
	`ASSERT
(
bus
->
sih
 !
NULL
);

7685  
bus
->
sih
->
chù
;

7686 
	}
}

7689 
	$dhd_bus_pub
(
dhd_bus
 *
bus
)

7691  
bus
->
dhd
;

7692 
	}
}

7695 
	$dhd_bus_txq
(
dhd_bus
 *
bus
)

7697  &
bus
->
txq
;

7698 
	}
}

7700 
uöt


7701 
	$dhd_bus_hdæí
(
dhd_bus
 *
bus
)

7703  
SDPCM_HDRLEN
;

7704 
	}
}

7707 
	$dhd_bus_devª£t
(
dhd_pub_t
 *
dhdp
, 
uöt8
 
Êag
)

7709 
bcmîr‹
 = 0;

7710 
dhd_bus_t
 *
bus
;

7712 
bus
 = 
dhdp
->bus;

7714 i‡(
Êag
 =
TRUE
) {

7715 i‡(!
bus
->
dhd
->
d⁄gÀ_ª£t
) {

7716 
	`dhd_os_sdlock
(
dhdp
);

7717 
	`dhd_os_wd_timî
(
dhdp
, 0);

7718 #i‡!
	`deföed
(
IGNORE_ETH0_DOWN
)

7720 
	`dhd_txÊowc⁄åﬁ
(
bus
->
dhd
, 
ALL_INTERFACES
, 
ON
);

7724 
	`dhd_bus_°›
(
bus
, 
FALSE
);

7726 #i‡
	`deföed
(
OOB_INTR_ONLY
)

7728 
	`bcmsdh_£t_úq
(
FALSE
);

7732 
	`dhdsdio_ªÀa£_d⁄gÀ
(
bus
, bus->
dhd
->
osh
, 
TRUE
, TRUE);

7734 
bus
->
dhd
->
d⁄gÀ_ª£t
 = 
TRUE
;

7735 
bus
->
dhd
->
up
 = 
FALSE
;

7736 #ifde‡
BCMSDIOH_TXGLOM


7737 
	`dhd_txglom_íabÀ
(
dhdp
, 
FALSE
);

7739 
	`dhd_os_sdu∆ock
(
dhdp
);

7741 
	`DHD_ERROR
(("%s: WLAN OFF DONE\n", 
__FUNCTION__
));

7744 
bcmîr‹
 = 
BCME_SDIO_ERROR
;

7748 
	`DHD_ERROR
(("\n\n%s: =WLAN ON ==\n", 
__FUNCTION__
));

7750 i‡(
bus
->
dhd
->
d⁄gÀ_ª£t
) {

7752 #ifde‡
DHDTHREAD


7753 
	`dhd_os_sdlock
(
dhdp
);

7756 
	`bcmsdh_ª£t
(
bus
->
sdh
);

7759 i‡(
	`dhdsdio_¥obe_©èch
(
bus
, bus->
dhd
->
osh
, bus->
sdh
,

7760 (
uöt32
 *)
SI_ENUM_BASE
,

7761 
bus
->
˛_devid
)) {

7763 
	`COPY_FW_PATH_BY_CHIP
(
bus
, 
fw_∑th
, 
fúmw¨e_∑th
);

7764 i‡(
	`dhdsdio_¥obe_öô
(
bus
, bus->
dhd
->
osh
, bus->
sdh
) &&

7765 
	`dhdsdio_dow∆ﬂd_fúmw¨e
(
bus
, bus->
dhd
->
osh
, bus->
sdh
)) {

7768 
bcmîr‹
 = 
	`dhd_bus_öô
((
dhd_pub_t
 *Ë
bus
->
dhd
, 
FALSE
);

7769 i‡(
bcmîr‹
 =
BCME_OK
) {

7770 #i‡
	`deföed
(
OOB_INTR_ONLY
)

7771 
	`bcmsdh_£t_úq
(
TRUE
);

7772 
	`dhd_íabÀ_oob_öå
(
bus
, 
TRUE
);

7775 
bus
->
dhd
->
d⁄gÀ_ª£t
 = 
FALSE
;

7776 
bus
->
dhd
->
up
 = 
TRUE
;

7778 #i‡!
	`deföed
(
IGNORE_ETH0_DOWN
)

7780 
	`dhd_txÊowc⁄åﬁ
(
bus
->
dhd
, 
ALL_INTERFACES
, 
OFF
);

7782 
	`dhd_os_wd_timî
(
dhdp
, 
dhd_w©chdog_ms
);

7783 #ifde‡
BCMSDIOH_TXGLOM


7784 i‡((
dhdp
->
bus°©e
 =
DHD_BUS_DATA
) &&

7785 
	`bcmsdh_glom_íabÀd
()) {

7786 
	`dhd_txglom_íabÀ
(
dhdp
, 
TRUE
);

7789 
	`DHD_ERROR
(("%s: WLAN ON DONE\n", 
__FUNCTION__
));

7791 
	`dhd_bus_°›
(
bus
, 
FALSE
);

7792 
	`dhdsdio_ªÀa£_d⁄gÀ
(
bus
, bus->
dhd
->
osh
,

7793 
TRUE
, 
FALSE
);

7796 
bcmîr‹
 = 
BCME_SDIO_ERROR
;

7798 
bcmîr‹
 = 
BCME_SDIO_ERROR
;

7800 #ifde‡
DHDTHREAD


7801 
	`dhd_os_sdu∆ock
(
dhdp
);

7804 
bcmîr‹
 = 
BCME_SDIO_ERROR
;

7805 
	`DHD_ERROR
(("%s called when dongle isÇot inÑeset\n",

7806 
__FUNCTION__
));

7807 
	`DHD_ERROR
(("Will call dhd_bus_start instead\n"));

7808 
	`sdioh_°¨t
(
NULL
, 1);

7809 #i‡
	`deföed
(
HW_OOB
)

7810 
	`bcmsdh_c⁄fig_hw_oob_öå
(
bus
->
sdh
, bus->
sih
->
chù
);

7812 
	`COPY_FW_PATH_BY_CHIP
(
bus
, 
fw_∑th
, 
fúmw¨e_∑th
);

7813 i‡((
bcmîr‹
 = 
	`dhd_bus_°¨t
(
dhdp
)) != 0)

7814 
	`DHD_ERROR
(("%s: dhd_bus_start fail with %d\n",

7815 
__FUNCTION__
, 
bcmîr‹
));

7818  
bcmîr‹
;

7819 
	}
}

7822 
uöt
 
	$dhd_bus_chù_id
(
dhd_pub_t
 *
dhdp
)

7824 
dhd_bus_t
 *
bus
 = 
dhdp
->bus;

7826  
bus
->
sih
->
chù
;

7827 
	}
}

7830 
uöt
 
	$dhd_bus_chùªv_id
(
dhd_pub_t
 *
dhdp
)

7832 
dhd_bus_t
 *
bus
 = 
dhdp
->bus;

7834  
bus
->
sih
->
chùªv
;

7835 
	}
}

7838 
uöt
 
	$dhd_bus_chùpkg_id
(
dhd_pub_t
 *
dhdp
)

7840 
dhd_bus_t
 *
bus
 = 
dhdp
->bus;

7842  
bus
->
sih
->
chùpkg
;

7843 
	}
}

7846 
	$dhd_bus_membyãs
(
dhd_pub_t
 *
dhdp
, 
boﬁ
 
£t
, 
uöt32
 
addªss
, 
uöt8
 *
d©a
, 
uöt
 
size
)

7848 
dhd_bus_t
 *
bus
;

7850 
bus
 = 
dhdp
->bus;

7851  
	`dhdsdio_membyãs
(
bus
, 
£t
, 
addªss
, 
d©a
, 
size
);

7852 
	}
}

	@hndpmu.c

28 
	~<bcm_cfg.h
>

29 
	~<ty≥defs.h
>

30 
	~<bcmdefs.h
>

31 
	~<o¶.h
>

32 
	~<bcmutûs.h
>

33 
	~<siutûs.h
>

34 
	~<bcmdevs.h
>

35 
	~<hndsoc.h
>

36 
	~<sbchùc.h
>

37 
	~<hndpmu.h
>

39 
	#PMU_ERROR
(
¨gs
)

	)

41 
	#PMU_MSG
(
¨gs
)

	)

46 
	#PMU_NONE
(
¨gs
)

	)

53 
uöt8
 
	m°ªngth
;

54 
uöt8
 
	m£l
;

55 } 
	tsdiod_drive_°r_t
;

58 c⁄° 
sdiod_drive_°r_t
 
	gsdiod_drive_°ªngth_èb1
[] = {

65 c⁄° 
sdiod_drive_°r_t
 
	gsdiod_drive_°ªngth_èb2
[] = {

75 c⁄° 
sdiod_drive_°r_t
 
	gsdiod_drive_°ªngth_èb3
[] = {

86 c⁄° 
sdiod_drive_°r_t
 
	gsdiod_drive_°ªngth_èb4_1v8
[] = {

101 c⁄° 
sdiod_drive_°r_t
 
	gsdiod_drive_°ªngth_èb5_1v8
[] = {

113 c⁄° 
sdiod_drive_°r_t
 
	gsdiod_drive_°ªngth_èb6_1v8
[] = {

119 
	#SDIOD_DRVSTR_KEY
(
chù
, 
pmu
Ë(((chùË<< 16Ë| (pmu))

	)

122 
	$si_sdiod_drive_°ªngth_öô
(
si_t
 *
sih
, 
o¶_t
 *
osh
, 
uöt32
 
drive°ªngth
)

124 
chù¸egs_t
 *
cc
;

125 
uöt
 
‹igidx
, 
öå_vÆ
 = 0;

126 
sdiod_drive_°r_t
 *
°r_èb
 = 
NULL
;

127 
uöt32
 
°r_mask
 = 0;

128 
uöt32
 
°r_shi·
 = 0;

130 i‡(!(
sih
->
ccˇps
 & 
CC_CAP_PMU
)) {

135 
cc
 = (
chù¸egs_t
 *Ë
	`si_swôch_c‹e
(
sih
, 
CC_CORE_ID
, &
‹igidx
, &
öå_vÆ
);

137 
	`SDIOD_DRVSTR_KEY
(
sih
->
chù
, sih->
pmuªv
)) {

138 
	`SDIOD_DRVSTR_KEY
(
BCM4325_CHIP_ID
, 1):

139 
°r_èb
 = (
sdiod_drive_°r_t
 *)&
sdiod_drive_°ªngth_èb1
;

140 
°r_mask
 = 0x30000000;

141 
°r_shi·
 = 28;

143 
	`SDIOD_DRVSTR_KEY
(
BCM4325_CHIP_ID
, 2):

144 
	`SDIOD_DRVSTR_KEY
(
BCM4325_CHIP_ID
, 3):

145 
	`SDIOD_DRVSTR_KEY
(
BCM4315_CHIP_ID
, 4):

146 
°r_èb
 = (
sdiod_drive_°r_t
 *)&
sdiod_drive_°ªngth_èb2
;

147 
°r_mask
 = 0x00003800;

148 
°r_shi·
 = 11;

150 
	`SDIOD_DRVSTR_KEY
(
BCM4336_CHIP_ID
, 8):

151 
	`SDIOD_DRVSTR_KEY
(
BCM4336_CHIP_ID
, 11):

152 i‡(
sih
->
pmuªv
 == 8) {

153 
°r_èb
 = (
sdiod_drive_°r_t
 *)&
sdiod_drive_°ªngth_èb3
;

155 i‡(
sih
->
pmuªv
 == 11) {

156 
°r_èb
 = (
sdiod_drive_°r_t
 *)&
sdiod_drive_°ªngth_èb4_1v8
;

158 
°r_mask
 = 0x00003800;

159 
°r_shi·
 = 11;

161 
	`SDIOD_DRVSTR_KEY
(
BCM4330_CHIP_ID
, 12):

162 
°r_èb
 = (
sdiod_drive_°r_t
 *)&
sdiod_drive_°ªngth_èb4_1v8
;

163 
°r_mask
 = 0x00003800;

164 
°r_shi·
 = 11;

166 
	`SDIOD_DRVSTR_KEY
(
BCM43362_CHIP_ID
, 13):

167 
°r_èb
 = (
sdiod_drive_°r_t
 *)&
sdiod_drive_°ªngth_èb5_1v8
;

168 
°r_mask
 = 0x00003800;

169 
°r_shi·
 = 11;

171 
	`SDIOD_DRVSTR_KEY
(
BCM4334_CHIP_ID
, 17):

172 
°r_èb
 = (
sdiod_drive_°r_t
 *)&
sdiod_drive_°ªngth_èb6_1v8
;

173 
°r_mask
 = 0x00001800;

174 
°r_shi·
 = 11;

177 
	`PMU_MSG
(("No SDIO Drive strength init done for chip %sÑev %dÖmurev %d\n",

178 
	`bcm_chù«me
(
sih
->
chù
, 
chn
, 8), sih->
chùªv
, sih->
pmuªv
));

183 i‡(
°r_èb
 !
NULL
 && 
cc
 != NULL) {

184 
uöt32
 
cc_d©a_ãmp
;

185 
i
;

190 
i
 = 0; 
drive°ªngth
 < 
°r_èb
[i].
°ªngth
; i++)

193 i‡(
i
 > 0 && 
drive°ªngth
 > 
°r_èb
[i].
°ªngth
)

194 
i
--;

196 
	`W_REG
(
osh
, &
cc
->
chùc⁄åﬁ_addr
, 1);

197 
cc_d©a_ãmp
 = 
	`R_REG
(
osh
, &
cc
->
chùc⁄åﬁ_d©a
);

198 
cc_d©a_ãmp
 &~
°r_mask
;

199 
cc_d©a_ãmp
 |
°r_èb
[
i
].
£l
 << 
°r_shi·
;

200 
	`W_REG
(
osh
, &
cc
->
chùc⁄åﬁ_d©a
, 
cc_d©a_ãmp
);

202 
	`PMU_MSG
(("SDIO: %dmA drive strengthÑequested; setÅo %dmA\n",

203 
drive°ªngth
, 
°r_èb
[
i
].
°ªngth
));

207 
	`si_ª°‹e_c‹e
(
sih
, 
‹igidx
, 
öå_vÆ
);

208 
	}
}

	@linux_osl.c

27 
	#LINUX_PORT


	)

29 
	~<ty≥defs.h
>

30 
	~<bcmídün.h
>

31 
	~<löuxvî.h
>

32 
	~<bcmdefs.h
>

33 
	~<o¶.h
>

34 
	~<bcmutûs.h
>

35 
	~<löux/dñay.h
>

36 
	~<pcicfg.h
>

39 
	~<löux/fs.h
>

41 
	#PCI_CFG_RETRY
 10

	)

43 
	#OS_HANDLE_MAGIC
 0x1234abcd

	)

44 
	#BCM_MEM_FILENAME_LEN
 24

	)

46 #ifde‡
CONFIG_DHD_USE_STATIC_BUF


47 
	#DHD_SKB_HDRSIZE
 336

	)

48 
	#DHD_SKB_1PAGE_BUFSIZE
 ((
PAGE_SIZE
*1)-
DHD_SKB_HDRSIZE
)

	)

49 
	#DHD_SKB_2PAGE_BUFSIZE
 ((
PAGE_SIZE
*2)-
DHD_SKB_HDRSIZE
)

	)

50 
	#DHD_SKB_4PAGE_BUFSIZE
 ((
PAGE_SIZE
*4)-
DHD_SKB_HDRSIZE
)

	)

52 
	#STATIC_BUF_MAX_NUM
 16

	)

53 
	#STATIC_BUF_SIZE
 (
PAGE_SIZE
*2)

	)

54 
	#STATIC_BUF_TOTAL_LEN
 (
STATIC_BUF_MAX_NUM
 * 
STATIC_BUF_SIZE
)

	)

56 
	sbcm_°©ic_buf
 {

57 
£m≠h‹e
 
	m°©ic_£m
;

58 *
	mbuf_±r
;

59 
	mbuf_u£
[
STATIC_BUF_MAX_NUM
];

60 } 
	tbcm_°©ic_buf_t
;

62 
bcm_°©ic_buf_t
 *
	gbcm_°©ic_buf
 = 0;

64 
	#STATIC_PKT_MAX_NUM
 8

	)

65 #i‡
deföed
(
ENHANCED_STATIC_BUF
)

66 
	#STATIC_PKT_4PAGE_NUM
 1

	)

67 
	#DHD_SKB_MAX_BUFSIZE
 
DHD_SKB_4PAGE_BUFSIZE


	)

69 
	#STATIC_PKT_4PAGE_NUM
 0

	)

70 
	#DHD_SKB_MAX_BUFSIZE
 
DHD_SKB_2PAGE_BUFSIZE


	)

73 
	sbcm_°©ic_pkt
 {

74 
sk_buff
 *
	mskb_4k
[
STATIC_PKT_MAX_NUM
];

75 
sk_buff
 *
	mskb_8k
[
STATIC_PKT_MAX_NUM
];

76 #ifde‡
ENHANCED_STATIC_BUF


77 
sk_buff
 *
	mskb_16k
;

79 
£m≠h‹e
 
	mo¶_pkt_£m
;

80 
	mpkt_u£
[
STATIC_PKT_MAX_NUM
 * 2 + 
STATIC_PKT_4PAGE_NUM
];

81 } 
	tbcm_°©ic_pkt_t
;

83 
bcm_°©ic_pkt_t
 *
	gbcm_°©ic_skb
 = 0;

86 
	sbcm_mem_lök
 {

87 
bcm_mem_lök
 *
	m¥ev
;

88 
bcm_mem_lök
 *
	m√xt
;

89 
uöt
 
	msize
;

90 
	mlöe
;

91 *
	mosh
;

92 
	mfûe
[
BCM_MEM_FILENAME_LEN
];

93 } 
	tbcm_mem_lök_t
;

95 
	so¶_öfo
 {

96 
o¶_puböfo_t
 
	mpub
;

97 #ifde‡
CTFPOOL


98 
˘Âoﬁ_t
 *
	m˘Âoﬁ
;

100 
uöt
 
	mmagic
;

101 *
	mpdev
;

102 
©omic_t
 
	mmÆlo˚d
;

103 
uöt
 
	mÁûed
;

104 
uöt
 
	mbu°y≥
;

105 
bcm_mem_lök_t
 *
	mdbgmem_li°
;

106 
•ölock_t
 
	mdbgmem_lock
;

107 
•ölock_t
 
	mpkèŒoc_lock
;

113 
uöt32
 
	gg_as£π_ty≥
 = 
FALSE
;

115 
öt16
 
	glöuxbcmîr‹m≠
[] =

117 -
EINVAL
,

118 -
EINVAL
,

119 -
EINVAL
,

120 -
EINVAL
,

121 -
EINVAL
,

122 -
EINVAL
,

123 -
EINVAL
,

124 -
EINVAL
,

125 -
EINVAL
,

126 -
EINVAL
,

127 -
EINVAL
,

128 -
EINVAL
,

129 -
EINVAL
,

130 -
E2BIG
,

131 -
E2BIG
,

132 -
EBUSY
,

133 -
EINVAL
,

134 -
EINVAL
,

135 -
EINVAL
,

136 -
EINVAL
,

137 -
EFAULT
,

138 -
ENOMEM
,

139 -
EOPNOTSUPP
,

140 -
EMSGSIZE
,

141 -
EINVAL
,

142 -
EPERM
,

143 -
ENOMEM
,

144 -
EINVAL
,

145 -
ERANGE
,

146 -
EINVAL
,

147 -
EINVAL
,

148 -
EINVAL
,

149 -
EINVAL
,

150 -
EINVAL
,

151 -
EIO
,

152 -
ENODEV
,

153 -
EINVAL
,

154 -
EIO
,

155 -
EIO
,

156 -
ENODEV
,

157 -
EINVAL
,

158 -
ENODATA
,

164 #i‡
BCME_LAST
 != -42

172 
	$o¶_îr‹
(
bcmîr‹
)

174 i‡(
bcmîr‹
 > 0)

175 
bcmîr‹
 = 0;

176 i‡(
bcmîr‹
 < 
BCME_LAST
)

177 
bcmîr‹
 = 
BCME_ERROR
;

180  
löuxbcmîr‹m≠
[-
bcmîr‹
];

181 
	}
}

183 
uöt8
* 
dhd_os_¥óŒoc
(*
osh
, 
£˘i⁄
, 
size
);

185 
o¶_t
 *

186 
	$o¶_©èch
(*
pdev
, 
uöt
 
bu°y≥
, 
boﬁ
 
pkâag
)

188 
o¶_t
 *
osh
;

190 i‡(!(
osh
 = 
	`kmÆloc
((
o¶_t
), 
GFP_ATOMIC
)))

191  
osh
;

193 
	`ASSERT
(
osh
);

195 
	`bzîo
(
osh
, (
o¶_t
));

198 
	`ASSERT
(
	`ABS
(
BCME_LAST
Ë=(
	`ARRAYSIZE
(
löuxbcmîr‹m≠
) - 1));

200 
osh
->
magic
 = 
OS_HANDLE_MAGIC
;

201 
	`©omic_£t
(&
osh
->
mÆlo˚d
, 0);

202 
osh
->
Áûed
 = 0;

203 
osh
->
dbgmem_li°
 = 
NULL
;

204 
	`•ö_lock_öô
(&(
osh
->
dbgmem_lock
));

205 
osh
->
pdev
 =Ödev;

206 
osh
->
pub
.
pkâag
 =Ökttag;

207 
osh
->
bu°y≥
 = bustype;

209 
bu°y≥
) {

210 
PCI_BUS
:

211 
SI_BUS
:

212 
PCMCIA_BUS
:

213 
osh
->
pub
.
mmbus
 = 
TRUE
;

215 
JTAG_BUS
:

216 
SDIO_BUS
:

217 
USB_BUS
:

218 
SPI_BUS
:

219 
RPC_BUS
:

220 
osh
->
pub
.
mmbus
 = 
FALSE
;

223 
	`ASSERT
(
FALSE
);

227 #i‡
	`deföed
(
CONFIG_DHD_USE_STATIC_BUF
)

228 i‡(!
bcm_°©ic_buf
) {

229 i‡(!(
bcm_°©ic_buf
 = (
bcm_°©ic_buf_t
 *)
	`dhd_os_¥óŒoc
(
osh
, 3, 
STATIC_BUF_SIZE
+

230 
STATIC_BUF_TOTAL_LEN
))) {

231 
	`¥ötk
("canÇotálloc static buf!\n");

234 
	`¥ötk
("Ælo¯°©i¯bu‡© %x!\n", ()
bcm_°©ic_buf
);

237 
	`£ma_öô
(&
bcm_°©ic_buf
->
°©ic_£m
, 1);

239 
bcm_°©ic_buf
->
buf_±r
 = (*)bcm_°©ic_bu‡+ 
STATIC_BUF_SIZE
;

242 i‡(!
bcm_°©ic_skb
) {

243 
i
;

244 *
skb_buff_±r
 = 0;

245 
bcm_°©ic_skb
 = (
bcm_°©ic_pkt_t
 *)((*)
bcm_°©ic_buf
 + 2048);

246 
skb_buff_±r
 = 
	`dhd_os_¥óŒoc
(
osh
, 4, 0);

248 
	`bc›y
(
skb_buff_±r
, 
bcm_°©ic_skb
, (
sk_buff
 *)*

249 (
STATIC_PKT_MAX_NUM
 * 2 + 
STATIC_PKT_4PAGE_NUM
));

250 
i
 = 0; i < (
STATIC_PKT_MAX_NUM
 * 2 + 
STATIC_PKT_4PAGE_NUM
); i++)

251 
bcm_°©ic_skb
->
pkt_u£
[
i
] = 0;

253 
	`£ma_öô
(&
bcm_°©ic_skb
->
o¶_pkt_£m
, 1);

257 
	`•ö_lock_öô
(&(
osh
->
pkèŒoc_lock
));

259  
osh
;

260 
	}
}

263 
	$o¶_dëach
(
o¶_t
 *
osh
)

265 i‡(
osh
 =
NULL
)

268 #ifde‡
CONFIG_DHD_USE_STATIC_BUF


269 i‡(
bcm_°©ic_buf
) {

270 
bcm_°©ic_buf
 = 0;

272 i‡(
bcm_°©ic_skb
) {

273 
bcm_°©ic_skb
 = 0;

277 
	`ASSERT
(
osh
->
magic
 =
OS_HANDLE_MAGIC
);

278 
	`k‰ì
(
osh
);

279 
	}
}

281 
sk_buff
 *
	$o¶_Æloc_skb
(
Àn
)

283 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 25)

284  
	`__dev_Æloc_skb
(
Àn
, 
GFP_ATOMIC
);

286  
	`dev_Æloc_skb
(
Àn
);

288 
	}
}

290 #ifde‡
CTFPOOL


292 #ifde‡
CTFPOOL_SPINLOCK


293 
	#CTFPOOL_LOCK
(
˘Âoﬁ
, 
Êags
Ë
	`•ö_lock_úqßve
(&(˘Âoﬁ)->
lock
, fœgs)

	)

294 
	#CTFPOOL_UNLOCK
(
˘Âoﬁ
, 
Êags
Ë
	`•ö_u∆ock_úqª°‹e
(&(˘Âoﬁ)->
lock
, fœgs)

	)

296 
	#CTFPOOL_LOCK
(
˘Âoﬁ
, 
Êags
Ë
	`•ö_lock_bh
(&(˘Âoﬁ)->
lock
)

	)

297 
	#CTFPOOL_UNLOCK
(
˘Âoﬁ
, 
Êags
Ë
	`•ö_u∆ock_bh
(&(˘Âoﬁ)->
lock
)

	)

303 
	$o¶_˘Âoﬁ_add
(
o¶_t
 *
osh
)

305 
sk_buff
 *
skb
;

306 #ifde‡
CTFPOOL_SPINLOCK


307 
Êags
;

310 i‡((
osh
 =
NULL
Ë|| (osh->
˘Âoﬁ
 == NULL))

311  
NULL
;

313 
	`CTFPOOL_LOCK
(
osh
->
˘Âoﬁ
, 
Êags
);

314 
	`ASSERT
(
osh
->
˘Âoﬁ
->
cuº_obj
 <osh->˘Âoﬁ->
max_obj
);

317 i‡(
osh
->
˘Âoﬁ
->
cuº_obj
 =osh->˘Âoﬁ->
max_obj
) {

318 
	`CTFPOOL_UNLOCK
(
osh
->
˘Âoﬁ
, 
Êags
);

319  
NULL
;

323 
skb
 = 
	`o¶_Æloc_skb
(
osh
->
˘Âoﬁ
->
obj_size
);

324 i‡(
skb
 =
NULL
) {

325 
	`¥ötf
("%s: skbáŒo¯o‡À¿%d faûed\n", 
__FUNCTION__
,

326 
osh
->
˘Âoﬁ
->
obj_size
);

327 
	`CTFPOOL_UNLOCK
(
osh
->
˘Âoﬁ
, 
Êags
);

328  
NULL
;

332 
skb
->
√xt
 = (
sk_buff
 *)
osh
->
˘Âoﬁ
->
hód
;

333 
osh
->
˘Âoﬁ
->
hód
 = 
skb
;

334 
osh
->
˘Âoﬁ
->
Á°_‰ìs
++;

335 
osh
->
˘Âoﬁ
->
cuº_obj
++;

338 
	`CTFPOOLPTR
(
osh
, 
skb
Ë(*)osh->
˘Âoﬁ
;

341 
	`PKTFAST
(
osh
, 
skb
Ë
FASTBUF
;

343 
	`CTFPOOL_UNLOCK
(
osh
->
˘Âoﬁ
, 
Êags
);

345  
skb
;

346 
	}
}

352 
	$o¶_˘Âoﬁ_ª∂íish
(
o¶_t
 *
osh
, 
uöt
 
thªsh
)

354 i‡((
osh
 =
NULL
Ë|| (osh->
˘Âoﬁ
 == NULL))

358 (
osh
->
˘Âoﬁ
->
ªfûls
 > 0Ë&& (
thªsh
--)) {

359 
	`o¶_˘Âoﬁ_add
(
osh
);

360 
osh
->
˘Âoﬁ
->
ªfûls
--;

362 
	}
}

367 
öt32


368 
	$o¶_˘Âoﬁ_öô
(
o¶_t
 *
osh
, 
uöt
 
numobj
, uöà
size
)

370 
osh
->
˘Âoﬁ
 = 
	`kmÆloc
((
˘Âoﬁ_t
), 
GFP_ATOMIC
);

371 
	`ASSERT
(
osh
->
˘Âoﬁ
);

372 
	`bzîo
(
osh
->
˘Âoﬁ
, (
˘Âoﬁ_t
));

374 
osh
->
˘Âoﬁ
->
max_obj
 = 
numobj
;

375 
osh
->
˘Âoﬁ
->
obj_size
 = 
size
;

377 
	`•ö_lock_öô
(&
osh
->
˘Âoﬁ
->
lock
);

379 
numobj
--) {

380 i‡(!
	`o¶_˘Âoﬁ_add
(
osh
))

382 
osh
->
˘Âoﬁ
->
Á°_‰ìs
--;

386 
	}
}

392 
	$o¶_˘Âoﬁ_˛ónup
(
o¶_t
 *
osh
)

394 
sk_buff
 *
skb
, *
nskb
;

395 #ifde‡
CTFPOOL_SPINLOCK


396 
Êags
;

399 i‡((
osh
 =
NULL
Ë|| (osh->
˘Âoﬁ
 == NULL))

402 
	`CTFPOOL_LOCK
(
osh
->
˘Âoﬁ
, 
Êags
);

404 
skb
 = 
osh
->
˘Âoﬁ
->
hód
;

406 
skb
 !
NULL
) {

407 
nskb
 = 
skb
->
√xt
;

408 
	`dev_k‰ì_skb
(
skb
);

409 
skb
 = 
nskb
;

410 
osh
->
˘Âoﬁ
->
cuº_obj
--;

413 
	`ASSERT
(
osh
->
˘Âoﬁ
->
cuº_obj
 == 0);

414 
osh
->
˘Âoﬁ
->
hód
 = 
NULL
;

415 
	`CTFPOOL_UNLOCK
(
osh
->
˘Âoﬁ
, 
Êags
);

417 
	`k‰ì
(
osh
->
˘Âoﬁ
);

418 
osh
->
˘Âoﬁ
 = 
NULL
;

419 
	}
}

422 
	$o¶_˘Âoﬁ_°©s
(
o¶_t
 *
osh
, *
b
)

424 
bcm°rbuf
 *
bb
;

426 i‡((
osh
 =
NULL
Ë|| (osh->
˘Âoﬁ
 == NULL))

429 #ifde‡
CONFIG_DHD_USE_STATIC_BUF


430 i‡(
bcm_°©ic_buf
) {

431 
bcm_°©ic_buf
 = 0;

433 i‡(
bcm_°©ic_skb
) {

434 
bcm_°©ic_skb
 = 0;

438 
bb
 = 
b
;

440 
	`ASSERT
((
osh
 !
NULL
Ë&& (
bb
 != NULL));

442 
	`bcm_b¥ötf
(
bb
, "max_obj %d obj_size %d curr_obj %dÑefills %d\n",

443 
osh
->
˘Âoﬁ
->
max_obj
, osh->˘Âoﬁ->
obj_size
,

444 
osh
->
˘Âoﬁ
->
cuº_obj
, osh->˘Âoﬁ->
ªfûls
);

445 
	`bcm_b¥ötf
(
bb
, "fast_allocs %d fast_frees %d slow_allocs %d\n",

446 
osh
->
˘Âoﬁ
->
Á°_Ælocs
, osh->˘Âoﬁ->
Á°_‰ìs
,

447 
osh
->
˘Âoﬁ
->
¶ow_Ælocs
);

448 
	}
}

450 
ölöe
 
sk_buff
 *

451 
	$o¶_pktÁ°gë
(
o¶_t
 *
osh
, 
uöt
 
Àn
)

453 
sk_buff
 *
skb
;

454 #ifde‡
CTFPOOL_SPINLOCK


455 
Êags
;

461 i‡(
osh
->
˘Âoﬁ
 =
NULL
)

462  
NULL
;

464 
	`CTFPOOL_LOCK
(
osh
->
˘Âoﬁ
, 
Êags
);

465 i‡(
osh
->
˘Âoﬁ
->
hód
 =
NULL
) {

466 
	`ASSERT
(
osh
->
˘Âoﬁ
->
cuº_obj
 == 0);

467 
osh
->
˘Âoﬁ
->
¶ow_Ælocs
++;

468 
	`CTFPOOL_UNLOCK
(
osh
->
˘Âoﬁ
, 
Êags
);

469  
NULL
;

472 
	`ASSERT
(
Àn
 <
osh
->
˘Âoﬁ
->
obj_size
);

475 
skb
 = (
sk_buff
 *)
osh
->
˘Âoﬁ
->
hód
;

476 
osh
->
˘Âoﬁ
->
hód
 = (*)
skb
->
√xt
;

478 
osh
->
˘Âoﬁ
->
Á°_Ælocs
++;

479 
osh
->
˘Âoﬁ
->
cuº_obj
--;

480 
	`ASSERT
(
	`CTFPOOLHEAD
(
osh
, 
skb
Ë=(
sock
 *)osh->
˘Âoﬁ
->
hód
);

481 
	`CTFPOOL_UNLOCK
(
osh
->
˘Âoﬁ
, 
Êags
);

484 
skb
->
√xt
 = skb->
¥ev
 = 
NULL
;

485 
skb
->
d©a
 = skb->
hód
 + 16;

486 
skb
->
èû
 = skb->
hód
 + 16;

488 
skb
->
Àn
 = 0;

489 
skb
->
˛⁄ed
 = 0;

490 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2, 6, 14)

491 
skb
->
li°
 = 
NULL
;

493 
	`©omic_£t
(&
skb
->
u£rs
, 1);

495  
skb
;

496 
	}
}

503 
sk_buff
 * 
BCMFASTPATH


504 
	$o¶_pkt_t⁄©ive
(
o¶_t
 *
osh
, *
pkt
)

506 #i‚de‡
WL_UMK


507 
sk_buff
 *
nskb
;

508 
Êags
;

511 i‡(
osh
->
pub
.
pkâag
)

512 
	`bzîo
((*)((
sk_buff
 *)
pkt
)->
cb
, 
OSL_PKTTAG_SZ
);

514 #i‚de‡
WL_UMK


516 
nskb
 = (
sk_buff
 *)
pkt
;Çskb;Çskb =Çskb->
√xt
) {

517 
	`•ö_lock_úqßve
(&
osh
->
pkèŒoc_lock
, 
Êags
);

518 
osh
->
pub
.
pkèŒo˚d
--;

519 
	`•ö_u∆ock_úqª°‹e
(&
osh
->
pkèŒoc_lock
, 
Êags
);

522  (
sk_buff
 *)
pkt
;

523 
	}
}

529 * 
BCMFASTPATH


530 
	$o¶_pkt_‰m«tive
(
o¶_t
 *
osh
, *
pkt
)

532 #i‚de‡
WL_UMK


533 
sk_buff
 *
nskb
;

534 
Êags
;

537 i‡(
osh
->
pub
.
pkâag
)

538 
	`bzîo
((*)((
sk_buff
 *)
pkt
)->
cb
, 
OSL_PKTTAG_SZ
);

540 #i‚de‡
WL_UMK


542 
nskb
 = (
sk_buff
 *)
pkt
;Çskb;Çskb =Çskb->
√xt
) {

543 
	`•ö_lock_úqßve
(&
osh
->
pkèŒoc_lock
, 
Êags
);

544 
osh
->
pub
.
pkèŒo˚d
++;

545 
	`•ö_u∆ock_úqª°‹e
(&
osh
->
pkèŒoc_lock
, 
Êags
);

548  (*)
pkt
;

549 
	}
}

552 * 
BCMFASTPATH


553 
	$o¶_pktgë
(
o¶_t
 *
osh
, 
uöt
 
Àn
)

555 
sk_buff
 *
skb
;

556 
Êags
;

558 #ifde‡
CTFPOOL


560 
skb
 = 
	`o¶_pktÁ°gë
(
osh
, 
Àn
);

561 i‡((
skb
 !
NULL
Ë|| ((skb = 
	`o¶_Æloc_skb
(
Àn
)) != NULL)) {

563 i‡((
skb
 = 
	`o¶_Æloc_skb
(
Àn
))) {

565 
	`skb_put
(
skb
, 
Àn
);

566 
skb
->
¥i‹ôy
 = 0;

569 
	`•ö_lock_úqßve
(&
osh
->
pkèŒoc_lock
, 
Êags
);

570 
osh
->
pub
.
pkèŒo˚d
++;

571 
	`•ö_u∆ock_úqª°‹e
(&
osh
->
pkèŒoc_lock
, 
Êags
);

574  ((*Ë
skb
);

575 
	}
}

577 #ifde‡
CTFPOOL


578 
ölöe
 

579 
	$o¶_pktÁ°‰ì
(
o¶_t
 *
osh
, 
sk_buff
 *
skb
)

581 
˘Âoﬁ_t
 *
˘Âoﬁ
;

582 #ifde‡
CTFPOOL_SPINLOCK


583 
Êags
;

586 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 14)

587 
skb
->
t°amp
.
tv
.
£c
 = 0;

589 
skb
->
°amp
.
tv_£c
 = 0;

593 
skb
->
dev
 = 
NULL
;

594 
skb
->
d°
 = 
NULL
;

595 
	`mem£t
(
skb
->
cb
, 0, (skb->cb));

596 
skb
->
ù_summed
 = 0;

597 
skb
->
de°ru˘‹
 = 
NULL
;

599 
˘Âoﬁ
 = (
˘Âoﬁ_t
 *)
	`CTFPOOLPTR
(
osh
, 
skb
);

600 
	`ASSERT
(
˘Âoﬁ
 !
NULL
);

603 
	`CTFPOOL_LOCK
(
˘Âoﬁ
, 
Êags
);

604 
skb
->
√xt
 = (
sk_buff
 *)
˘Âoﬁ
->
hód
;

605 
˘Âoﬁ
->
hód
 = (*)
skb
;

607 
˘Âoﬁ
->
Á°_‰ìs
++;

608 
˘Âoﬁ
->
cuº_obj
++;

610 
	`ASSERT
(
˘Âoﬁ
->
cuº_obj
 <˘Âoﬁ->
max_obj
);

611 
	`CTFPOOL_UNLOCK
(
˘Âoﬁ
, 
Êags
);

612 
	}
}

616 
BCMFASTPATH


617 
	$o¶_pkt‰ì
(
o¶_t
 *
osh
, *
p
, 
boﬁ
 
£nd
)

619 
sk_buff
 *
skb
, *
nskb
;

620 
Êags
;

622 
skb
 = (
sk_buff
*Ë
p
;

624 i‡(
£nd
 && 
osh
->
pub
.
tx_‚
)

625 
osh
->
pub
.
	`tx_‚
(osh->pub.
tx_˘x
, 
p
, 0);

627 
	`PKTDBG_TRACE
(
osh
, (*Ë
skb
, 
PKTLIST_PKTFREE
);

630 
skb
) {

631 
nskb
 = 
skb
->
√xt
;

632 
skb
->
√xt
 = 
NULL
;

636 #ifde‡
CTFPOOL


637 i‡((
	`PKTISFAST
(
osh
, 
skb
)Ë&& (
	`©omic_ªad
(&skb->
u£rs
) == 1))

638 
	`o¶_pktÁ°‰ì
(
osh
, 
skb
);

644 i‡(
skb
->
de°ru˘‹
)

648 
	`dev_k‰ì_skb_™y
(
skb
);

653 
	`dev_k‰ì_skb
(
skb
);

655 
	`•ö_lock_úqßve
(&
osh
->
pkèŒoc_lock
, 
Êags
);

656 
osh
->
pub
.
pkèŒo˚d
--;

657 
	`•ö_u∆ock_úqª°‹e
(&
osh
->
pkèŒoc_lock
, 
Êags
);

658 
skb
 = 
nskb
;

660 
	}
}

662 #ifde‡
CONFIG_DHD_USE_STATIC_BUF


664 
	$o¶_pktgë_°©ic
(
o¶_t
 *
osh
, 
uöt
 
Àn
)

666 
i
 = 0;

667 
sk_buff
 *
skb
;

670 i‡(
Àn
 > 
DHD_SKB_MAX_BUFSIZE
) {

671 
	`¥ötk
("osl_pktget_static: Do weÑeallyÇeedÅhis big skb??"

672 "Üí=%d\n", 
Àn
);

673  
	`o¶_pktgë
(
osh
, 
Àn
);

676 
	`down
(&
bcm_°©ic_skb
->
o¶_pkt_£m
);

678 i‡(
Àn
 <
DHD_SKB_1PAGE_BUFSIZE
) {

679 
i
 = 0; i < 
STATIC_PKT_MAX_NUM
; i++) {

680 i‡(
bcm_°©ic_skb
->
pkt_u£
[
i
] == 0)

684 i‡(
i
 !
STATIC_PKT_MAX_NUM
) {

685 
bcm_°©ic_skb
->
pkt_u£
[
i
] = 1;

687 
skb
 = 
bcm_°©ic_skb
->
skb_4k
[
i
];

688 
skb
->
èû
 = skb->
d©a
 + 
Àn
;

689 
skb
->
Àn
 =Üen;

691 
	`up
(&
bcm_°©ic_skb
->
o¶_pkt_£m
);

692  
skb
;

696 i‡(
Àn
 <
DHD_SKB_2PAGE_BUFSIZE
) {

698 
i
 = 0; i < 
STATIC_PKT_MAX_NUM
; i++) {

699 i‡(
bcm_°©ic_skb
->
pkt_u£
[
i
 + 
STATIC_PKT_MAX_NUM
]

704 i‡(
i
 !
STATIC_PKT_MAX_NUM
) {

705 
bcm_°©ic_skb
->
pkt_u£
[
i
 + 
STATIC_PKT_MAX_NUM
] = 1;

706 
skb
 = 
bcm_°©ic_skb
->
skb_8k
[
i
];

707 
skb
->
èû
 = skb->
d©a
 + 
Àn
;

708 
skb
->
Àn
 =Üen;

710 
	`up
(&
bcm_°©ic_skb
->
o¶_pkt_£m
);

711  
skb
;

715 #i‡
	`deföed
(
ENHANCED_STATIC_BUF
)

716 i‡(
bcm_°©ic_skb
->
pkt_u£
[
STATIC_PKT_MAX_NUM
 * 2] == 0) {

717 
bcm_°©ic_skb
->
pkt_u£
[
STATIC_PKT_MAX_NUM
 * 2] = 1;

719 
skb
 = 
bcm_°©ic_skb
->
skb_16k
;

720 
skb
->
èû
 = skb->
d©a
 + 
Àn
;

721 
skb
->
Àn
 =Üen;

723 
	`up
(&
bcm_°©ic_skb
->
o¶_pkt_£m
);

724  
skb
;

728 
	`up
(&
bcm_°©ic_skb
->
o¶_pkt_£m
);

729 
	`¥ötk
("osl_pktget_static:áll staticÖkt in use!\n");

730  
	`o¶_pktgë
(
osh
, 
Àn
);

731 
	}
}

734 
	$o¶_pkt‰ì_°©ic
(
o¶_t
 *
osh
, *
p
, 
boﬁ
 
£nd
)

736 
i
;

737 i‡(!
bcm_°©ic_skb
) {

738 
	`o¶_pkt‰ì
(
osh
, 
p
, 
£nd
);

742 
	`down
(&
bcm_°©ic_skb
->
o¶_pkt_£m
);

743 
i
 = 0; i < 
STATIC_PKT_MAX_NUM
; i++) {

744 i‡(
p
 =
bcm_°©ic_skb
->
skb_4k
[
i
]) {

745 
bcm_°©ic_skb
->
pkt_u£
[
i
] = 0;

746 
	`up
(&
bcm_°©ic_skb
->
o¶_pkt_£m
);

751 
i
 = 0; i < 
STATIC_PKT_MAX_NUM
; i++) {

752 i‡(
p
 =
bcm_°©ic_skb
->
skb_8k
[
i
]) {

753 
bcm_°©ic_skb
->
pkt_u£
[
i
 + 
STATIC_PKT_MAX_NUM
] = 0;

754 
	`up
(&
bcm_°©ic_skb
->
o¶_pkt_£m
);

758 #ifde‡
ENHANCED_STATIC_BUF


759 i‡(
p
 =
bcm_°©ic_skb
->
skb_16k
) {

760 
bcm_°©ic_skb
->
pkt_u£
[
STATIC_PKT_MAX_NUM
*2] = 0;

761 
	`up
(&
bcm_°©ic_skb
->
o¶_pkt_£m
);

765 
	`up
(&
bcm_°©ic_skb
->
o¶_pkt_£m
);

767 
	`o¶_pkt‰ì
(
osh
, 
p
, 
£nd
);

769 
	}
}

772 
uöt32


773 
	$o¶_pci_ªad_c⁄fig
(
o¶_t
 *
osh
, 
uöt
 
off£t
, uöà
size
)

775 
uöt
 
vÆ
 = 0;

776 
uöt
 
ªåy
 = 
PCI_CFG_RETRY
;

778 
	`ASSERT
((
osh
 && (osh->
magic
 =
OS_HANDLE_MAGIC
)));

781 
	`ASSERT
(
size
 == 4);

784 
	`pci_ªad_c⁄fig_dw‹d
(
osh
->
pdev
, 
off£t
, &
vÆ
);

785 i‡(
vÆ
 != 0xffffffff)

787 } 
ªåy
--);

790  (
vÆ
);

791 
	}
}

794 
	$o¶_pci_wrôe_c⁄fig
(
o¶_t
 *
osh
, 
uöt
 
off£t
, uöà
size
, uöà
vÆ
)

796 
uöt
 
ªåy
 = 
PCI_CFG_RETRY
;

798 
	`ASSERT
((
osh
 && (osh->
magic
 =
OS_HANDLE_MAGIC
)));

801 
	`ASSERT
(
size
 == 4);

804 
	`pci_wrôe_c⁄fig_dw‹d
(
osh
->
pdev
, 
off£t
, 
vÆ
);

805 i‡(
off£t
 !
PCI_BAR0_WIN
)

807 i‡(
	`o¶_pci_ªad_c⁄fig
(
osh
, 
off£t
, 
size
Ë=
vÆ
)

809 } 
ªåy
--);

811 
	}
}

814 
uöt


815 
	$o¶_pci_bus
(
o¶_t
 *
osh
)

817 
	`ASSERT
(
osh
 && (osh->
magic
 =
OS_HANDLE_MAGIC
Ë&& osh->
pdev
);

819  ((
pci_dev
 *)
osh
->
pdev
)->
bus
->
numbî
;

820 
	}
}

823 
uöt


824 
	$o¶_pci_¶Ÿ
(
o¶_t
 *
osh
)

826 
	`ASSERT
(
osh
 && (osh->
magic
 =
OS_HANDLE_MAGIC
Ë&& osh->
pdev
);

828  
	`PCI_SLOT
(((
pci_dev
 *)
osh
->
pdev
)->
dev‚
);

829 
	}
}

832 
pci_dev
 *

833 
	$o¶_pci_devi˚
(
o¶_t
 *
osh
)

835 
	`ASSERT
(
osh
 && (osh->
magic
 =
OS_HANDLE_MAGIC
Ë&& osh->
pdev
);

837  
osh
->
pdev
;

838 
	}
}

841 
	$o¶_pcmcü_©å
(
o¶_t
 *
osh
, 
uöt
 
off£t
, *
buf
, 
size
, 
boﬁ
 
wrôe
)

843 
	}
}

846 
	$o¶_pcmcü_ªad_©å
(
o¶_t
 *
osh
, 
uöt
 
off£t
, *
buf
, 
size
)

848 
	`o¶_pcmcü_©å
(
osh
, 
off£t
, (*Ë
buf
, 
size
, 
FALSE
);

849 
	}
}

852 
	$o¶_pcmcü_wrôe_©å
(
o¶_t
 *
osh
, 
uöt
 
off£t
, *
buf
, 
size
)

854 
	`o¶_pcmcü_©å
(
osh
, 
off£t
, (*Ë
buf
, 
size
, 
TRUE
);

855 
	}
}

858 
	$o¶_mÆloc
(
o¶_t
 *
osh
, 
uöt
 
size
)

860 *
addr
;

863 i‡(
osh
)

864 
	`ASSERT
(
osh
->
magic
 =
OS_HANDLE_MAGIC
);

866 #ifde‡
CONFIG_DHD_USE_STATIC_BUF


867 i‡(
bcm_°©ic_buf
)

869 
i
 = 0;

870 i‡((
size
 >
PAGE_SIZE
)&&(sizê<
STATIC_BUF_SIZE
))

872 
	`down
(&
bcm_°©ic_buf
->
°©ic_£m
);

874 
i
 = 0; i < 
STATIC_BUF_MAX_NUM
; i++)

876 i‡(
bcm_°©ic_buf
->
buf_u£
[
i
] == 0)

880 i‡(
i
 =
STATIC_BUF_MAX_NUM
)

882 
	`up
(&
bcm_°©ic_buf
->
°©ic_£m
);

883 
	`¥ötk
("all static buff in use!\n");

884 
‹igöÆ
;

887 
bcm_°©ic_buf
->
buf_u£
[
i
] = 1;

888 
	`up
(&
bcm_°©ic_buf
->
°©ic_£m
);

890 
	`bzîo
(
bcm_°©ic_buf
->
buf_±r
+
STATIC_BUF_SIZE
*
i
, 
size
);

891 i‡(
osh
)

892 
	`©omic_add
(
size
, &
osh
->
mÆlo˚d
);

894  ((*)(
bcm_°©ic_buf
->
buf_±r
+
STATIC_BUF_SIZE
*
i
));

897 
‹igöÆ
:

900 i‡((
addr
 = 
	`kmÆloc
(
size
, 
GFP_ATOMIC
)Ë=
NULL
) {

901 i‡(
osh
)

902 
osh
->
Áûed
++;

903  (
NULL
);

905 i‡(
osh
)

906 
	`©omic_add
(
size
, &
osh
->
mÆlo˚d
);

908  (
addr
);

909 
	}
}

912 
	$o¶_m‰ì
(
o¶_t
 *
osh
, *
addr
, 
uöt
 
size
)

914 #ifde‡
CONFIG_DHD_USE_STATIC_BUF


915 i‡(
bcm_°©ic_buf
)

917 i‡((
addr
 > (*)
bcm_°©ic_buf
) && ((*)addr

918 <((*)
bcm_°©ic_buf
 + 
STATIC_BUF_TOTAL_LEN
)))

920 
buf_idx
 = 0;

922 
buf_idx
 = ((*)
addr
 - 
bcm_°©ic_buf
->
buf_±r
)/
STATIC_BUF_SIZE
;

924 
	`down
(&
bcm_°©ic_buf
->
°©ic_£m
);

925 
bcm_°©ic_buf
->
buf_u£
[
buf_idx
] = 0;

926 
	`up
(&
bcm_°©ic_buf
->
°©ic_£m
);

928 i‡(
osh
) {

929 
	`ASSERT
(
osh
->
magic
 =
OS_HANDLE_MAGIC
);

930 
	`©omic_sub
(
size
, &
osh
->
mÆlo˚d
);

936 i‡(
osh
) {

937 
	`ASSERT
(
osh
->
magic
 =
OS_HANDLE_MAGIC
);

938 
	`©omic_sub
(
size
, &
osh
->
mÆlo˚d
);

940 
	`k‰ì
(
addr
);

941 
	}
}

943 
uöt


944 
	$o¶_mÆlo˚d
(
o¶_t
 *
osh
)

946 
	`ASSERT
((
osh
 && (osh->
magic
 =
OS_HANDLE_MAGIC
)));

947  (
	`©omic_ªad
(&
osh
->
mÆlo˚d
));

948 
	}
}

950 
uöt


951 
	$o¶_mÆloc_Áûed
(
o¶_t
 *
osh
)

953 
	`ASSERT
((
osh
 && (osh->
magic
 =
OS_HANDLE_MAGIC
)));

954  (
osh
->
Áûed
);

955 
	}
}

958 
uöt


959 
	$o¶_dma_c⁄si°ít_Æign
()

961  (
PAGE_SIZE
);

962 
	}
}

965 
	$o¶_dma_Æloc_c⁄si°ít
(
o¶_t
 *
osh
, 
uöt
 
size
, 
uöt16
 
Æign_bôs
, uöà*
Ælo˚d
, 
ul⁄g
 *
∑p
)

967 
uöt16
 
Æign
 = (1 << 
Æign_bôs
);

968 
	`ASSERT
((
osh
 && (osh->
magic
 =
OS_HANDLE_MAGIC
)));

970 i‡(!
	`ISALIGNED
(
DMA_CONSISTENT_ALIGN
, 
Æign
))

971 
size
 +
Æign
;

972 *
Ælo˚d
 = 
size
;

974  (
	`pci_Æloc_c⁄si°ít
(
osh
->
pdev
, 
size
, (
dma_addr_t
*)
∑p
));

975 
	}
}

978 
	$o¶_dma_‰ì_c⁄si°ít
(
o¶_t
 *
osh
, *
va
, 
uöt
 
size
, 
ul⁄g
 
∑
)

980 
	`ASSERT
((
osh
 && (osh->
magic
 =
OS_HANDLE_MAGIC
)));

982 
	`pci_‰ì_c⁄si°ít
(
osh
->
pdev
, 
size
, 
va
, (
dma_addr_t
)
∑
);

983 
	}
}

985 
uöt
 
BCMFASTPATH


986 
	$o¶_dma_m≠
(
o¶_t
 *
osh
, *
va
, 
uöt
 
size
, 
dúe˘i⁄
)

988 
dú
;

990 
	`ASSERT
((
osh
 && (osh->
magic
 =
OS_HANDLE_MAGIC
)));

991 
dú
 = (
dúe˘i⁄
 =
DMA_TX
)? 
PCI_DMA_TODEVICE
: 
PCI_DMA_FROMDEVICE
;

992  (
	`pci_m≠_sögÀ
(
osh
->
pdev
, 
va
, 
size
, 
dú
));

993 
	}
}

995 
BCMFASTPATH


996 
	$o¶_dma_unm≠
(
o¶_t
 *
osh
, 
uöt
 
∑
, uöà
size
, 
dúe˘i⁄
)

998 
dú
;

1000 
	`ASSERT
((
osh
 && (osh->
magic
 =
OS_HANDLE_MAGIC
)));

1001 
dú
 = (
dúe˘i⁄
 =
DMA_TX
)? 
PCI_DMA_TODEVICE
: 
PCI_DMA_FROMDEVICE
;

1002 
	`pci_unm≠_sögÀ
(
osh
->
pdev
, (
uöt32
)
∑
, 
size
, 
dú
);

1003 
	}
}

1005 #i‡
deföed
(
BCMASSERT_LOG
)

1007 
	$o¶_as£π
(c⁄° *
exp
, c⁄° *
fûe
, 
löe
)

1009 
ãmpbuf
[256];

1010 c⁄° *
ba£«me
;

1012 
ba£«me
 = 
	`°ºchr
(
fûe
, '/');

1014 i‡(
ba£«me
)

1015 
ba£«me
++;

1017 i‡(!
ba£«me
)

1018 
ba£«me
 = 
fûe
;

1020 
	`¢¥ötf
(
ãmpbuf
, 64, "\"%s\": file \"%s\",Üine %d\n",

1021 
exp
, 
ba£«me
, 
löe
);

1023 
	`¥ötk
("%s", 
ãmpbuf
);

1026 
	}
}

1030 
	$o¶_dñay
(
uöt
 
u£c
)

1032 
uöt
 
d
;

1034 
u£c
 > 0) {

1035 
d
 = 
	`MIN
(
u£c
, 1000);

1036 
	`udñay
(
d
);

1037 
u£c
 -
d
;

1039 
	}
}

1046 
	$o¶_pktdup
(
o¶_t
 *
osh
, *
skb
)

1048 * 
p
;

1049 
úqÊags
;

1054 
	`PKTCTFMAP
(
osh
, 
skb
);

1056 i‡((
p
 = 
	`skb_˛⁄e
((
sk_buff
 *)
skb
, 
GFP_ATOMIC
)Ë=
NULL
)

1057  
NULL
;

1059 #ifde‡
CTFPOOL


1060 i‡(
	`PKTISFAST
(
osh
, 
skb
)) {

1061 
˘Âoﬁ_t
 *
˘Âoﬁ
;

1069 
˘Âoﬁ
 = (
˘Âoﬁ_t
 *)
	`CTFPOOLPTR
(
osh
, 
skb
);

1070 
	`ASSERT
(
˘Âoﬁ
 !
NULL
);

1071 
	`PKTCLRFAST
(
osh
, 
p
);

1072 
	`PKTCLRFAST
(
osh
, 
skb
);

1073 
˘Âoﬁ
->
ªfûls
++;

1078 i‡(
osh
->
pub
.
pkâag
)

1079 
	`bzîo
((*)((
sk_buff
 *)
p
)->
cb
, 
OSL_PKTTAG_SZ
);

1082 
	`•ö_lock_úqßve
(&
osh
->
pkèŒoc_lock
, 
úqÊags
);

1083 
osh
->
pub
.
pkèŒo˚d
++;

1084 
	`•ö_u∆ock_úqª°‹e
(&
osh
->
pkèŒoc_lock
, 
úqÊags
);

1085  (
p
);

1086 
	}
}

1099 
	$o¶_os_›í_image
(*
fûíame
)

1101 
fûe
 *
Â
;

1103 
Â
 = 
	`fûp_›í
(
fûíame
, 
O_RDONLY
, 0);

1110 i‡(
	`IS_ERR
(
Â
))

1111 
Â
 = 
NULL
;

1113  
Â
;

1114 
	}
}

1117 
	$o¶_os_gë_image_block
(*
buf
, 
Àn
, *
image
)

1119 
fûe
 *
Â
 = (fûê*)
image
;

1120 
rdÀn
;

1122 i‡(!
image
)

1125 
rdÀn
 = 
	`kî√l_ªad
(
Â
, fp->
f_pos
, 
buf
, 
Àn
);

1126 i‡(
rdÀn
 > 0)

1127 
Â
->
f_pos
 +
rdÀn
;

1129  
rdÀn
;

1130 
	}
}

1133 
	$o¶_os_˛o£_image
(*
image
)

1135 i‡(
image
)

1136 
	`fûp_˛o£
((
fûe
 *)
image
, 
NULL
);

1137 
	}
}

	@sbutils.c

28 
	~<bcm_cfg.h
>

29 
	~<ty≥defs.h
>

30 
	~<bcmdefs.h
>

31 
	~<o¶.h
>

32 
	~<bcmutûs.h
>

33 
	~<siutûs.h
>

34 
	~<bcmdevs.h
>

35 
	~<hndsoc.h
>

36 
	~<sbchùc.h
>

37 
	~<pcicfg.h
>

38 
	~<sbpcmcü.h
>

40 
	~"siutûs_¥iv.h
"

44 
uöt
 
_sb_c‹eidx
(
si_öfo_t
 *
sii
, 
uöt32
 
sba
);

45 
uöt
 
_sb_sˇn
(
si_öfo_t
 *
sii
, 
uöt32
 
sba
, *
ªgs
, uöà
bus
, uöt32 
sbba
,

46 
uöt
 
nc‹es
);

47 
uöt32
 
_sb_c‹esba
(
si_öfo_t
 *
sii
);

48 *
_sb_£tc‹eidx
(
si_öfo_t
 *
sii
, 
uöt
 
c‹eidx
);

50 
	#SET_SBREG
(
sii
, 
r
, 
mask
, 
vÆ
) \

51 
	`W_SBREG
((
sii
), (
r
), ((
	`R_SBREG
((sii), (r)Ë& ~(
mask
)Ë| (
vÆ
)))

	)

52 
	#REGS2SB
(
va
Ë(
sbc⁄fig_t
*Ë((
öt8
*)(vaË+ 
SBCONFIGOFF
)

	)

55 
	#SONICS_2_2
 (
SBIDL_RV_2_2
 >> 
SBIDL_RV_SHIFT
)

	)

56 
	#SONICS_2_3
 (
SBIDL_RV_2_3
 >> 
SBIDL_RV_SHIFT
)

	)

58 
	#R_SBREG
(
sii
, 
sbr
Ë
	`sb_ªad_sbªg
((sii), (sbr))

	)

59 
	#W_SBREG
(
sii
, 
sbr
, 
v
Ë
	`sb_wrôe_sbªg
((sii), (sbr), (v))

	)

60 
	#AND_SBREG
(
sii
, 
sbr
, 
v
Ë
	`W_SBREG
((sii), (sbr), (
	`R_SBREG
((sii), (sbr)Ë& (v)))

	)

61 
	#OR_SBREG
(
sii
, 
sbr
, 
v
Ë
	`W_SBREG
((sii), (sbr), (
	`R_SBREG
((sii), (sbr)Ë| (v)))

	)

63 
uöt32


64 
	$sb_ªad_sbªg
(
si_öfo_t
 *
sii
, vﬁ©ûê
uöt32
 *
sbr
)

66 
uöt8
 
tmp
;

67 
uöt32
 
vÆ
, 
öå_vÆ
 = 0;

76 i‡(
	`PCMCIA
(
sii
)) {

77 
	`INTR_OFF
(
sii
, 
öå_vÆ
);

78 
tmp
 = 1;

79 
	`OSL_PCMCIA_WRITE_ATTR
(
sii
->
osh
, 
MEM_SEG
, &
tmp
, 1);

80 
sbr
 = (vﬁ©ûê
uöt32
 *)((
uöçå
)sbr & ~(1 << 11));

83 
vÆ
 = 
	`R_REG
(
sii
->
osh
, 
sbr
);

85 i‡(
	`PCMCIA
(
sii
)) {

86 
tmp
 = 0;

87 
	`OSL_PCMCIA_WRITE_ATTR
(
sii
->
osh
, 
MEM_SEG
, &
tmp
, 1);

88 
	`INTR_RESTORE
(
sii
, 
öå_vÆ
);

91  (
vÆ
);

92 
	}
}

95 
	$sb_wrôe_sbªg
(
si_öfo_t
 *
sii
, vﬁ©ûê
uöt32
 *
sbr
, uöt32 
v
)

97 
uöt8
 
tmp
;

98 vﬁ©ûê
uöt32
 
dummy
;

99 
uöt32
 
öå_vÆ
 = 0;

108 i‡(
	`PCMCIA
(
sii
)) {

109 
	`INTR_OFF
(
sii
, 
öå_vÆ
);

110 
tmp
 = 1;

111 
	`OSL_PCMCIA_WRITE_ATTR
(
sii
->
osh
, 
MEM_SEG
, &
tmp
, 1);

112 
sbr
 = (vﬁ©ûê
uöt32
 *)((
uöçå
)sbr & ~(1 << 11));

115 i‡(
	`BUSTYPE
(
sii
->
pub
.
bu°y≥
Ë=
PCMCIA_BUS
) {

116 
dummy
 = 
	`R_REG
(
sii
->
osh
, 
sbr
);

117 
	`BCM_REFERENCE
(
dummy
);

118 
	`W_REG
(
sii
->
osh
, (vﬁ©ûê
uöt16
 *)
sbr
, (uöt16)(
v
 & 0xffff));

119 
dummy
 = 
	`R_REG
(
sii
->
osh
, 
sbr
);

120 
	`BCM_REFERENCE
(
dummy
);

121 
	`W_REG
(
sii
->
osh
, ((vﬁ©ûê
uöt16
 *)
sbr
 + 1), (uöt16)((
v
 >> 16) & 0xffff));

123 
	`W_REG
(
sii
->
osh
, 
sbr
, 
v
);

125 i‡(
	`PCMCIA
(
sii
)) {

126 
tmp
 = 0;

127 
	`OSL_PCMCIA_WRITE_ATTR
(
sii
->
osh
, 
MEM_SEG
, &
tmp
, 1);

128 
	`INTR_RESTORE
(
sii
, 
öå_vÆ
);

130 
	}
}

132 
uöt


133 
	$sb_c‹eid
(
si_t
 *
sih
)

135 
si_öfo_t
 *
sii
;

136 
sbc⁄fig_t
 *
sb
;

138 
sii
 = 
	`SI_INFO
(
sih
);

139 
sb
 = 
	`REGS2SB
(
sii
->
curm≠
);

141  ((
	`R_SBREG
(
sii
, &
sb
->
sbidhigh
Ë& 
SBIDH_CC_MASK
Ë>> 
SBIDH_CC_SHIFT
);

142 
	}
}

144 
uöt


145 
	$sb_ötÊag
(
si_t
 *
sih
)

147 
si_öfo_t
 *
sii
;

148 *
c‹îeg
;

149 
sbc⁄fig_t
 *
sb
;

150 
uöt
 
‹igidx
, 
ötÊag
, 
öå_vÆ
 = 0;

152 
sii
 = 
	`SI_INFO
(
sih
);

154 
	`INTR_OFF
(
sii
, 
öå_vÆ
);

155 
‹igidx
 = 
	`si_c‹eidx
(
sih
);

156 
c‹îeg
 = 
	`si_£tc‹e
(
sih
, 
CC_CORE_ID
, 0);

157 
	`ASSERT
(
c‹îeg
 !
NULL
);

158 
sb
 = 
	`REGS2SB
(
c‹îeg
);

159 
ötÊag
 = 
	`R_SBREG
(
sii
, &
sb
->
sbÊag°
);

160 
	`sb_£tc‹eidx
(
sih
, 
‹igidx
);

161 
	`INTR_RESTORE
(
sii
, 
öå_vÆ
);

163  
ötÊag
;

164 
	}
}

166 
uöt


167 
	$sb_Êag
(
si_t
 *
sih
)

169 
si_öfo_t
 *
sii
;

170 
sbc⁄fig_t
 *
sb
;

172 
sii
 = 
	`SI_INFO
(
sih
);

173 
sb
 = 
	`REGS2SB
(
sii
->
curm≠
);

175  
	`R_SBREG
(
sii
, &
sb
->
sbçsÊag
Ë& 
SBTPS_NUM0_MASK
;

176 
	}
}

179 
	$sb_£töt
(
si_t
 *
sih
, 
siÊag
)

181 
si_öfo_t
 *
sii
;

182 
sbc⁄fig_t
 *
sb
;

183 
uöt32
 
vec
;

185 
sii
 = 
	`SI_INFO
(
sih
);

186 
sb
 = 
	`REGS2SB
(
sii
->
curm≠
);

188 i‡(
siÊag
 == -1)

189 
vec
 = 0;

191 
vec
 = 1 << 
siÊag
;

192 
	`W_SBREG
(
sii
, &
sb
->
sbötvec
, 
vec
);

193 
	}
}

196 
uöt


197 
	$_sb_c‹eidx
(
si_öfo_t
 *
sii
, 
uöt32
 
sba
)

199 
uöt
 
i
;

201 
i
 = 0; i < 
sii
->
numc‹es
; i ++)

202 i‡(
sba
 =
sii
->
c‹esba
[
i
])

203  
i
;

204  
BADIDX
;

205 
	}
}

208 
uöt32


209 
	$_sb_c‹esba
(
si_öfo_t
 *
sii
)

211 
uöt32
 
sbaddr
;

214 
	`BUSTYPE
(
sii
->
pub
.
bu°y≥
)) {

215 
SI_BUS
: {

216 
sbc⁄fig_t
 *
sb
 = 
	`REGS2SB
(
sii
->
curm≠
);

217 
sbaddr
 = 
	`sb_ba£
(
	`R_SBREG
(
sii
, &
sb
->
sbadm©ch0
));

221 
PCI_BUS
:

222 
sbaddr
 = 
	`OSL_PCI_READ_CONFIG
(
sii
->
osh
, 
PCI_BAR0_WIN
, (
uöt32
));

225 
PCMCIA_BUS
: {

226 
uöt8
 
tmp
 = 0;

227 
	`OSL_PCMCIA_READ_ATTR
(
sii
->
osh
, 
PCMCIA_ADDR0
, &
tmp
, 1);

228 
sbaddr
 = (
uöt32
)
tmp
 << 12;

229 
	`OSL_PCMCIA_READ_ATTR
(
sii
->
osh
, 
PCMCIA_ADDR1
, &
tmp
, 1);

230 
sbaddr
 |(
uöt32
)
tmp
 << 16;

231 
	`OSL_PCMCIA_READ_ATTR
(
sii
->
osh
, 
PCMCIA_ADDR2
, &
tmp
, 1);

232 
sbaddr
 |(
uöt32
)
tmp
 << 24;

236 
SPI_BUS
:

237 
SDIO_BUS
:

238 
sbaddr
 = (
uöt32
)(
uöçå
)
sii
->
curm≠
;

243 
sbaddr
 = 
BADCOREADDR
;

247  
sbaddr
;

248 
	}
}

250 
uöt


251 
	$sb_c‹evíd‹
(
si_t
 *
sih
)

253 
si_öfo_t
 *
sii
;

254 
sbc⁄fig_t
 *
sb
;

256 
sii
 = 
	`SI_INFO
(
sih
);

257 
sb
 = 
	`REGS2SB
(
sii
->
curm≠
);

259  ((
	`R_SBREG
(
sii
, &
sb
->
sbidhigh
Ë& 
SBIDH_VC_MASK
Ë>> 
SBIDH_VC_SHIFT
);

260 
	}
}

262 
uöt


263 
	$sb_c‹îev
(
si_t
 *
sih
)

265 
si_öfo_t
 *
sii
;

266 
sbc⁄fig_t
 *
sb
;

267 
uöt
 
sbidh
;

269 
sii
 = 
	`SI_INFO
(
sih
);

270 
sb
 = 
	`REGS2SB
(
sii
->
curm≠
);

271 
sbidh
 = 
	`R_SBREG
(
sii
, &
sb
->
sbidhigh
);

273  (
	`SBCOREREV
(
sbidh
));

274 
	}
}

278 
	$sb_c‹e_cÊags_wo
(
si_t
 *
sih
, 
uöt32
 
mask
, uöt32 
vÆ
)

280 
si_öfo_t
 *
sii
;

281 
sbc⁄fig_t
 *
sb
;

282 
uöt32
 
w
;

284 
sii
 = 
	`SI_INFO
(
sih
);

285 
sb
 = 
	`REGS2SB
(
sii
->
curm≠
);

287 
	`ASSERT
((
vÆ
 & ~
mask
) == 0);

290 
w
 = (
	`R_SBREG
(
sii
, &
sb
->
sbtm°©ñow
Ë& ~(
mask
 << 
SBTML_SICF_SHIFT
)) |

291 (
vÆ
 << 
SBTML_SICF_SHIFT
);

292 
	`W_SBREG
(
sii
, &
sb
->
sbtm°©ñow
, 
w
);

293 
	}
}

296 
uöt32


297 
	$sb_c‹e_cÊags
(
si_t
 *
sih
, 
uöt32
 
mask
, uöt32 
vÆ
)

299 
si_öfo_t
 *
sii
;

300 
sbc⁄fig_t
 *
sb
;

301 
uöt32
 
w
;

303 
sii
 = 
	`SI_INFO
(
sih
);

304 
sb
 = 
	`REGS2SB
(
sii
->
curm≠
);

306 
	`ASSERT
((
vÆ
 & ~
mask
) == 0);

309 i‡(
mask
 || 
vÆ
) {

310 
w
 = (
	`R_SBREG
(
sii
, &
sb
->
sbtm°©ñow
Ë& ~(
mask
 << 
SBTML_SICF_SHIFT
)) |

311 (
vÆ
 << 
SBTML_SICF_SHIFT
);

312 
	`W_SBREG
(
sii
, &
sb
->
sbtm°©ñow
, 
w
);

318  (
	`R_SBREG
(
sii
, &
sb
->
sbtm°©ñow
Ë>> 
SBTML_SICF_SHIFT
);

319 
	}
}

322 
uöt32


323 
	$sb_c‹e_sÊags
(
si_t
 *
sih
, 
uöt32
 
mask
, uöt32 
vÆ
)

325 
si_öfo_t
 *
sii
;

326 
sbc⁄fig_t
 *
sb
;

327 
uöt32
 
w
;

329 
sii
 = 
	`SI_INFO
(
sih
);

330 
sb
 = 
	`REGS2SB
(
sii
->
curm≠
);

332 
	`ASSERT
((
vÆ
 & ~
mask
) == 0);

333 
	`ASSERT
((
mask
 & ~
SISF_CORE_BITS
) == 0);

336 i‡(
mask
 || 
vÆ
) {

337 
w
 = (
	`R_SBREG
(
sii
, &
sb
->
sbtm°©ehigh
Ë& ~(
mask
 << 
SBTMH_SISF_SHIFT
)) |

338 (
vÆ
 << 
SBTMH_SISF_SHIFT
);

339 
	`W_SBREG
(
sii
, &
sb
->
sbtm°©ehigh
, 
w
);

343  (
	`R_SBREG
(
sii
, &
sb
->
sbtm°©ehigh
Ë>> 
SBTMH_SISF_SHIFT
);

344 
	}
}

346 
boﬁ


347 
	$sb_isc‹eup
(
si_t
 *
sih
)

349 
si_öfo_t
 *
sii
;

350 
sbc⁄fig_t
 *
sb
;

352 
sii
 = 
	`SI_INFO
(
sih
);

353 
sb
 = 
	`REGS2SB
(
sii
->
curm≠
);

355  ((
	`R_SBREG
(
sii
, &
sb
->
sbtm°©ñow
) &

356 (
SBTML_RESET
 | 
SBTML_REJ_MASK
 | (
SICF_CLOCK_EN
 << 
SBTML_SICF_SHIFT
))) ==

357 (
SICF_CLOCK_EN
 << 
SBTML_SICF_SHIFT
));

358 
	}
}

369 
uöt


370 
	$sb_c‹îeg
(
si_t
 *
sih
, 
uöt
 
c‹eidx
, uöà
ªgoff
, uöà
mask
, uöà
vÆ
)

372 
uöt
 
‹igidx
 = 0;

373 
uöt32
 *
r
 = 
NULL
;

374 
uöt
 
w
;

375 
uöt
 
öå_vÆ
 = 0;

376 
boﬁ
 
Á°
 = 
FALSE
;

377 
si_öfo_t
 *
sii
;

379 
sii
 = 
	`SI_INFO
(
sih
);

381 
	`ASSERT
(
	`GOODIDX
(
c‹eidx
));

382 
	`ASSERT
(
ªgoff
 < 
SI_CORE_SIZE
);

383 
	`ASSERT
((
vÆ
 & ~
mask
) == 0);

385 i‡(
c‹eidx
 >
SI_MAXCORES
)

388 i‡(
	`BUSTYPE
(
sii
->
pub
.
bu°y≥
Ë=
SI_BUS
) {

390 
Á°
 = 
TRUE
;

392 i‡(!
sii
->
ªgs
[
c‹eidx
]) {

393 
sii
->
ªgs
[
c‹eidx
] = 
	`REG_MAP
(sii->
c‹esba
[coreidx],

394 
SI_CORE_SIZE
);

395 
	`ASSERT
(
	`GOODREGS
(
sii
->
ªgs
[
c‹eidx
]));

397 
r
 = (
uöt32
 *)((
uch¨
 *)
sii
->
ªgs
[
c‹eidx
] + 
ªgoff
);

398 } i‡(
	`BUSTYPE
(
sii
->
pub
.
bu°y≥
Ë=
PCI_BUS
) {

401 i‡((
sii
->
c‹eid
[
c‹eidx
] =
CC_CORE_ID
Ë&& 
	`SI_FAST
(sii)) {

404 
Á°
 = 
TRUE
;

405 
r
 = (
uöt32
 *)((*)
sii
->
curm≠
 + 
PCI_16KB0_CCREGS_OFFSET
 + 
ªgoff
);

406 } i‡(
sii
->
pub
.
busc‹eidx
 =
c‹eidx
) {

410 
Á°
 = 
TRUE
;

411 i‡(
	`SI_FAST
(
sii
))

412 
r
 = (
uöt32
 *)((*)
sii
->
curm≠
 +

413 
PCI_16KB0_PCIREGS_OFFSET
 + 
ªgoff
);

415 
r
 = (
uöt32
 *)((*)
sii
->
curm≠
 +

416 ((
ªgoff
 >
SBCONFIGOFF
) ?

417 
PCI_BAR0_PCISBR_OFFSET
 : 
PCI_BAR0_PCIREGS_OFFSET
) +

418 
ªgoff
);

422 i‡(!
Á°
) {

423 
	`INTR_OFF
(
sii
, 
öå_vÆ
);

426 
‹igidx
 = 
	`si_c‹eidx
(&
sii
->
pub
);

429 
r
 = (
uöt32
*Ë((
uch¨
*)
	`sb_£tc‹eidx
(&
sii
->
pub
, 
c‹eidx
Ë+ 
ªgoff
);

431 
	`ASSERT
(
r
 !
NULL
);

434 i‡(
mask
 || 
vÆ
) {

435 i‡(
ªgoff
 >
SBCONFIGOFF
) {

436 
w
 = (
	`R_SBREG
(
sii
, 
r
Ë& ~
mask
Ë| 
vÆ
;

437 
	`W_SBREG
(
sii
, 
r
, 
w
);

439 
w
 = (
	`R_REG
(
sii
->
osh
, 
r
Ë& ~
mask
Ë| 
vÆ
;

440 
	`W_REG
(
sii
->
osh
, 
r
, 
w
);

445 i‡(
ªgoff
 >
SBCONFIGOFF
)

446 
w
 = 
	`R_SBREG
(
sii
, 
r
);

448 i‡((
	`CHIPID
(
sii
->
pub
.
chù
Ë=
BCM5354_CHIP_ID
) &&

449 (
c‹eidx
 =
SI_CC_IDX
) &&

450 (
ªgoff
 =
	`OFFSETOF
(
chù¸egs_t
, 
w©chdog
))) {

451 
w
 = 
vÆ
;

453 
w
 = 
	`R_REG
(
sii
->
osh
, 
r
);

456 i‡(!
Á°
) {

458 i‡(
‹igidx
 !
c‹eidx
)

459 
	`sb_£tc‹eidx
(&
sii
->
pub
, 
‹igidx
);

461 
	`INTR_RESTORE
(
sii
, 
öå_vÆ
);

464  (
w
);

465 
	}
}

474 
	#SB_MAXBUSES
 2

	)

475 
uöt


476 
	$_sb_sˇn
(
si_öfo_t
 *
sii
, 
uöt32
 
sba
, *
ªgs
, 
uöt
 
bus
, uöt32 
sbba
, uöà
numc‹es
)

478 
uöt
 
√xt
;

479 
uöt
 
ncc
 = 0;

480 
uöt
 
i
;

482 i‡(
bus
 >
SB_MAXBUSES
) {

483 
	`SI_ERROR
(("_sb_sˇn: bu†0x%08xáàÀvñ %d i†toÿdì∞tÿsˇn\n", 
sbba
, 
bus
));

486 
	`SI_MSG
(("_sb_sˇn: sˇ¿bu†0x%08xássumê%u c‹es\n", 
sbba
, 
numc‹es
));

491 
i
 = 0, 
√xt
 = 
sii
->
numc‹es
; i <Çumc‹e†&&Çexà< 
SB_BUS_MAXCORES
; i++,Çext++) {

492 
sii
->
c‹esba
[
√xt
] = 
sbba
 + (
i
 * 
SI_CORE_SIZE
);

495 i‡((
	`BUSTYPE
(
sii
->
pub
.
bu°y≥
Ë=
SI_BUS
Ë&& (sii->
c‹esba
[
√xt
] =
sba
)) {

496 
	`SI_VMSG
(("_sb_sˇn:Ñeu£ m≠≥dÑeg†%∞f‹ c‹ê%u\n", 
ªgs
, 
√xt
));

497 
sii
->
ªgs
[
√xt
] =Ñegs;

501 
sii
->
curm≠
 = 
	`_sb_£tc‹eidx
(sii, 
√xt
);

502 
sii
->
curidx
 = 
√xt
;

504 
sii
->
c‹eid
[
√xt
] = 
	`sb_c‹eid
(&sii->
pub
);

508 i‡(
sii
->
c‹eid
[
√xt
] =
CC_CORE_ID
) {

509 
chù¸egs_t
 *
cc
 = (chù¸egs_à*)
sii
->
curm≠
;

510 
uöt32
 
c¸ev
 = 
	`sb_c‹îev
(&
sii
->
pub
);

513 i‡(((
c¸ev
 == 4) || (ccrev >= 6)))

514 
numc‹es
 = (
	`R_REG
(
sii
->
osh
, &
cc
->
chùid
Ë& 
CID_CC_MASK
) >>

515 
CID_CC_SHIFT
;

518 
uöt
 
chù
 = 
	`CHIPID
(
sii
->
pub
.chip);

520 i‡(
chù
 =
BCM4306_CHIP_ID
)

521 
numc‹es
 = 6;

522 i‡(
chù
 =
BCM4704_CHIP_ID
)

523 
numc‹es
 = 9;

524 i‡(
chù
 =
BCM5365_CHIP_ID
)

525 
numc‹es
 = 7;

527 
	`SI_ERROR
(("sb_chip2numcores: unsupported chip 0x%x\n",

528 
chù
));

529 
	`ASSERT
(0);

530 
numc‹es
 = 1;

533 
	`SI_VMSG
(("_sb_sˇn:Åhîê¨ê%u c‹e†öÅhêchù %s\n", 
numc‹es
,

534 
sii
->
pub
.
issim
 ? "QT" : ""));

537 i‡(
sii
->
c‹eid
[
√xt
] =
OCP_CORE_ID
) {

538 
sbc⁄fig_t
 *
sb
 = 
	`REGS2SB
(
sii
->
curm≠
);

539 
uöt32
 
nsbba
 = 
	`R_SBREG
(
sii
, &
sb
->
sbadm©ch1
);

540 
uöt
 
nsbcc
;

542 
sii
->
numc‹es
 = 
√xt
 + 1;

544 i‡((
nsbba
 & 0xfff00000Ë!
SI_ENUM_BASE
)

546 
nsbba
 &= 0xfffff000;

547 i‡(
	`_sb_c‹eidx
(
sii
, 
nsbba
Ë!
BADIDX
)

550 
nsbcc
 = (
	`R_SBREG
(
sii
, &
sb
->
sbtm°©ehigh
) & 0x000f0000) >> 16;

551 
nsbcc
 = 
	`_sb_sˇn
(
sii
, 
sba
, 
ªgs
, 
bus
 + 1, 
nsbba
,Çsbcc);

552 i‡(
sbba
 =
SI_ENUM_BASE
)

553 
numc‹es
 -
nsbcc
;

554 
ncc
 +
nsbcc
;

558 
	`SI_MSG
(("_sb_sˇn: found %u c‹e†⁄ bu†0x%08x\n", 
i
, 
sbba
));

560 
sii
->
numc‹es
 = 
i
 + 
ncc
;

561  
sii
->
numc‹es
;

562 
	}
}

566 
	$sb_sˇn
(
si_t
 *
sih
, *
ªgs
, 
uöt
 
devid
)

568 
si_öfo_t
 *
sii
;

569 
uöt32
 
‹igsba
;

570 
sbc⁄fig_t
 *
sb
;

572 
sii
 = 
	`SI_INFO
(
sih
);

573 
sb
 = 
	`REGS2SB
(
sii
->
curm≠
);

575 
sii
->
pub
.
socúev
 = (
	`R_SBREG
(sii, &
sb
->
sbidlow
Ë& 
SBIDL_RV_MASK
Ë>> 
SBIDL_RV_SHIFT
;

580 
‹igsba
 = 
	`_sb_c‹esba
(
sii
);

583 
sii
->
numc‹es
 = 
	`_sb_sˇn
(sii, 
‹igsba
, 
ªgs
, 0, 
SI_ENUM_BASE
, 1);

584 
	}
}

592 
	$sb_£tc‹eidx
(
si_t
 *
sih
, 
uöt
 
c‹eidx
)

594 
si_öfo_t
 *
sii
;

596 
sii
 = 
	`SI_INFO
(
sih
);

598 i‡(
c‹eidx
 >
sii
->
numc‹es
)

599  (
NULL
);

605 
	`ASSERT
((
sii
->
öå£«bÀd_‚
 =
NULL
Ë|| !(*(sii)->öå£«bÀd_‚)((sii)->
öå_¨g
));

607 
sii
->
curm≠
 = 
	`_sb_£tc‹eidx
(sii, 
c‹eidx
);

608 
sii
->
curidx
 = 
c‹eidx
;

610  (
sii
->
curm≠
);

611 
	}
}

617 
	$_sb_£tc‹eidx
(
si_öfo_t
 *
sii
, 
uöt
 
c‹eidx
)

619 
uöt32
 
sbaddr
 = 
sii
->
c‹esba
[
c‹eidx
];

620 *
ªgs
;

622 
	`BUSTYPE
(
sii
->
pub
.
bu°y≥
)) {

623 
SI_BUS
:

625 i‡(!
sii
->
ªgs
[
c‹eidx
]) {

626 
sii
->
ªgs
[
c‹eidx
] = 
	`REG_MAP
(
sbaddr
, 
SI_CORE_SIZE
);

627 
	`ASSERT
(
	`GOODREGS
(
sii
->
ªgs
[
c‹eidx
]));

629 
ªgs
 = 
sii
->ªgs[
c‹eidx
];

632 
PCI_BUS
:

634 
	`OSL_PCI_WRITE_CONFIG
(
sii
->
osh
, 
PCI_BAR0_WIN
, 4, 
sbaddr
);

635 
ªgs
 = 
sii
->
curm≠
;

638 
PCMCIA_BUS
: {

639 
uöt8
 
tmp
 = (
sbaddr
 >> 12) & 0x0f;

640 
	`OSL_PCMCIA_WRITE_ATTR
(
sii
->
osh
, 
PCMCIA_ADDR0
, &
tmp
, 1);

641 
tmp
 = (
sbaddr
 >> 16) & 0xff;

642 
	`OSL_PCMCIA_WRITE_ATTR
(
sii
->
osh
, 
PCMCIA_ADDR1
, &
tmp
, 1);

643 
tmp
 = (
sbaddr
 >> 24) & 0xff;

644 
	`OSL_PCMCIA_WRITE_ATTR
(
sii
->
osh
, 
PCMCIA_ADDR2
, &
tmp
, 1);

645 
ªgs
 = 
sii
->
curm≠
;

648 
SPI_BUS
:

649 
SDIO_BUS
:

651 i‡(!
sii
->
ªgs
[
c‹eidx
]) {

652 
sii
->
ªgs
[
c‹eidx
] = (*)(
uöçå
)
sbaddr
;

653 
	`ASSERT
(
	`GOODREGS
(
sii
->
ªgs
[
c‹eidx
]));

655 
ªgs
 = 
sii
->ªgs[
c‹eidx
];

660 
	`ASSERT
(0);

661 
ªgs
 = 
NULL
;

665  
ªgs
;

666 
	}
}

669 vﬁ©ûê
uöt32
 *

670 
	$sb_adm©ch
(
si_öfo_t
 *
sii
, 
uöt
 
asidx
)

672 
sbc⁄fig_t
 *
sb
;

673 vﬁ©ûê
uöt32
 *
addrm
;

675 
sb
 = 
	`REGS2SB
(
sii
->
curm≠
);

677 
asidx
) {

679 
addrm
 = &
sb
->
sbadm©ch0
;

683 
addrm
 = &
sb
->
sbadm©ch1
;

687 
addrm
 = &
sb
->
sbadm©ch2
;

691 
addrm
 = &
sb
->
sbadm©ch3
;

695 
	`SI_ERROR
(("%s: Addªs†•a˚ index (%dËouào‡ønge\n", 
__FUNCTION__
, 
asidx
));

699  (
addrm
);

700 
	}
}

704 
	$sb_numaddr•a˚s
(
si_t
 *
sih
)

706 
si_öfo_t
 *
sii
;

707 
sbc⁄fig_t
 *
sb
;

709 
sii
 = 
	`SI_INFO
(
sih
);

710 
sb
 = 
	`REGS2SB
(
sii
->
curm≠
);

713  ((
	`R_SBREG
(
sii
, &
sb
->
sbidlow
Ë& 
SBIDL_AR_MASK
Ë>> 
SBIDL_AR_SHIFT
) + 1;

714 
	}
}

717 
uöt32


718 
	$sb_addr•a˚
(
si_t
 *
sih
, 
uöt
 
asidx
)

720 
si_öfo_t
 *
sii
;

722 
sii
 = 
	`SI_INFO
(
sih
);

724  (
	`sb_ba£
(
	`R_SBREG
(
sii
, 
	`sb_adm©ch
(sii, 
asidx
))));

725 
	}
}

728 
uöt32


729 
	$sb_addr•a˚size
(
si_t
 *
sih
, 
uöt
 
asidx
)

731 
si_öfo_t
 *
sii
;

733 
sii
 = 
	`SI_INFO
(
sih
);

735  (
	`sb_size
(
	`R_SBREG
(
sii
, 
	`sb_adm©ch
(sii, 
asidx
))));

736 
	}
}

741 
	$sb_commô
(
si_t
 *
sih
)

743 
si_öfo_t
 *
sii
;

744 
uöt
 
‹igidx
;

745 
uöt
 
öå_vÆ
 = 0;

747 
sii
 = 
	`SI_INFO
(
sih
);

749 
‹igidx
 = 
sii
->
curidx
;

750 
	`ASSERT
(
	`GOODIDX
(
‹igidx
));

752 
	`INTR_OFF
(
sii
, 
öå_vÆ
);

755 i‡(
sii
->
pub
.
c¸ev
 !
NOREV
) {

756 
chù¸egs_t
 *
c¸egs
 = (chù¸egs_à*)
	`si_£tc‹e
(
sih
, 
CC_CORE_ID
, 0);

757 
	`ASSERT
(
c¸egs
 !
NULL
);

760 
	`W_REG
(
sii
->
osh
, &
c¸egs
->
brﬂdˇ°addªss
, 
SB_COMMIT
);

761 
	`W_REG
(
sii
->
osh
, &
c¸egs
->
brﬂdˇ°d©a
, 0x0);

763 
	`ASSERT
(0);

766 
	`sb_£tc‹eidx
(
sih
, 
‹igidx
);

767 
	`INTR_RESTORE
(
sii
, 
öå_vÆ
);

768 
	}
}

771 
	$sb_c‹e_dißbÀ
(
si_t
 *
sih
, 
uöt32
 
bôs
)

773 
si_öfo_t
 *
sii
;

774 vﬁ©ûê
uöt32
 
dummy
;

775 
sbc⁄fig_t
 *
sb
;

777 
sii
 = 
	`SI_INFO
(
sih
);

779 
	`ASSERT
(
	`GOODREGS
(
sii
->
curm≠
));

780 
sb
 = 
	`REGS2SB
(
sii
->
curm≠
);

783 i‡(
	`R_SBREG
(
sii
, &
sb
->
sbtm°©ñow
Ë& 
SBTML_RESET
)

787 i‡((
	`R_SBREG
(
sii
, &
sb
->
sbtm°©ñow
Ë& (
SICF_CLOCK_EN
 << 
SBTML_SICF_SHIFT
)) == 0)

788 
dißbÀ
;

791 
	`OR_SBREG
(
sii
, &
sb
->
sbtm°©ñow
, 
SBTML_REJ
);

792 
dummy
 = 
	`R_SBREG
(
sii
, &
sb
->
sbtm°©ñow
);

793 
	`BCM_REFERENCE
(
dummy
);

794 
	`OSL_DELAY
(1);

795 
	`SPINWAIT
((
	`R_SBREG
(
sii
, &
sb
->
sbtm°©ehigh
Ë& 
SBTMH_BUSY
), 100000);

796 i‡(
	`R_SBREG
(
sii
, &
sb
->
sbtm°©ehigh
Ë& 
SBTMH_BUSY
)

797 
	`SI_ERROR
(("%s:Å¨gë sèã stû»busy\n", 
__FUNCTION__
));

799 i‡(
	`R_SBREG
(
sii
, &
sb
->
sbidlow
Ë& 
SBIDL_INIT
) {

800 
	`OR_SBREG
(
sii
, &
sb
->
sbim°©e
, 
SBIM_RJ
);

801 
dummy
 = 
	`R_SBREG
(
sii
, &
sb
->
sbim°©e
);

802 
	`BCM_REFERENCE
(
dummy
);

803 
	`OSL_DELAY
(1);

804 
	`SPINWAIT
((
	`R_SBREG
(
sii
, &
sb
->
sbim°©e
Ë& 
SBIM_BY
), 100000);

808 
	`W_SBREG
(
sii
, &
sb
->
sbtm°©ñow
,

809 (((
bôs
 | 
SICF_FGC
 | 
SICF_CLOCK_EN
Ë<< 
SBTML_SICF_SHIFT
) |

810 
SBTML_REJ
 | 
SBTML_RESET
));

811 
dummy
 = 
	`R_SBREG
(
sii
, &
sb
->
sbtm°©ñow
);

812 
	`BCM_REFERENCE
(
dummy
);

813 
	`OSL_DELAY
(10);

816 i‡(
	`R_SBREG
(
sii
, &
sb
->
sbidlow
Ë& 
SBIDL_INIT
)

817 
	`AND_SBREG
(
sii
, &
sb
->
sbim°©e
, ~
SBIM_RJ
);

819 
dißbÀ
:

821 
	`W_SBREG
(
sii
, &
sb
->
sbtm°©ñow
, ((
bôs
 << 
SBTML_SICF_SHIFT
Ë| 
SBTML_REJ
 | 
SBTML_RESET
));

822 
	`OSL_DELAY
(1);

823 
	}
}

831 
	$sb_c‹e_ª£t
(
si_t
 *
sih
, 
uöt32
 
bôs
, uöt32 
ª£tbôs
)

833 
si_öfo_t
 *
sii
;

834 
sbc⁄fig_t
 *
sb
;

835 vﬁ©ûê
uöt32
 
dummy
;

837 
sii
 = 
	`SI_INFO
(
sih
);

838 
	`ASSERT
(
	`GOODREGS
(
sii
->
curm≠
));

839 
sb
 = 
	`REGS2SB
(
sii
->
curm≠
);

844 
	`sb_c‹e_dißbÀ
(
sih
, (
bôs
 | 
ª£tbôs
));

851 
	`W_SBREG
(
sii
, &
sb
->
sbtm°©ñow
,

852 (((
bôs
 | 
ª£tbôs
 | 
SICF_FGC
 | 
SICF_CLOCK_EN
Ë<< 
SBTML_SICF_SHIFT
) |

853 
SBTML_RESET
));

854 
dummy
 = 
	`R_SBREG
(
sii
, &
sb
->
sbtm°©ñow
);

855 
	`BCM_REFERENCE
(
dummy
);

856 
	`OSL_DELAY
(1);

858 i‡(
	`R_SBREG
(
sii
, &
sb
->
sbtm°©ehigh
Ë& 
SBTMH_SERR
) {

859 
	`W_SBREG
(
sii
, &
sb
->
sbtm°©ehigh
, 0);

861 i‡((
dummy
 = 
	`R_SBREG
(
sii
, &
sb
->
sbim°©e
)Ë& (
SBIM_IBE
 | 
SBIM_TO
)) {

862 
	`AND_SBREG
(
sii
, &
sb
->
sbim°©e
, ~(
SBIM_IBE
 | 
SBIM_TO
));

866 
	`W_SBREG
(
sii
, &
sb
->
sbtm°©ñow
,

867 ((
bôs
 | 
ª£tbôs
 | 
SICF_FGC
 | 
SICF_CLOCK_EN
Ë<< 
SBTML_SICF_SHIFT
));

868 
dummy
 = 
	`R_SBREG
(
sii
, &
sb
->
sbtm°©ñow
);

869 
	`BCM_REFERENCE
(
dummy
);

870 
	`OSL_DELAY
(1);

873 
	`W_SBREG
(
sii
, &
sb
->
sbtm°©ñow
, ((
bôs
 | 
SICF_CLOCK_EN
Ë<< 
SBTML_SICF_SHIFT
));

874 
dummy
 = 
	`R_SBREG
(
sii
, &
sb
->
sbtm°©ñow
);

875 
	`BCM_REFERENCE
(
dummy
);

876 
	`OSL_DELAY
(1);

877 
	}
}

901 
	#TO_MASK
 (
SBIMCL_RTO_MASK
 | 
SBIMCL_STO_MASK
)

	)

903 
uöt32


904 
	$sb_£t_öôüt‹_to
(
si_t
 *
sih
, 
uöt32
 
to
, 
uöt
 
idx
)

906 
si_öfo_t
 *
sii
;

907 
uöt
 
‹igidx
;

908 
uöt
 
öå_vÆ
 = 0;

909 
uöt32
 
tmp
, 
ªt
 = 0xffffffff;

910 
sbc⁄fig_t
 *
sb
;

912 
sii
 = 
	`SI_INFO
(
sih
);

914 i‡((
to
 & ~
TO_MASK
) != 0)

915  
ªt
;

918 i‡(
idx
 =
BADIDX
) {

919 
	`BUSTYPE
(
sii
->
pub
.
bu°y≥
)) {

920 
PCI_BUS
:

921 
idx
 = 
sii
->
pub
.
busc‹eidx
;

923 
JTAG_BUS
:

924 
idx
 = 
SI_CC_IDX
;

926 
PCMCIA_BUS
:

927 
SDIO_BUS
:

928 
idx
 = 
	`si_födc‹eidx
(
sih
, 
PCMCIA_CORE_ID
, 0);

930 
SI_BUS
:

931 
idx
 = 
	`si_födc‹eidx
(
sih
, 
MIPS33_CORE_ID
, 0);

934 
	`ASSERT
(0);

936 i‡(
idx
 =
BADIDX
)

937  
ªt
;

940 
	`INTR_OFF
(
sii
, 
öå_vÆ
);

941 
‹igidx
 = 
	`si_c‹eidx
(
sih
);

943 
sb
 = 
	`REGS2SB
(
	`sb_£tc‹eidx
(
sih
, 
idx
));

945 
tmp
 = 
	`R_SBREG
(
sii
, &
sb
->
sbimc⁄figlow
);

946 
ªt
 = 
tmp
 & 
TO_MASK
;

947 
	`W_SBREG
(
sii
, &
sb
->
sbimc⁄figlow
, (
tmp
 & ~
TO_MASK
Ë| 
to
);

949 
	`sb_commô
(
sih
);

950 
	`sb_£tc‹eidx
(
sih
, 
‹igidx
);

951 
	`INTR_RESTORE
(
sii
, 
öå_vÆ
);

952  
ªt
;

953 
	}
}

955 
uöt32


956 
	$sb_ba£
(
uöt32
 
adm©ch
)

958 
uöt32
 
ba£
;

959 
uöt
 
ty≥
;

961 
ty≥
 = 
adm©ch
 & 
SBAM_TYPE_MASK
;

962 
	`ASSERT
(
ty≥
 < 3);

964 
ba£
 = 0;

966 i‡(
ty≥
 == 0) {

967 
ba£
 = 
adm©ch
 & 
SBAM_BASE0_MASK
;

968 } i‡(
ty≥
 == 1) {

969 
	`ASSERT
(!(
adm©ch
 & 
SBAM_ADNEG
));

970 
ba£
 = 
adm©ch
 & 
SBAM_BASE1_MASK
;

971 } i‡(
ty≥
 == 2) {

972 
	`ASSERT
(!(
adm©ch
 & 
SBAM_ADNEG
));

973 
ba£
 = 
adm©ch
 & 
SBAM_BASE2_MASK
;

976  (
ba£
);

977 
	}
}

979 
uöt32


980 
	$sb_size
(
uöt32
 
adm©ch
)

982 
uöt32
 
size
;

983 
uöt
 
ty≥
;

985 
ty≥
 = 
adm©ch
 & 
SBAM_TYPE_MASK
;

986 
	`ASSERT
(
ty≥
 < 3);

988 
size
 = 0;

990 i‡(
ty≥
 == 0) {

991 
size
 = 1 << (((
adm©ch
 & 
SBAM_ADINT0_MASK
Ë>> 
SBAM_ADINT0_SHIFT
) + 1);

992 } i‡(
ty≥
 == 1) {

993 
	`ASSERT
(!(
adm©ch
 & 
SBAM_ADNEG
));

994 
size
 = 1 << (((
adm©ch
 & 
SBAM_ADINT1_MASK
Ë>> 
SBAM_ADINT1_SHIFT
) + 1);

995 } i‡(
ty≥
 == 2) {

996 
	`ASSERT
(!(
adm©ch
 & 
SBAM_ADNEG
));

997 
size
 = 1 << (((
adm©ch
 & 
SBAM_ADINT2_MASK
Ë>> 
SBAM_ADINT2_SHIFT
) + 1);

1000  (
size
);

1001 
	}
}

	@siutils.c

28 
	~<bcm_cfg.h
>

29 
	~<ty≥defs.h
>

30 
	~<bcmdefs.h
>

31 
	~<o¶.h
>

32 
	~<bcmutûs.h
>

33 
	~<siutûs.h
>

34 
	~<bcmdevs.h
>

35 
	~<hndsoc.h
>

36 
	~<sbchùc.h
>

37 
	~<pcicfg.h
>

38 
	~<sbpcmcü.h
>

39 
	~<sbso¸am.h
>

40 
	~<bcmsdh.h
>

41 
	~<sdio.h
>

42 
	~<sbsdio.h
>

43 
	~<sbhnddma.h
>

44 
	~<sbsdpcmdev.h
>

45 
	~<bcmsdpcm.h
>

46 
	~<hndpmu.h
>

48 
	~"siutûs_¥iv.h
"

51 
si_öfo_t
 *
si_dﬂâach
(si_öfo_à*
sii
, 
uöt
 
devid
, 
o¶_t
 *
osh
, *
ªgs
,

52 
uöt
 
bu°y≥
, *
sdh
, **
v¨s
, uöà*
v¨sz
);

53 
boﬁ
 
si_busc‹e_¥ï
(
si_öfo_t
 *
sii
, 
uöt
 
bu°y≥
, uöà
devid
, *
sdh
);

54 
boﬁ
 
si_busc‹e_£tup
(
si_öfo_t
 *
sii
, 
chù¸egs_t
 *
cc
, 
uöt
 
bu°y≥
, 
uöt32
 
ßvewö
,

55 
uöt
 *
‹igidx
, *
ªgs
);

60 
uöt32
 
	gsi_gpi‹e£rv©i⁄
 = 0;

64 
	gdo_4360_pcõ2_w¨
 = 0;

75 
si_t
 *

76 
	$si_©èch
(
uöt
 
devid
, 
o¶_t
 *
osh
, *
ªgs
,

77 
uöt
 
bu°y≥
, *
sdh
, **
v¨s
, uöà*
v¨sz
)

79 
si_öfo_t
 *
sii
;

82 i‡((
sii
 = 
	`MALLOC
(
osh
,  (
si_öfo_t
))Ë=
NULL
) {

83 
	`SI_ERROR
(("si_©èch: mÆlo¯Áûed! mÆlo˚d %d byãs\n", 
	`MALLOCED
(
osh
)));

84  (
NULL
);

87 i‡(
	`si_dﬂâach
(
sii
, 
devid
, 
osh
, 
ªgs
, 
bu°y≥
, 
sdh
, 
v¨s
, 
v¨sz
Ë=
NULL
) {

88 
	`MFREE
(
osh
, 
sii
, (
si_öfo_t
));

89  (
NULL
);

91 
sii
->
v¨s
 = v¨†? *v¨†: 
NULL
;

92 
sii
->
v¨sz
 = varsz ? *varsz : 0;

94  (
si_t
 *)
sii
;

95 
	}
}

98 
si_öfo_t
 
	gksii
;

100 
uöt32
 
	gwd_m°icks
;

103 
si_t
 *

104 
	$si_k©èch
(
o¶_t
 *
osh
)

106 
boﬁ
 
ksii_©èched
 = 
FALSE
;

108 i‡(!
ksii_©èched
) {

109 *
ªgs
 = 
NULL
;

110 
ªgs
 = 
	`REG_MAP
(
SI_ENUM_BASE
, 
SI_CORE_SIZE
);

112 i‡(
	`si_dﬂâach
(&
ksii
, 
BCM4710_DEVICE_ID
, 
osh
, 
ªgs
,

113 
SI_BUS
, 
NULL
,

114 
osh
 !
SI_OSH
 ? &
ksii
.
v¨s
 : 
NULL
,

115 
osh
 !
SI_OSH
 ? &
ksii
.
v¨sz
 : 
NULL
) == NULL) {

116 
	`SI_ERROR
(("si_kattach: si_doattach failed\n"));

117 
	`REG_UNMAP
(
ªgs
);

118  
NULL
;

120 
	`REG_UNMAP
(
ªgs
);

123 i‡(
	`PMUCTL_ENAB
(&
ksii
.
pub
)) {

125 
wd_m°icks
 = 32;

127 
wd_m°icks
 = 
ALP_CLOCK
 / 1000;

130 
ksii_©èched
 = 
TRUE
;

131 
	`SI_MSG
(("si_kattach done. ccrev = %d, wd_msticks = %d\n",

132 
ksii
.
pub
.
c¸ev
, 
wd_m°icks
));

135  &
ksii
.
pub
;

136 
	}
}

139 
boﬁ


140 
	$si_busc‹e_¥ï
(
si_öfo_t
 *
sii
, 
uöt
 
bu°y≥
, uöà
devid
, *
sdh
)

143 i‡(
	`BUSTYPE
(
bu°y≥
Ë=
PCMCIA_BUS
)

144 
sii
->
mem£g
 = 
TRUE
;

147 i‡(
	`BUSTYPE
(
bu°y≥
Ë=
SDIO_BUS
) {

148 
îr
;

149 
uöt8
 
˛k£t
;

152 
˛k£t
 = 
SBSDIO_FORCE_HW_CLKREQ_OFF
 | 
SBSDIO_ALP_AVAIL_REQ
;

153 
	`bcmsdh_cfg_wrôe
(
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_FUNC1_CHIPCLKCSR
, 
˛k£t
, &
îr
);

154 i‡(!
îr
) {

155 
uöt8
 
˛kvÆ
;

158 
˛kvÆ
 = 
	`bcmsdh_cfg_ªad
(
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_FUNC1_CHIPCLKCSR
, 
NULL
);

159 i‡((
˛kvÆ
 & ~
SBSDIO_AVBITS
Ë=
˛k£t
) {

160 
	`SPINWAIT
(((
˛kvÆ
 = 
	`bcmsdh_cfg_ªad
(
sdh
, 
SDIO_FUNC_1
,

161 
SBSDIO_FUNC1_CHIPCLKCSR
, 
NULL
)), !
	`SBSDIO_ALPAV
(
˛kvÆ
)),

162 
PMU_MAX_TRANSITION_DLY
);

163 i‡(!
	`SBSDIO_ALPAV
(
˛kvÆ
)) {

164 
	`SI_ERROR
(("timeout on ALPAV wait, clkval 0x%02x\n",

165 
˛kvÆ
));

166  
FALSE
;

168 
˛k£t
 = 
SBSDIO_FORCE_HW_CLKREQ_OFF
 | 
SBSDIO_FORCE_ALP
;

169 
	`bcmsdh_cfg_wrôe
(
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_FUNC1_CHIPCLKCSR
,

170 
˛k£t
, &
îr
);

171 
	`OSL_DELAY
(65);

176 
	`bcmsdh_cfg_wrôe
(
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_FUNC1_SDIOPULLUP
, 0, 
NULL
);

180  
TRUE
;

181 
	}
}

183 
boﬁ


184 
	$si_busc‹e_£tup
(
si_öfo_t
 *
sii
, 
chù¸egs_t
 *
cc
, 
uöt
 
bu°y≥
, 
uöt32
 
ßvewö
,

185 
uöt
 *
‹igidx
, *
ªgs
)

187 
boﬁ
 
pci
, 
pcõ
, 
pcõ_gí2
 = 
FALSE
;

188 
uöt
 
i
;

189 
uöt
 
pciidx
, 
pcõidx
, 
pcúev
, 
pcõªv
;

191 
cc
 = 
	`si_£tc‹eidx
(&
sii
->
pub
, 
SI_CC_IDX
);

192 
	`ASSERT
((
uöçå
)
cc
);

195 
sii
->
pub
.
c¸ev
 = ()
	`si_c‹îev
(&sii->pub);

198 i‡(
sii
->
pub
.
c¸ev
 >= 11)

199 
sii
->
pub
.
chù°
 = 
	`R_REG
(sii->
osh
, &
cc
->
chù°©us
);

202 
sii
->
pub
.
ccˇps
 = 
	`R_REG
(sii->
osh
, &
cc
->
ˇ∑bûôõs
);

205 i‡(
sii
->
pub
.
c¸ev
 >= 35)

206 
sii
->
pub
.
ccˇps_ext
 = 
	`R_REG
(sii->
osh
, &
cc
->
ˇ∑bûôõs_ext
);

209 i‡(
sii
->
pub
.
ccˇps
 & 
CC_CAP_PMU
) {

210 
sii
->
pub
.
pmuˇps
 = 
	`R_REG
(sii->
osh
, &
cc
->
pmuˇ∑bûôõs
);

211 
sii
->
pub
.
pmuªv
 = sii->pub.
pmuˇps
 & 
PCAP_REV_MASK
;

214 
	`SI_MSG
(("Chipc:Ñev %d, caps 0x%x, chipst 0x%xÖmurev %d,Ömucaps 0x%x\n",

215 
sii
->
pub
.
c¸ev
, sii->pub.
ccˇps
, sii->pub.
chù°
, sii->pub.
pmuªv
,

216 
sii
->
pub
.
pmuˇps
));

219 
sii
->
pub
.
busc‹ëy≥
 = 
NODEV_CORE_ID
;

220 
sii
->
pub
.
busc‹îev
 = (
uöt
)
NOREV
;

221 
sii
->
pub
.
busc‹eidx
 = 
BADIDX
;

223 
pci
 = 
pcõ
 = 
FALSE
;

224 
pcúev
 = 
pcõªv
 = (
uöt
)
NOREV
;

225 
pciidx
 = 
pcõidx
 = 
BADIDX
;

227 
i
 = 0; i < 
sii
->
numc‹es
; i++) {

228 
uöt
 
cid
, 
¸ev
;

230 
	`si_£tc‹eidx
(&
sii
->
pub
, 
i
);

231 
cid
 = 
	`si_c‹eid
(&
sii
->
pub
);

232 
¸ev
 = 
	`si_c‹îev
(&
sii
->
pub
);

235 
	`SI_VMSG
(("CORE[%d]: id 0x%xÑev %d base 0x%xÑegs 0x%p\n",

236 
i
, 
cid
, 
¸ev
, 
sii
->
c‹esba
[i], sii->
ªgs
[i]));

238 i‡(
	`BUSTYPE
(
bu°y≥
Ë=
PCI_BUS
) {

239 i‡(
cid
 =
PCI_CORE_ID
) {

240 
pciidx
 = 
i
;

241 
pcúev
 = 
¸ev
;

242 
pci
 = 
TRUE
;

243 } i‡((
cid
 =
PCIE_CORE_ID
Ë|| (cid =
PCIE2_CORE_ID
)) {

244 
pcõidx
 = 
i
;

245 
pcõªv
 = 
¸ev
;

246 
pcõ
 = 
TRUE
;

247 i‡(
cid
 =
PCIE2_CORE_ID
)

248 
pcõ_gí2
 = 
TRUE
;

250 } i‡((
	`BUSTYPE
(
bu°y≥
Ë=
PCMCIA_BUS
) &&

251 (
cid
 =
PCMCIA_CORE_ID
)) {

252 
sii
->
pub
.
busc‹îev
 = 
¸ev
;

253 
sii
->
pub
.
busc‹ëy≥
 = 
cid
;

254 
sii
->
pub
.
busc‹eidx
 = 
i
;

256 i‡(((
	`BUSTYPE
(
bu°y≥
Ë=
SDIO_BUS
) ||

257 (
	`BUSTYPE
(
bu°y≥
Ë=
SPI_BUS
)) &&

258 ((
cid
 =
PCMCIA_CORE_ID
) ||

259 (
cid
 =
SDIOD_CORE_ID
))) {

260 
sii
->
pub
.
busc‹îev
 = 
¸ev
;

261 
sii
->
pub
.
busc‹ëy≥
 = 
cid
;

262 
sii
->
pub
.
busc‹eidx
 = 
i
;

266 i‡((
ßvewö
 && (ßvewö =
sii
->
c‹esba
[
i
])) ||

267 (
ªgs
 =
sii
->ªgs[
i
]))

268 *
‹igidx
 = 
i
;

271 i‡(
pci
) {

272 
sii
->
pub
.
busc‹ëy≥
 = 
PCI_CORE_ID
;

273 
sii
->
pub
.
busc‹îev
 = 
pcúev
;

274 
sii
->
pub
.
busc‹eidx
 = 
pciidx
;

275 } i‡(
pcõ
) {

276 i‡(
pcõ_gí2
)

277 
sii
->
pub
.
busc‹ëy≥
 = 
PCIE2_CORE_ID
;

279 
sii
->
pub
.
busc‹ëy≥
 = 
PCIE_CORE_ID
;

280 
sii
->
pub
.
busc‹îev
 = 
pcõªv
;

281 
sii
->
pub
.
busc‹eidx
 = 
pcõidx
;

284 
	`SI_VMSG
(("Busc‹êid/ty≥/ªv %d/0x%x/%d\n", 
sii
->
pub
.
busc‹eidx
, sii->pub.
busc‹ëy≥
,

285 
sii
->
pub
.
busc‹îev
));

287 i‡(
	`BUSTYPE
(
sii
->
pub
.
bu°y≥
Ë=
SI_BUS
 && (
	`CHIPID
(sii->pub.
chù
Ë=
BCM4712_CHIP_ID
) &&

288 (
sii
->
pub
.
chùpkg
 !
BCM4712LARGE_PKG_ID
Ë&& (
	`CHIPREV
(sii->pub.
chùªv
) <= 3))

289 
	`OR_REG
(
sii
->
osh
, &
cc
->
¶ow_˛k_˘l
, 
SCC_SS_XTAL
);

295 i‡((
	`BUSTYPE
(
bu°y≥
Ë=
SDIO_BUS
Ë|| (BUSTYPE(bu°y≥Ë=
SPI_BUS
)) {

296 i‡(
	`si_£tc‹e
(&
sii
->
pub
, 
ARM7S_CORE_ID
, 0) ||

297 
	`si_£tc‹e
(&
sii
->
pub
, 
ARMCM3_CORE_ID
, 0))

298 
	`si_c‹e_dißbÀ
(&
sii
->
pub
, 0);

302 
	`si_£tc‹eidx
(&
sii
->
pub
, *
‹igidx
);

304  
TRUE
;

305 
	}
}

310 
si_öfo_t
 *

311 
	$si_dﬂâach
(
si_öfo_t
 *
sii
, 
uöt
 
devid
, 
o¶_t
 *
osh
, *
ªgs
,

312 
uöt
 
bu°y≥
, *
sdh
, **
v¨s
, uöà*
v¨sz
)

314 
si_pub
 *
sih
 = &
sii
->
pub
;

315 
uöt32
 
w
, 
ßvewö
;

316 
chù¸egs_t
 *
cc
;

317 *
pv¨s
 = 
NULL
;

318 
uöt
 
‹igidx
;

320 
	`ASSERT
(
	`GOODREGS
(
ªgs
));

322 
	`bzîo
((
uch¨
*)
sii
, (
si_öfo_t
));

324 
ßvewö
 = 0;

326 
sih
->
busc‹eidx
 = 
BADIDX
;

328 
sii
->
curm≠
 = 
ªgs
;

329 
sii
->
sdh
 = sdh;

330 
sii
->
osh
 = osh;

335 i‡(
bu°y≥
 =
PCI_BUS
) {

336 
ßvewö
 = 
	`OSL_PCI_READ_CONFIG
(
sii
->
osh
, 
PCI_BAR0_WIN
, (
uöt32
));

337 i‡(!
	`GOODCOREADDR
(
ßvewö
, 
SI_ENUM_BASE
))

338 
ßvewö
 = 
SI_ENUM_BASE
;

339 
	`OSL_PCI_WRITE_CONFIG
(
sii
->
osh
, 
PCI_BAR0_WIN
, 4, 
SI_ENUM_BASE
);

340 i‡(!
ªgs
)

341  
NULL
;

342 
cc
 = (
chù¸egs_t
 *)
ªgs
;

343 } i‡((
bu°y≥
 =
SDIO_BUS
Ë|| (bu°y≥ =
SPI_BUS
)) {

344 
cc
 = (
chù¸egs_t
 *)
sii
->
curm≠
;

346 
cc
 = (
chù¸egs_t
 *)
	`REG_MAP
(
SI_ENUM_BASE
, 
SI_CORE_SIZE
);

349 
sih
->
bu°y≥
 = bustype;

350 i‡(
bu°y≥
 !
	`BUSTYPE
(bustype)) {

351 
	`SI_ERROR
(("si_doattach: busÅype %d doesÇot match configured busÅype %d\n",

352 
bu°y≥
, 
	`BUSTYPE
(bustype)));

353  
NULL
;

357 i‡(!
	`si_busc‹e_¥ï
(
sii
, 
bu°y≥
, 
devid
, 
sdh
)) {

358 
	`SI_ERROR
(("si_dﬂâach: si_c‹e_˛k_¥ï faûed %d\n", 
bu°y≥
));

359  
NULL
;

367 i‡(!
cc
) {

368 
	`SI_ERROR
(("%s: chùcomm⁄Ñegi°î s∑˚ i†nuŒ \n", 
__FUNCTION__
));

369  
NULL
;

371 
w
 = 
	`R_REG
(
osh
, &
cc
->
chùid
);

372 
sih
->
socôy≥
 = (
w
 & 
CID_TYPE_MASK
Ë>> 
CID_TYPE_SHIFT
;

374 
sih
->
chù
 = 
w
 & 
CID_ID_MASK
;

375 
sih
->
chùªv
 = (
w
 & 
CID_REV_MASK
Ë>> 
CID_REV_SHIFT
;

376 
sih
->
chùpkg
 = (
w
 & 
CID_PKG_MASK
Ë>> 
CID_PKG_SHIFT
;

378 #i‡
	`deföed
(
HW_OOB
)

379 
	`bcmsdh_c⁄fig_hw_oob_öå
(
sdh
, 
sih
->
chù
);

382 i‡((
	`CHIPID
(
sih
->
chù
Ë=
BCM4329_CHIP_ID
Ë&& (sih->
chùªv
 == 0) &&

383 (
sih
->
chùpkg
 !
BCM4329_289PIN_PKG_ID
)) {

384 
sih
->
chùpkg
 = 
BCM4329_182PIN_PKG_ID
;

386 
sih
->
issim
 = 
	`IS_SIM
(sih->
chùpkg
);

389 i‡(
	`CHIPTYPE
(
sii
->
pub
.
socôy≥
Ë=
SOCI_SB
) {

390 
	`SI_MSG
(("Found chùÅy≥ SB (0x%08x)\n", 
w
));

391 
	`sb_sˇn
(&
sii
->
pub
, 
ªgs
, 
devid
);

392 } i‡(
	`CHIPTYPE
(
sii
->
pub
.
socôy≥
Ë=
SOCI_AI
) {

393 
	`SI_MSG
(("Found chùÅy≥ AI (0x%08x)\n", 
w
));

395 
	`ai_sˇn
(&
sii
->
pub
, (*)(
uöçå
)
cc
, 
devid
);

396 } i‡(
	`CHIPTYPE
(
sii
->
pub
.
socôy≥
Ë=
SOCI_UBUS
) {

397 
	`SI_MSG
(("Found chùÅy≥ UBUS (0x%08x), chù id = 0x%4x\n", 
w
, 
sih
->
chù
));

399 
	`ub_sˇn
(&
sii
->
pub
, (*)(
uöçå
)
cc
, 
devid
);

401 
	`SI_ERROR
(("Found chù o‡unknow¿ty≥ (0x%08x)\n", 
w
));

402  
NULL
;

405 i‡(
sii
->
numc‹es
 == 0) {

406 
	`SI_ERROR
(("si_doattach: couldÇot findány cores\n"));

407  
NULL
;

410 
‹igidx
 = 
SI_CC_IDX
;

411 i‡(!
	`si_busc‹e_£tup
(
sii
, 
cc
, 
bu°y≥
, 
ßvewö
, &
‹igidx
, 
ªgs
)) {

412 
	`SI_ERROR
(("si_doattach: si_buscore_setup failed\n"));

413 
exô
;

416 i‡(
	`CHIPID
(
sih
->
chù
Ë=
BCM4322_CHIP_ID
 && (((sih->
chù°
 & 
CST4322_SPROM_OTP_SEL_MASK
)

417 >> 
CST4322_SPROM_OTP_SEL_SHIFT
Ë=(
CST4322_OTP_PRESENT
 |

418 
CST4322_SPROM_PRESENT
))) {

419 
	`SI_ERROR
(("%s: InvÆid sëtög: bŸh SPROMánd OTP så≠≥d.\n", 
__FUNCTION__
));

420  
NULL
;

424 i‡((
sii
->
pub
.
c¸ev
 =0x25Ë&& ((
	`CHIPID
(
sih
->
chù
Ë=
BCM43236_CHIP_ID
 ||

425 
	`CHIPID
(
sih
->
chù
Ë=
BCM43235_CHIP_ID
 ||

426 
	`CHIPID
(
sih
->
chù
Ë=
BCM43234_CHIP_ID
 ||

427 
	`CHIPID
(
sih
->
chù
Ë=
BCM43238_CHIP_ID
) &&

428 (
	`CHIPREV
(
sii
->
pub
.
chùªv
) <= 2))) {

430 i‡((
cc
->
chù°©us
 & 
CST43236_BP_CLK
) != 0) {

431 
uöt
 
˛kdiv
;

432 
˛kdiv
 = 
	`R_REG
(
osh
, &
cc
->clkdiv);

434 
˛kdiv
 = (˛kdiv & ~
CLKD_OTP
Ë| (14 << 
CLKD_OTP_SHIFT
);

435 
	`W_REG
(
osh
, &
cc
->
˛kdiv
, clkdiv);

436 
	`SI_ERROR
(("%s: së clkdivÅÿ%x\n", 
__FUNCTION__
, 
˛kdiv
));

438 
	`OSL_DELAY
(10);

441 i‡(
bu°y≥
 =
PCI_BUS
) {

445 
pv¨s
 = 
NULL
;

446 
	`BCM_REFERENCE
(
pv¨s
);

450 i‡(
sii
->
pub
.
c¸ev
 >= 20) {

451 
uöt32
 
gpi›uŒup
 = 0, 
gpi›uŒdown
 = 0;

452 
cc
 = (
chù¸egs_t
 *)
	`si_£tc‹e
(
sih
, 
CC_CORE_ID
, 0);

453 
	`ASSERT
(
cc
 !
NULL
);

456 i‡((
	`CHIPID
(
sih
->
chù
Ë=
BCM4314_CHIP_ID
) ||

457 (
	`CHIPID
(
sih
->
chù
Ë=
BCM43142_CHIP_ID
)) {

458 
gpi›uŒup
 |= 0x402e0;

459 
gpi›uŒdown
 |= 0x20500;

462 
	`W_REG
(
osh
, &
cc
->
gpi›uŒup
, gpiopullup);

463 
	`W_REG
(
osh
, &
cc
->
gpi›uŒdown
, gpiopulldown);

464 
	`si_£tc‹eidx
(
sih
, 
‹igidx
);

469 
	`ASSERT
(!
	`si_è˛ór
(
sih
, 
FALSE
));

471  (
sii
);

473 
exô
:

475  
NULL
;

476 
	}
}

480 
	$si_dëach
(
si_t
 *
sih
)

482 
si_öfo_t
 *
sii
;

483 
uöt
 
idx
;

486 
sii
 = 
	`SI_INFO
(
sih
);

488 i‡(
sii
 =
NULL
)

491 i‡(
	`BUSTYPE
(
sih
->
bu°y≥
Ë=
SI_BUS
)

492 
idx
 = 0; idx < 
SI_MAXCORES
; idx++)

493 i‡(
sii
->
ªgs
[
idx
]) {

494 
	`REG_UNMAP
(
sii
->
ªgs
[
idx
]);

495 
sii
->
ªgs
[
idx
] = 
NULL
;

500 #i‡!
	`deföed
(
BCMBUSTYPE
Ë|| (BCMBUSTYPE =
SI_BUS
)

501 i‡(
sii
 !&
ksii
)

503 
	`MFREE
(
sii
->
osh
, sii, (
si_öfo_t
));

504 
	}
}

507 
	$si_osh
(
si_t
 *
sih
)

509 
si_öfo_t
 *
sii
;

511 
sii
 = 
	`SI_INFO
(
sih
);

512  
sii
->
osh
;

513 
	}
}

516 
	$si_£tosh
(
si_t
 *
sih
, 
o¶_t
 *
osh
)

518 
si_öfo_t
 *
sii
;

520 
sii
 = 
	`SI_INFO
(
sih
);

521 i‡(
sii
->
osh
 !
NULL
) {

522 
	`SI_ERROR
(("osh isálready set....\n"));

523 
	`ASSERT
(!
sii
->
osh
);

525 
sii
->
osh
 = osh;

526 
	}
}

530 
	$si_ªgi°î_öå_ˇŒback
(
si_t
 *
sih
, *
öåsoff_‚
, *
öå§e°‹e_‚
,

531 *
öå£«bÀd_‚
, *
öå_¨g
)

533 
si_öfo_t
 *
sii
;

535 
sii
 = 
	`SI_INFO
(
sih
);

536 
sii
->
öå_¨g
 = intr_arg;

537 
sii
->
öåsoff_‚
 = (
si_öåsoff_t
)intrsoff_fn;

538 
sii
->
öå§e°‹e_‚
 = (
si_öå§e°‹e_t
)intrsrestore_fn;

539 
sii
->
öå£«bÀd_‚
 = (
si_öå£«bÀd_t
)intrsenabled_fn;

543 
sii
->
dev_c‹eid
 = sii->
c‹eid
[sii->
curidx
];

544 
	}
}

547 
	$si_dîegi°î_öå_ˇŒback
(
si_t
 *
sih
)

549 
si_öfo_t
 *
sii
;

551 
sii
 = 
	`SI_INFO
(
sih
);

552 
sii
->
öåsoff_‚
 = 
NULL
;

553 
	}
}

555 
uöt


556 
	$si_ötÊag
(
si_t
 *
sih
)

558 
si_öfo_t
 *
sii
 = 
	`SI_INFO
(
sih
);

560 i‡(
	`CHIPTYPE
(
sih
->
socôy≥
Ë=
SOCI_SB
)

561  
	`sb_ötÊag
(
sih
);

562 i‡(
	`CHIPTYPE
(
sih
->
socôy≥
Ë=
SOCI_AI
)

563  
	`R_REG
(
sii
->
osh
, ((
uöt32
 *)(
uöçå
)

564 (
sii
->
oob_rouãr
 + 
OOB_STATUSA
)));

566 
	`ASSERT
(0);

569 
	}
}

571 
uöt


572 
	$si_Êag
(
si_t
 *
sih
)

574 i‡(
	`CHIPTYPE
(
sih
->
socôy≥
Ë=
SOCI_SB
)

575  
	`sb_Êag
(
sih
);

576 i‡(
	`CHIPTYPE
(
sih
->
socôy≥
Ë=
SOCI_AI
)

577  
	`ai_Êag
(
sih
);

578 i‡(
	`CHIPTYPE
(
sih
->
socôy≥
Ë=
SOCI_UBUS
)

579  
	`ub_Êag
(
sih
);

581 
	`ASSERT
(0);

584 
	}
}

587 
	$si_£töt
(
si_t
 *
sih
, 
siÊag
)

589 i‡(
	`CHIPTYPE
(
sih
->
socôy≥
Ë=
SOCI_SB
)

590 
	`sb_£töt
(
sih
, 
siÊag
);

591 i‡(
	`CHIPTYPE
(
sih
->
socôy≥
Ë=
SOCI_AI
)

592 
	`ai_£töt
(
sih
, 
siÊag
);

593 i‡(
	`CHIPTYPE
(
sih
->
socôy≥
Ë=
SOCI_UBUS
)

594 
	`ub_£töt
(
sih
, 
siÊag
);

596 
	`ASSERT
(0);

597 
	}
}

599 
uöt


600 
	$si_c‹eid
(
si_t
 *
sih
)

602 
si_öfo_t
 *
sii
;

604 
sii
 = 
	`SI_INFO
(
sih
);

605  
sii
->
c‹eid
[sii->
curidx
];

606 
	}
}

608 
uöt


609 
	$si_c‹eidx
(
si_t
 *
sih
)

611 
si_öfo_t
 *
sii
;

613 
sii
 = 
	`SI_INFO
(
sih
);

614  
sii
->
curidx
;

615 
	}
}

618 
uöt


619 
	$si_c‹eunô
(
si_t
 *
sih
)

621 
si_öfo_t
 *
sii
;

622 
uöt
 
idx
;

623 
uöt
 
c‹eid
;

624 
uöt
 
c‹eunô
;

625 
uöt
 
i
;

627 
sii
 = 
	`SI_INFO
(
sih
);

628 
c‹eunô
 = 0;

630 
idx
 = 
sii
->
curidx
;

632 
	`ASSERT
(
	`GOODREGS
(
sii
->
curm≠
));

633 
c‹eid
 = 
	`si_c‹eid
(
sih
);

636 
i
 = 0; i < 
idx
; i++)

637 i‡(
sii
->
c‹eid
[
i
] == coreid)

638 
c‹eunô
++;

640  (
c‹eunô
);

641 
	}
}

643 
uöt


644 
	$si_c‹evíd‹
(
si_t
 *
sih
)

646 i‡(
	`CHIPTYPE
(
sih
->
socôy≥
Ë=
SOCI_SB
)

647  
	`sb_c‹evíd‹
(
sih
);

648 i‡(
	`CHIPTYPE
(
sih
->
socôy≥
Ë=
SOCI_AI
)

649  
	`ai_c‹evíd‹
(
sih
);

650 i‡(
	`CHIPTYPE
(
sih
->
socôy≥
Ë=
SOCI_UBUS
)

651  
	`ub_c‹evíd‹
(
sih
);

653 
	`ASSERT
(0);

656 
	}
}

658 
boﬁ


659 
	$si_back∂™e64
(
si_t
 *
sih
)

661  ((
sih
->
ccˇps
 & 
CC_CAP_BKPLN64
) != 0);

662 
	}
}

664 
uöt


665 
	$si_c‹îev
(
si_t
 *
sih
)

667 i‡(
	`CHIPTYPE
(
sih
->
socôy≥
Ë=
SOCI_SB
)

668  
	`sb_c‹îev
(
sih
);

669 i‡(
	`CHIPTYPE
(
sih
->
socôy≥
Ë=
SOCI_AI
)

670  
	`ai_c‹îev
(
sih
);

671 i‡(
	`CHIPTYPE
(
sih
->
socôy≥
Ë=
SOCI_UBUS
)

672  
	`ub_c‹îev
(
sih
);

674 
	`ASSERT
(0);

677 
	}
}

680 
uöt


681 
	$si_födc‹eidx
(
si_t
 *
sih
, 
uöt
 
c‹eid
, uöà
c‹eunô
)

683 
si_öfo_t
 *
sii
;

684 
uöt
 
found
;

685 
uöt
 
i
;

687 
sii
 = 
	`SI_INFO
(
sih
);

689 
found
 = 0;

691 
i
 = 0; i < 
sii
->
numc‹es
; i++)

692 i‡(
sii
->
c‹eid
[
i
] == coreid) {

693 i‡(
found
 =
c‹eunô
)

694  (
i
);

695 
found
++;

698  (
BADIDX
);

699 
	}
}

702 
uöt


703 
	$si_c‹ñi°
(
si_t
 *
sih
, 
uöt
 
c‹eid
[])

705 
si_öfo_t
 *
sii
;

707 
sii
 = 
	`SI_INFO
(
sih
);

709 
	`bc›y
((
uch¨
*)
sii
->
c‹eid
, (uch¨*)c‹eid, (sii->
numc‹es
 * (
uöt
)));

710  (
sii
->
numc‹es
);

711 
	}
}

715 
	$si_c‹îegs
(
si_t
 *
sih
)

717 
si_öfo_t
 *
sii
;

719 
sii
 = 
	`SI_INFO
(
sih
);

720 
	`ASSERT
(
	`GOODREGS
(
sii
->
curm≠
));

722  (
sii
->
curm≠
);

723 
	}
}

731 
	$si_£tc‹e
(
si_t
 *
sih
, 
uöt
 
c‹eid
, uöà
c‹eunô
)

733 
uöt
 
idx
;

735 
idx
 = 
	`si_födc‹eidx
(
sih
, 
c‹eid
, 
c‹eunô
);

736 i‡(!
	`GOODIDX
(
idx
))

737  (
NULL
);

739 i‡(
	`CHIPTYPE
(
sih
->
socôy≥
Ë=
SOCI_SB
)

740  
	`sb_£tc‹eidx
(
sih
, 
idx
);

741 i‡(
	`CHIPTYPE
(
sih
->
socôy≥
Ë=
SOCI_AI
)

742  
	`ai_£tc‹eidx
(
sih
, 
idx
);

743 i‡(
	`CHIPTYPE
(
sih
->
socôy≥
Ë=
SOCI_UBUS
)

744  
	`ub_£tc‹eidx
(
sih
, 
idx
);

746 
	`ASSERT
(0);

747  
NULL
;

749 
	}
}

752 
	$si_£tc‹eidx
(
si_t
 *
sih
, 
uöt
 
c‹eidx
)

754 i‡(
	`CHIPTYPE
(
sih
->
socôy≥
Ë=
SOCI_SB
)

755  
	`sb_£tc‹eidx
(
sih
, 
c‹eidx
);

756 i‡(
	`CHIPTYPE
(
sih
->
socôy≥
Ë=
SOCI_AI
)

757  
	`ai_£tc‹eidx
(
sih
, 
c‹eidx
);

758 i‡(
	`CHIPTYPE
(
sih
->
socôy≥
Ë=
SOCI_UBUS
)

759  
	`ub_£tc‹eidx
(
sih
, 
c‹eidx
);

761 
	`ASSERT
(0);

762  
NULL
;

764 
	}
}

768 
	$si_swôch_c‹e
(
si_t
 *
sih
, 
uöt
 
c‹eid
, uöà*
‹igidx
, uöà*
öå_vÆ
)

770 *
cc
;

771 
si_öfo_t
 *
sii
;

773 
sii
 = 
	`SI_INFO
(
sih
);

775 i‡(
	`SI_FAST
(
sii
)) {

780 *
‹igidx
 = 
c‹eid
;

781 i‡(
c‹eid
 =
CC_CORE_ID
)

782  (*)
	`CCREGS_FAST
(
sii
);

783 i‡(
c‹eid
 =
sih
->
busc‹ëy≥
)

784  (*)
	`PCIEREGS
(
sii
);

786 
	`INTR_OFF
(
sii
, *
öå_vÆ
);

787 *
‹igidx
 = 
sii
->
curidx
;

788 
cc
 = 
	`si_£tc‹e
(
sih
, 
c‹eid
, 0);

789 
	`ASSERT
(
cc
 !
NULL
);

791  
cc
;

792 
	}
}

796 
	$si_ª°‹e_c‹e
(
si_t
 *
sih
, 
uöt
 
c‹eid
, uöà
öå_vÆ
)

798 
si_öfo_t
 *
sii
;

800 
sii
 = 
	`SI_INFO
(
sih
);

801 i‡(
	`SI_FAST
(
sii
Ë&& ((
c‹eid
 =
CC_CORE_ID
Ë|| (c‹eid =
sih
->
busc‹ëy≥
)))

804 
	`si_£tc‹eidx
(
sih
, 
c‹eid
);

805 
	`INTR_RESTORE
(
sii
, 
öå_vÆ
);

806 
	}
}

809 
	$si_numaddr•a˚s
(
si_t
 *
sih
)

811 i‡(
	`CHIPTYPE
(
sih
->
socôy≥
Ë=
SOCI_SB
)

812  
	`sb_numaddr•a˚s
(
sih
);

813 i‡(
	`CHIPTYPE
(
sih
->
socôy≥
Ë=
SOCI_AI
)

814  
	`ai_numaddr•a˚s
(
sih
);

815 i‡(
	`CHIPTYPE
(
sih
->
socôy≥
Ë=
SOCI_UBUS
)

816  
	`ub_numaddr•a˚s
(
sih
);

818 
	`ASSERT
(0);

821 
	}
}

823 
uöt32


824 
	$si_addr•a˚
(
si_t
 *
sih
, 
uöt
 
asidx
)

826 i‡(
	`CHIPTYPE
(
sih
->
socôy≥
Ë=
SOCI_SB
)

827  
	`sb_addr•a˚
(
sih
, 
asidx
);

828 i‡(
	`CHIPTYPE
(
sih
->
socôy≥
Ë=
SOCI_AI
)

829  
	`ai_addr•a˚
(
sih
, 
asidx
);

830 i‡(
	`CHIPTYPE
(
sih
->
socôy≥
Ë=
SOCI_UBUS
)

831  
	`ub_addr•a˚
(
sih
, 
asidx
);

833 
	`ASSERT
(0);

836 
	}
}

838 
uöt32


839 
	$si_addr•a˚size
(
si_t
 *
sih
, 
uöt
 
asidx
)

841 i‡(
	`CHIPTYPE
(
sih
->
socôy≥
Ë=
SOCI_SB
)

842  
	`sb_addr•a˚size
(
sih
, 
asidx
);

843 i‡(
	`CHIPTYPE
(
sih
->
socôy≥
Ë=
SOCI_AI
)

844  
	`ai_addr•a˚size
(
sih
, 
asidx
);

845 i‡(
	`CHIPTYPE
(
sih
->
socôy≥
Ë=
SOCI_UBUS
)

846  
	`ub_addr•a˚size
(
sih
, 
asidx
);

848 
	`ASSERT
(0);

851 
	}
}

854 
	$si_c‹óddr•a˚X
(
si_t
 *
sih
, 
uöt
 
asidx
, 
uöt32
 *
addr
, uöt32 *
size
)

857 i‡(
	`CHIPTYPE
(
sih
->
socôy≥
Ë=
SOCI_AI
)

858 
	`ai_c‹óddr•a˚X
(
sih
, 
asidx
, 
addr
, 
size
);

860 *
size
 = 0;

861 
	}
}

863 
uöt32


864 
	$si_c‹e_cÊags
(
si_t
 *
sih
, 
uöt32
 
mask
, uöt32 
vÆ
)

866 i‡(
	`CHIPTYPE
(
sih
->
socôy≥
Ë=
SOCI_SB
)

867  
	`sb_c‹e_cÊags
(
sih
, 
mask
, 
vÆ
);

868 i‡(
	`CHIPTYPE
(
sih
->
socôy≥
Ë=
SOCI_AI
)

869  
	`ai_c‹e_cÊags
(
sih
, 
mask
, 
vÆ
);

870 i‡(
	`CHIPTYPE
(
sih
->
socôy≥
Ë=
SOCI_UBUS
)

871  
	`ub_c‹e_cÊags
(
sih
, 
mask
, 
vÆ
);

873 
	`ASSERT
(0);

876 
	}
}

879 
	$si_c‹e_cÊags_wo
(
si_t
 *
sih
, 
uöt32
 
mask
, uöt32 
vÆ
)

881 i‡(
	`CHIPTYPE
(
sih
->
socôy≥
Ë=
SOCI_SB
)

882 
	`sb_c‹e_cÊags_wo
(
sih
, 
mask
, 
vÆ
);

883 i‡(
	`CHIPTYPE
(
sih
->
socôy≥
Ë=
SOCI_AI
)

884 
	`ai_c‹e_cÊags_wo
(
sih
, 
mask
, 
vÆ
);

885 i‡(
	`CHIPTYPE
(
sih
->
socôy≥
Ë=
SOCI_UBUS
)

886 
	`ub_c‹e_cÊags_wo
(
sih
, 
mask
, 
vÆ
);

888 
	`ASSERT
(0);

889 
	}
}

891 
uöt32


892 
	$si_c‹e_sÊags
(
si_t
 *
sih
, 
uöt32
 
mask
, uöt32 
vÆ
)

894 i‡(
	`CHIPTYPE
(
sih
->
socôy≥
Ë=
SOCI_SB
)

895  
	`sb_c‹e_sÊags
(
sih
, 
mask
, 
vÆ
);

896 i‡(
	`CHIPTYPE
(
sih
->
socôy≥
Ë=
SOCI_AI
)

897  
	`ai_c‹e_sÊags
(
sih
, 
mask
, 
vÆ
);

898 i‡(
	`CHIPTYPE
(
sih
->
socôy≥
Ë=
SOCI_UBUS
)

899  
	`ub_c‹e_sÊags
(
sih
, 
mask
, 
vÆ
);

901 
	`ASSERT
(0);

904 
	}
}

906 
boﬁ


907 
	$si_isc‹eup
(
si_t
 *
sih
)

909 i‡(
	`CHIPTYPE
(
sih
->
socôy≥
Ë=
SOCI_SB
)

910  
	`sb_isc‹eup
(
sih
);

911 i‡(
	`CHIPTYPE
(
sih
->
socôy≥
Ë=
SOCI_AI
)

912  
	`ai_isc‹eup
(
sih
);

913 i‡(
	`CHIPTYPE
(
sih
->
socôy≥
Ë=
SOCI_UBUS
)

914  
	`ub_isc‹eup
(
sih
);

916 
	`ASSERT
(0);

917  
FALSE
;

919 
	}
}

921 
uöt


922 
	$si_wøµîªg
(
si_t
 *
sih
, 
uöt32
 
off£t
, uöt32 
mask
, uöt32 
vÆ
)

925 i‡(
	`CHIPTYPE
(
sih
->
socôy≥
Ë=
SOCI_AI
)

926  (
	`ai_wøp_ªg
(
sih
, 
off£t
, 
mask
, 
vÆ
));

928 
	}
}

930 
uöt


931 
	$si_c‹îeg
(
si_t
 *
sih
, 
uöt
 
c‹eidx
, uöà
ªgoff
, uöà
mask
, uöà
vÆ
)

933 i‡(
	`CHIPTYPE
(
sih
->
socôy≥
Ë=
SOCI_SB
)

934  
	`sb_c‹îeg
(
sih
, 
c‹eidx
, 
ªgoff
, 
mask
, 
vÆ
);

935 i‡(
	`CHIPTYPE
(
sih
->
socôy≥
Ë=
SOCI_AI
)

936  
	`ai_c‹îeg
(
sih
, 
c‹eidx
, 
ªgoff
, 
mask
, 
vÆ
);

937 i‡(
	`CHIPTYPE
(
sih
->
socôy≥
Ë=
SOCI_UBUS
)

938  
	`ub_c‹îeg
(
sih
, 
c‹eidx
, 
ªgoff
, 
mask
, 
vÆ
);

940 
	`ASSERT
(0);

943 
	}
}

946 
	$si_c‹e_dißbÀ
(
si_t
 *
sih
, 
uöt32
 
bôs
)

948 i‡(
	`CHIPTYPE
(
sih
->
socôy≥
Ë=
SOCI_SB
)

949 
	`sb_c‹e_dißbÀ
(
sih
, 
bôs
);

950 i‡(
	`CHIPTYPE
(
sih
->
socôy≥
Ë=
SOCI_AI
)

951 
	`ai_c‹e_dißbÀ
(
sih
, 
bôs
);

952 i‡(
	`CHIPTYPE
(
sih
->
socôy≥
Ë=
SOCI_UBUS
)

953 
	`ub_c‹e_dißbÀ
(
sih
, 
bôs
);

954 
	}
}

957 
	$si_c‹e_ª£t
(
si_t
 *
sih
, 
uöt32
 
bôs
, uöt32 
ª£tbôs
)

959 i‡(
	`CHIPTYPE
(
sih
->
socôy≥
Ë=
SOCI_SB
)

960 
	`sb_c‹e_ª£t
(
sih
, 
bôs
, 
ª£tbôs
);

961 i‡(
	`CHIPTYPE
(
sih
->
socôy≥
Ë=
SOCI_AI
)

962 
	`ai_c‹e_ª£t
(
sih
, 
bôs
, 
ª£tbôs
);

963 i‡(
	`CHIPTYPE
(
sih
->
socôy≥
Ë=
SOCI_UBUS
)

964 
	`ub_c‹e_ª£t
(
sih
, 
bôs
, 
ª£tbôs
);

965 
	}
}

969 
	$si_c‹ebi°
(
si_t
 *
sih
)

971 
uöt32
 
cÊags
;

972 
ªsu…
 = 0;

975 
cÊags
 = 
	`si_c‹e_cÊags
(
sih
, 0, 0);

978 
	`si_c‹e_cÊags
(
sih
, ~0, (
SICF_BIST_EN
 | 
SICF_FGC
));

981 
	`SPINWAIT
(((
	`si_c‹e_sÊags
(
sih
, 0, 0Ë& 
SISF_BIST_DONE
) == 0), 100000);

983 i‡(
	`si_c‹e_sÊags
(
sih
, 0, 0Ë& 
SISF_BIST_ERROR
)

984 
ªsu…
 = 
BCME_ERROR
;

987 
	`si_c‹e_cÊags
(
sih
, 0xffff, 
cÊags
);

989  
ªsu…
;

990 
	}
}

992 
uöt32


993 
	$Á˘‹6
(
uöt32
 
x
)

995 
x
) {

996 
CC_F6_2
:  2;

997 
CC_F6_3
:  3;

998 
CC_F6_4
:  4;

999 
CC_F6_5
:  5;

1000 
CC_F6_6
:  6;

1001 
CC_F6_7
:  7;

1004 
	}
}

1007 
uöt32


1008 
	$si_˛ock_øã
(
uöt32
 
∂l_ty≥
, uöt32 
n
, uöt32 
m
)

1010 
uöt32
 
n1
, 
n2
, 
˛ock
, 
m1
, 
m2
, 
m3
, 
mc
;

1012 
n1
 = 
n
 & 
CN_N1_MASK
;

1013 
n2
 = (
n
 & 
CN_N2_MASK
Ë>> 
CN_N2_SHIFT
;

1015 i‡(
∂l_ty≥
 =
PLL_TYPE6
) {

1016 i‡(
m
 & 
CC_T6_MMASK
)

1017  
CC_T6_M1
;

1019  
CC_T6_M0
;

1020 } i‡((
∂l_ty≥
 =
PLL_TYPE1
) ||

1021 (
∂l_ty≥
 =
PLL_TYPE3
) ||

1022 (
∂l_ty≥
 =
PLL_TYPE4
) ||

1023 (
∂l_ty≥
 =
PLL_TYPE7
)) {

1024 
n1
 = 
	`Á˘‹6
(n1);

1025 
n2
 +
CC_F5_BIAS
;

1026 } i‡(
∂l_ty≥
 =
PLL_TYPE2
) {

1027 
n1
 +
CC_T2_BIAS
;

1028 
n2
 +
CC_T2_BIAS
;

1029 
	`ASSERT
((
n1
 >= 2) && (n1 <= 7));

1030 
	`ASSERT
((
n2
 >= 5) && (n2 <= 23));

1031 } i‡(
∂l_ty≥
 =
PLL_TYPE5
) {

1034 
	`ASSERT
(0);

1036 i‡((
∂l_ty≥
 =
PLL_TYPE3
) ||

1037 (
∂l_ty≥
 =
PLL_TYPE7
)) {

1038 
˛ock
 = 
CC_CLOCK_BASE2
 * 
n1
 * 
n2
;

1040 
˛ock
 = 
CC_CLOCK_BASE1
 * 
n1
 * 
n2
;

1042 i‡(
˛ock
 == 0)

1045 
m1
 = 
m
 & 
CC_M1_MASK
;

1046 
m2
 = (
m
 & 
CC_M2_MASK
Ë>> 
CC_M2_SHIFT
;

1047 
m3
 = (
m
 & 
CC_M3_MASK
Ë>> 
CC_M3_SHIFT
;

1048 
mc
 = (
m
 & 
CC_MC_MASK
Ë>> 
CC_MC_SHIFT
;

1050 i‡((
∂l_ty≥
 =
PLL_TYPE1
) ||

1051 (
∂l_ty≥
 =
PLL_TYPE3
) ||

1052 (
∂l_ty≥
 =
PLL_TYPE4
) ||

1053 (
∂l_ty≥
 =
PLL_TYPE7
)) {

1054 
m1
 = 
	`Á˘‹6
(m1);

1055 i‡((
∂l_ty≥
 =
PLL_TYPE1
Ë|| (∂l_ty≥ =
PLL_TYPE3
))

1056 
m2
 +
CC_F5_BIAS
;

1058 
m2
 = 
	`Á˘‹6
(m2);

1059 
m3
 = 
	`Á˘‹6
(m3);

1061 
mc
) {

1062 
CC_MC_BYPASS
:  (
˛ock
);

1063 
CC_MC_M1
:  (
˛ock
 / 
m1
);

1064 
CC_MC_M1M2
:  (
˛ock
 / (
m1
 * 
m2
));

1065 
CC_MC_M1M2M3
:  (
˛ock
 / (
m1
 * 
m2
 * 
m3
));

1066 
CC_MC_M1M3
:  (
˛ock
 / (
m1
 * 
m3
));

1070 
	`ASSERT
(
∂l_ty≥
 =
PLL_TYPE2
);

1072 
m1
 +
CC_T2_BIAS
;

1073 
m2
 +
CC_T2M2_BIAS
;

1074 
m3
 +
CC_T2_BIAS
;

1075 
	`ASSERT
((
m1
 >= 2) && (m1 <= 7));

1076 
	`ASSERT
((
m2
 >= 3) && (m2 <= 10));

1077 
	`ASSERT
((
m3
 >= 2) && (m3 <= 7));

1079 i‡((
mc
 & 
CC_T2MC_M1BYP
) == 0)

1080 
˛ock
 /
m1
;

1081 i‡((
mc
 & 
CC_T2MC_M2BYP
) == 0)

1082 
˛ock
 /
m2
;

1083 i‡((
mc
 & 
CC_T2MC_M3BYP
) == 0)

1084 
˛ock
 /
m3
;

1086  (
˛ock
);

1088 
	}
}

1093 
	$si_w©chdog
(
si_t
 *
sih
, 
uöt
 
ticks
)

1095 
uöt
 
nb
, 
maxt
;

1097 i‡(
	`PMUCTL_ENAB
(
sih
)) {

1099 i‡((
	`CHIPID
(
sih
->
chù
Ë=
BCM4319_CHIP_ID
) &&

1100 (
	`CHIPREV
(
sih
->
chùªv
Ë=0Ë&& (
ticks
 != 0)) {

1101 
	`si_c‹îeg
(
sih
, 
SI_CC_IDX
, 
	`OFFSETOF
(
chù¸egs_t
, 
˛k_˘l_°
), ~0, 0x2);

1102 
	`si_£tc‹e
(
sih
, 
USB20D_CORE_ID
, 0);

1103 
	`si_c‹e_dißbÀ
(
sih
, 1);

1104 
	`si_£tc‹e
(
sih
, 
CC_CORE_ID
, 0);

1107 
nb
 = (
sih
->
c¸ev
 < 26) ? 16 : ((sih->ccrev >= 37) ? 32 : 24);

1111 i‡(
nb
 == 32)

1112 
maxt
 = 0xffffffff;

1114 
maxt
 = ((1 << 
nb
) - 1);

1116 i‡(
ticks
 == 1)

1117 
ticks
 = 2;

1118 i‡(
ticks
 > 
maxt
)

1119 
ticks
 = 
maxt
;

1121 
	`si_c‹îeg
(
sih
, 
SI_CC_IDX
, 
	`OFFSETOF
(
chù¸egs_t
, 
pmuw©chdog
), ~0, 
ticks
);

1123 
maxt
 = (1 << 28) - 1;

1124 i‡(
ticks
 > 
maxt
)

1125 
ticks
 = 
maxt
;

1127 
	`si_c‹îeg
(
sih
, 
SI_CC_IDX
, 
	`OFFSETOF
(
chù¸egs_t
, 
w©chdog
), ~0, 
ticks
);

1129 
	}
}

1133 
	$si_w©chdog_ms
(
si_t
 *
sih
, 
uöt32
 
ms
)

1135 
	`si_w©chdog
(
sih
, 
wd_m°icks
 * 
ms
);

1136 
	}
}

1138 
uöt32
 
	$si_w©chdog_m°icks
()

1140  
wd_m°icks
;

1141 
	}
}

1143 
boﬁ


1144 
	$si_è˛ór
(
si_t
 *
sih
, 
boﬁ
 
dëaûs
)

1146  
FALSE
;

1147 
	}
}

1152 
uöt


1153 
	$si_¶ow˛k_§c
(
si_öfo_t
 *
sii
)

1155 
chù¸egs_t
 *
cc
;

1157 
	`ASSERT
(
	`SI_FAST
(
sii
Ë|| 
	`si_c‹eid
(&sii->
pub
Ë=
CC_CORE_ID
);

1159 i‡(
sii
->
pub
.
c¸ev
 < 6) {

1160 i‡((
	`BUSTYPE
(
sii
->
pub
.
bu°y≥
Ë=
PCI_BUS
) &&

1161 (
	`OSL_PCI_READ_CONFIG
(
sii
->
osh
, 
PCI_GPIO_OUT
, (
uöt32
)) &

1162 
PCI_CFG_GPIO_SCS
))

1163  (
SCC_SS_PCI
);

1165  (
SCC_SS_XTAL
);

1166 } i‡(
sii
->
pub
.
c¸ev
 < 10) {

1167 
cc
 = (
chù¸egs_t
 *)
	`si_£tc‹eidx
(&
sii
->
pub
, sii->
curidx
);

1168  (
	`R_REG
(
sii
->
osh
, &
cc
->
¶ow_˛k_˘l
Ë& 
SCC_SS_MASK
);

1170  (
SCC_SS_XTAL
);

1171 
	}
}

1174 
uöt


1175 
	$si_¶ow˛k_‰eq
(
si_öfo_t
 *
sii
, 
boﬁ
 
max_‰eq
, 
chù¸egs_t
 *
cc
)

1177 
uöt32
 
¶ow˛k
;

1178 
uöt
 
div
;

1180 
	`ASSERT
(
	`SI_FAST
(
sii
Ë|| 
	`si_c‹eid
(&sii->
pub
Ë=
CC_CORE_ID
);

1183 
	`ASSERT
(
	`R_REG
(
sii
->
osh
, &
cc
->
ˇ∑bûôõs
Ë& 
CC_CAP_PWR_CTL
);

1185 
¶ow˛k
 = 
	`si_¶ow˛k_§c
(
sii
);

1186 i‡(
sii
->
pub
.
c¸ev
 < 6) {

1187 i‡(
¶ow˛k
 =
SCC_SS_PCI
)

1188  (
max_‰eq
 ? (
PCIMAXFREQ
 / 64Ë: (
PCIMINFREQ
 / 64));

1190  (
max_‰eq
 ? (
XTALMAXFREQ
 / 32Ë: (
XTALMINFREQ
 / 32));

1191 } i‡(
sii
->
pub
.
c¸ev
 < 10) {

1192 
div
 = 4 *

1193 (((
	`R_REG
(
sii
->
osh
, &
cc
->
¶ow_˛k_˘l
Ë& 
SCC_CD_MASK
Ë>> 
SCC_CD_SHIFT
) + 1);

1194 i‡(
¶ow˛k
 =
SCC_SS_LPO
)

1195  (
max_‰eq
 ? 
LPOMAXFREQ
 : 
LPOMINFREQ
);

1196 i‡(
¶ow˛k
 =
SCC_SS_XTAL
)

1197  (
max_‰eq
 ? (
XTALMAXFREQ
 / 
div
Ë: (
XTALMINFREQ
 / div));

1198 i‡(
¶ow˛k
 =
SCC_SS_PCI
)

1199  (
max_‰eq
 ? (
PCIMAXFREQ
 / 
div
Ë: (
PCIMINFREQ
 / div));

1201 
	`ASSERT
(0);

1204 
div
 = 
	`R_REG
(
sii
->
osh
, &
cc
->
sy°em_˛k_˘l
Ë>> 
SYCC_CD_SHIFT
;

1205 
div
 = 4 * (div + 1);

1206  (
max_‰eq
 ? 
XTALMAXFREQ
 : (
XTALMINFREQ
 / 
div
));

1209 
	}
}

1212 
	$si_˛k˘l_£tdñay
(
si_öfo_t
 *
sii
, *
chù¸egs
)

1214 
chù¸egs_t
 *
cc
 = (chù¸egs_à*)
chù¸egs
;

1215 
uöt
 
¶owmax‰eq
, 
∂l_dñay
, 
¶ow˛k
;

1216 
uöt
 
∂l_⁄_dñay
, 
‰ef_£l_dñay
;

1218 
∂l_dñay
 = 
PLL_DELAY
;

1224 
¶ow˛k
 = 
	`si_¶ow˛k_§c
(
sii
);

1225 i‡(
¶ow˛k
 !
SCC_SS_XTAL
)

1226 
∂l_dñay
 +
XTAL_ON_DELAY
;

1229 
¶owmax‰eq
 = 
	`si_¶ow˛k_‰eq
(
sii
, (sii->
pub
.
c¸ev
 >10Ë? 
FALSE
 : 
TRUE
, 
cc
);

1231 
∂l_⁄_dñay
 = ((
¶owmax‰eq
 * 
∂l_dñay
) + 999999) / 1000000;

1232 
‰ef_£l_dñay
 = ((
¶owmax‰eq
 * 
FREF_DELAY
) + 999999) / 1000000;

1234 
	`W_REG
(
sii
->
osh
, &
cc
->
∂l_⁄_dñay
,Öll_on_delay);

1235 
	`W_REG
(
sii
->
osh
, &
cc
->
‰ef_£l_dñay
, fref_sel_delay);

1236 
	}
}

1240 
	$si_˛k˘l_öô
(
si_t
 *
sih
)

1242 
si_öfo_t
 *
sii
;

1243 
uöt
 
‹igidx
 = 0;

1244 
chù¸egs_t
 *
cc
;

1245 
boﬁ
 
Á°
;

1247 i‡(!
	`CCCTL_ENAB
(
sih
))

1250 
sii
 = 
	`SI_INFO
(
sih
);

1251 
Á°
 = 
	`SI_FAST
(
sii
);

1252 i‡(!
Á°
) {

1253 
‹igidx
 = 
sii
->
curidx
;

1254 i‡((
cc
 = (
chù¸egs_t
 *)
	`si_£tc‹e
(
sih
, 
CC_CORE_ID
, 0)Ë=
NULL
)

1256 } i‡((
cc
 = (
chù¸egs_t
 *)
	`CCREGS_FAST
(
sii
)Ë=
NULL
)

1258 
	`ASSERT
(
cc
 !
NULL
);

1261 i‡(
sih
->
c¸ev
 >= 10)

1262 
	`SET_REG
(
sii
->
osh
, &
cc
->
sy°em_˛k_˘l
, 
SYCC_CD_MASK
,

1263 (
ILP_DIV_1MHZ
 << 
SYCC_CD_SHIFT
));

1265 
	`si_˛k˘l_£tdñay
(
sii
, (*)(
uöçå
)
cc
);

1267 i‡(!
Á°
)

1268 
	`si_£tc‹eidx
(
sih
, 
‹igidx
);

1269 
	}
}

1274 
	$si_gpio£tc‹e
(
si_t
 *
sih
)

1276  (
	`si_£tc‹eidx
(
sih
, 
SI_CC_IDX
));

1277 
	}
}

1285 
uöt32


1286 
	$si_gpioc⁄åﬁ
(
si_t
 *
sih
, 
uöt32
 
mask
, uöt32 
vÆ
, 
uöt8
 
¥i‹ôy
)

1288 
uöt
 
ªgoff
;

1290 
ªgoff
 = 0;

1295 i‡((
¥i‹ôy
 !
GPIO_HI_PRIORITY
) &&

1296 (
	`BUSTYPE
(
sih
->
bu°y≥
Ë=
SI_BUS
Ë&& (
vÆ
 || 
mask
)) {

1297 
mask
 = 
¥i‹ôy
 ? (
si_gpi‹e£rv©i⁄
 & mask) :

1298 ((
si_gpi‹e£rv©i⁄
 | 
mask
) & ~(si_gpioreservation));

1299 
vÆ
 &
mask
;

1302 
ªgoff
 = 
	`OFFSETOF
(
chù¸egs_t
, 
gpioc⁄åﬁ
);

1303  (
	`si_c‹îeg
(
sih
, 
SI_CC_IDX
, 
ªgoff
, 
mask
, 
vÆ
));

1304 
	}
}

1307 
uöt32


1308 
	$si_gpioouãn
(
si_t
 *
sih
, 
uöt32
 
mask
, uöt32 
vÆ
, 
uöt8
 
¥i‹ôy
)

1310 
uöt
 
ªgoff
;

1312 
ªgoff
 = 0;

1317 i‡((
¥i‹ôy
 !
GPIO_HI_PRIORITY
) &&

1318 (
	`BUSTYPE
(
sih
->
bu°y≥
Ë=
SI_BUS
Ë&& (
vÆ
 || 
mask
)) {

1319 
mask
 = 
¥i‹ôy
 ? (
si_gpi‹e£rv©i⁄
 & mask) :

1320 ((
si_gpi‹e£rv©i⁄
 | 
mask
) & ~(si_gpioreservation));

1321 
vÆ
 &
mask
;

1324 
ªgoff
 = 
	`OFFSETOF
(
chù¸egs_t
, 
gpioouãn
);

1325  (
	`si_c‹îeg
(
sih
, 
SI_CC_IDX
, 
ªgoff
, 
mask
, 
vÆ
));

1326 
	}
}

1329 
uöt32


1330 
	$si_gpioout
(
si_t
 *
sih
, 
uöt32
 
mask
, uöt32 
vÆ
, 
uöt8
 
¥i‹ôy
)

1332 
uöt
 
ªgoff
;

1334 
ªgoff
 = 0;

1339 i‡((
¥i‹ôy
 !
GPIO_HI_PRIORITY
) &&

1340 (
	`BUSTYPE
(
sih
->
bu°y≥
Ë=
SI_BUS
Ë&& (
vÆ
 || 
mask
)) {

1341 
mask
 = 
¥i‹ôy
 ? (
si_gpi‹e£rv©i⁄
 & mask) :

1342 ((
si_gpi‹e£rv©i⁄
 | 
mask
) & ~(si_gpioreservation));

1343 
vÆ
 &
mask
;

1346 
ªgoff
 = 
	`OFFSETOF
(
chù¸egs_t
, 
gpioout
);

1347  (
	`si_c‹îeg
(
sih
, 
SI_CC_IDX
, 
ªgoff
, 
mask
, 
vÆ
));

1348 
	}
}

1351 
uöt32


1352 
	$si_gpi‹e£rve
(
si_t
 *
sih
, 
uöt32
 
gpio_bômask
, 
uöt8
 
¥i‹ôy
)

1357 i‡((
	`BUSTYPE
(
sih
->
bu°y≥
Ë!
SI_BUS
Ë|| (!
¥i‹ôy
)) {

1358 
	`ASSERT
((
	`BUSTYPE
(
sih
->
bu°y≥
Ë=
SI_BUS
Ë&& (
¥i‹ôy
));

1362 i‡((!
gpio_bômask
) || ((gpio_bitmask) & (gpio_bitmask - 1))) {

1363 
	`ASSERT
((
gpio_bômask
) && !((gpio_bitmask) & (gpio_bitmask - 1)));

1368 i‡(
si_gpi‹e£rv©i⁄
 & 
gpio_bômask
)

1371 
si_gpi‹e£rv©i⁄
 |
gpio_bômask
;

1373  
si_gpi‹e£rv©i⁄
;

1374 
	}
}

1382 
uöt32


1383 
	$si_gpi‹ñó£
(
si_t
 *
sih
, 
uöt32
 
gpio_bômask
, 
uöt8
 
¥i‹ôy
)

1388 i‡((
	`BUSTYPE
(
sih
->
bu°y≥
Ë!
SI_BUS
Ë|| (!
¥i‹ôy
)) {

1389 
	`ASSERT
((
	`BUSTYPE
(
sih
->
bu°y≥
Ë=
SI_BUS
Ë&& (
¥i‹ôy
));

1393 i‡((!
gpio_bômask
) || ((gpio_bitmask) & (gpio_bitmask - 1))) {

1394 
	`ASSERT
((
gpio_bômask
) && !((gpio_bitmask) & (gpio_bitmask - 1)));

1399 i‡(!(
si_gpi‹e£rv©i⁄
 & 
gpio_bômask
))

1403 
si_gpi‹e£rv©i⁄
 &~
gpio_bômask
;

1405  
si_gpi‹e£rv©i⁄
;

1406 
	}
}

1409 
uöt32


1410 
	$si_gpioö
(
si_t
 *
sih
)

1412 
uöt
 
ªgoff
;

1414 
ªgoff
 = 
	`OFFSETOF
(
chù¸egs_t
, 
gpioö
);

1415  (
	`si_c‹îeg
(
sih
, 
SI_CC_IDX
, 
ªgoff
, 0, 0));

1416 
	}
}

1419 
uöt32


1420 
	$si_gpioöçﬁ¨ôy
(
si_t
 *
sih
, 
uöt32
 
mask
, uöt32 
vÆ
, 
uöt8
 
¥i‹ôy
)

1422 
uöt
 
ªgoff
;

1425 i‡((
	`BUSTYPE
(
sih
->
bu°y≥
Ë=
SI_BUS
Ë&& (
vÆ
 || 
mask
)) {

1426 
mask
 = 
¥i‹ôy
 ? (
si_gpi‹e£rv©i⁄
 & mask) :

1427 ((
si_gpi‹e£rv©i⁄
 | 
mask
) & ~(si_gpioreservation));

1428 
vÆ
 &
mask
;

1431 
ªgoff
 = 
	`OFFSETOF
(
chù¸egs_t
, 
gpioöçﬁ¨ôy
);

1432  (
	`si_c‹îeg
(
sih
, 
SI_CC_IDX
, 
ªgoff
, 
mask
, 
vÆ
));

1433 
	}
}

1436 
uöt32


1437 
	$si_gpioötmask
(
si_t
 *
sih
, 
uöt32
 
mask
, uöt32 
vÆ
, 
uöt8
 
¥i‹ôy
)

1439 
uöt
 
ªgoff
;

1442 i‡((
	`BUSTYPE
(
sih
->
bu°y≥
Ë=
SI_BUS
Ë&& (
vÆ
 || 
mask
)) {

1443 
mask
 = 
¥i‹ôy
 ? (
si_gpi‹e£rv©i⁄
 & mask) :

1444 ((
si_gpi‹e£rv©i⁄
 | 
mask
) & ~(si_gpioreservation));

1445 
vÆ
 &
mask
;

1448 
ªgoff
 = 
	`OFFSETOF
(
chù¸egs_t
, 
gpioötmask
);

1449  (
	`si_c‹îeg
(
sih
, 
SI_CC_IDX
, 
ªgoff
, 
mask
, 
vÆ
));

1450 
	}
}

1453 
uöt32


1454 
	$si_gpiﬁed
(
si_t
 *
sih
, 
uöt32
 
mask
, uöt32 
vÆ
)

1456 i‡(
sih
->
c¸ev
 < 16)

1460  (
	`si_c‹îeg
(
sih
, 
SI_CC_IDX
, 
	`OFFSETOF
(
chù¸egs_t
, 
gpiŸimîoutmask
), 
mask
, 
vÆ
));

1461 
	}
}

1464 
uöt32


1465 
	$si_gpiŸimîvÆ
(
si_t
 *
sih
, 
uöt32
 
mask
, uöt32 
gpiŸimîvÆ
)

1467 i‡(
sih
->
c¸ev
 < 16)

1470  (
	`si_c‹îeg
(
sih
, 
SI_CC_IDX
,

1471 
	`OFFSETOF
(
chù¸egs_t
, 
gpiŸimîvÆ
), 
mask
, gpiotimerval));

1472 
	}
}

1474 
uöt32


1475 
	$si_gpi›uŒ
(
si_t
 *
sih
, 
boﬁ
 
updown
, 
uöt32
 
mask
, uöt32 
vÆ
)

1477 
uöt
 
offs
;

1479 i‡(
sih
->
c¸ev
 < 20)

1482 
offs
 = (
updown
 ? 
	`OFFSETOF
(
chù¸egs_t
, 
gpi›uŒdown
Ë: OFFSETOF(chù¸egs_t, 
gpi›uŒup
));

1483  (
	`si_c‹îeg
(
sih
, 
SI_CC_IDX
, 
offs
, 
mask
, 
vÆ
));

1484 
	}
}

1486 
uöt32


1487 
	$si_gpi€vít
(
si_t
 *
sih
, 
uöt
 
ªgty≥
, 
uöt32
 
mask
, uöt32 
vÆ
)

1489 
uöt
 
offs
;

1491 i‡(
sih
->
c¸ev
 < 11)

1494 i‡(
ªgty≥
 =
GPIO_REGEVT
)

1495 
offs
 = 
	`OFFSETOF
(
chù¸egs_t
, 
gpi€vít
);

1496 i‡(
ªgty≥
 =
GPIO_REGEVT_INTMSK
)

1497 
offs
 = 
	`OFFSETOF
(
chù¸egs_t
, 
gpi€vítötmask
);

1498 i‡(
ªgty≥
 =
GPIO_REGEVT_INTPOL
)

1499 
offs
 = 
	`OFFSETOF
(
chù¸egs_t
, 
gpi€vítöçﬁ¨ôy
);

1503  (
	`si_c‹îeg
(
sih
, 
SI_CC_IDX
, 
offs
, 
mask
, 
vÆ
));

1504 
	}
}

1507 
	$si_gpio_h™dÀr_ªgi°î
(
si_t
 *
sih
, 
uöt32
 
evít
,

1508 
boﬁ
 
Àvñ
, 
gpio_h™dÀr_t
 
cb
, *
¨g
)

1510 
si_öfo_t
 *
sii
;

1511 
gpioh_ôem_t
 *
gi
;

1513 
	`ASSERT
(
evít
);

1514 
	`ASSERT
(
cb
 !
NULL
);

1516 
sii
 = 
	`SI_INFO
(
sih
);

1517 i‡(
sih
->
c¸ev
 < 11)

1518  
NULL
;

1520 i‡((
gi
 = 
	`MALLOC
(
sii
->
osh
, (
gpioh_ôem_t
))Ë=
NULL
)

1521  
NULL
;

1523 
	`bzîo
(
gi
, (
gpioh_ôem_t
));

1524 
gi
->
evít
 =Évent;

1525 
gi
->
h™dÀr
 = 
cb
;

1526 
gi
->
¨g
 =árg;

1527 
gi
->
Àvñ
 =Üevel;

1529 
gi
->
√xt
 = 
sii
->
gpioh_hód
;

1530 
sii
->
gpioh_hód
 = 
gi
;

1532  (*)(
gi
);

1533 
	}
}

1536 
	$si_gpio_h™dÀr_uƒegi°î
(
si_t
 *
sih
, *
gpioh
)

1538 
si_öfo_t
 *
sii
;

1539 
gpioh_ôem_t
 *
p
, *
n
;

1541 
sii
 = 
	`SI_INFO
(
sih
);

1542 i‡(
sih
->
c¸ev
 < 11)

1545 
	`ASSERT
(
sii
->
gpioh_hód
 !
NULL
);

1546 i‡((*)
sii
->
gpioh_hód
 =
gpioh
) {

1547 
sii
->
gpioh_hód
 = sii->gpioh_hód->
√xt
;

1548 
	`MFREE
(
sii
->
osh
, 
gpioh
, (
gpioh_ôem_t
));

1551 
p
 = 
sii
->
gpioh_hód
;

1552 
n
 = 
p
->
√xt
;

1553 
n
) {

1554 i‡((*)
n
 =
gpioh
) {

1555 
p
->
√xt
 = 
n
->next;

1556 
	`MFREE
(
sii
->
osh
, 
gpioh
, (
gpioh_ôem_t
));

1559 
p
 = 
n
;

1560 
n
 =Ç->
√xt
;

1564 
	`ASSERT
(0);

1565 
	}
}

1568 
	$si_gpio_h™dÀr_¥o˚ss
(
si_t
 *
sih
)

1570 
si_öfo_t
 *
sii
;

1571 
gpioh_ôem_t
 *
h
;

1572 
uöt32
 
Àvñ
 = 
	`si_gpioö
(
sih
);

1573 
uöt32
 
Àvñp
 = 
	`si_gpioöçﬁ¨ôy
(
sih
, 0, 0, 0);

1574 
uöt32
 
edge
 = 
	`si_gpi€vít
(
sih
, 
GPIO_REGEVT
, 0, 0);

1575 
uöt32
 
edgï
 = 
	`si_gpi€vít
(
sih
, 
GPIO_REGEVT_INTPOL
, 0, 0);

1577 
sii
 = 
	`SI_INFO
(
sih
);

1578 
h
 = 
sii
->
gpioh_hód
; h !
NULL
; h = h->
√xt
) {

1579 i‡(
h
->
h™dÀr
) {

1580 
uöt32
 
°©us
 = (
h
->
Àvñ
 ?Üevñ : 
edge
Ë& h->
evít
;

1581 
uöt32
 
pﬁ¨ôy
 = (
h
->
Àvñ
 ? 
Àvñp
 : 
edgï
Ë& h->
evít
;

1584 i‡(
°©us
 ^ 
pﬁ¨ôy
)

1585 
h
->
	`h™dÀr
(
°©us
, h->
¨g
);

1589 
	`si_gpi€vít
(
sih
, 
GPIO_REGEVT
, 
edge
,Édge);

1590 
	}
}

1592 
uöt32


1593 
	$si_gpio_öt_íabÀ
(
si_t
 *
sih
, 
boﬁ
 
íabÀ
)

1595 
uöt
 
offs
;

1597 i‡(
sih
->
c¸ev
 < 11)

1600 
offs
 = 
	`OFFSETOF
(
chù¸egs_t
, 
ötmask
);

1601  (
	`si_c‹îeg
(
sih
, 
SI_CC_IDX
, 
offs
, 
CI_GPIO
, (
íabÀ
 ? CI_GPIO : 0)));

1602 
	}
}

1606 
uöt


1607 
	$so¸am_b™ksize
(
si_öfo_t
 *
sii
, 
sbso¸amªgs_t
 *
ªgs
, 
uöt8
 
idx
, uöt8 
mem_ty≥
)

1609 
uöt
 
b™ksize
, 
b™köfo
;

1610 
uöt
 
b™kidx
 = 
idx
 | (
mem_ty≥
 << 
SOCRAM_BANKIDX_MEMTYPE_SHIFT
);

1612 
	`ASSERT
(
mem_ty≥
 <
SOCRAM_MEMTYPE_DEVRAM
);

1614 
	`W_REG
(
sii
->
osh
, &
ªgs
->
b™kidx
, bankidx);

1615 
b™köfo
 = 
	`R_REG
(
sii
->
osh
, &
ªgs
->bankinfo);

1616 
b™ksize
 = 
SOCRAM_BANKINFO_SZBASE
 * ((
b™köfo
 & 
SOCRAM_BANKINFO_SZMASK
) + 1);

1617  
b™ksize
;

1618 
	}
}

1621 
	$si_socdevøm
(
si_t
 *
sih
, 
boﬁ
 
£t
, 
uöt8
 *
íabÀ
, uöt8 *
¥Ÿe˘
, uöt8 *
ªm≠
)

1623 
si_öfo_t
 *
sii
;

1624 
uöt
 
‹igidx
;

1625 
uöt
 
öå_vÆ
 = 0;

1626 
sbso¸amªgs_t
 *
ªgs
;

1627 
boﬁ
 
wasup
;

1628 
uöt
 
c‹îev
;

1630 
sii
 = 
	`SI_INFO
(
sih
);

1633 
	`INTR_OFF
(
sii
, 
öå_vÆ
);

1634 
‹igidx
 = 
	`si_c‹eidx
(
sih
);

1636 i‡(!
£t
)

1637 *
íabÀ
 = *
¥Ÿe˘
 = *
ªm≠
 = 0;

1640 i‡(!(
ªgs
 = 
	`si_£tc‹e
(
sih
, 
SOCRAM_CORE_ID
, 0)))

1641 
d⁄e
;

1644 i‡(!(
wasup
 = 
	`si_isc‹eup
(
sih
)))

1645 
	`si_c‹e_ª£t
(
sih
, 0, 0);

1647 
c‹îev
 = 
	`si_c‹îev
(
sih
);

1648 i‡(
c‹îev
 >= 10) {

1649 
uöt32
 
extcöfo
;

1650 
uöt8
 
nb
;

1651 
uöt8
 
i
;

1652 
uöt32
 
b™kidx
, 
b™köfo
;

1654 
extcöfo
 = 
	`R_REG
(
sii
->
osh
, &
ªgs
->
exåac‹eöfo
);

1655 
nb
 = ((
extcöfo
 & 
SOCRAM_DEVRAMBANK_MASK
Ë>> 
SOCRAM_DEVRAMBANK_SHIFT
);

1656 
i
 = 0; i < 
nb
; i++) {

1657 
b™kidx
 = 
i
 | (
SOCRAM_MEMTYPE_DEVRAM
 << 
SOCRAM_BANKIDX_MEMTYPE_SHIFT
);

1658 
	`W_REG
(
sii
->
osh
, &
ªgs
->
b™kidx
, bankidx);

1659 
b™köfo
 = 
	`R_REG
(
sii
->
osh
, &
ªgs
->bankinfo);

1660 i‡(
£t
) {

1661 
b™köfo
 &~
SOCRAM_BANKINFO_DEVRAMSEL_MASK
;

1662 
b™köfo
 &~
SOCRAM_BANKINFO_DEVRAMPRO_MASK
;

1663 
b™köfo
 &~
SOCRAM_BANKINFO_DEVRAMREMAP_MASK
;

1664 i‡(*
íabÀ
) {

1665 
b™köfo
 |(1 << 
SOCRAM_BANKINFO_DEVRAMSEL_SHIFT
);

1666 i‡(*
¥Ÿe˘
)

1667 
b™köfo
 |(1 << 
SOCRAM_BANKINFO_DEVRAMPRO_SHIFT
);

1668 i‡((
c‹îev
 >16Ë&& *
ªm≠
)

1669 
b™köfo
 |=

1670 (1 << 
SOCRAM_BANKINFO_DEVRAMREMAP_SHIFT
);

1672 
	`W_REG
(
sii
->
osh
, &
ªgs
->
b™köfo
, bankinfo);

1674 i‡(
i
 == 0) {

1675 i‡(
b™köfo
 & 
SOCRAM_BANKINFO_DEVRAMSEL_MASK
) {

1676 *
íabÀ
 = 1;

1677 i‡(
b™köfo
 & 
SOCRAM_BANKINFO_DEVRAMPRO_MASK
)

1678 *
¥Ÿe˘
 = 1;

1679 i‡(
b™köfo
 & 
SOCRAM_BANKINFO_DEVRAMREMAP_MASK
)

1680 *
ªm≠
 = 1;

1687 i‡(!
wasup
)

1688 
	`si_c‹e_dißbÀ
(
sih
, 0);

1689 
	`si_£tc‹eidx
(
sih
, 
‹igidx
);

1691 
d⁄e
:

1692 
	`INTR_RESTORE
(
sii
, 
öå_vÆ
);

1693 
	}
}

1695 
boﬁ


1696 
	$si_socdevøm_ªm≠_i£nb
(
si_t
 *
sih
)

1698 
si_öfo_t
 *
sii
;

1699 
uöt
 
‹igidx
;

1700 
uöt
 
öå_vÆ
 = 0;

1701 
sbso¸amªgs_t
 *
ªgs
;

1702 
boﬁ
 
wasup
, 
ªm≠
 = 
FALSE
;

1703 
uöt
 
c‹îev
;

1704 
uöt32
 
extcöfo
;

1705 
uöt8
 
nb
;

1706 
uöt8
 
i
;

1707 
uöt32
 
b™kidx
, 
b™köfo
;

1709 
sii
 = 
	`SI_INFO
(
sih
);

1712 
	`INTR_OFF
(
sii
, 
öå_vÆ
);

1713 
‹igidx
 = 
	`si_c‹eidx
(
sih
);

1716 i‡(!(
ªgs
 = 
	`si_£tc‹e
(
sih
, 
SOCRAM_CORE_ID
, 0)))

1717 
d⁄e
;

1720 i‡(!(
wasup
 = 
	`si_isc‹eup
(
sih
)))

1721 
	`si_c‹e_ª£t
(
sih
, 0, 0);

1723 
c‹îev
 = 
	`si_c‹îev
(
sih
);

1724 i‡(
c‹îev
 >= 16) {

1725 
extcöfo
 = 
	`R_REG
(
sii
->
osh
, &
ªgs
->
exåac‹eöfo
);

1726 
nb
 = ((
extcöfo
 & 
SOCRAM_DEVRAMBANK_MASK
Ë>> 
SOCRAM_DEVRAMBANK_SHIFT
);

1727 
i
 = 0; i < 
nb
; i++) {

1728 
b™kidx
 = 
i
 | (
SOCRAM_MEMTYPE_DEVRAM
 << 
SOCRAM_BANKIDX_MEMTYPE_SHIFT
);

1729 
	`W_REG
(
sii
->
osh
, &
ªgs
->
b™kidx
, bankidx);

1730 
b™köfo
 = 
	`R_REG
(
sii
->
osh
, &
ªgs
->bankinfo);

1731 i‡(
b™köfo
 & 
SOCRAM_BANKINFO_DEVRAMREMAP_MASK
) {

1732 
ªm≠
 = 
TRUE
;

1739 i‡(!
wasup
)

1740 
	`si_c‹e_dißbÀ
(
sih
, 0);

1741 
	`si_£tc‹eidx
(
sih
, 
‹igidx
);

1743 
d⁄e
:

1744 
	`INTR_RESTORE
(
sii
, 
öå_vÆ
);

1745  
ªm≠
;

1746 
	}
}

1748 
boﬁ


1749 
	$si_socdevøm_pkg
(
si_t
 *
sih
)

1751 i‡(
	`si_socdevøm_size
(
sih
) > 0)

1752  
TRUE
;

1754  
FALSE
;

1755 
	}
}

1757 
uöt32


1758 
	$si_socdevøm_size
(
si_t
 *
sih
)

1760 
si_öfo_t
 *
sii
;

1761 
uöt
 
‹igidx
;

1762 
uöt
 
öå_vÆ
 = 0;

1763 
uöt32
 
memsize
 = 0;

1764 
sbso¸amªgs_t
 *
ªgs
;

1765 
boﬁ
 
wasup
;

1766 
uöt
 
c‹îev
;

1768 
sii
 = 
	`SI_INFO
(
sih
);

1771 
	`INTR_OFF
(
sii
, 
öå_vÆ
);

1772 
‹igidx
 = 
	`si_c‹eidx
(
sih
);

1775 i‡(!(
ªgs
 = 
	`si_£tc‹e
(
sih
, 
SOCRAM_CORE_ID
, 0)))

1776 
d⁄e
;

1779 i‡(!(
wasup
 = 
	`si_isc‹eup
(
sih
)))

1780 
	`si_c‹e_ª£t
(
sih
, 0, 0);

1782 
c‹îev
 = 
	`si_c‹îev
(
sih
);

1783 i‡(
c‹îev
 >= 10) {

1784 
uöt32
 
extcöfo
;

1785 
uöt8
 
nb
;

1786 
uöt8
 
i
;

1788 
extcöfo
 = 
	`R_REG
(
sii
->
osh
, &
ªgs
->
exåac‹eöfo
);

1789 
nb
 = (((
extcöfo
 & 
SOCRAM_DEVRAMBANK_MASK
Ë>> 
SOCRAM_DEVRAMBANK_SHIFT
));

1790 
i
 = 0; i < 
nb
; i++)

1791 
memsize
 +
	`so¸am_b™ksize
(
sii
, 
ªgs
, 
i
, 
SOCRAM_MEMTYPE_DEVRAM
);

1795 i‡(!
wasup
)

1796 
	`si_c‹e_dißbÀ
(
sih
, 0);

1797 
	`si_£tc‹eidx
(
sih
, 
‹igidx
);

1799 
d⁄e
:

1800 
	`INTR_RESTORE
(
sii
, 
öå_vÆ
);

1802  
memsize
;

1803 
	}
}

1805 
uöt32


1806 
	$si_socdevøm_ªm≠_size
(
si_t
 *
sih
)

1808 
si_öfo_t
 *
sii
;

1809 
uöt
 
‹igidx
;

1810 
uöt
 
öå_vÆ
 = 0;

1811 
uöt32
 
memsize
 = 0, 
b™ksz
;

1812 
sbso¸amªgs_t
 *
ªgs
;

1813 
boﬁ
 
wasup
;

1814 
uöt
 
c‹îev
;

1815 
uöt32
 
extcöfo
;

1816 
uöt8
 
nb
;

1817 
uöt8
 
i
;

1818 
uöt32
 
b™kidx
, 
b™köfo
;

1820 
sii
 = 
	`SI_INFO
(
sih
);

1823 
	`INTR_OFF
(
sii
, 
öå_vÆ
);

1824 
‹igidx
 = 
	`si_c‹eidx
(
sih
);

1827 i‡(!(
ªgs
 = 
	`si_£tc‹e
(
sih
, 
SOCRAM_CORE_ID
, 0)))

1828 
d⁄e
;

1831 i‡(!(
wasup
 = 
	`si_isc‹eup
(
sih
)))

1832 
	`si_c‹e_ª£t
(
sih
, 0, 0);

1834 
c‹îev
 = 
	`si_c‹îev
(
sih
);

1835 i‡(
c‹îev
 >= 16) {

1836 
extcöfo
 = 
	`R_REG
(
sii
->
osh
, &
ªgs
->
exåac‹eöfo
);

1837 
nb
 = (((
extcöfo
 & 
SOCRAM_DEVRAMBANK_MASK
Ë>> 
SOCRAM_DEVRAMBANK_SHIFT
));

1843 i‡((
c‹îev
 =16Ë&& (
nb
 == 5))

1844 
nb
 = 4;

1846 
i
 = 0; i < 
nb
; i++) {

1847 
b™kidx
 = 
i
 | (
SOCRAM_MEMTYPE_DEVRAM
 << 
SOCRAM_BANKIDX_MEMTYPE_SHIFT
);

1848 
	`W_REG
(
sii
->
osh
, &
ªgs
->
b™kidx
, bankidx);

1849 
b™köfo
 = 
	`R_REG
(
sii
->
osh
, &
ªgs
->bankinfo);

1850 i‡(
b™köfo
 & 
SOCRAM_BANKINFO_DEVRAMREMAP_MASK
) {

1851 
b™ksz
 = 
	`so¸am_b™ksize
(
sii
, 
ªgs
, 
i
, 
SOCRAM_MEMTYPE_DEVRAM
);

1852 
memsize
 +
b™ksz
;

1861 i‡(!
wasup
)

1862 
	`si_c‹e_dißbÀ
(
sih
, 0);

1863 
	`si_£tc‹eidx
(
sih
, 
‹igidx
);

1865 
d⁄e
:

1866 
	`INTR_RESTORE
(
sii
, 
öå_vÆ
);

1868  
memsize
;

1869 
	}
}

1872 
uöt32


1873 
	$si_so¸am_size
(
si_t
 *
sih
)

1875 
si_öfo_t
 *
sii
;

1876 
uöt
 
‹igidx
;

1877 
uöt
 
öå_vÆ
 = 0;

1879 
sbso¸amªgs_t
 *
ªgs
;

1880 
boﬁ
 
wasup
;

1881 
uöt
 
c‹îev
;

1882 
uöt32
 
c‹eöfo
;

1883 
uöt
 
memsize
 = 0;

1885 
sii
 = 
	`SI_INFO
(
sih
);

1888 
	`INTR_OFF
(
sii
, 
öå_vÆ
);

1889 
‹igidx
 = 
	`si_c‹eidx
(
sih
);

1892 i‡(!(
ªgs
 = 
	`si_£tc‹e
(
sih
, 
SOCRAM_CORE_ID
, 0)))

1893 
d⁄e
;

1896 i‡(!(
wasup
 = 
	`si_isc‹eup
(
sih
)))

1897 
	`si_c‹e_ª£t
(
sih
, 0, 0);

1898 
c‹îev
 = 
	`si_c‹îev
(
sih
);

1899 
c‹eöfo
 = 
	`R_REG
(
sii
->
osh
, &
ªgs
->coreinfo);

1902 i‡(
c‹îev
 == 0)

1903 
memsize
 = 1 << (16 + (
c‹eöfo
 & 
SRCI_MS0_MASK
));

1904 i‡(
c‹îev
 < 3) {

1905 
memsize
 = 1 << (
SR_BSZ_BASE
 + (
c‹eöfo
 & 
SRCI_SRBSZ_MASK
));

1906 
memsize
 *(
c‹eöfo
 & 
SRCI_SRNB_MASK
Ë>> 
SRCI_SRNB_SHIFT
;

1907 } i‡((
c‹îev
 <= 7) || (corerev == 12)) {

1908 
uöt
 
nb
 = (
c‹eöfo
 & 
SRCI_SRNB_MASK
Ë>> 
SRCI_SRNB_SHIFT
;

1909 
uöt
 
bsz
 = (
c‹eöfo
 & 
SRCI_SRBSZ_MASK
);

1910 
uöt
 
lss
 = (
c‹eöfo
 & 
SRCI_LSS_MASK
Ë>> 
SRCI_LSS_SHIFT
;

1911 i‡(
lss
 != 0)

1912 
nb
 --;

1913 
memsize
 = 
nb
 * (1 << (
bsz
 + 
SR_BSZ_BASE
));

1914 i‡(
lss
 != 0)

1915 
memsize
 +(1 << ((
lss
 - 1Ë+ 
SR_BSZ_BASE
));

1917 
uöt8
 
i
;

1918 
uöt
 
nb
 = (
c‹eöfo
 & 
SRCI_SRNB_MASK
Ë>> 
SRCI_SRNB_SHIFT
;

1919 
i
 = 0; i < 
nb
; i++)

1920 
memsize
 +
	`so¸am_b™ksize
(
sii
, 
ªgs
, 
i
, 
SOCRAM_MEMTYPE_RAM
);

1924 i‡(!
wasup
)

1925 
	`si_c‹e_dißbÀ
(
sih
, 0);

1926 
	`si_£tc‹eidx
(
sih
, 
‹igidx
);

1928 
d⁄e
:

1929 
	`INTR_RESTORE
(
sii
, 
öå_vÆ
);

1931  
memsize
;

1932 
	}
}

1936 
uöt32


1937 
	$si_tcm_size
(
si_t
 *
sih
)

1939 
si_öfo_t
 *
sii
;

1940 
uöt
 
‹igidx
;

1941 
uöt
 
öå_vÆ
 = 0;

1942 
uöt8
 *
ªgs
;

1943 
boﬁ
 
wasup
;

1944 
uöt32
 
c‹eˇp
;

1945 
uöt
 
memsize
 = 0;

1946 
uöt32
 
«b
 = 0;

1947 
uöt32
 
nbb
 = 0;

1948 
uöt32
 
tŸb
 = 0;

1949 
uöt32
 
bxöfo
 = 0;

1950 
uöt32
 
idx
 = 0;

1951 
uöt32
 *
¨m_ˇp_ªg
;

1952 
uöt32
 *
¨m_bidx
;

1953 
uöt32
 *
¨m_böfo
;

1955 
sii
 = 
	`SI_INFO
(
sih
);

1958 
	`INTR_OFF
(
sii
, 
öå_vÆ
);

1959 
‹igidx
 = 
	`si_c‹eidx
(
sih
);

1962 i‡(!(
ªgs
 = 
	`si_£tc‹e
(
sih
, 
ARMCR4_CORE_ID
, 0)))

1963 
d⁄e
;

1968 i‡(!(
wasup
 = 
	`si_isc‹eup
(
sih
)))

1969 
	`si_c‹e_ª£t
(
sih
, 
SICF_CPUHALT
, SICF_CPUHALT);

1971 
¨m_ˇp_ªg
 = (
uöt32
 *)(
ªgs
 + 
SI_CR4_CAP
);

1972 
c‹eˇp
 = 
	`R_REG
(
sii
->
osh
, 
¨m_ˇp_ªg
);

1974 
«b
 = (
c‹eˇp
 & 
ARMCR4_TCBANB_MASK
Ë>> 
ARMCR4_TCBANB_SHIFT
;

1975 
nbb
 = (
c‹eˇp
 & 
ARMCR4_TCBBNB_MASK
Ë>> 
ARMCR4_TCBBNB_SHIFT
;

1976 
tŸb
 = 
«b
 + 
nbb
;

1978 
¨m_bidx
 = (
uöt32
 *)(
ªgs
 + 
SI_CR4_BANKIDX
);

1979 
¨m_böfo
 = (
uöt32
 *)(
ªgs
 + 
SI_CR4_BANKINFO
);

1980 
idx
 = 0; idx < 
tŸb
; idx++) {

1981 
	`W_REG
(
sii
->
osh
, 
¨m_bidx
, 
idx
);

1983 
bxöfo
 = 
	`R_REG
(
sii
->
osh
, 
¨m_böfo
);

1984 
memsize
 +((
bxöfo
 & 
ARMCR4_BSZ_MASK
Ë+ 1Ë* 
ARMCR4_BSZ_MULT
;

1988 i‡(!
wasup
)

1989 
	`si_c‹e_dißbÀ
(
sih
, 0);

1990 
	`si_£tc‹eidx
(
sih
, 
‹igidx
);

1992 
d⁄e
:

1993 
	`INTR_RESTORE
(
sii
, 
öå_vÆ
);

1995  
memsize
;

1996 
	}
}

1998 
uöt32


1999 
	$si_so¸am_§mem_size
(
si_t
 *
sih
)

2001 
si_öfo_t
 *
sii
;

2002 
uöt
 
‹igidx
;

2003 
uöt
 
öå_vÆ
 = 0;

2005 
sbso¸amªgs_t
 *
ªgs
;

2006 
boﬁ
 
wasup
;

2007 
uöt
 
c‹îev
;

2008 
uöt32
 
c‹eöfo
;

2009 
uöt
 
memsize
 = 0;

2011 i‡((
	`CHIPID
(
sih
->
chù
Ë=
BCM4334_CHIP_ID
Ë&& (
	`CHIPREV
(sih->
chùªv
) < 2)) {

2015 
sii
 = 
	`SI_INFO
(
sih
);

2018 
	`INTR_OFF
(
sii
, 
öå_vÆ
);

2019 
‹igidx
 = 
	`si_c‹eidx
(
sih
);

2022 i‡(!(
ªgs
 = 
	`si_£tc‹e
(
sih
, 
SOCRAM_CORE_ID
, 0)))

2023 
d⁄e
;

2026 i‡(!(
wasup
 = 
	`si_isc‹eup
(
sih
)))

2027 
	`si_c‹e_ª£t
(
sih
, 0, 0);

2028 
c‹îev
 = 
	`si_c‹îev
(
sih
);

2029 
c‹eöfo
 = 
	`R_REG
(
sii
->
osh
, &
ªgs
->coreinfo);

2032 i‡(
c‹îev
 >= 16) {

2033 
uöt8
 
i
;

2034 
uöt
 
nb
 = (
c‹eöfo
 & 
SRCI_SRNB_MASK
Ë>> 
SRCI_SRNB_SHIFT
;

2035 
i
 = 0; i < 
nb
; i++) {

2036 
	`W_REG
(
sii
->
osh
, &
ªgs
->
b™kidx
, 
i
);

2037 i‡(
	`R_REG
(
sii
->
osh
, &
ªgs
->
b™köfo
Ë& 
SOCRAM_BANKINFO_RETNTRAM_MASK
)

2038 
memsize
 +
	`so¸am_b™ksize
(
sii
, 
ªgs
, 
i
, 
SOCRAM_MEMTYPE_RAM
);

2043 i‡(!
wasup
)

2044 
	`si_c‹e_dißbÀ
(
sih
, 0);

2045 
	`si_£tc‹eidx
(
sih
, 
‹igidx
);

2047 
d⁄e
:

2048 
	`INTR_RESTORE
(
sii
, 
öå_vÆ
);

2050  
memsize
;

2051 
	}
}

2055 
	$si_btcgpiow¨
(
si_t
 *
sih
)

2057 
si_öfo_t
 *
sii
;

2058 
uöt
 
‹igidx
;

2059 
uöt
 
öå_vÆ
 = 0;

2060 
chù¸egs_t
 *
cc
;

2062 
sii
 = 
	`SI_INFO
(
sih
);

2067 i‡(!(
sih
->
ccˇps
 & 
CC_CAP_UARTGPIO
))

2071 
	`INTR_OFF
(
sii
, 
öå_vÆ
);

2073 
‹igidx
 = 
	`si_c‹eidx
(
sih
);

2075 
cc
 = (
chù¸egs_t
 *)
	`si_£tc‹e
(
sih
, 
CC_CORE_ID
, 0);

2076 
	`ASSERT
(
cc
 !
NULL
);

2078 
	`W_REG
(
sii
->
osh
, &
cc
->
u¨t0m¸
, 
	`R_REG
(sii->osh, &cc->uart0mcr) | 0x04);

2081 
	`si_£tc‹eidx
(
sih
, 
‹igidx
);

2083 
	`INTR_RESTORE
(
sii
, 
öå_vÆ
);

2084 
	}
}

2087 
	$si_chùc⁄ål_btshd0_4331
(
si_t
 *
sih
, 
boﬁ
 
⁄
)

2089 
si_öfo_t
 *
sii
;

2090 
chù¸egs_t
 *
cc
;

2091 
uöt
 
‹igidx
;

2092 
uöt32
 
vÆ
;

2093 
uöt
 
öå_vÆ
 = 0;

2095 
sii
 = 
	`SI_INFO
(
sih
);

2097 
	`INTR_OFF
(
sii
, 
öå_vÆ
);

2099 
‹igidx
 = 
	`si_c‹eidx
(
sih
);

2101 
cc
 = (
chù¸egs_t
 *)
	`si_£tc‹e
(
sih
, 
CC_CORE_ID
, 0);

2103 
vÆ
 = 
	`R_REG
(
sii
->
osh
, &
cc
->
chùc⁄åﬁ
);

2106 i‡(
⁄
) {

2108 
vÆ
 |(
CCTRL4331_BT_SHD0_ON_GPIO4
);

2109 
	`W_REG
(
sii
->
osh
, &
cc
->
chùc⁄åﬁ
, 
vÆ
);

2111 
vÆ
 &~(
CCTRL4331_BT_SHD0_ON_GPIO4
);

2112 
	`W_REG
(
sii
->
osh
, &
cc
->
chùc⁄åﬁ
, 
vÆ
);

2116 
	`si_£tc‹eidx
(
sih
, 
‹igidx
);

2118 
	`INTR_RESTORE
(
sii
, 
öå_vÆ
);

2119 
	}
}

2122 
	$si_chùc⁄ål_ª°‹e
(
si_t
 *
sih
, 
uöt32
 
vÆ
)

2124 
si_öfo_t
 *
sii
;

2125 
chù¸egs_t
 *
cc
;

2126 
uöt
 
‹igidx
;

2128 
sii
 = 
	`SI_INFO
(
sih
);

2129 
‹igidx
 = 
	`si_c‹eidx
(
sih
);

2130 
cc
 = (
chù¸egs_t
 *)
	`si_£tc‹e
(
sih
, 
CC_CORE_ID
, 0);

2131 
	`W_REG
(
sii
->
osh
, &
cc
->
chùc⁄åﬁ
, 
vÆ
);

2132 
	`si_£tc‹eidx
(
sih
, 
‹igidx
);

2133 
	}
}

2135 
uöt32


2136 
	$si_chùc⁄ål_ªad
(
si_t
 *
sih
)

2138 
si_öfo_t
 *
sii
;

2139 
chù¸egs_t
 *
cc
;

2140 
uöt
 
‹igidx
;

2141 
uöt32
 
vÆ
;

2143 
sii
 = 
	`SI_INFO
(
sih
);

2144 
‹igidx
 = 
	`si_c‹eidx
(
sih
);

2145 
cc
 = (
chù¸egs_t
 *)
	`si_£tc‹e
(
sih
, 
CC_CORE_ID
, 0);

2146 
vÆ
 = 
	`R_REG
(
sii
->
osh
, &
cc
->
chùc⁄åﬁ
);

2147 
	`si_£tc‹eidx
(
sih
, 
‹igidx
);

2148  
vÆ
;

2149 
	}
}

2152 
	$si_chùc⁄ål_ïa4331
(
si_t
 *
sih
, 
boﬁ
 
⁄
)

2154 
si_öfo_t
 *
sii
;

2155 
chù¸egs_t
 *
cc
;

2156 
uöt
 
‹igidx
;

2157 
uöt32
 
vÆ
;

2159 
sii
 = 
	`SI_INFO
(
sih
);

2160 
‹igidx
 = 
	`si_c‹eidx
(
sih
);

2162 
cc
 = (
chù¸egs_t
 *)
	`si_£tc‹e
(
sih
, 
CC_CORE_ID
, 0);

2164 
vÆ
 = 
	`R_REG
(
sii
->
osh
, &
cc
->
chùc⁄åﬁ
);

2166 i‡(
⁄
) {

2167 i‡(
sih
->
chùpkg
 == 9 || sih->chippkg == 0xb) {

2168 
vÆ
 |(
CCTRL4331_EXTPA_EN
 | 
CCTRL4331_EXTPA_ON_GPIO2_5
);

2170 
	`W_REG
(
sii
->
osh
, &
cc
->
chùc⁄åﬁ
, 
vÆ
);

2173 i‡(
sih
->
chùªv
 > 0) {

2174 
	`W_REG
(
sii
->
osh
, &
cc
->
chùc⁄åﬁ
, 
vÆ
 |

2175 (
CCTRL4331_EXTPA_EN
Ë| (
CCTRL4331_EXTPA_EN2
));

2177 
	`W_REG
(
sii
->
osh
, &
cc
->
chùc⁄åﬁ
, 
vÆ
 | (
CCTRL4331_EXTPA_EN
));

2181 
vÆ
 &~(
CCTRL4331_EXTPA_EN
 | 
CCTRL4331_EXTPA_EN2
 | 
CCTRL4331_EXTPA_ON_GPIO2_5
);

2182 
	`W_REG
(
sii
->
osh
, &
cc
->
chùc⁄åﬁ
, 
vÆ
);

2185 
	`si_£tc‹eidx
(
sih
, 
‹igidx
);

2186 
	}
}

2190 
	$si_chùc⁄ål_§om4360
(
si_t
 *
sih
, 
boﬁ
 
⁄
)

2192 
si_öfo_t
 *
sii
;

2193 
chù¸egs_t
 *
cc
;

2194 
uöt
 
‹igidx
;

2195 
uöt32
 
vÆ
;

2197 
sii
 = 
	`SI_INFO
(
sih
);

2198 
‹igidx
 = 
	`si_c‹eidx
(
sih
);

2200 
cc
 = (
chù¸egs_t
 *)
	`si_£tc‹e
(
sih
, 
CC_CORE_ID
, 0);

2202 
vÆ
 = 
	`R_REG
(
sii
->
osh
, &
cc
->
chùc⁄åﬁ
);

2204 i‡(
⁄
) {

2205 
vÆ
 &~(
CCTRL4360_SECI_MODE
 |

2206 
CCTRL4360_BTSWCTRL_MODE
 |

2207 
CCTRL4360_EXTRA_FEMCTRL_MODE
 |

2208 
CCTRL4360_BT_LGCY_MODE
 |

2209 
CCTRL4360_CORE2FEMCTRL4_ON
);

2211 
	`W_REG
(
sii
->
osh
, &
cc
->
chùc⁄åﬁ
, 
vÆ
);

2215 
	`si_£tc‹eidx
(
sih
, 
‹igidx
);

2216 
	}
}

2219 
	$si_chùc⁄ål_ïa4331_wowl
(
si_t
 *
sih
, 
boﬁ
 
íãr_wowl
)

2221 
si_öfo_t
 *
sii
;

2222 
chù¸egs_t
 *
cc
;

2223 
uöt
 
‹igidx
;

2224 
uöt32
 
vÆ
;

2225 
boﬁ
 
£l_chù
;

2227 
£l_chù
 = (
	`CHIPID
(
sih
->
chù
Ë=
BCM4331_CHIP_ID
) ||

2228 (
	`CHIPID
(
sih
->
chù
Ë=
BCM43431_CHIP_ID
);

2229 
£l_chù
 &((
sih
->
chùpkg
 == 9 || sih->chippkg == 0xb));

2231 i‡(!
£l_chù
)

2234 
sii
 = 
	`SI_INFO
(
sih
);

2235 
‹igidx
 = 
	`si_c‹eidx
(
sih
);

2237 
cc
 = (
chù¸egs_t
 *)
	`si_£tc‹e
(
sih
, 
CC_CORE_ID
, 0);

2239 
vÆ
 = 
	`R_REG
(
sii
->
osh
, &
cc
->
chùc⁄åﬁ
);

2241 i‡(
íãr_wowl
) {

2242 
vÆ
 |
CCTRL4331_EXTPA_EN
;

2243 
	`W_REG
(
sii
->
osh
, &
cc
->
chùc⁄åﬁ
, 
vÆ
);

2245 
vÆ
 |(
CCTRL4331_EXTPA_EN
 | 
CCTRL4331_EXTPA_ON_GPIO2_5
);

2246 
	`W_REG
(
sii
->
osh
, &
cc
->
chùc⁄åﬁ
, 
vÆ
);

2248 
	`si_£tc‹eidx
(
sih
, 
‹igidx
);

2249 
	}
}

2251 
uöt


2252 
	$si_∂l_ª£t
(
si_t
 *
sih
)

2254 
uöt
 
îr
 = 0;

2256  (
îr
);

2257 
	}
}

2261 
	$si_ïa_4313w¨
(
si_t
 *
sih
)

2263 
si_öfo_t
 *
sii
;

2264 
chù¸egs_t
 *
cc
;

2265 
uöt
 
‹igidx
;

2267 
sii
 = 
	`SI_INFO
(
sih
);

2268 
‹igidx
 = 
	`si_c‹eidx
(
sih
);

2270 
cc
 = (
chù¸egs_t
 *)
	`si_£tc‹e
(
sih
, 
CC_CORE_ID
, 0);

2273 
	`W_REG
(
sii
->
osh
, &
cc
->
gpioc⁄åﬁ
,

2274 
	`R_REG
(
sii
->
osh
, &
cc
->
gpioc⁄åﬁ
Ë| 
GPIO_CTRL_EPA_EN_MASK
);

2276 
	`si_£tc‹eidx
(
sih
, 
‹igidx
);

2277 
	}
}

2280 
	$si_˛k_pmu_hèvaû_£t
(
si_t
 *
sih
, 
boﬁ
 
£t_˛ór
)

2282 
	}
}

2286 
	$si_btcombo_p250_4313_w¨
(
si_t
 *
sih
)

2288 
si_öfo_t
 *
sii
;

2289 
chù¸egs_t
 *
cc
;

2290 
uöt
 
‹igidx
;

2292 
sii
 = 
	`SI_INFO
(
sih
);

2293 
‹igidx
 = 
	`si_c‹eidx
(
sih
);

2295 
cc
 = (
chù¸egs_t
 *)
	`si_£tc‹e
(
sih
, 
CC_CORE_ID
, 0);

2296 
	`W_REG
(
sii
->
osh
, &
cc
->
gpioc⁄åﬁ
,

2297 
	`R_REG
(
sii
->
osh
, &
cc
->
gpioc⁄åﬁ
Ë| 
GPIO_CTRL_5_6_EN_MASK
);

2299 
	`W_REG
(
sii
->
osh
, &
cc
->
gpioouãn
,

2300 
	`R_REG
(
sii
->
osh
, &
cc
->
gpioouãn
Ë| 
GPIO_CTRL_5_6_EN_MASK
);

2302 
	`si_£tc‹eidx
(
sih
, 
‹igidx
);

2303 
	}
}

2305 
	$si_btc_íabÀ_chùc⁄åﬁ
(
si_t
 *
sih
)

2307 
si_öfo_t
 *
sii
;

2308 
chù¸egs_t
 *
cc
;

2309 
uöt
 
‹igidx
;

2311 
sii
 = 
	`SI_INFO
(
sih
);

2312 
‹igidx
 = 
	`si_c‹eidx
(
sih
);

2314 
cc
 = (
chù¸egs_t
 *)
	`si_£tc‹e
(
sih
, 
CC_CORE_ID
, 0);

2317 
	`W_REG
(
sii
->
osh
, &
cc
->
chùc⁄åﬁ
,

2318 
	`R_REG
(
sii
->
osh
, &
cc
->
chùc⁄åﬁ
Ë| 
CC_BTCOEX_EN_MASK
);

2320 
	`si_£tc‹eidx
(
sih
, 
‹igidx
);

2321 
	}
}

2323 
	$si_btcombo_43228_w¨
(
si_t
 *
sih
)

2325 
si_öfo_t
 *
sii
;

2326 
chù¸egs_t
 *
cc
;

2327 
uöt
 
‹igidx
;

2329 
sii
 = 
	`SI_INFO
(
sih
);

2330 
‹igidx
 = 
	`si_c‹eidx
(
sih
);

2332 
cc
 = (
chù¸egs_t
 *)
	`si_£tc‹e
(
sih
, 
CC_CORE_ID
, 0);

2334 
	`W_REG
(
sii
->
osh
, &
cc
->
gpioouãn
, 
GPIO_CTRL_7_6_EN_MASK
);

2335 
	`W_REG
(
sii
->
osh
, &
cc
->
gpioout
, 
GPIO_OUT_7_EN_MASK
);

2337 
	`si_£tc‹eidx
(
sih
, 
‹igidx
);

2338 
	}
}

2341 
boﬁ


2342 
	$si_devi˚ªmoved
(
si_t
 *
sih
)

2344 
uöt32
 
w
;

2345 
si_öfo_t
 *
sii
;

2347 
sii
 = 
	`SI_INFO
(
sih
);

2349 
	`BUSTYPE
(
sih
->
bu°y≥
)) {

2350 
PCI_BUS
:

2351 
	`ASSERT
(
sii
->
osh
 !
NULL
);

2352 
w
 = 
	`OSL_PCI_READ_CONFIG
(
sii
->
osh
, 
PCI_CFG_VID
, (
uöt32
));

2353 i‡((
w
 & 0xFFFFË!
VENDOR_BROADCOM
)

2354  
TRUE
;

2357  
FALSE
;

2358 
	}
}

2360 
boﬁ


2361 
	$si_is_•rom_avaûabÀ
(
si_t
 *
sih
)

2363 i‡(
sih
->
c¸ev
 >= 31) {

2364 
si_öfo_t
 *
sii
;

2365 
uöt
 
‹igidx
;

2366 
chù¸egs_t
 *
cc
;

2367 
uöt32
 
§om˘æ
;

2369 i‡((
sih
->
ccˇps
 & 
CC_CAP_SROM
) == 0)

2370  
FALSE
;

2372 
sii
 = 
	`SI_INFO
(
sih
);

2373 
‹igidx
 = 
sii
->
curidx
;

2374 
cc
 = 
	`si_£tc‹eidx
(
sih
, 
SI_CC_IDX
);

2375 
§om˘æ
 = 
	`R_REG
(
sii
->
osh
, &
cc
->
§omc⁄åﬁ
);

2376 
	`si_£tc‹eidx
(
sih
, 
‹igidx
);

2377  (
§om˘æ
 & 
SRC_PRESENT
);

2380 
	`CHIPID
(
sih
->
chù
)) {

2381 
BCM4312_CHIP_ID
:

2382  ((
sih
->
chù°
 & 
CST4312_SPROM_OTP_SEL_MASK
Ë!
CST4312_OTP_SEL
);

2383 
BCM4325_CHIP_ID
:

2384  (
sih
->
chù°
 & 
CST4325_SPROM_SEL
) != 0;

2385 
BCM4322_CHIP_ID
: 
BCM43221_CHIP_ID
: 
BCM43231_CHIP_ID
:

2386 
BCM43222_CHIP_ID
: 
BCM43111_CHIP_ID
: 
BCM43112_CHIP_ID
:

2387 
BCM4342_CHIP_ID
: {

2388 
uöt32
 
•romŸp
;

2389 
•romŸp
 = (
sih
->
chù°
 & 
CST4322_SPROM_OTP_SEL_MASK
) >>

2390 
CST4322_SPROM_OTP_SEL_SHIFT
;

2391  (
•romŸp
 & 
CST4322_SPROM_PRESENT
) != 0;

2393 
BCM4329_CHIP_ID
:

2394  (
sih
->
chù°
 & 
CST4329_SPROM_SEL
) != 0;

2395 
BCM4315_CHIP_ID
:

2396  (
sih
->
chù°
 & 
CST4315_SPROM_SEL
) != 0;

2397 
BCM4319_CHIP_ID
:

2398  (
sih
->
chù°
 & 
CST4319_SPROM_SEL
) != 0;

2399 
BCM4336_CHIP_ID
:

2400 
BCM43362_CHIP_ID
:

2401  (
sih
->
chù°
 & 
CST4336_SPROM_PRESENT
) != 0;

2402 
BCM4330_CHIP_ID
:

2403  (
sih
->
chù°
 & 
CST4330_SPROM_PRESENT
) != 0;

2404 
BCM4313_CHIP_ID
:

2405  (
sih
->
chù°
 & 
CST4313_SPROM_PRESENT
) != 0;

2406 
BCM4331_CHIP_ID
:

2407 
BCM43431_CHIP_ID
:

2408  (
sih
->
chù°
 & 
CST4331_SPROM_PRESENT
) != 0;

2409 
BCM43239_CHIP_ID
:

2410  ((
sih
->
chù°
 & 
CST43239_SPROM_MASK
) &&

2411 !(
sih
->
chù°
 & 
CST43239_SFLASH_MASK
));

2412 
BCM4324_CHIP_ID
:

2413  ((
sih
->
chù°
 & 
CST4324_SPROM_MASK
) &&

2414 !(
sih
->
chù°
 & 
CST4324_SFLASH_MASK
));

2415 
BCM4335_CHIP_ID
:

2416  ((
sih
->
chù°
 & 
CST4335_SPROM_MASK
) &&

2417 !(
sih
->
chù°
 & 
CST4335_SFLASH_MASK
));

2418 
BCM43131_CHIP_ID
:

2419 
BCM43217_CHIP_ID
:

2420 
BCM43227_CHIP_ID
:

2421 
BCM43228_CHIP_ID
:

2422 
BCM43428_CHIP_ID
:

2423  (
sih
->
chù°
 & 
CST43228_OTP_PRESENT
) != CST43228_OTP_PRESENT;

2425  
TRUE
;

2427 
	}
}

2430 
uöt32
 
	$si_gë_§om˘l
(
si_t
 *
sih
)

2432 
chù¸egs_t
 *
cc
;

2433 
uöt
 
‹igidx
;

2434 
uöt32
 
§om˘l
;

2435 
o¶_t
 *
osh
;

2437 
osh
 = 
	`si_osh
(
sih
);

2438 
‹igidx
 = 
	`si_c‹eidx
(
sih
);

2439 
cc
 = 
	`si_£tc‹eidx
(
sih
, 
SI_CC_IDX
);

2440 
	`ASSERT
((
uöçå
)
cc
);

2442 
§om˘l
 = 
	`R_REG
(
osh
, &
cc
->
§omc⁄åﬁ
);

2445 
	`si_£tc‹eidx
(
sih
, 
‹igidx
);

2446  
§om˘l
;

2447 
	}
}

2449 
	$si_£t_§om˘l
(
si_t
 *
sih
, 
uöt32
 
vÆue
)

2451 
chù¸egs_t
 *
cc
;

2452 
uöt
 
‹igidx
;

2453 
o¶_t
 *
osh
;

2455 
osh
 = 
	`si_osh
(
sih
);

2456 
‹igidx
 = 
	`si_c‹eidx
(
sih
);

2457 
cc
 = 
	`si_£tc‹eidx
(
sih
, 
SI_CC_IDX
);

2458 
	`ASSERT
((
uöçå
)
cc
);

2461 i‡(
	`si_c‹îev
(
sih
) < 32)

2462  
BCME_UNSUPPORTED
;

2464 
	`W_REG
(
osh
, &
cc
->
§omc⁄åﬁ
, 
vÆue
);

2467 
	`si_£tc‹eidx
(
sih
, 
‹igidx
);

2468  
BCME_OK
;

2470 
	}
}

	@wl_android.c

27 
	~<löux/moduÀ.h
>

28 
	~<löux/√tdevi˚.h
>

30 
	~<wl_™droid.h
>

31 
	~<wldev_comm⁄.h
>

32 
	~<wlio˘l.h
>

33 
	~<bcmutûs.h
>

34 
	~<löux_o¶.h
>

35 
	~<dhd_dbg.h
>

36 
	~<dngl_°©s.h
>

37 
	~<dhd.h
>

38 
	~<bcmsdbus.h
>

39 #ifde‡
WL_CFG80211


40 
	~<wl_cfg80211.h
>

42 #i‡
deföed
(
CONFIG_WIFI_CONTROL_FUNC
)

43 
	~<löux/∂©f‹m_devi˚.h
>

44 #i‡(
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2, 6, 35))

45 
	~<löux/wœn_∂©.h
>

47 
	~<löux/wifi_tiwœn.h
>

51 #i‚de‡
WL_CFG80211


52 
	#htod32
(
i
Ë
	)
i

53 
	#htod16
(
i
Ë
	)
i

54 
	#dtoh32
(
i
Ë
	)
i

55 
	#dtoh16
(
i
Ë
	)
i

56 
	#htodch™•ec
(
i
Ë
	)
i

57 
	#dtohch™•ec
(
i
Ë
	)
i

61 
	#ANDROID_ERROR_LEVEL
 0x0001

	)

62 
	#ANDROID_TRACE_LEVEL
 0x0002

	)

63 
	#ANDROID_INFO_LEVEL
 0x0004

	)

65 
uöt
 
	g™droid_msg_Àvñ
 = 
ANDROID_ERROR_LEVEL
;

67 
	#ANDROID_ERROR
(
x
) \

69 i‡(
™droid_msg_Àvñ
 & 
ANDROID_ERROR_LEVEL
) { \

70 
	`¥ötk
(
KERN_ERR
 "ANDROID-ERROR) "); \

71 
¥ötk
 
x
; \

73 } 0)

	)

74 
	#ANDROID_TRACE
(
x
) \

76 i‡(
™droid_msg_Àvñ
 & 
ANDROID_TRACE_LEVEL
) { \

77 
	`¥ötk
(
KERN_ERR
 "ANDROID-TRACE) "); \

78 
¥ötk
 
x
; \

80 } 0)

	)

81 
	#ANDROID_INFO
(
x
) \

83 i‡(
™droid_msg_Àvñ
 & 
ANDROID_INFO_LEVEL
) { \

84 
	`¥ötk
(
KERN_ERR
 "ANDROID-INFO) "); \

85 
¥ötk
 
x
; \

87 } 0)

	)

94 
	#CMD_START
 "START"

	)

95 
	#CMD_STOP
 "STOP"

	)

96 
	#CMD_SCAN_ACTIVE
 "SCAN-ACTIVE"

	)

97 
	#CMD_SCAN_PASSIVE
 "SCAN-PASSIVE"

	)

98 
	#CMD_RSSI
 "RSSI"

	)

99 
	#CMD_LINKSPEED
 "LINKSPEED"

	)

100 
	#CMD_RXFILTER_START
 "RXFILTER-START"

	)

101 
	#CMD_RXFILTER_STOP
 "RXFILTER-STOP"

	)

102 
	#CMD_RXFILTER_ADD
 "RXFILTER-ADD"

	)

103 
	#CMD_RXFILTER_REMOVE
 "RXFILTER-REMOVE"

	)

104 
	#CMD_BTCOEXSCAN_START
 "BTCOEXSCAN-START"

	)

105 
	#CMD_BTCOEXSCAN_STOP
 "BTCOEXSCAN-STOP"

	)

106 
	#CMD_BTCOEXMODE
 "BTCOEXMODE"

	)

107 
	#CMD_SETSUSPENDOPT
 "SETSUSPENDOPT"

	)

108 
	#CMD_SETSUSPENDMODE
 "SETSUSPENDMODE"

	)

109 
	#CMD_P2P_DEV_ADDR
 "P2P_DEV_ADDR"

	)

110 
	#CMD_SETFWPATH
 "SETFWPATH"

	)

111 
	#CMD_SETBAND
 "SETBAND"

	)

112 
	#CMD_GETBAND
 "GETBAND"

	)

113 
	#CMD_COUNTRY
 "COUNTRY"

	)

114 
	#CMD_P2P_SET_NOA
 "P2P_SET_NOA"

	)

115 #i‡!
deföed
 
WL_ENABLE_P2P_IF


116 
	#CMD_P2P_GET_NOA
 "P2P_GET_NOA"

	)

118 
	#CMD_P2P_SD_OFFLOAD
 "P2P_SD_"

	)

119 
	#CMD_P2P_SET_PS
 "P2P_SET_PS"

	)

120 
	#CMD_SET_AP_WPS_P2P_IE
 "SET_AP_WPS_P2P_IE"

	)

121 
	#CMD_SETROAMMODE
 "SETROAMMODE"

	)

126 #ifde‡
PNO_SUPPORT


127 
	#CMD_PNOSSIDCLR_SET
 "PNOSSIDCLR"

	)

128 
	#CMD_PNOSETUP_SET
 "PNOSETUP "

	)

129 
	#CMD_PNOENABLE_SET
 "PNOFORCE"

	)

130 
	#CMD_PNODEBUG_SET
 "PNODEBUG"

	)

132 
	#PNO_TLV_PREFIX
 'S'

	)

133 
	#PNO_TLV_VERSION
 '1'

	)

134 
	#PNO_TLV_SUBVERSION
 '2'

	)

135 
	#PNO_TLV_RESERVED
 '0'

	)

136 
	#PNO_TLV_TYPE_SSID_IE
 'S'

	)

137 
	#PNO_TLV_TYPE_TIME
 'T'

	)

138 
	#PNO_TLV_FREQ_REPEAT
 'R'

	)

139 
	#PNO_TLV_FREQ_EXPO_MAX
 'M'

	)

141 
	scmd_év
 {

142 
	m¥efix
;

143 
	mvîsi⁄
;

144 
	msubvî
;

145 
	mª£rved
;

146 } 
	tcmd_év_t
;

149 
	#CMD_OKC_SET_PMK
 "SET_PMK"

	)

150 
	#CMD_OKC_ENABLE
 "OKC_ENABLE"

	)

153 
	s™droid_wifi_¥iv_cmd
 {

154 *
	mbuf
;

155 
	mu£d_Àn
;

156 
	mtŸÆ_Àn
;

157 } 
	t™droid_wifi_¥iv_cmd
;

162 
dhd_cu°omî_gpio_wœn_˘æ
(
⁄off
);

163 
dhd_dev_ª£t
(
√t_devi˚
 *
dev
, 
uöt8
 
Êag
);

164 
dhd_dev_öô_io˘l
(
√t_devi˚
 *
dev
);

165 #ifde‡
WL_CFG80211


166 
wl_cfg80211_gë_p2p_dev_addr
(
√t_devi˚
 *
√t
, 
ëhî_addr
 *
p2pdev_addr
);

167 
wl_cfg80211_£t_btc€x_dh˝
(
√t_devi˚
 *
dev
, *
comm™d
);

169 
	$wl_cfg80211_gë_p2p_dev_addr
(
√t_devi˚
 *
√t
, 
ëhî_addr
 *
p2pdev_addr
)

170 {  0; 
	}
}

171 
	$wl_cfg80211_£t_p2p_nﬂ
(
√t_devi˚
 *
√t
, * 
buf
, 
Àn
)

172 {  0; 
	}
}

173 
	$wl_cfg80211_gë_p2p_nﬂ
(
√t_devi˚
 *
√t
, * 
buf
, 
Àn
)

174 {  0; 
	}
}

175 
	$wl_cfg80211_£t_p2p_ps
(
√t_devi˚
 *
√t
, * 
buf
, 
Àn
)

176 {  0; 
	}
}

179 
dhd_os_check_wakñock
(*
dhdp
);

180 
dhd_os_check_if_up
(*
dhdp
);

181 *
bcmsdh_gë_drvd©a
();

182 #i‡
deföed
(
PROP_TXSTATUS
Ë&& !deföed(
PROP_TXSTATUS_VSDB
)

183 
dhd_wlfc_öô
(
dhd_pub_t
 *
dhd
);

184 
dhd_wlfc_deöô
(
dhd_pub_t
 *
dhd
);

187 
boﬁ
 
≠_fw_lﬂded
;

188 
iÁ˚_«me
[
IFNAMSIZ
];

190 
	#WIFI_TURNOFF_DELAY
 0

	)

199 
	gg_wifi_⁄
 = 
TRUE
;

204 
	$wl_™droid_gë_lök_•ìd
(
√t_devi˚
 *
√t
, *
comm™d
, 
tŸÆ_Àn
)

206 
lök_•ìd
;

207 
byãs_wrôãn
;

208 
îr‹
;

210 
îr‹
 = 
	`wldev_gë_lök_•ìd
(
√t
, &
lök_•ìd
);

211 i‡(
îr‹
)

215 
lök_•ìd
 =Üink_speed / 1000;

216 
byãs_wrôãn
 = 
	`¢¥ötf
(
comm™d
, 
tŸÆ_Àn
, "LökS≥ed %d", 
lök_•ìd
);

217 
	`ANDROID_INFO
(("%s: comm™dÑesu… i†%s\n", 
__FUNCTION__
, 
comm™d
));

218  
byãs_wrôãn
;

219 
	}
}

221 
	$wl_™droid_gë_rssi
(
√t_devi˚
 *
√t
, *
comm™d
, 
tŸÆ_Àn
)

223 
wlc_ssid_t
 
ssid
 = {0};

224 
rssi
;

225 
byãs_wrôãn
 = 0;

226 
îr‹
;

228 
îr‹
 = 
	`wldev_gë_rssi
(
√t
, &
rssi
);

229 i‡(
îr‹
)

231 #i‡
	`deföed
(
RSSIOFFSET
)

232 
rssi
 = 
	`wl_upd©e_rssi_off£t
(rssi);

235 
îr‹
 = 
	`wldev_gë_ssid
(
√t
, &
ssid
);

236 i‡(
îr‹
)

238 i‡((
ssid
.
SSID_Àn
 =0Ë|| (ssid.SSID_À¿> 
DOT11_MAX_SSID_LEN
)) {

239 
	`ANDROID_ERROR
(("%s: wldev_gë_ssid faûed\n", 
__FUNCTION__
));

241 
	`mem˝y
(
comm™d
, 
ssid
.
SSID
, ssid.
SSID_Àn
);

242 
byãs_wrôãn
 = 
ssid
.
SSID_Àn
;

244 
byãs_wrôãn
 +
	`¢¥ötf
(&
comm™d
[byãs_wrôãn], 
tŸÆ_Àn
, "Ñssò%d", 
rssi
);

245 
	`ANDROID_INFO
(("%s: comm™dÑesu… i†%†(%d)\n", 
__FUNCTION__
, 
comm™d
, 
byãs_wrôãn
));

246  
byãs_wrôãn
;

247 
	}
}

249 
	$wl_™droid_£t_su•íd›t
(
√t_devi˚
 *
dev
, *
comm™d
, 
tŸÆ_Àn
)

251 
su•íd_Êag
;

252 
ªt_now
;

253 
ªt
 = 0;

255 
su•íd_Êag
 = *(
comm™d
 + 
	`°æí
(
CMD_SETSUSPENDOPT
) + 1) - '0';

257 i‡(
su•íd_Êag
 != 0)

258 
su•íd_Êag
 = 1;

259 
ªt_now
 = 
	`√t_os_£t_su•íd_dißbÀ
(
dev
, 
su•íd_Êag
);

261 i‡(
ªt_now
 !
su•íd_Êag
) {

262 i‡(!(
ªt
 = 
	`√t_os_£t_su•íd
(
dev
, 
ªt_now
, 1)))

263 
	`ANDROID_INFO
(("%s: Suspend Flag %d -> %d\n",

264 
__FUNCTION__
, 
ªt_now
, 
su•íd_Êag
));

266 
	`ANDROID_ERROR
(("%s: faûed %d\n", 
__FUNCTION__
, 
ªt
));

268  
ªt
;

269 
	}
}

271 
	$wl_™droid_£t_su•ídmode
(
√t_devi˚
 *
dev
, *
comm™d
, 
tŸÆ_Àn
)

273 
ªt
 = 0;

275 #i‡!
	`deföed
(
CONFIG_HAS_EARLYSUSPEND
Ë|| !deföed(
DHD_USE_EARLYSUSPEND
)

276 
su•íd_Êag
;

278 
su•íd_Êag
 = *(
comm™d
 + 
	`°æí
(
CMD_SETSUSPENDMODE
) + 1) - '0';

280 i‡(
su•íd_Êag
 != 0)

281 
su•íd_Êag
 = 1;

283 i‡(!(
ªt
 = 
	`√t_os_£t_su•íd
(
dev
, 
su•íd_Êag
, 0)))

284 
	`ANDROID_INFO
(("%s: Su•íd Modê%d\n",
__FUNCTION__
,
su•íd_Êag
));

286 
	`ANDROID_ERROR
(("%s: faûed %d\n",
__FUNCTION__
,
ªt
));

288  
ªt
;

289 
	}
}

291 
	$wl_™droid_gë_b™d
(
√t_devi˚
 *
dev
, *
comm™d
, 
tŸÆ_Àn
)

293 
uöt
 
b™d
;

294 
byãs_wrôãn
;

295 
îr‹
;

297 
îr‹
 = 
	`wldev_gë_b™d
(
dev
, &
b™d
);

298 i‡(
îr‹
)

300 
byãs_wrôãn
 = 
	`¢¥ötf
(
comm™d
, 
tŸÆ_Àn
, "B™d %d", 
b™d
);

301  
byãs_wrôãn
;

302 
	}
}

304 #i‡
deföed
(
PNO_SUPPORT
Ë&& !deföed(
WL_SCHED_SCAN
)

305 
	$wl_™droid_£t_≤o_£tup
(
√t_devi˚
 *
dev
, *
comm™d
, 
tŸÆ_Àn
)

307 
wlc_ssid_t
 
ssids_loˇl
[
MAX_PFN_LIST_COUNT
];

308 
ªs
 = -1;

309 
nssid
 = 0;

310 
cmd_év_t
 *
cmd_év_ãmp
;

311 *
°r_±r
;

312 
év_size_À·
;

313 
≤o_time
 = 0;

314 
≤o_ª≥©
 = 0;

315 
≤o_‰eq_expo_max
 = 0;

317 #ifde‡
PNO_SET_DEBUG


318 
i
;

319 
≤o_ö_exam∂e
[] = {

338 
	`ANDROID_INFO
(("%s: comm™d=%s,Üí=%d\n", 
__FUNCTION__
, 
comm™d
, 
tŸÆ_Àn
));

340 i‡(
tŸÆ_Àn
 < (
	`°æí
(
CMD_PNOSETUP_SET
Ë+ (
cmd_év_t
))) {

341 
	`ANDROID_ERROR
(("%†¨gumít=%dÜes†mö size\n", 
__FUNCTION__
, 
tŸÆ_Àn
));

342 
exô_¥oc
;

346 #ifde‡
PNO_SET_DEBUG


347 
	`mem˝y
(
comm™d
, 
≤o_ö_exam∂e
, (pno_in_example));

348 
i
 = 0; i < (
≤o_ö_exam∂e
); i++)

349 
	`¥ötf
("%02X ", 
comm™d
[
i
]);

350 
	`¥ötf
("\n");

351 
tŸÆ_Àn
 = (
≤o_ö_exam∂e
);

354 
°r_±r
 = 
comm™d
 + 
	`°æí
(
CMD_PNOSETUP_SET
);

355 
év_size_À·
 = 
tŸÆ_Àn
 - 
	`°æí
(
CMD_PNOSETUP_SET
);

357 
cmd_év_ãmp
 = (
cmd_év_t
 *)
°r_±r
;

358 
	`mem£t
(
ssids_loˇl
, 0, (ssids_local));

360 i‡((
cmd_év_ãmp
->
¥efix
 =
PNO_TLV_PREFIX
) &&

361 (
cmd_év_ãmp
->
vîsi⁄
 =
PNO_TLV_VERSION
) &&

362 (
cmd_év_ãmp
->
subvî
 =
PNO_TLV_SUBVERSION
)) {

364 
°r_±r
 +(
cmd_év_t
);

365 
év_size_À·
 -(
cmd_év_t
);

367 i‡((
nssid
 = 
	`wl_iw_∑r£_ssid_li°_év
(&
°r_±r
, 
ssids_loˇl
,

368 
MAX_PFN_LIST_COUNT
, &
év_size_À·
)) <= 0) {

369 
	`ANDROID_ERROR
(("SSID i†nŸÖª£¡ed o∏c‹ru±edÑë=%d\n", 
nssid
));

370 
exô_¥oc
;

372 i‡((
°r_±r
[0] !
PNO_TLV_TYPE_TIME
Ë|| (
év_size_À·
 <= 1)) {

373 
	`ANDROID_ERROR
(("%s scan duration corrupted field size %d\n",

374 
__FUNCTION__
, 
év_size_À·
));

375 
exô_¥oc
;

377 
°r_±r
++;

378 
≤o_time
 = 
	`sim∂e_°πoul
(
°r_±r
, &str_ptr, 16);

379 
	`ANDROID_INFO
(("%s:Öno_time=%d\n", 
__FUNCTION__
, 
≤o_time
));

381 i‡(
°r_±r
[0] != 0) {

382 i‡((
°r_±r
[0] !
PNO_TLV_FREQ_REPEAT
)) {

383 
	`ANDROID_ERROR
(("%sÖnoÑepeat : corrupted field\n",

384 
__FUNCTION__
));

385 
exô_¥oc
;

387 
°r_±r
++;

388 
≤o_ª≥©
 = 
	`sim∂e_°πoul
(
°r_±r
, &str_ptr, 16);

389 
	`ANDROID_INFO
(("%†:gŸÖno_ª≥©=%d\n", 
__FUNCTION__
, 
≤o_ª≥©
));

390 i‡(
°r_±r
[0] !
PNO_TLV_FREQ_EXPO_MAX
) {

391 
	`ANDROID_ERROR
(("%s FREQ_EXPO_MAX corrupted field size\n",

392 
__FUNCTION__
));

393 
exô_¥oc
;

395 
°r_±r
++;

396 
≤o_‰eq_expo_max
 = 
	`sim∂e_°πoul
(
°r_±r
, &str_ptr, 16);

397 
	`ANDROID_INFO
(("%s:Öno_freq_expo_max=%d\n",

398 
__FUNCTION__
, 
≤o_‰eq_expo_max
));

402 
	`ANDROID_ERROR
(("%†gë wr⁄g TLV comm™d\n", 
__FUNCTION__
));

403 
exô_¥oc
;

406 
ªs
 = 
	`dhd_dev_≤o_£t
(
dev
, 
ssids_loˇl
, 
nssid
, 
≤o_time
, 
≤o_ª≥©
, 
≤o_‰eq_expo_max
);

408 
exô_¥oc
:

409  
ªs
;

410 
	}
}

413 
	$wl_™droid_gë_p2p_dev_addr
(
√t_devi˚
 *
ndev
, *
comm™d
, 
tŸÆ_Àn
)

415 
ªt
;

416 
byãs_wrôãn
 = 0;

418 
ªt
 = 
	`wl_cfg80211_gë_p2p_dev_addr
(
ndev
, (
ëhî_addr
*)
comm™d
);

419 i‡(
ªt
)

421 
byãs_wrôãn
 = (
ëhî_addr
);

422  
byãs_wrôãn
;

423 
	}
}

429 
	$wl_™droid_wifi_⁄
(
√t_devi˚
 *
dev
)

431 
ªt
 = 0;

432 
ªåy
 = 
POWERUP_MAX_RETRY
;

434 
	`¥ötk
("%†ö\n", 
__FUNCTION__
);

435 i‡(!
dev
) {

436 
	`ANDROID_ERROR
(("%s: dev i†nuŒ\n", 
__FUNCTION__
));

437  -
EINVAL
;

440 
	`dhd_√t_if_lock
(
dev
);

441 i‡(!
g_wifi_⁄
) {

443 
	`dhd_cu°omî_gpio_wœn_˘æ
(
WLAN_RESET_ON
);

444 
ªt
 = 
	`sdioh_°¨t
(
NULL
, 0);

445 i‡(
ªt
 == 0)

447 
	`ANDROID_ERROR
(("\nfailedÅoÖower up wifi chip,Ñetryágain (%dÜeft) **\n\n",

448 
ªåy
+1));

449 
	`dhd_cu°omî_gpio_wœn_˘æ
(
WLAN_RESET_OFF
);

450 } 
ªåy
-- >= 0);

451 i‡(
ªt
 != 0) {

452 
	`ANDROID_ERROR
(("\nfailedÅoÖower up wifi chip, maxÑetryÑeached **\n\n"));

453 
exô
;

455 
ªt
 = 
	`dhd_dev_ª£t
(
dev
, 
FALSE
);

456 
	`sdioh_°¨t
(
NULL
, 1);

457 i‡(!
ªt
) {

458 i‡(
	`dhd_dev_öô_io˘l
(
dev
) < 0)

459 
ªt
 = -
EFAULT
;

461 #i‡
	`deföed
(
PROP_TXSTATUS
Ë&& !deföed(
PROP_TXSTATUS_VSDB
)

462 
	`dhd_wlfc_öô
(
	`bcmsdh_gë_drvd©a
());

464 
g_wifi_⁄
 = 
TRUE
;

467 
exô
:

468 
	`dhd_√t_if_u∆ock
(
dev
);

470  
ªt
;

471 
	}
}

473 
	$wl_™droid_wifi_off
(
√t_devi˚
 *
dev
)

475 
ªt
 = 0;

477 
	`¥ötk
("%†ö\n", 
__FUNCTION__
);

478 i‡(!
dev
) {

479 
	`ANDROID_TRACE
(("%s: dev i†nuŒ\n", 
__FUNCTION__
));

480  -
EINVAL
;

483 
	`dhd_√t_if_lock
(
dev
);

484 i‡(
g_wifi_⁄
) {

485 #i‡
	`deföed
(
PROP_TXSTATUS
Ë&& !deföed(
PROP_TXSTATUS_VSDB
)

486 
	`dhd_wlfc_deöô
(
	`bcmsdh_gë_drvd©a
());

488 
ªt
 = 
	`dhd_dev_ª£t
(
dev
, 
TRUE
);

489 
	`sdioh_°›
(
NULL
);

490 
	`dhd_cu°omî_gpio_wœn_˘æ
(
WLAN_RESET_OFF
);

491 
g_wifi_⁄
 = 
FALSE
;

493 
	`dhd_√t_if_u∆ock
(
dev
);

495  
ªt
;

496 
	}
}

498 
	$wl_™droid_£t_fw∑th
(
√t_devi˚
 *
√t
, *
comm™d
, 
tŸÆ_Àn
)

500 i‡((
	`°æí
(
comm™d
Ë- såÀn(
CMD_SETFWPATH
)Ë> 
MOD_PARAM_PATHLEN
)

502 
	`bcm_°∫˝y_s
(
fw_∑th
, (fw_path),

503 
comm™d
 + 
	`°æí
(
CMD_SETFWPATH
Ë+ 1, 
MOD_PARAM_PATHLEN
 - 1);

504 i‡(
	`°r°r
(
fw_∑th
, "≠°a"Ë!
NULL
) {

505 
	`ANDROID_INFO
(("GOT APSTA FIRMWARE\n"));

506 
≠_fw_lﬂded
 = 
TRUE
;

508 
	`ANDROID_INFO
(("GOT STA FIRMWARE\n"));

509 
≠_fw_lﬂded
 = 
FALSE
;

512 
	}
}

515 
	$wl_™droid_£t_pmk
(
√t_devi˚
 *
dev
, *
comm™d
, 
tŸÆ_Àn
)

517 
uch¨
 
pmk
[33];

518 
îr‹
 = 0;

519 
smbuf
[
WLC_IOCTL_SMLEN
];

520 #ifde‡
OKC_DEBUG


521 
i
 = 0;

524 
	`bzîo
(
pmk
, (pmk));

525 
	`mem˝y
((*)
pmk
, 
comm™d
 + 
	`°æí
("SET_PMK "), 32);

526 
îr‹
 = 
	`wldev_iov¨_£tbuf
(
dev
, "okc_öfo_pmk", 
pmk
, 32, 
smbuf
, (smbuf), 
NULL
);

527 i‡(
îr‹
) {

528 
	`ANDROID_ERROR
(("FaûedÅÿ£àPMK f‹ OKC,Éº‹ = %d\n", 
îr‹
));

530 #ifde‡
OKC_DEBUG


531 
	`ANDROID_ERROR
(("PMK is "));

532 
i
 = 0; i < 32; i++)

533 
	`ANDROID_ERROR
(("%02X ", 
pmk
[
i
]));

535 
	`ANDROID_ERROR
(("\n"));

537  
îr‹
;

538 
	}
}

541 
	$wl_™droid_okc_íabÀ
(
√t_devi˚
 *
dev
, *
comm™d
, 
tŸÆ_Àn
)

543 
îr‹
 = 0;

544 
okc_íabÀ
 = 0;

546 
okc_íabÀ
 = 
comm™d
[
	`°æí
(
CMD_OKC_ENABLE
) + 1] - '0';

547 
îr‹
 = 
	`wldev_iov¨_£töt
(
dev
, "okc_íabÀ", 
okc_íabÀ
);

548 i‡(
îr‹
) {

549 
	`ANDROID_ERROR
(("FailedÅo %s OKC,Érror = %d\n",

550 
okc_íabÀ
 ? "íabÀ" : "dißbÀ", 
îr‹
));

553  
îr‹
;

554 
	}
}

556 
	$wl_™droid_£t_rﬂm_mode
(
√t_devi˚
 *
dev
, *
comm™d
, 
tŸÆ_Àn
)

558 
îr‹
 = 0;

559 
mode
 = 0;

561 i‡(
	`ssˇnf
(
comm™d
, "%*†%d", &
mode
) != 1) {

562 
	`ANDROID_ERROR
(("%s: FaûedÅÿgë P¨amëî\n", 
__FUNCTION__
));

566 
îr‹
 = 
	`wldev_iov¨_£töt
(
dev
, "rﬂm_off", 
mode
);

567 i‡(
îr‹
) {

568 
	`ANDROID_ERROR
(("%s: FailedÅo setÑoaming Mode %d,Érror = %d\n",

569 
__FUNCTION__
, 
mode
, 
îr‹
));

573 
	`ANDROID_ERROR
(("%s: succeededÅo setÑoaming Mode %d,Érror = %d\n",

574 
__FUNCTION__
, 
mode
, 
îr‹
));

576 
	}
}

578 
	$wl_™droid_¥iv_cmd
(
√t_devi˚
 *
√t
, 
i‰eq
 *
i‰
, 
cmd
)

580 
	#PRIVATE_COMMAND_MAX_LEN
 8192

	)

581 
ªt
 = 0;

582 *
comm™d
 = 
NULL
;

583 
byãs_wrôãn
 = 0;

584 
™droid_wifi_¥iv_cmd
 
¥iv_cmd
;

586 
	`√t_os_wake_lock
(
√t
);

588 i‡(!
i‰
->
i‰_d©a
) {

589 
ªt
 = -
EINVAL
;

590 
exô
;

592 i‡(
	`c›y_‰om_u£r
(&
¥iv_cmd
, 
i‰
->
i‰_d©a
, (
™droid_wifi_¥iv_cmd
))) {

593 
ªt
 = -
EFAULT
;

594 
exô
;

596 i‡(
¥iv_cmd
.
tŸÆ_Àn
 > 
PRIVATE_COMMAND_MAX_LEN
)

598 
	`ANDROID_ERROR
(("%s:Åoÿl⁄gÖrüvã comm™d\n", 
__FUNCTION__
));

599 
ªt
 = -
EINVAL
;

601 
comm™d
 = 
	`kmÆloc
(
¥iv_cmd
.
tŸÆ_Àn
, 
GFP_KERNEL
);

602 i‡(!
comm™d
)

604 
	`ANDROID_ERROR
(("%s: faûedÅÿÆloˇã mem‹y\n", 
__FUNCTION__
));

605 
ªt
 = -
ENOMEM
;

606 
exô
;

608 i‡(
	`c›y_‰om_u£r
(
comm™d
, 
¥iv_cmd
.
buf
,Öriv_cmd.
tŸÆ_Àn
)) {

609 
ªt
 = -
EFAULT
;

610 
exô
;

613 
	`ANDROID_INFO
(("%s: AndroidÖriv©êcmd \"%s\" o¿%s\n", 
__FUNCTION__
, 
comm™d
, 
i‰
->
i‰_«me
));

615 i‡(
	`°∫icmp
(
comm™d
, 
CMD_START
, 
	`°æí
(CMD_START)) == 0) {

616 
	`ANDROID_INFO
(("%s, Re˚ivedÑeguœ∏START comm™d\n", 
__FUNCTION__
));

617 
byãs_wrôãn
 = 
	`wl_™droid_wifi_⁄
(
√t
);

619 i‡(
	`°∫icmp
(
comm™d
, 
CMD_SETFWPATH
, 
	`°æí
(CMD_SETFWPATH)) == 0) {

620 
byãs_wrôãn
 = 
	`wl_™droid_£t_fw∑th
(
√t
, 
comm™d
, 
¥iv_cmd
.
tŸÆ_Àn
);

623 i‡(!
g_wifi_⁄
) {

624 
	`ANDROID_ERROR
(("%s: IgnoreÖrivate cmd \"%s\" - iface %s is down\n",

625 
__FUNCTION__
, 
comm™d
, 
i‰
->
i‰_«me
));

626 
ªt
 = 0;

627 
exô
;

630 i‡(
	`°∫icmp
(
comm™d
, 
CMD_STOP
, 
	`°æí
(CMD_STOP)) == 0) {

631 
byãs_wrôãn
 = 
	`wl_™droid_wifi_off
(
√t
);

633 i‡(
	`°∫icmp
(
comm™d
, 
CMD_SCAN_ACTIVE
, 
	`°æí
(CMD_SCAN_ACTIVE)) == 0) {

636 i‡(
	`°∫icmp
(
comm™d
, 
CMD_SCAN_PASSIVE
, 
	`°æí
(CMD_SCAN_PASSIVE)) == 0) {

639 i‡(
	`°∫icmp
(
comm™d
, 
CMD_RSSI
, 
	`°æí
(CMD_RSSI)) == 0) {

640 
byãs_wrôãn
 = 
	`wl_™droid_gë_rssi
(
√t
, 
comm™d
, 
¥iv_cmd
.
tŸÆ_Àn
);

642 i‡(
	`°∫icmp
(
comm™d
, 
CMD_LINKSPEED
, 
	`°æí
(CMD_LINKSPEED)) == 0) {

643 
byãs_wrôãn
 = 
	`wl_™droid_gë_lök_•ìd
(
√t
, 
comm™d
, 
¥iv_cmd
.
tŸÆ_Àn
);

645 #ifde‡
PKT_FILTER_SUPPORT


646 i‡(
	`°∫icmp
(
comm™d
, 
CMD_RXFILTER_START
, 
	`°æí
(CMD_RXFILTER_START)) == 0) {

647 
byãs_wrôãn
 = 
	`√t_os_íabÀ_∑ckë_fûãr
(
√t
, 1);

649 i‡(
	`°∫icmp
(
comm™d
, 
CMD_RXFILTER_STOP
, 
	`°æí
(CMD_RXFILTER_STOP)) == 0) {

650 
byãs_wrôãn
 = 
	`√t_os_íabÀ_∑ckë_fûãr
(
√t
, 0);

652 i‡(
	`°∫icmp
(
comm™d
, 
CMD_RXFILTER_ADD
, 
	`°æí
(CMD_RXFILTER_ADD)) == 0) {

653 
fûãr_num
 = *(
comm™d
 + 
	`°æí
(
CMD_RXFILTER_ADD
) + 1) - '0';

654 
byãs_wrôãn
 = 
	`√t_os_rxfûãr_add_ªmove
(
√t
, 
TRUE
, 
fûãr_num
);

656 i‡(
	`°∫icmp
(
comm™d
, 
CMD_RXFILTER_REMOVE
, 
	`°æí
(CMD_RXFILTER_REMOVE)) == 0) {

657 
fûãr_num
 = *(
comm™d
 + 
	`°æí
(
CMD_RXFILTER_REMOVE
) + 1) - '0';

658 
byãs_wrôãn
 = 
	`√t_os_rxfûãr_add_ªmove
(
√t
, 
FALSE
, 
fûãr_num
);

661 i‡(
	`°∫icmp
(
comm™d
, 
CMD_BTCOEXSCAN_START
, 
	`°æí
(CMD_BTCOEXSCAN_START)) == 0) {

664 i‡(
	`°∫icmp
(
comm™d
, 
CMD_BTCOEXSCAN_STOP
, 
	`°æí
(CMD_BTCOEXSCAN_STOP)) == 0) {

667 i‡(
	`°∫icmp
(
comm™d
, 
CMD_BTCOEXMODE
, 
	`°æí
(CMD_BTCOEXMODE)) == 0) {

668 #ifde‡
WL_CFG80211


669 
byãs_wrôãn
 = 
	`wl_cfg80211_£t_btc€x_dh˝
(
√t
, 
comm™d
);

671 #ifde‡
PKT_FILTER_SUPPORT


672 
uöt
 
mode
 = *(
comm™d
 + 
	`°æí
(
CMD_BTCOEXMODE
) + 1) - '0';

674 i‡(
mode
 == 1)

675 
	`√t_os_íabÀ_∑ckë_fûãr
(
√t
, 0);

677 
	`√t_os_íabÀ_∑ckë_fûãr
(
√t
, 1);

681 i‡(
	`°∫icmp
(
comm™d
, 
CMD_SETSUSPENDOPT
, 
	`°æí
(CMD_SETSUSPENDOPT)) == 0) {

682 
byãs_wrôãn
 = 
	`wl_™droid_£t_su•íd›t
(
√t
, 
comm™d
, 
¥iv_cmd
.
tŸÆ_Àn
);

684 i‡(
	`°∫icmp
(
comm™d
, 
CMD_SETSUSPENDMODE
, 
	`°æí
(CMD_SETSUSPENDMODE)) == 0) {

685 
byãs_wrôãn
 = 
	`wl_™droid_£t_su•ídmode
(
√t
, 
comm™d
, 
¥iv_cmd
.
tŸÆ_Àn
);

687 i‡(
	`°∫icmp
(
comm™d
, 
CMD_SETBAND
, 
	`°æí
(CMD_SETBAND)) == 0) {

688 
uöt
 
b™d
 = *(
comm™d
 + 
	`°æí
(
CMD_SETBAND
) + 1) - '0';

689 #ifde‡
WL_HOST_BAND_MGMT


690 i‡(
	`wl_cfg80211_£t_b™d
(
√t
, 
b™d
) < 0) {

691 
byãs_wrôãn
 = -1;

692 
exô
;

694 i‡(
b™d
 =
WLC_BAND_AUTO
)

695 
byãs_wrôãn
 = 
	`wldev_£t_b™d
(
√t
, 
b™d
);

697 
byãs_wrôãn
 = 
	`wldev_£t_b™d
(
√t
, 
b™d
);

700 i‡(
	`°∫icmp
(
comm™d
, 
CMD_GETBAND
, 
	`°æí
(CMD_GETBAND)) == 0) {

701 
byãs_wrôãn
 = 
	`wl_™droid_gë_b™d
(
√t
, 
comm™d
, 
¥iv_cmd
.
tŸÆ_Àn
);

703 #ifde‡
WL_CFG80211


705 i‡(
	`°∫icmp
(
comm™d
, 
CMD_COUNTRY
, 
	`°æí
(CMD_COUNTRY)) == 0) {

706 *
cou¡ry_code
 = 
comm™d
 + 
	`°æí
(
CMD_COUNTRY
) + 1;

707 
byãs_wrôãn
 = 
	`wldev_£t_cou¡ry
(
√t
, 
cou¡ry_code
);

710 #i‡
	`deföed
(
PNO_SUPPORT
Ë&& !deföed(
WL_SCHED_SCAN
)

711 i‡(
	`°∫icmp
(
comm™d
, 
CMD_PNOSSIDCLR_SET
, 
	`°æí
(CMD_PNOSSIDCLR_SET)) == 0) {

712 
byãs_wrôãn
 = 
	`dhd_dev_≤o_ª£t
(
√t
);

714 i‡(
	`°∫icmp
(
comm™d
, 
CMD_PNOSETUP_SET
, 
	`°æí
(CMD_PNOSETUP_SET)) == 0) {

715 
byãs_wrôãn
 = 
	`wl_™droid_£t_≤o_£tup
(
√t
, 
comm™d
, 
¥iv_cmd
.
tŸÆ_Àn
);

717 i‡(
	`°∫icmp
(
comm™d
, 
CMD_PNOENABLE_SET
, 
	`°æí
(CMD_PNOENABLE_SET)) == 0) {

718 
uöt
 
p‚_íabÀd
 = *(
comm™d
 + 
	`°æí
(
CMD_PNOENABLE_SET
) + 1) - '0';

719 
byãs_wrôãn
 = 
	`dhd_dev_≤o_íabÀ
(
√t
, 
p‚_íabÀd
);

722 i‡(
	`°∫icmp
(
comm™d
, 
CMD_P2P_DEV_ADDR
, 
	`°æí
(CMD_P2P_DEV_ADDR)) == 0) {

723 
byãs_wrôãn
 = 
	`wl_™droid_gë_p2p_dev_addr
(
√t
, 
comm™d
, 
¥iv_cmd
.
tŸÆ_Àn
);

725 i‡(
	`°∫icmp
(
comm™d
, 
CMD_P2P_SET_NOA
, 
	`°æí
(CMD_P2P_SET_NOA)) == 0) {

726 
skù
 = 
	`°æí
(
CMD_P2P_SET_NOA
) + 1;

727 
byãs_wrôãn
 = 
	`wl_cfg80211_£t_p2p_nﬂ
(
√t
, 
comm™d
 + 
skù
,

728 
¥iv_cmd
.
tŸÆ_Àn
 - 
skù
);

730 #i‡!
deföed
 
WL_ENABLE_P2P_IF


731 i‡(
	`°∫icmp
(
comm™d
, 
CMD_P2P_GET_NOA
, 
	`°æí
(CMD_P2P_GET_NOA)) == 0) {

732 
byãs_wrôãn
 = 
	`wl_cfg80211_gë_p2p_nﬂ
(
√t
, 
comm™d
, 
¥iv_cmd
.
tŸÆ_Àn
);

735 i‡(
	`°∫icmp
(
comm™d
, 
CMD_P2P_SET_PS
, 
	`°æí
(CMD_P2P_SET_PS)) == 0) {

736 
skù
 = 
	`°æí
(
CMD_P2P_SET_PS
) + 1;

737 
byãs_wrôãn
 = 
	`wl_cfg80211_£t_p2p_ps
(
√t
, 
comm™d
 + 
skù
,

738 
¥iv_cmd
.
tŸÆ_Àn
 - 
skù
);

740 #ifde‡
WL_CFG80211


741 i‡(
	`°∫icmp
(
comm™d
, 
CMD_SET_AP_WPS_P2P_IE
,

742 
	`°æí
(
CMD_SET_AP_WPS_P2P_IE
)) == 0) {

743 
skù
 = 
	`°æí
(
CMD_SET_AP_WPS_P2P_IE
) + 3;

744 
byãs_wrôãn
 = 
	`wl_cfg80211_£t_wps_p2p_õ
(
√t
, 
comm™d
 + 
skù
,

745 
¥iv_cmd
.
tŸÆ_Àn
 - 
skù
, *(
comm™d
 + skip - 2) - '0');

748 i‡(
	`°∫icmp
(
comm™d
, 
CMD_OKC_SET_PMK
, 
	`°æí
(CMD_OKC_SET_PMK)) == 0)

749 
byãs_wrôãn
 = 
	`wl_™droid_£t_pmk
(
√t
, 
comm™d
, 
¥iv_cmd
.
tŸÆ_Àn
);

750 i‡(
	`°∫icmp
(
comm™d
, 
CMD_OKC_ENABLE
, 
	`°æí
(CMD_OKC_ENABLE)) == 0)

751 
byãs_wrôãn
 = 
	`wl_™droid_okc_íabÀ
(
√t
, 
comm™d
, 
¥iv_cmd
.
tŸÆ_Àn
);

752 i‡(
	`°∫icmp
(
comm™d
, 
CMD_SETROAMMODE
, 
	`°æí
(CMD_SETROAMMODE)) == 0)

753 
byãs_wrôãn
 = 
	`wl_™droid_£t_rﬂm_mode
(
√t
, 
comm™d
, 
¥iv_cmd
.
tŸÆ_Àn
);

755 
	`ANDROID_ERROR
(("Unknow¿PRIVATE comm™d %†- ign‹ed\n", 
comm™d
));

756 
	`¢¥ötf
(
comm™d
, 3, "OK");

757 
byãs_wrôãn
 = 
	`°æí
("OK");

760 i‡(
byãs_wrôãn
 >= 0) {

761 i‡((
byãs_wrôãn
 =0Ë&& (
¥iv_cmd
.
tŸÆ_Àn
 > 0))

762 
comm™d
[0] = '\0';

763 i‡(
byãs_wrôãn
 >
¥iv_cmd
.
tŸÆ_Àn
) {

764 
	`ANDROID_ERROR
(("%s: byãs_wrôã¿%d\n", 
__FUNCTION__
, 
byãs_wrôãn
));

765 
byãs_wrôãn
 = 
¥iv_cmd
.
tŸÆ_Àn
;

767 
byãs_wrôãn
++;

769 
¥iv_cmd
.
u£d_Àn
 = 
byãs_wrôãn
;

770 i‡(
	`c›y_to_u£r
(
¥iv_cmd
.
buf
, 
comm™d
, 
byãs_wrôãn
)) {

771 
	`ANDROID_ERROR
(("%s: faûedÅÿc›y d©®tÿu£∏buf„r\n", 
__FUNCTION__
));

772 
ªt
 = -
EFAULT
;

776 
ªt
 = 
byãs_wrôãn
;

779 
exô
:

780 
	`√t_os_wake_u∆ock
(
√t
);

781 i‡(
comm™d
) {

782 
	`k‰ì
(
comm™d
);

785  
ªt
;

786 
	}
}

788 
	$wl_™droid_öô
()

790 
ªt
 = 0;

792 
dhd_msg_Àvñ
 |
DHD_ERROR_VAL
;

793 #ifde‡
ENABLE_INSMOD_NO_FW_LOAD


794 
dhd_dow∆ﬂd_fw_⁄_drivîlﬂd
 = 
FALSE
;

796 i‡(!
iÁ˚_«me
[0]) {

797 
	`mem£t
(
iÁ˚_«me
, 0, 
IFNAMSIZ
);

798 
	`bcm_°∫˝y_s
(
iÁ˚_«me
, 
IFNAMSIZ
, "wlan", IFNAMSIZ);

800  
ªt
;

801 
	}
}

803 
	$wl_™droid_exô
()

805 
ªt
 = 0;

807  
ªt
;

808 
	}
}

810 
	$wl_™droid_po°_öô
()

812 i‡(!
dhd_dow∆ﬂd_fw_⁄_drivîlﬂd
) {

813 
	`sdioh_°›
(
NULL
);

815 
	`dhd_cu°omî_gpio_wœn_˘æ
(
WLAN_RESET_OFF
);

816 
g_wifi_⁄
 = 0;

818 
	}
}

820 #i‡
deföed
(
RSSIAVG
)

822 
	$wl_‰ì_rssi_ˇche
(
wl_rssi_ˇche_˘æ_t
 *
rssi_ˇche_˘æ
)

824 
wl_rssi_ˇche_t
 *
node
, *
cur
, **
rssi_hód
;

825 
i
=0;

827 
rssi_hód
 = &
rssi_ˇche_˘æ
->
m_ˇche_hód
;

828 
node
 = *
rssi_hód
;

830 ;
node
;) {

831 
	`ANDROID_INFO
(("%s: Free %d with BSSID %pM\n",

832 
__FUNCTION__
, 
i
, &
node
->
BSSID
));

833 
cur
 = 
node
;

834 
node
 = 
cur
->
√xt
;

835 
	`k‰ì
(
cur
);

836 
i
++;

838 *
rssi_hód
 = 
NULL
;

839 
	}
}

842 
	$wl_dñëe_dúty_rssi_ˇche
(
wl_rssi_ˇche_˘æ_t
 *
rssi_ˇche_˘æ
)

844 
wl_rssi_ˇche_t
 *
node
, *
¥ev
, **
rssi_hód
;

845 
i
 = -1, 
tmp
 = 0;

846 #i‡
	`deföed
(
BSSCACHE
)

847 
max
 = 
BSSCACHE_LEN
;

849 
max
 = 
RSSICACHE_LEN
;

852 
rssi_hód
 = &
rssi_ˇche_˘æ
->
m_ˇche_hód
;

853 
node
 = *
rssi_hód
;

854 
¥ev
 = 
node
;

855 ;
node
;) {

856 
i
++;

857 i‡(
node
->
dúty
 >
max
 ||Çode->dúty >
RSSICACHE_LEN
) {

858 i‡(
node
 =*
rssi_hód
) {

859 
tmp
 = 1;

860 *
rssi_hód
 = 
node
->
√xt
;

862 
tmp
 = 0;

863 
¥ev
->
√xt
 = 
node
->next;

865 
	`ANDROID_INFO
(("%s: Del %d with BSSID %pM\n",

866 
__FUNCTION__
, 
i
, &
node
->
BSSID
));

867 
	`k‰ì
(
node
);

868 i‡(
tmp
 == 1) {

869 
node
 = *
rssi_hód
;

870 
¥ev
 = 
node
;

872 
node
 = 
¥ev
->
√xt
;

876 
¥ev
 = 
node
;

877 
node
 =Çode->
√xt
;

879 
	}
}

882 
	$wl_ª£t_rssi_ˇche
(
wl_rssi_ˇche_˘æ_t
 *
rssi_ˇche_˘æ
)

884 
wl_rssi_ˇche_t
 *
node
, **
rssi_hód
;

886 
rssi_hód
 = &
rssi_ˇche_˘æ
->
m_ˇche_hód
;

889 
node
 = *
rssi_hód
;

890 ;
node
;) {

891 
node
->
dúty
 += 1;

892 
node
 =Çode->
√xt
;

894 
	}
}

897 
	$wl_upd©e_c⁄√˘ed_rssi_ˇche
(
wl_rssi_ˇche_˘æ_t
 *
rssi_ˇche_˘æ
, 
√t_devi˚
 *
√t
)

899 
wl_rssi_ˇche_t
 *
node
, *
¥ev
, **
rssi_hód
;

900 
j
, 
k
=0;

901 
rssi
, 
îr‹
;

902 
ëhî_addr
 
bssid
;

904 
îr‹
 = 
	`wldev_io˘l
(
√t
, 
WLC_GET_BSSID
, &
bssid
, (bssid), 
Ál£
);

905 i‡(
îr‹
)

907 
îr‹
 = 
	`wldev_gë_rssi
(
√t
, &
rssi
);

908 i‡(
îr‹
)

912 
rssi_hód
 = &
rssi_ˇche_˘æ
->
m_ˇche_hód
;

913 
node
 = *
rssi_hód
;

914 ;
node
;) {

915 i‡(!
	`memcmp
(&
node
->
BSSID
, &
bssid
, 
ETHER_ADDR_LEN
)) {

916 
	`ANDROID_INFO
(("%s: Update %d with BSSID %pM, RSSI=%d\n",

917 
__FUNCTION__
, 
k
, &
bssid
, 
rssi
));

918 
j
=0; j<
RSSIAVG_LEN
-1; j++)

919 
node
->
RSSI
[
j
] =Çode->RSSI[j+1];

920 
node
->
RSSI
[
j
] = 
rssi
;

921 
node
->
dúty
 = 0;

924 
¥ev
 = 
node
;

925 
node
 =Çode->
√xt
;

926 
k
++;

928 
	}
}

931 
	$wl_upd©e_rssi_ˇche
(
wl_rssi_ˇche_˘æ_t
 *
rssi_ˇche_˘æ
, 
wl_sˇn_ªsu…s_t
 *
ss_li°
)

933 
wl_rssi_ˇche_t
 *
node
, *
¥ev
, *
Àaf
, **
rssi_hód
;

934 
wl_bss_öfo_t
 *
bi
 = 
NULL
;

935 
i
, 
j
, 
k
;

937 i‡(!
ss_li°
->
cou¡
)

940 
rssi_hód
 = &
rssi_ˇche_˘æ
->
m_ˇche_hód
;

943 
i
 = 0; i < 
ss_li°
->
cou¡
; i++) {

944 
node
 = *
rssi_hód
;

945 
¥ev
 = 
NULL
;

946 
k
 = 0;

947 
bi
 = bò? (
wl_bss_öfo_t
 *)((
uöçå
)bò+ 
	`dtoh32
(bi->
Àngth
)Ë: 
ss_li°
->
bss_öfo
;

948 ;
node
;) {

949 i‡(!
	`memcmp
(&
node
->
BSSID
, &
bi
->BSSID, 
ETHER_ADDR_LEN
)) {

950 
	`ANDROID_INFO
(("%s: Update %d with BSSID %pM, RSSI=%d, SSID \"%s\"\n",

951 
__FUNCTION__
, 
k
, &
bi
->
BSSID
, 
	`dtoh16
(bi->
RSSI
), bi->
SSID
));

952 
j
=0; j<
RSSIAVG_LEN
-1; j++)

953 
node
->
RSSI
[
j
] =Çode->RSSI[j+1];

954 
node
->
RSSI
[
j
] = 
	`dtoh16
(
bi
->RSSI);

955 
node
->
dúty
 = 0;

958 
¥ev
 = 
node
;

959 
node
 =Çode->
√xt
;

960 
k
++;

963 i‡(
node
)

966 
Àaf
 = 
	`kmÆloc
((
wl_rssi_ˇche_t
), 
GFP_KERNEL
);

967 i‡(!
Àaf
) {

968 
	`ANDROID_ERROR
(("%s: Memoryálloc failure %d\n",

969 
__FUNCTION__
, (
wl_rssi_ˇche_t
)));

972 
	`ANDROID_INFO
(("%s: Add %d with cached BSSID %pM, RSSI=%d, SSID \"%s\" inÅheÜeaf\n",

973 
__FUNCTION__
, 
k
, &
bi
->
BSSID
, 
	`dtoh16
(bi->
RSSI
), bi->
SSID
));

975 
Àaf
->
√xt
 = 
NULL
;

976 
Àaf
->
dúty
 = 0;

977 
	`mem˝y
(&
Àaf
->
BSSID
, &
bi
->BSSID, 
ETHER_ADDR_LEN
);

978 
j
=0; j<
RSSIAVG_LEN
; j++)

979 
Àaf
->
RSSI
[
j
] = 
	`dtoh16
(
bi
->RSSI);

981 i‡(!
¥ev
)

982 *
rssi_hód
 = 
Àaf
;

984 
¥ev
->
√xt
 = 
Àaf
;

986 
	}
}

988 
öt16


989 
	$wl_gë_avg_rssi
(
wl_rssi_ˇche_˘æ_t
 *
rssi_ˇche_˘æ
, *
addr
)

991 
wl_rssi_ˇche_t
 *
node
, **
rssi_hód
;

992 
j
, 
rssi_sum
, 
rssi
=-200;

994 
rssi_hód
 = &
rssi_ˇche_˘æ
->
m_ˇche_hód
;

997 
node
 = *
rssi_hód
;

998 ;
node
;) {

999 i‡(!
	`memcmp
(&
node
->
BSSID
, 
addr
, 
ETHER_ADDR_LEN
)) {

1000 
rssi_sum
 = 0;

1001 
rssi
 = 0;

1002 
j
=0; j<
RSSIAVG_LEN
; j++)

1003 
rssi_sum
 +
node
->
RSSI
[
RSSIAVG_LEN
-
j
-1];

1004 
rssi
 = 
rssi_sum
 / 
j
;

1007 
node
 =Çode->
√xt
;

1009 i‡(
rssi
 >= -2)

1010 
rssi
 = -2;

1011 i‡(
rssi
 == -200) {

1012 
	`ANDROID_ERROR
(("%s: BSSID %pM doesÇot in RSSI cache\n",

1013 
__FUNCTION__
, 
addr
));

1015  (
öt16
)
rssi
;

1016 
	}
}

1019 #i‡
deföed
(
RSSIOFFSET
)

1021 
	$wl_upd©e_rssi_off£t
(
rssi
)

1023 
uöt
 
chù
, 
chùªv
;

1025 
chù
 = 
	`dhd_bus_chù_id
(
	`bcmsdh_gë_drvd©a
());

1026 
chùªv
 = 
	`dhd_bus_chùªv_id
(
	`bcmsdh_gë_drvd©a
());

1027 i‡(
chù
 =
BCM4330_CHIP_ID
 && 
chùªv
 =
BCM4330B2_CHIP_REV
) {

1028 #i‡
	`deföed
(
RSSIOFFSET_NEW
)

1029 
j
;

1030 
j
=0; j<
RSSI_OFFSET
; j++) {

1031 i‡(
rssi
 - (
RSSI_MIN
+
RSSI_INT
*(
j
+1)) < 0)

1034 
rssi
 +
j
;

1036 
rssi
 +
RSSI_OFFSET
;

1039 i‡(
rssi
 >= -2)

1040 
rssi
 = -2;

1041  
rssi
;

1042 
	}
}

1045 #i‡
deföed
(
BSSCACHE
)

1046 
	#WLC_IW_SS_CACHE_CTRL_FIELD_MAXLEN
 32

	)

1049 
	$wl_‰ì_bss_ˇche
(
wl_bss_ˇche_˘æ_t
 *
bss_ˇche_˘æ
)

1051 
wl_bss_ˇche_t
 *
node
, *
cur
, **
bss_hód
;

1052 
i
=0;

1054 
	`ANDROID_TRACE
(("%†ˇŒed\n", 
__FUNCTION__
));

1056 
bss_hód
 = &
bss_ˇche_˘æ
->
m_ˇche_hód
;

1057 
node
 = *
bss_hód
;

1059 ;
node
;) {

1060 
	`ANDROID_TRACE
(("%s: Free %d with BSSID %pM\n",

1061 
__FUNCTION__
, 
i
, &
node
->
ªsu…s
.
bss_öfo
->
BSSID
));

1062 
cur
 = 
node
;

1063 
node
 = 
cur
->
√xt
;

1064 
	`k‰ì
(
cur
);

1065 
i
++;

1067 *
bss_hód
 = 
NULL
;

1068 
	}
}

1071 
	$wl_dñëe_dúty_bss_ˇche
(
wl_bss_ˇche_˘æ_t
 *
bss_ˇche_˘æ
)

1073 
wl_bss_ˇche_t
 *
node
, *
¥ev
, **
bss_hód
;

1074 
i
 = -1, 
tmp
 = 0;

1076 
bss_hód
 = &
bss_ˇche_˘æ
->
m_ˇche_hód
;

1077 
node
 = *
bss_hód
;

1078 
¥ev
 = 
node
;

1079 ;
node
;) {

1080 
i
++;

1081 i‡(
node
->
dúty
 >
BSSCACHE_LEN
) {

1082 i‡(
node
 =*
bss_hód
) {

1083 
tmp
 = 1;

1084 *
bss_hód
 = 
node
->
√xt
;

1086 
tmp
 = 0;

1087 
¥ev
->
√xt
 = 
node
->next;

1089 
	`ANDROID_TRACE
(("%s: Del %d with BSSID %pM, RSSI=%d, SSID \"%s\"\n",

1090 
__FUNCTION__
, 
i
, &
node
->
ªsu…s
.
bss_öfo
->
BSSID
,

1091 
	`dtoh16
(
node
->
ªsu…s
.
bss_öfo
->
RSSI
),Çode->ªsu…s.bss_öfo->
SSID
));

1092 
	`k‰ì
(
node
);

1093 i‡(
tmp
 == 1) {

1094 
node
 = *
bss_hód
;

1095 
¥ev
 = 
node
;

1097 
node
 = 
¥ev
->
√xt
;

1101 
¥ev
 = 
node
;

1102 
node
 =Çode->
√xt
;

1104 
	}
}

1107 
	$wl_ª£t_bss_ˇche
(
wl_bss_ˇche_˘æ_t
 *
bss_ˇche_˘æ
)

1109 
wl_bss_ˇche_t
 *
node
, **
bss_hód
;

1111 
bss_hód
 = &
bss_ˇche_˘æ
->
m_ˇche_hód
;

1114 
node
 = *
bss_hód
;

1115 ;
node
;) {

1116 
node
->
dúty
 += 1;

1117 
node
 =Çode->
√xt
;

1119 
	}
}

1122 
	$wl_upd©e_bss_ˇche
(
wl_bss_ˇche_˘æ_t
 *
bss_ˇche_˘æ
, 
wl_sˇn_ªsu…s_t
 *
ss_li°
)

1124 
wl_bss_ˇche_t
 *
node
, *
¥ev
, *
Àaf
, *
tmp
, **
bss_hód
;

1125 
wl_bss_öfo_t
 *
bi
 = 
NULL
;

1126 
i
, 
k
=0;

1128 i‡(!
ss_li°
->
cou¡
)

1131 
bss_hód
 = &
bss_ˇche_˘æ
->
m_ˇche_hód
;

1133 
i
=0; i < 
ss_li°
->
cou¡
; i++) {

1134 
node
 = *
bss_hód
;

1135 
¥ev
 = 
NULL
;

1136 
bi
 = bò? (
wl_bss_öfo_t
 *)((
uöçå
)bò+ 
	`dtoh32
(bi->
Àngth
)Ë: 
ss_li°
->
bss_öfo
;

1138 ;
node
;) {

1139 i‡(!
	`memcmp
(&
node
->
ªsu…s
.
bss_öfo
->
BSSID
, &
bi
->BSSID, 
ETHER_ADDR_LEN
)) {

1140 
tmp
 = 
node
;

1141 
Àaf
 = 
	`kmÆloc
(
	`dtoh32
(
bi
->
Àngth
Ë+ 
WLC_IW_SS_CACHE_CTRL_FIELD_MAXLEN
, 
GFP_KERNEL
);

1142 i‡(!
Àaf
) {

1143 
	`ANDROID_ERROR
(("%s: Memoryálloc failure %dánd keep old BSS info\n",

1144 
__FUNCTION__
, 
	`dtoh32
(
bi
->
Àngth
Ë+ 
WLC_IW_SS_CACHE_CTRL_FIELD_MAXLEN
));

1148 
	`mem˝y
(
Àaf
->
ªsu…s
.
bss_öfo
, 
bi
, 
	`dtoh32
(bi->
Àngth
));

1149 
Àaf
->
√xt
 = 
node
->next;

1150 
Àaf
->
dúty
 = 0;

1151 
Àaf
->
ªsu…s
.
cou¡
 = 1;

1152 
Àaf
->
ªsu…s
.
vîsi⁄
 = 
ss_li°
->version;

1153 
	`ANDROID_TRACE
(("%s: Update %d with BSSID %pM, RSSI=%d, SSID \"%s\"\n",

1154 
__FUNCTION__
, 
k
, &
bi
->
BSSID
, 
	`dtoh16
(bi->
RSSI
), bi->
SSID
));

1155 i‡(!
¥ev
)

1156 *
bss_hód
 = 
Àaf
;

1158 
¥ev
->
√xt
 = 
Àaf
;

1159 
node
 = 
Àaf
;

1160 
¥ev
 = 
node
;

1162 
	`k‰ì
(
tmp
);

1163 
k
++;

1166 
¥ev
 = 
node
;

1167 
node
 =Çode->
√xt
;

1170 i‡(
node
)

1173 
Àaf
 = 
	`kmÆloc
(
	`dtoh32
(
bi
->
Àngth
Ë+ 
WLC_IW_SS_CACHE_CTRL_FIELD_MAXLEN
, 
GFP_KERNEL
);

1174 i‡(!
Àaf
) {

1175 
	`ANDROID_ERROR
(("%s: Mem‹yáŒo¯Áûuª %d\n", 
__FUNCTION__
,

1176 
	`dtoh32
(
bi
->
Àngth
Ë+ 
WLC_IW_SS_CACHE_CTRL_FIELD_MAXLEN
));

1179 
	`ANDROID_TRACE
(("%s: Add %d with cached BSSID %pM, RSSI=%d, SSID \"%s\" inÅheÜeaf\n",

1180 
__FUNCTION__
, 
k
, &
bi
->
BSSID
, 
	`dtoh16
(bi->
RSSI
), bi->
SSID
));

1182 
	`mem˝y
(
Àaf
->
ªsu…s
.
bss_öfo
, 
bi
, 
	`dtoh32
(bi->
Àngth
));

1183 
Àaf
->
√xt
 = 
NULL
;

1184 
Àaf
->
dúty
 = 0;

1185 
Àaf
->
ªsu…s
.
cou¡
 = 1;

1186 
Àaf
->
ªsu…s
.
vîsi⁄
 = 
ss_li°
->version;

1187 
k
++;

1189 i‡(!
¥ev
)

1190 *
bss_hód
 = 
Àaf
;

1192 
¥ev
->
√xt
 = 
Àaf
;

1194 
	}
}

1197 
	$wl_run_bss_ˇche_timî
(
wl_bss_ˇche_˘æ_t
 *
bss_ˇche_˘æ
, 
kick_off
)

1199 
timî_li°
 **
timî
;

1201 
timî
 = &
bss_ˇche_˘æ
->
m_timî
;

1203 i‡(*
timî
) {

1204 i‡(
kick_off
) {

1205 (*
timî
)->
expúes
 = 
jiffõs
 + 
BSSCACHE_TIME
 * 
HZ
 / 1000;

1206 
	`add_timî
(*
timî
);

1207 
	`ANDROID_TRACE
(("%s:Åimî sèπs\n", 
__FUNCTION__
));

1209 
	`dñ_timî_sync
(*
timî
);

1210 
	`ANDROID_TRACE
(("%s:Åimî st›s\n", 
__FUNCTION__
));

1213 
	}
}

1216 
	$wl_£t_bss_ˇche_timî_Êag
(
ul⁄g
 
d©a
)

1218 
wl_bss_ˇche_˘æ_t
 *
bss_ˇche_˘æ
 = (wl_bss_ˇche_˘æ_à*)
d©a
;

1220 
bss_ˇche_˘æ
->
m_timî_expúed
 = 1;

1221 
	`ANDROID_TRACE
(("%†ˇŒed\n", 
__FUNCTION__
));

1222 
	}
}

1225 
	$wl_ªÀa£_bss_ˇche_˘æ
(
wl_bss_ˇche_˘æ_t
 *
bss_ˇche_˘æ
)

1227 
	`ANDROID_TRACE
(("%s:\n", 
__FUNCTION__
));

1228 
	`wl_‰ì_bss_ˇche
(
bss_ˇche_˘æ
);

1229 
	`wl_run_bss_ˇche_timî
(
bss_ˇche_˘æ
, 0);

1230 i‡(
bss_ˇche_˘æ
->
m_timî
) {

1231 
	`k‰ì
(
bss_ˇche_˘æ
->
m_timî
);

1233 
	}
}

1236 
	$wl_öô_bss_ˇche_˘æ
(
wl_bss_ˇche_˘æ_t
 *
bss_ˇche_˘æ
)

1238 
	`ANDROID_TRACE
(("%s:\n", 
__FUNCTION__
));

1239 
bss_ˇche_˘æ
->
m_timî_expúed
 = 0;

1241 
bss_ˇche_˘æ
->
m_timî
 = 
	`kmÆloc
((
timî_li°
), 
GFP_KERNEL
);

1242 i‡(!
bss_ˇche_˘æ
->
m_timî
) {

1243 
	`ANDROID_ERROR
(("%s: Mem‹yáŒo¯Áûuª\n", 
__FUNCTION__
 ));

1246 
	`öô_timî
(
bss_ˇche_˘æ
->
m_timî
);

1247 
bss_ˇche_˘æ
->
m_timî
->
fun˘i⁄
 = (*)
wl_£t_bss_ˇche_timî_Êag
;

1248 
bss_ˇche_˘æ
->
m_timî
->
d©a
 = (
ul⁄g
)bss_cache_ctrl;

1249 
	}
}

1255 #i‡
deföed
(
CONFIG_WIFI_CONTROL_FUNC
)

1257 
	gg_wifidev_ªgi°îed
 = 0;

1258 
£m≠h‹e
 
	gwifi_c⁄åﬁ_£m
;

1259 
wifi_∂©f‹m_d©a
 *
	gwifi_c⁄åﬁ_d©a
 = 
NULL
;

1260 
ªsour˚
 *
	gwifi_úqªs
 = 
NULL
;

1262 
wifi_add_dev
();

1263 
wifi_dñ_dev
();

1265 
	$wl_™droid_wifi˘æ_func_add
()

1267 
ªt
 = 0;

1268 
	`£ma_öô
(&
wifi_c⁄åﬁ_£m
, 0);

1270 
ªt
 = 
	`wifi_add_dev
();

1271 i‡(
ªt
) {

1272 
	`ANDROID_ERROR
(("%s:Öœtf‹m_drivî_ªgi°î faûed\n", 
__FUNCTION__
));

1273  
ªt
;

1275 
g_wifidev_ªgi°îed
 = 1;

1278 i‡(
	`down_timeout
(&
wifi_c⁄åﬁ_£m
, 
	`m£cs_to_jiffõs
(1000)) != 0) {

1279 
ªt
 = -
EINVAL
;

1280 
	`ANDROID_ERROR
(("%s:Öœtf‹m_drivî_ªgi°îÅimeout\n", 
__FUNCTION__
));

1283  
ªt
;

1284 
	}
}

1286 
	$wl_™droid_wifi˘æ_func_dñ
()

1288 i‡(
g_wifidev_ªgi°îed
)

1290 
	`wifi_dñ_dev
();

1291 
g_wifidev_ªgi°îed
 = 0;

1293 
	}
}

1295 * 
	$wl_™droid_¥óŒoc
(
£˘i⁄
, 
size
)

1297 *
Æloc_±r
 = 
NULL
;

1298 i‡(
wifi_c⁄åﬁ_d©a
 && wifi_c⁄åﬁ_d©a->
mem_¥óŒoc
) {

1299 
Æloc_±r
 = 
wifi_c⁄åﬁ_d©a
->
	`mem_¥óŒoc
(
£˘i⁄
, 
size
);

1300 i‡(
Æloc_±r
) {

1301 
	`ANDROID_INFO
(("suc˚s†Ælo¯£˘i⁄ %d\n", 
£˘i⁄
));

1302 i‡(
size
 != 0L)

1303 
	`bzîo
(
Æloc_±r
, 
size
);

1304  
Æloc_±r
;

1308 
	`ANDROID_ERROR
(("ˇn'àÆlo¯£˘i⁄ %d\n", 
£˘i⁄
));

1309  
NULL
;

1310 
	}
}

1312 
	$wifi_gë_úq_numbî
(*
úq_Êags_±r
)

1314 i‡(
wifi_úqªs
) {

1315 *
úq_Êags_±r
 = 
wifi_úqªs
->
Êags
 & 
IRQF_TRIGGER_MASK
;

1316  ()
wifi_úqªs
->
°¨t
;

1318 #ifde‡
CUSTOM_OOB_GPIO_NUM


1319  
CUSTOM_OOB_GPIO_NUM
;

1323 
	}
}

1325 
	$wifi_£t_powî
(
⁄
, 
m£c
)

1327 
	`ANDROID_ERROR
(("%†%d\n", 
__FUNCTION__
, 
⁄
));

1328 i‡(
wifi_c⁄åﬁ_d©a
 && wifi_c⁄åﬁ_d©a->
£t_powî
) {

1329 
wifi_c⁄åﬁ_d©a
->
	`£t_powî
(
⁄
);

1331 i‡(
m£c
)

1332 
	`m¶ìp
(
m£c
);

1334 
	}
}

1336 #i‡(
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2, 6, 35))

1337 
	$wifi_gë_mac_addr
(*
buf
)

1339 
	`ANDROID_ERROR
(("%s\n", 
__FUNCTION__
));

1340 i‡(!
buf
)

1341  -
EINVAL
;

1342 i‡(
wifi_c⁄åﬁ_d©a
 && wifi_c⁄åﬁ_d©a->
gë_mac_addr
) {

1343  
wifi_c⁄åﬁ_d©a
->
	`gë_mac_addr
(
buf
);

1345  -
EOPNOTSUPP
;

1346 
	}
}

1349 #i‡(
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2, 6, 39))

1350 *
	$wifi_gë_cou¡ry_code
(*
ccode
)

1352 
	`ANDROID_TRACE
(("%s\n", 
__FUNCTION__
));

1353 i‡(!
ccode
)

1354  
NULL
;

1355 i‡(
wifi_c⁄åﬁ_d©a
 && wifi_c⁄åﬁ_d©a->
gë_cou¡ry_code
) {

1356  
wifi_c⁄åﬁ_d©a
->
	`gë_cou¡ry_code
(
ccode
);

1358  
NULL
;

1359 
	}
}

1362 
	$wifi_£t_ˇrddëe˘
(
⁄
)

1364 
	`ANDROID_ERROR
(("%†%d\n", 
__FUNCTION__
, 
⁄
));

1365 i‡(
wifi_c⁄åﬁ_d©a
 && wifi_c⁄åﬁ_d©a->
£t_ˇrddëe˘
) {

1366 
wifi_c⁄åﬁ_d©a
->
	`£t_ˇrddëe˘
(
⁄
);

1369 
	}
}

1371 
	$wifi_¥obe
(
∂©f‹m_devi˚
 *
pdev
)

1373 
wifi_∂©f‹m_d©a
 *
wifi_˘æ
 =

1374 (
wifi_∂©f‹m_d©a
 *)(
pdev
->
dev
.
∂©f‹m_d©a
);

1376 
wifi_úqªs
 = 
	`∂©f‹m_gë_ªsour˚_by«me
(
pdev
, 
IORESOURCE_IRQ
, "bcmdhd_wlan_irq");

1377 i‡(
wifi_úqªs
 =
NULL
)

1378 
wifi_úqªs
 = 
	`∂©f‹m_gë_ªsour˚_by«me
(
pdev
,

1379 
IORESOURCE_IRQ
, "bcm4329_wlan_irq");

1380 
wifi_c⁄åﬁ_d©a
 = 
wifi_˘æ
;

1381 
	`wifi_£t_powî
(1, 0);

1382 
	`wifi_£t_ˇrddëe˘
(1);

1384 
	`up
(&
wifi_c⁄åﬁ_£m
);

1386 
	}
}

1388 
	$wifi_ªmove
(
∂©f‹m_devi˚
 *
pdev
)

1390 
wifi_∂©f‹m_d©a
 *
wifi_˘æ
 =

1391 (
wifi_∂©f‹m_d©a
 *)(
pdev
->
dev
.
∂©f‹m_d©a
);

1393 
	`ANDROID_ERROR
(("## %s\n", 
__FUNCTION__
));

1394 
wifi_c⁄åﬁ_d©a
 = 
wifi_˘æ
;

1396 
	`wifi_£t_powî
(0, 
WIFI_TURNOFF_DELAY
);

1397 
	`wifi_£t_ˇrddëe˘
(0);

1399 
	`up
(&
wifi_c⁄åﬁ_£m
);

1401 
	}
}

1403 
	$wifi_su•íd
(
∂©f‹m_devi˚
 *
pdev
, 
pm_mesßge_t
 
°©e
)

1405 
	`ANDROID_TRACE
(("##> %s\n", 
__FUNCTION__
));

1406 #i‡
	`deföed
(
CONFIG_ARCH_RHEA
Ë|| deföed(
CONFIG_ARCH_CAPRI
)

1407 i‡(
	`dhd_os_check_wakñock
(
	`bcmsdh_gë_drvd©a
()))

1408  -
EBUSY
;

1410 #i‡(
LINUX_VERSION_CODE
 <
	`KERNEL_VERSION
(2, 6, 39)Ë&& 
	`deföed
(
OOB_INTR_ONLY
) && 1

1411 
	`bcmsdh_oob_öå_£t
(0);

1414 
	}
}

1416 
	$wifi_ªsume
(
∂©f‹m_devi˚
 *
pdev
)

1418 
	`ANDROID_TRACE
(("##> %s\n", 
__FUNCTION__
));

1419 #i‡(
LINUX_VERSION_CODE
 <
	`KERNEL_VERSION
(2, 6, 39)Ë&& 
	`deföed
(
OOB_INTR_ONLY
) && 1

1420 i‡(
	`dhd_os_check_if_up
(
	`bcmsdh_gë_drvd©a
()))

1421 
	`bcmsdh_oob_öå_£t
(1);

1424 
	}
}

1426 
∂©f‹m_drivî
 
	gwifi_devi˚
 = {

1427 .
¥obe
 = 
wifi_¥obe
,

1428 .
	gªmove
 = 
wifi_ªmove
,

1429 .
	gsu•íd
 = 
wifi_su•íd
,

1430 .
	gªsume
 = 
wifi_ªsume
,

1431 .
	gdrivî
 = {

1432 .
«me
 = "bcmdhd_wlan",

1436 
∂©f‹m_drivî
 
	gwifi_devi˚_Àgacy
 = {

1437 .
¥obe
 = 
wifi_¥obe
,

1438 .
	gªmove
 = 
wifi_ªmove
,

1439 .
	gsu•íd
 = 
wifi_su•íd
,

1440 .
	gªsume
 = 
wifi_ªsume
,

1441 .
	gdrivî
 = {

1442 .
«me
 = "bcm4329_wlan",

1446 
	$wifi_add_dev
()

1448 
ªt
 = 0;

1449 
	`ANDROID_TRACE
(("## CallingÖlatform_driver_register\n"));

1450 
ªt
 = 
	`∂©f‹m_drivî_ªgi°î
(&
wifi_devi˚
);

1451 i‡(
ªt
)

1452  
ªt
;

1454 
ªt
 = 
	`∂©f‹m_drivî_ªgi°î
(&
wifi_devi˚_Àgacy
);

1455  
ªt
;

1456 
	}
}

1458 
	$wifi_dñ_dev
()

1460 
	`ANDROID_TRACE
(("## UnregisterÖlatform_driver_register\n"));

1461 
	`∂©f‹m_drivî_uƒegi°î
(&
wifi_devi˚
);

1462 
	`∂©f‹m_drivî_uƒegi°î
(&
wifi_devi˚_Àgacy
);

1463 
	}
}

	@wl_cfg80211.c

27 
	~<ty≥defs.h
>

28 
	~<löuxvî.h
>

29 
	~<o¶.h
>

30 
	~<löux/kî√l.h
>

32 
	~<bcmutûs.h
>

33 
	~<bcmwifi_ch™√ls.h
>

34 
	~<bcmídün.h
>

35 
	~<¥Ÿo/ëhî√t.h
>

36 
	~<¥Ÿo/802.11.h
>

37 
	~<löux/if_¨p.h
>

38 
	~<asm/uac˚ss.h
>

40 
	~<dngl_°©s.h
>

41 
	~<dhd.h
>

42 
	~<dhdio˘l.h
>

43 
	~<wlio˘l.h
>

44 
	~<dhd_cfg80211.h
>

46 
	~<¥Ÿo/ëhî√t.h
>

47 
	~<löux/kî√l.h
>

48 
	~<löux/kthªad.h
>

49 
	~<löux/√tdevi˚.h
>

50 
	~<löux/sched.h
>

51 
	~<löux/ëhîdevi˚.h
>

52 
	~<löux/wúñess.h
>

53 
	~<löux/õì80211.h
>

54 
	~<löux/waô.h
>

55 
	~<√t/cfg80211.h
>

56 
	~<√t/π√éök.h
>

57 
	~<wlio˘l.h
>

58 
	~<wldev_comm⁄.h
>

59 
	~<wl_cfg80211.h
>

60 
	~<wl_cfgp2p.h
>

61 
	~<wl_™droid.h
>

63 #ifde‡
PROP_TXSTATUS


64 
	~<dhd_wlfc.h
>

66 #ifde‡
BCMWAPI_WPI


68 #i‚de‡
IW_ENCODE_ALG_SM4


69 
	#IW_ENCODE_ALG_SM4
 0x20

	)

72 #i‚de‡
IW_AUTH_WAPI_ENABLED


73 
	#IW_AUTH_WAPI_ENABLED
 0x20

	)

76 #i‚de‡
IW_AUTH_WAPI_VERSION_1


77 
	#IW_AUTH_WAPI_VERSION_1
 0x00000008

	)

80 #i‚de‡
IW_AUTH_CIPHER_SMS4


81 
	#IW_AUTH_CIPHER_SMS4
 0x00000020

	)

84 #i‚de‡
IW_AUTH_KEY_MGMT_WAPI_PSK


85 
	#IW_AUTH_KEY_MGMT_WAPI_PSK
 4

	)

88 #i‚de‡
IW_AUTH_KEY_MGMT_WAPI_CERT


89 
	#IW_AUTH_KEY_MGMT_WAPI_CERT
 8

	)

93 #ifde‡
BCMWAPI_WPI


94 
	#IW_WSEC_ENABLED
(
w£c
Ë((w£cË& (
WEP_ENABLED
 | 
TKIP_ENABLED
 | 
AES_ENABLED
 | 
SMS4_ENABLED
))

	)

96 
	#IW_WSEC_ENABLED
(
w£c
Ë((w£cË& (
WEP_ENABLED
 | 
TKIP_ENABLED
 | 
AES_ENABLED
))

	)

98 #ifde‡
WL11U


99 #i‚de‡
WL_ENABLE_P2P_IF


104 
	#IW_WSEC_ENABLED
(
w£c
Ë((w£cË& (
WEP_ENABLED
 | 
TKIP_ENABLED
 | 
AES_ENABLED
))

	)

106 
devi˚
 *
	gcfg80211_∑ª¡_dev
 = 
NULL
;

107 
wl_¥iv
 *
	gwlcfg_drv_¥iv
 = 
NULL
;

108 
u32
 
	gwl_dbg_Àvñ
 = 
WL_DBG_ERR
;

110 
	#MAX_WAIT_TIME
 1500

	)

112 #ifde‡
VSDB


114 
	#DEFAULT_SLEEP_TIME_VSDB
 200

	)

115 
	#OFF_CHAN_TIME_THRESHOLD_MS
 200

	)

118 
	#WL_AF_TX_KEEP_PRI_CONNECTION_VSDB
(
wl
) \

120 i‡(
	`wl_gë_drv_°©us
(
wl
, 
CONNECTED
, 
	`wl_to_¥mry_ndev
(wl)) || \

121 
	`wl_gë_drv_°©us
(
wl
, 
CONNECTING
, 
	`wl_to_¥mry_ndev
(wl))) { \

122 
	`m¶ìp
(
DEFAULT_SLEEP_TIME_VSDB
); \

124 } 0)

	)

127 
	#WL_AF_TX_KEEP_PRI_CONNECTION_VSDB
(
wl
)

	)

130 #ifde‡
WL_CFG80211_SYNC_GON


131 
	#WL_DRV_STATUS_SENDING_AF_FRM_EXT
(
wl
) \

132 (
	`wl_gë_drv_°©us_Æl
(
wl
, 
SENDING_ACT_FRM
) || \

133 
	`wl_gë_drv_°©us_Æl
(
wl
, 
WAITING_NEXT_ACT_FRM_LISTEN
))

	)

135 
	#WL_DRV_STATUS_SENDING_AF_FRM_EXT
(
wl
Ë
	`wl_gë_drv_°©us_Æl
(wl, 
SENDING_ACT_FRM
)

	)

138 
	#WL_CHANSPEC_CTL_SB_NONE
 
WL_CHANSPEC_CTL_SB_LLL


	)

141 
	#DNGL_FUNC
(
func
, 
∑ømëîs
Ëfun¯∑ømëîs;

	)

142 
	#COEX_DHCP


	)

144 
	#WLAN_EID_SSID
 0

	)

145 
	#CH_MIN_5G_CHANNEL
 34

	)

146 
	#CH_MIN_2G_CHANNEL
 1

	)

154 c⁄° 
õì80211_ªgdomaö
 
	gbrcm_ªgdom
 = {

155 .
n_ªg_ruÀs
 = 4,

156 .
	gÆpha2
 = "99",

157 .
	gªg_ruÀs
 = {

159 
REG_RULE
(2412-10, 2472+10, 40, 6, 20, 0),

164 
REG_RULE
(2484-10, 2484+10, 20, 6, 20, 0),

166 
REG_RULE
(5150-10, 5350+10, 40, 6, 20, 0),

168 
REG_RULE
(5470-10, 5850+10, 40, 6, 20, 0), }

173 
	#WPS_ID_CONFIG_METHODS
 0x1008

	)

174 
	#WPS_ID_REQ_TYPE
 0x103A

	)

175 
	#WPS_ID_DEVICE_NAME
 0x1011

	)

176 
	#WPS_ID_VERSION
 0x104A

	)

177 
	#WPS_ID_DEVICE_PWD_ID
 0x1012

	)

178 
	#WPS_ID_REQ_DEV_TYPE
 0x106A

	)

179 
	#WPS_ID_SELECTED_REGISTRAR_CONFIG_METHODS
 0x1053

	)

180 
	#WPS_ID_PRIM_DEV_TYPE
 0x1054

	)

183 
	#DEV_PW_DEFAULT
 0x0000

	)

184 
	#DEV_PW_USER_SPECIFIED
 0x0001,

	)

185 
	#DEV_PW_MACHINE_SPECIFIED
 0x0002

	)

186 
	#DEV_PW_REKEY
 0x0003

	)

187 
	#DEV_PW_PUSHBUTTON
 0x0004

	)

188 
	#DEV_PW_REGISTRAR_SPECIFIED
 0x0005

	)

191 
	#WPS_CONFIG_USBA
 0x0001

	)

192 
	#WPS_CONFIG_ETHERNET
 0x0002

	)

193 
	#WPS_CONFIG_LABEL
 0x0004

	)

194 
	#WPS_CONFIG_DISPLAY
 0x0008

	)

195 
	#WPS_CONFIG_EXT_NFC_TOKEN
 0x0010

	)

196 
	#WPS_CONFIG_INT_NFC_TOKEN
 0x0020

	)

197 
	#WPS_CONFIG_NFC_INTERFACE
 0x0040

	)

198 
	#WPS_CONFIG_PUSHBUTTON
 0x0080

	)

199 
	#WPS_CONFIG_KEYPAD
 0x0100

	)

200 
	#WPS_CONFIG_VIRT_PUSHBUTTON
 0x0280

	)

201 
	#WPS_CONFIG_PHY_PUSHBUTTON
 0x0480

	)

202 
	#WPS_CONFIG_VIRT_DISPLAY
 0x2008

	)

203 
	#WPS_CONFIG_PHY_DISPLAY
 0x4008

	)

205 
	#PM_BLOCK
 1

	)

206 
	#PM_ENABLE
 0

	)

210 
s32
 
wl_‰ame_gë_mgmt
(
u16
 
fc
, c⁄° 
ëhî_addr
 *
da
,

211 c⁄° 
ëhî_addr
 *
ß
, c⁄° ëhî_add∏*
bssid
,

212 
u8
 **
phódî
, 
u32
 *
body_Àn
, u8 *
pbody
);

213 
s32
 
__wl_cfg80211_sˇn
(
wùhy
 *wùhy, 
√t_devi˚
 *
ndev
,

214 
cfg80211_sˇn_ªque°
 *
ªque°
,

215 
cfg80211_ssid
 *
this_ssid
);

216 
s32
 
wl_cfg80211_sˇn
(
wùhy
 *wùhy, 
√t_devi˚
 *
ndev
,

217 
cfg80211_sˇn_ªque°
 *
ªque°
);

218 
s32
 
wl_cfg80211_£t_wùhy_∑øms
(
wùhy
 *wùhy, 
u32
 
ch™ged
);

219 
s32
 
wl_cfg80211_joö_ibss
(
wùhy
 *wùhy, 
√t_devi˚
 *
dev
,

220 
cfg80211_ibss_∑øms
 *
∑øms
);

221 
s32
 
wl_cfg80211_Àave_ibss
(
wùhy
 *wiphy,

222 
√t_devi˚
 *
dev
);

223 
s32
 
wl_cfg80211_gë_°©i⁄
(
wùhy
 *wiphy,

224 
√t_devi˚
 *
dev
, 
u8
 *
mac
,

225 
°©i⁄_öfo
 *
söfo
);

226 
s32
 
wl_cfg80211_£t_powî_mgmt
(
wùhy
 *wiphy,

227 
√t_devi˚
 *
dev
, 
boﬁ
 
íabÀd
,

228 
s32
 
timeout
);

229 
wl_cfg80211_c⁄√˘
(
wùhy
 *wùhy, 
√t_devi˚
 *
dev
,

230 
cfg80211_c⁄√˘_∑øms
 *
sme
);

231 
s32
 
wl_cfg80211_disc⁄√˘
(
wùhy
 *wùhy, 
√t_devi˚
 *
dev
,

232 
u16
 
ªas⁄_code
);

233 
s32
 
wl_cfg80211_£t_tx_powî
(
wùhy
 *wiphy,

234 
∆80211_tx_powî_£âög
 
ty≥
,

235 
s32
 
dbm
);

236 
s32
 
wl_cfg80211_gë_tx_powî
(
wùhy
 *wùhy, s32 *
dbm
);

237 
s32
 
wl_cfg80211_c⁄fig_deÁu…_key
(
wùhy
 *wiphy,

238 
√t_devi˚
 *
dev
,

239 
u8
 
key_idx
, 
boﬁ
 
uniˇ°
, boﬁ 
mu…iˇ°
);

240 
s32
 
wl_cfg80211_add_key
(
wùhy
 *wùhy, 
√t_devi˚
 *
dev
,

241 
u8
 
key_idx
, 
boﬁ
 
∑úwi£
, c⁄° u8 *
mac_addr
,

242 
key_∑øms
 *
∑øms
);

243 
s32
 
wl_cfg80211_dñ_key
(
wùhy
 *wùhy, 
√t_devi˚
 *
dev
,

244 
u8
 
key_idx
, 
boﬁ
 
∑úwi£
, c⁄° u8 *
mac_addr
);

245 
s32
 
wl_cfg80211_gë_key
(
wùhy
 *wùhy, 
√t_devi˚
 *
dev
,

246 
u8
 
key_idx
, 
boﬁ
 
∑úwi£
, c⁄° u8 *
mac_addr
,

247 *
cookõ
, (*
ˇŒback
) (*cookie,

248 
key_∑øms
 *
∑øms
));

249 
s32
 
	`wl_cfg80211_c⁄fig_deÁu…_mgmt_key
(
wùhy
 *wiphy,

250 
√t_devi˚
 *
dev
, 
u8
 
key_idx
);

251 
s32
 
	`wl_cfg80211_ªsume
(
wùhy
 *wiphy);

252 #i‡
	`deföed
(
WL_SUPPORT_BACKPORTED_KPATCHES
Ë|| (
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(3, \

254 
s32
 
	`wl_cfg80211_mgmt_tx_ˇn˚l_waô
(
wùhy
 *wiphy,

255 
√t_devi˚
 *
dev
, 
u64
 
cookõ
);

256 
s32
 
	`wl_cfg80211_dñ_°©i⁄
(
wùhy
 *wiphy,

257 
√t_devi˚
 *
ndev
, 
u8
* 
mac_addr
);

259 #i‡
LINUX_VERSION_CODE
 > 
	`KERNEL_VERSION
(2, 6, 39)

260 
s32
 
	`wl_cfg80211_su•íd
(
wùhy
 *wùhy, 
cfg80211_wowœn
 *
wow
);

262 
s32
 
	`wl_cfg80211_su•íd
(
wùhy
 *wiphy);

264 
s32
 
	`wl_cfg80211_£t_pmkß
(
wùhy
 *wùhy, 
√t_devi˚
 *
dev
,

265 
cfg80211_pmkß
 *
pmkß
);

266 
s32
 
	`wl_cfg80211_dñ_pmkß
(
wùhy
 *wùhy, 
√t_devi˚
 *
dev
,

267 
cfg80211_pmkß
 *
pmkß
);

268 
s32
 
	`wl_cfg80211_Êush_pmkß
(
wùhy
 *wiphy,

269 
√t_devi˚
 *
dev
);

270 
s32
 
	`wl_nŸify_esˇn_com∂ëe
(
wl_¥iv
 *
wl
,

271 
√t_devi˚
 *
ndev
, 
boﬁ
 
ab‹ãd
, boﬁ 
fw_ab‹t
);

275 
s32
 
	`wl_¸óã_evít_h™dÀr
(
wl_¥iv
 *
wl
);

276 
	`wl_de°roy_evít_h™dÀr
(
wl_¥iv
 *
wl
);

277 
s32
 
	`wl_evít_h™dÀr
(*
d©a
);

278 
	`wl_öô_eq
(
wl_¥iv
 *
wl
);

279 
	`wl_Êush_eq
(
wl_¥iv
 *
wl
);

280 
	`wl_lock_eq
(
wl_¥iv
 *
wl
);

281 
	`wl_u∆ock_eq
(
wl_¥iv
 *
wl
, 
Êags
);

282 
	`wl_öô_eq_lock
(
wl_¥iv
 *
wl
);

283 
	`wl_öô_evít_h™dÀr
(
wl_¥iv
 *
wl
);

284 
wl_evít_q
 *
	`wl_deq_evít
(
wl_¥iv
 *
wl
);

285 
s32
 
	`wl_íq_evít
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
, 
u32
 
ty≥
,

286 c⁄° 
wl_evít_msg_t
 *
msg
, *
d©a
);

287 
	`wl_put_evít
(
wl_evít_q
 *
e
);

288 
	`wl_wakeup_evít
(
wl_¥iv
 *
wl
);

289 
s32
 
	`wl_nŸify_c⁄√˘_°©us_≠
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
,

290 c⁄° 
wl_evít_msg_t
 *
e
, *
d©a
);

291 
s32
 
	`wl_nŸify_c⁄√˘_°©us
(
wl_¥iv
 *
wl
,

292 
√t_devi˚
 *
ndev
,

293 c⁄° 
wl_evít_msg_t
 *
e
, *
d©a
);

294 
s32
 
	`wl_nŸify_rﬂmög_°©us
(
wl_¥iv
 *
wl
,

295 
√t_devi˚
 *
ndev
,

296 c⁄° 
wl_evít_msg_t
 *
e
, *
d©a
);

297 
s32
 
	`wl_nŸify_sˇn_°©us
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
,

298 c⁄° 
wl_evít_msg_t
 *
e
, *
d©a
);

299 
s32
 
	`wl_bss_c⁄√˘_d⁄e
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
,

300 c⁄° 
wl_evít_msg_t
 *
e
, *
d©a
, 
boﬁ
 
com∂ëed
);

301 
s32
 
	`wl_bss_rﬂmög_d⁄e
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
,

302 c⁄° 
wl_evít_msg_t
 *
e
, *
d©a
);

303 
s32
 
	`wl_nŸify_mic_°©us
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
,

304 c⁄° 
wl_evít_msg_t
 *
e
, *
d©a
);

305 #ifde‡
WL_SCHED_SCAN


306 
s32


307 
	`wl_nŸify_sched_sˇn_ªsu…s
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
,

308 c⁄° 
wl_evít_msg_t
 *
e
, *
d©a
);

310 #ifde‡
PNO_SUPPORT


311 
s32
 
	`wl_nŸify_p‚_°©us
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
,

312 c⁄° 
wl_evít_msg_t
 *
e
, *
d©a
);

314 
s32
 
	`wl_nŸifõr_ch™ge_°©e
(
wl_¥iv
 *
wl
, 
√t_öfo
 *
_√t_öfo
,

315 
wl_°©us
 
°©e
, 
boﬁ
 
£t
);

319 
	`wl_cfg80211_˛ór_∑ª¡_dev
();

328 
s32
 
	`wl_£t_‰ag
(
√t_devi˚
 *
dev
, 
u32
 
‰ag_thªshﬁd
);

329 
s32
 
	`wl_£t_πs
(
√t_devi˚
 *
dev
, 
u32
 
‰ag_thªshﬁd
);

330 
s32
 
	`wl_£t_ªåy
(
√t_devi˚
 *
dev
, 
u32
 
ªåy
, 
boﬁ
 
l
);

335 
s32
 
	`wl_upd©e_¥of
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
,

336 c⁄° 
wl_evít_msg_t
 *
e
, *
d©a
, 
s32
 
ôem
);

337 *
	`wl_ªad_¥of
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
, 
s32
 
ôem
);

338 
	`wl_öô_¥of
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
);

343 
s32
 
	`wl_£t_w∑_vîsi⁄
(
√t_devi˚
 *
dev
,

344 
cfg80211_c⁄√˘_∑øms
 *
sme
);

345 
s32
 
	`wl_£t_auth_ty≥
(
√t_devi˚
 *
dev
,

346 
cfg80211_c⁄√˘_∑øms
 *
sme
);

347 
s32
 
	`wl_£t_£t_cùhî
(
√t_devi˚
 *
dev
,

348 
cfg80211_c⁄√˘_∑øms
 *
sme
);

349 
s32
 
	`wl_£t_key_mgmt
(
√t_devi˚
 *
dev
,

350 
cfg80211_c⁄√˘_∑øms
 *
sme
);

351 
s32
 
	`wl_£t_£t_sh¨edkey
(
√t_devi˚
 *
dev
,

352 
cfg80211_c⁄√˘_∑øms
 *
sme
);

353 #ifde‡
BCMWAPI_WPI


354 
s32
 
	`wl_£t_£t_w≠i_õ
(
√t_devi˚
 *
dev
,

355 
cfg80211_c⁄√˘_∑øms
 *
sme
);

357 
s32
 
	`wl_gë_assoc_õs
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
);

358 
	`wl_ch_to_ch™•ec
(
ch
,

359 
wl_joö_∑øms
 *
joö_∑øms
, 
size_t
 *
joö_∑øms_size
);

364 
	`wl_r°_õ
(
wl_¥iv
 *
wl
);

365 
__u£d
 
s32
 
	`wl_add_õ
(
wl_¥iv
 *
wl
, 
u8
 
t
, u8 
l
, u8 *
v
);

366 
s32
 
	`wl_mrg_õ
(
wl_¥iv
 *
wl
, 
u8
 *
õ_°ªam
, 
u16
 
õ_size
);

367 
s32
 
	`wl_˝_õ
(
wl_¥iv
 *
wl
, 
u8
 *
d°
, 
u16
 
d°_size
);

368 
u32
 
	`wl_gë_õÀn
(
wl_¥iv
 *
wl
);

370 #ifde‡
WL11U


371 
bcm_év_t
 *

372 
	`wl_cfg80211_föd_öãrw‹kög_õ
(
u8
 *
∑r£
, 
u32
 
Àn
);

373 
s32


374 
	`wl_cfg80211_add_iw_õ
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
, 
s32
 
bssidx
, s32 
pktÊag
,

375 
uöt8
 
õ_id
, uöt8 *
d©a
, uöt8 
d©a_Àn
);

378 
s32
 
	`wl_£tup_wùhy
(
wúñess_dev
 *
wdev
, 
devi˚
 *
dev
);

379 
	`wl_‰ì_wdev
(
wl_¥iv
 *
wl
);

381 
	`wl_cfg80211_ªg_nŸifõr
(
wùhy
 *wùhy, 
ªguœt‹y_ªque°
 *
ªque°
);

383 
s32
 
	`wl_öf‹m_bss
(
wl_¥iv
 *
wl
);

384 
s32
 
	`wl_öf‹m_sögÀ_bss
(
wl_¥iv
 *
wl
, 
wl_bss_öfo
 *
bi
, 
u8
 
is_rﬂm_d⁄e
);

385 
s32
 
	`wl_upd©e_bss_öfo
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
, 
u8
 
is_rﬂm_d⁄e
);

386 
ch™•ec_t
 
	`wl_cfg80211_gë_sh¨ed_‰eq
(
wùhy
 *wiphy);

387 
s32
 
	`wl_cfg80211_ch™√l_to_‰eq
(
u32
 
ch™√l
);

389 #i‡
	`deföed
(
DHCP_SCAN_SUPPRESS
)

390 
	`wl_cfg80211_w‹k_h™dÀr
(
w‹k_°ru˘
 *
w‹k
);

391 
	`wl_cfg80211_sˇn_suµ_timîfunc
(
ul⁄g
 
d©a
);

394 
s32
 
	`wl_add_keyext
(
wùhy
 *wùhy, 
√t_devi˚
 *
dev
,

395 
u8
 
key_idx
, c⁄° u8 *
mac_addr
,

396 
key_∑øms
 *
∑øms
);

400 
	`sw≠_key_‰om_BE
(
wl_w£c_key
 *
key
);

401 
	`sw≠_key_to_BE
(
wl_w£c_key
 *
key
);

406 
s32
 
	`wl_öô_¥iv_mem
(
wl_¥iv
 *
wl
);

407 
	`wl_deöô_¥iv_mem
(
wl_¥iv
 *
wl
);

409 
	`wl_dñay
(
u32
 
ms
);

414 
boﬁ
 
	`wl_is_ibssmode
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
);

415 
__u£d
 
boﬁ
 
	`wl_is_ibss°¨ãr
(
wl_¥iv
 *
wl
);

420 
s32
 
	`__wl_cfg80211_up
(
wl_¥iv
 *
wl
);

421 
s32
 
	`__wl_cfg80211_down
(
wl_¥iv
 *
wl
);

422 
boﬁ
 
	`wl_is_lökdown
(
wl_¥iv
 *
wl
, c⁄° 
wl_evít_msg_t
 *
e
);

423 
boﬁ
 
	`wl_is_lökup
(
wl_¥iv
 *
wl
, c⁄° 
wl_evít_msg_t
 *
e
, 
√t_devi˚
 *
ndev
);

424 
boﬁ
 
	`wl_is_n⁄ëw‹k
(
wl_¥iv
 *
wl
, c⁄° 
wl_evít_msg_t
 *
e
);

425 
	`wl_lök_up
(
wl_¥iv
 *
wl
);

426 
	`wl_lök_down
(
wl_¥iv
 *
wl
);

427 
s32
 
	`wl_c⁄fig_ifmode
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
, s32 
i·y≥
);

428 
	`wl_öô_c⁄f
(
wl_c⁄f
 *
c⁄f
);

433 
	`wl_isˇn_timî
(
d©a
);

434 
	`wl_ãrm_isˇn
(
wl_¥iv
 *
wl
);

435 
s32
 
	`wl_öô_sˇn
(
wl_¥iv
 *
wl
);

436 
s32
 
	`wl_isˇn_thªad
(*
d©a
);

437 
s32
 
	`wl_run_isˇn
(
wl_isˇn_˘æ
 *
isˇn
, 
cfg80211_sˇn_ªque°
 *
ªque°
,

438 
u16
 
a˘i⁄
);

439 
s32
 
	`wl_do_isˇn
(
wl_¥iv
 *
wl
, 
cfg80211_sˇn_ªque°
 *
ªque°
);

440 
s32
 
	`wl_wakeup_isˇn
(
wl_isˇn_˘æ
 *
isˇn
);

441 
s32
 
	`wl_övoke_isˇn
(
wl_¥iv
 *
wl
);

442 
s32
 
	`wl_gë_isˇn_ªsu…s
(
wl_isˇn_˘æ
 *
isˇn
, 
u32
 *
°©us
,

443 
wl_sˇn_ªsu…s
 **
bss_li°
);

444 
	`wl_nŸify_isˇn_com∂ëe
(
wl_isˇn_˘æ
 *
isˇn
, 
boﬁ
 
ab‹ãd
);

445 
	`wl_öô_isˇn_h™dÀr
(
wl_isˇn_˘æ
 *
isˇn
);

446 
s32
 
	`wl_isˇn_d⁄e
(
wl_¥iv
 *
wl
);

447 
s32
 
	`wl_isˇn_≥ndög
(
wl_¥iv
 *
wl
);

448 
s32
 
	`wl_isˇn_ö¥ogªss
(
wl_¥iv
 *
wl
);

449 
s32
 
	`wl_isˇn_ab‹ãd
(
wl_¥iv
 *
wl
);

454 
__u£d
 
u32
 
	`wl_föd_msb
(
u16
 
bô16
);

459 
	`wl_£tup_rfkûl
(
wl_¥iv
 *
wl
, 
boﬁ
 
£tup
);

460 
	`wl_rfkûl_£t
(*
d©a
, 
boﬁ
 
blocked
);

462 
wl_sˇn_∑øms_t
 *
	`wl_cfg80211_sˇn_Æloc_∑øms
(
ch™√l
,

463 
≈robes
, *
out_∑øms_size
);

464 
	`gë_¥im¨y_mac
(
wl_¥iv
 *
wl
, 
ëhî_addr
 *
mac
);

469 
	`dhd_add_m⁄ô‹
(*
«me
, 
√t_devi˚
 **
√w_ndev
);

470 
	`dhd_dñ_m⁄ô‹
(
√t_devi˚
 *
ndev
);

471 
	`dhd_m⁄ô‹_öô
(*
dhd_pub
);

472 
	`dhd_m⁄ô‹_unöô
();

473 
	`dhd_°¨t_xmô
(
sk_buff
 *
skb
, 
√t_devi˚
 *
√t
);

477 
	#CHECK_SYS_UP
(
wÕriv
) \

479 
√t_devi˚
 *
ndev
 = 
	`wl_to_¥mry_ndev
(
wÕriv
); \

480 i‡(
	`u∆ikñy
(!
	`wl_gë_drv_°©us
(
wÕriv
, 
READY
, 
ndev
))) { \

481 
	`WL_INFO
(("device isÇotÑeady\n")); \

482  -
EIO
; \

484 
	}
} 0)

	)

487 
	#IS_WPA_AKM
(
akm
Ë(◊kmË=
RSN_AKM_NONE
 || \

488 (
akm
Ë=
RSN_AKM_UNSPECIFIED
 || \

489 (
akm
Ë=
RSN_AKM_PSK
)

	)

492 
dhd_waô_≥nd8021x
(
√t_devi˚
 *
dev
);

493 #ifde‡
PROP_TXSTATUS_VSDB


494 
dißbÀ_¥›tx
;

495 
dhd_wlfc_öô
(
dhd_pub_t
 *
dhd
);

496 
dhd_wlfc_deöô
(
dhd_pub_t
 *
dhd
);

499 #i‡(
WL_DBG_LEVEL
 > 0)

500 
	#WL_DBG_ESTR_MAX
 50

	)

501 
s8
 
	gwl_dbg_e°r
[][
WL_DBG_ESTR_MAX
] = {

528 
	#CHAN2G
(
_ch™√l
, 
_‰eq
, 
_Êags
) { \

529 .
b™d
 = 
IEEE80211_BAND_2GHZ
, \

530 .
˚¡î_‰eq
 = (
_‰eq
), \

531 .
hw_vÆue
 = (
_ch™√l
), \

532 .
Êags
 = (
_Êags
), \

533 .
max_™ã¬a_gaö
 = 0, \

534 .
max_powî
 = 30, \

535 }

	)

537 
	#CHAN5G
(
_ch™√l
, 
_Êags
) { \

538 .
b™d
 = 
IEEE80211_BAND_5GHZ
, \

539 .
˚¡î_‰eq
 = 5000 + (5 * (
_ch™√l
)), \

540 .
hw_vÆue
 = (
_ch™√l
), \

541 .
Êags
 = (
_Êags
), \

542 .
max_™ã¬a_gaö
 = 0, \

543 .
max_powî
 = 30, \

544 }

	)

546 
	#RATE_TO_BASE100KBPS
(
øã
Ë((‘©eË* 10Ë/ 2)

	)

547 
	#RATETAB_ENT
(
_øãid
, 
_Êags
) \

549 .
bôøã
 = 
	`RATE_TO_BASE100KBPS
(
_øãid
), \

550 .
hw_vÆue
 = (
_øãid
), \

551 .
Êags
 = (
_Êags
), \

552 }

	)

554 
õì80211_øã
 
	g__wl_øãs
[] = {

555 
RATETAB_ENT
(
WLC_RATE_1M
, 0),

556 
RATETAB_ENT
(
WLC_RATE_2M
, 
IEEE80211_RATE_SHORT_PREAMBLE
),

557 
RATETAB_ENT
(
WLC_RATE_5M5
, 
IEEE80211_RATE_SHORT_PREAMBLE
),

558 
RATETAB_ENT
(
WLC_RATE_11M
, 
IEEE80211_RATE_SHORT_PREAMBLE
),

559 
RATETAB_ENT
(
WLC_RATE_6M
, 0),

560 
RATETAB_ENT
(
WLC_RATE_9M
, 0),

561 
RATETAB_ENT
(
WLC_RATE_12M
, 0),

562 
RATETAB_ENT
(
WLC_RATE_18M
, 0),

563 
RATETAB_ENT
(
WLC_RATE_24M
, 0),

564 
RATETAB_ENT
(
WLC_RATE_36M
, 0),

565 
RATETAB_ENT
(
WLC_RATE_48M
, 0),

566 
RATETAB_ENT
(
WLC_RATE_54M
, 0)

569 
	#wl_a_øãs
 (
__wl_øãs
 + 4)

	)

570 
	#wl_a_øãs_size
 8

	)

571 
	#wl_g_øãs
 (
__wl_øãs
 + 0)

	)

572 
	#wl_g_øãs_size
 12

	)

574 
õì80211_ch™√l
 
	g__wl_2ghz_ch™√ls
[] = {

575 
CHAN2G
(1, 2412, 0),

576 
CHAN2G
(2, 2417, 0),

577 
CHAN2G
(3, 2422, 0),

578 
CHAN2G
(4, 2427, 0),

579 
CHAN2G
(5, 2432, 0),

580 
CHAN2G
(6, 2437, 0),

581 
CHAN2G
(7, 2442, 0),

582 
CHAN2G
(8, 2447, 0),

583 
CHAN2G
(9, 2452, 0),

584 
CHAN2G
(10, 2457, 0),

585 
CHAN2G
(11, 2462, 0),

586 
CHAN2G
(12, 2467, 0),

587 
CHAN2G
(13, 2472, 0),

588 
CHAN2G
(14, 2484, 0)

591 
õì80211_ch™√l
 
	g__wl_5ghz_a_ch™√ls
[] = {

592 
CHAN5G
(34, 0), CHAN5G(36, 0),

593 
CHAN5G
(38, 0), CHAN5G(40, 0),

594 
CHAN5G
(42, 0), CHAN5G(44, 0),

595 
CHAN5G
(46, 0), CHAN5G(48, 0),

596 
CHAN5G
(52, 0), CHAN5G(56, 0),

597 
CHAN5G
(60, 0), CHAN5G(64, 0),

598 
CHAN5G
(100, 0), CHAN5G(104, 0),

599 
CHAN5G
(108, 0), CHAN5G(112, 0),

600 
CHAN5G
(116, 0), CHAN5G(120, 0),

601 
CHAN5G
(124, 0), CHAN5G(128, 0),

602 
CHAN5G
(132, 0), CHAN5G(136, 0),

603 
CHAN5G
(140, 0), CHAN5G(149, 0),

604 
CHAN5G
(153, 0), CHAN5G(157, 0),

605 
CHAN5G
(161, 0), CHAN5G(165, 0)

608 
õì80211_suµ‹ãd_b™d
 
	g__wl_b™d_2ghz
 = {

609 .
b™d
 = 
IEEE80211_BAND_2GHZ
,

610 .
	gch™√ls
 = 
__wl_2ghz_ch™√ls
,

611 .
	gn_ch™√ls
 = 
ARRAY_SIZE
(
__wl_2ghz_ch™√ls
),

612 .
	gbôøãs
 = 
wl_g_øãs
,

613 .
	gn_bôøãs
 = 
wl_g_øãs_size


616 
õì80211_suµ‹ãd_b™d
 
	g__wl_b™d_5ghz_a
 = {

617 .
b™d
 = 
IEEE80211_BAND_5GHZ
,

618 .
	gch™√ls
 = 
__wl_5ghz_a_ch™√ls
,

619 .
	gn_ch™√ls
 = 
ARRAY_SIZE
(
__wl_5ghz_a_ch™√ls
),

620 .
	gbôøãs
 = 
wl_a_øãs
,

621 .
	gn_bôøãs
 = 
wl_a_øãs_size


624 c⁄° 
u32
 
	g__wl_cùhî_suôes
[] = {

625 
WLAN_CIPHER_SUITE_WEP40
,

626 
WLAN_CIPHER_SUITE_WEP104
,

627 
WLAN_CIPHER_SUITE_TKIP
,

628 
WLAN_CIPHER_SUITE_CCMP
,

629 
WLAN_CIPHER_SUITE_AES_CMAC
,

630 #ifde‡
BCMWAPI_WPI


631 
WLAN_CIPHER_SUITE_SMS4


637 
	gio˘l_vîsi⁄
;

642 
ch™•ec_t


643 
	$wl_ch•ec_‰om_Àgacy
(
ch™•ec_t
 
Àgacy_ch•ec
)

645 
ch™•ec_t
 
ch•ec
;

648 
ch•ec
 = 
	`LCHSPEC_CHANNEL
(
Àgacy_ch•ec
);

651 i‡(
	`LCHSPEC_IS2G
(
Àgacy_ch•ec
)) {

652 
ch•ec
 |
WL_CHANSPEC_BAND_2G
;

654 
ch•ec
 |
WL_CHANSPEC_BAND_5G
;

658 i‡(
	`LCHSPEC_IS20
(
Àgacy_ch•ec
)) {

659 
ch•ec
 |
WL_CHANSPEC_BW_20
;

661 
ch•ec
 |
WL_CHANSPEC_BW_40
;

662 i‡(
	`LCHSPEC_CTL_SB
(
Àgacy_ch•ec
Ë=
WL_LCHANSPEC_CTL_SB_LOWER
) {

663 
ch•ec
 |
WL_CHANSPEC_CTL_SB_L
;

665 
ch•ec
 |
WL_CHANSPEC_CTL_SB_U
;

669 i‡(
	`wf_ch•ec_mÆf‹med
(
ch•ec
)) {

670 
	`WL_ERR
(("wl_chspec_from_legacy: output chanspec (0x%04X) malformed\n",

671 
ch•ec
));

672  
INVCHANSPEC
;

675  
ch•ec
;

676 
	}
}

681 
ch™•ec_t


682 
	$wl_ch•ec_to_Àgacy
(
ch™•ec_t
 
ch•ec
)

684 
ch™•ec_t
 
lch•ec
;

686 i‡(
	`wf_ch•ec_mÆf‹med
(
ch•ec
)) {

687 
	`WL_ERR
(("wl_chspec_to_legacy: input chanspec (0x%04X) malformed\n",

688 
ch•ec
));

689  
INVCHANSPEC
;

693 
lch•ec
 = 
	`CHSPEC_CHANNEL
(
ch•ec
);

696 i‡(
	`CHSPEC_IS2G
(
ch•ec
)) {

697 
lch•ec
 |
WL_LCHANSPEC_BAND_2G
;

699 
lch•ec
 |
WL_LCHANSPEC_BAND_5G
;

703 i‡(
	`CHSPEC_IS20
(
ch•ec
)) {

704 
lch•ec
 |
WL_LCHANSPEC_BW_20
;

705 
lch•ec
 |
WL_LCHANSPEC_CTL_SB_NONE
;

706 } i‡(
	`CHSPEC_IS40
(
ch•ec
)) {

707 
lch•ec
 |
WL_LCHANSPEC_BW_40
;

708 i‡(
	`CHSPEC_CTL_SB
(
ch•ec
Ë=
WL_CHANSPEC_CTL_SB_L
) {

709 
lch•ec
 |
WL_LCHANSPEC_CTL_SB_LOWER
;

711 
lch•ec
 |
WL_LCHANSPEC_CTL_SB_UPPER
;

715 
ch™buf
[
CHANSPEC_STR_LEN
];

716 
	`WL_ERR
((

719 
	`wf_ch•ec_¡ﬂ
(
ch•ec
, 
ch™buf
), chspec));

720  
INVCHANSPEC
;

723  
lch•ec
;

724 
	}
}

730 
ch™•ec_t


731 
	$wl_ch•ec_ho°_to_drivî
(
ch™•ec_t
 
ch™•ec
)

733 i‡(
io˘l_vîsi⁄
 == 1) {

734 
ch™•ec
 = 
	`wl_ch•ec_to_Àgacy
(chanspec);

735 i‡(
ch™•ec
 =
INVCHANSPEC
) {

736  
ch™•ec
;

739 
ch™•ec
 = 
	`htodch™•ec
(chanspec);

741  
ch™•ec
;

742 
	}
}

748 
ch™•ec_t


749 
	$wl_ch_ho°_to_drivî
(
u16
 
ch™√l
)

752 
ch™•ec_t
 
ch™•ec
;

754 
ch™•ec
 = 
ch™√l
 & 
WL_CHANSPEC_CHAN_MASK
;

756 i‡(
ch™√l
 <
CH_MAX_2G_CHANNEL
)

757 
ch™•ec
 |
WL_CHANSPEC_BAND_2G
;

759 
ch™•ec
 |
WL_CHANSPEC_BAND_5G
;

761 
ch™•ec
 |
WL_CHANSPEC_BW_20
;

762 
ch™•ec
 |
WL_CHANSPEC_CTL_SB_NONE
;

764  
	`wl_ch•ec_ho°_to_drivî
(
ch™•ec
);

765 
	}
}

771 
ch™•ec_t


772 
	$wl_ch•ec_drivî_to_ho°
(
ch™•ec_t
 
ch™•ec
)

774 
ch™•ec
 = 
	`dtohch™•ec
(chanspec);

775 i‡(
io˘l_vîsi⁄
 == 1) {

776 
ch™•ec
 = 
	`wl_ch•ec_‰om_Àgacy
(chanspec);

779  
ch™•ec
;

780 
	}
}

783 c⁄° 
õì80211_txrx_°y≥s


784 
	gwl_cfg80211_deÁu…_mgmt_°y≥s
[
NUM_NL80211_IFTYPES
] = {

785 [
NL80211_IFTYPE_ADHOC
] = {

786 .
tx
 = 0xffff,

787 .
	grx
 = 
BIT
(
IEEE80211_STYPE_ACTION
 >> 4)

789 [
NL80211_IFTYPE_STATION
] = {

790 .
tx
 = 0xffff,

791 .
	grx
 = 
BIT
(
IEEE80211_STYPE_ACTION
 >> 4) |

792 
BIT
(
IEEE80211_STYPE_PROBE_REQ
 >> 4)

794 [
NL80211_IFTYPE_AP
] = {

795 .
tx
 = 0xffff,

796 .
	grx
 = 
BIT
(
IEEE80211_STYPE_ASSOC_REQ
 >> 4) |

797 
BIT
(
IEEE80211_STYPE_REASSOC_REQ
 >> 4) |

798 
BIT
(
IEEE80211_STYPE_PROBE_REQ
 >> 4) |

799 
BIT
(
IEEE80211_STYPE_DISASSOC
 >> 4) |

800 
BIT
(
IEEE80211_STYPE_AUTH
 >> 4) |

801 
BIT
(
IEEE80211_STYPE_DEAUTH
 >> 4) |

802 
BIT
(
IEEE80211_STYPE_ACTION
 >> 4)

804 [
NL80211_IFTYPE_AP_VLAN
] = {

806 .
tx
 = 0xffff,

807 .
	grx
 = 
BIT
(
IEEE80211_STYPE_ASSOC_REQ
 >> 4) |

808 
BIT
(
IEEE80211_STYPE_REASSOC_REQ
 >> 4) |

809 
BIT
(
IEEE80211_STYPE_PROBE_REQ
 >> 4) |

810 
BIT
(
IEEE80211_STYPE_DISASSOC
 >> 4) |

811 
BIT
(
IEEE80211_STYPE_AUTH
 >> 4) |

812 
BIT
(
IEEE80211_STYPE_DEAUTH
 >> 4) |

813 
BIT
(
IEEE80211_STYPE_ACTION
 >> 4)

815 [
NL80211_IFTYPE_P2P_CLIENT
] = {

816 .
tx
 = 0xffff,

817 .
	grx
 = 
BIT
(
IEEE80211_STYPE_ACTION
 >> 4) |

818 
BIT
(
IEEE80211_STYPE_PROBE_REQ
 >> 4)

820 [
NL80211_IFTYPE_P2P_GO
] = {

821 .
tx
 = 0xffff,

822 .
	grx
 = 
BIT
(
IEEE80211_STYPE_ASSOC_REQ
 >> 4) |

823 
BIT
(
IEEE80211_STYPE_REASSOC_REQ
 >> 4) |

824 
BIT
(
IEEE80211_STYPE_PROBE_REQ
 >> 4) |

825 
BIT
(
IEEE80211_STYPE_DISASSOC
 >> 4) |

826 
BIT
(
IEEE80211_STYPE_AUTH
 >> 4) |

827 
BIT
(
IEEE80211_STYPE_DEAUTH
 >> 4) |

828 
BIT
(
IEEE80211_STYPE_ACTION
 >> 4)

832 
	$sw≠_key_‰om_BE
(
wl_w£c_key
 *
key
)

834 
key
->
ödex
 = 
	`htod32
(key->index);

835 
key
->
Àn
 = 
	`htod32
(key->len);

836 
key
->
Ægo
 = 
	`htod32
(key->algo);

837 
key
->
Êags
 = 
	`htod32
(key->flags);

838 
key
->
rxiv
.
hi
 = 
	`htod32
(key->rxiv.hi);

839 
key
->
rxiv
.
lo
 = 
	`htod16
(key->rxiv.lo);

840 
key
->
iv_öôülized
 = 
	`htod32
(key->iv_initialized);

841 
	}
}

843 
	$sw≠_key_to_BE
(
wl_w£c_key
 *
key
)

845 
key
->
ödex
 = 
	`dtoh32
(key->index);

846 
key
->
Àn
 = 
	`dtoh32
(key->len);

847 
key
->
Ægo
 = 
	`dtoh32
(key->algo);

848 
key
->
Êags
 = 
	`dtoh32
(key->flags);

849 
key
->
rxiv
.
hi
 = 
	`dtoh32
(key->rxiv.hi);

850 
key
->
rxiv
.
lo
 = 
	`dtoh16
(key->rxiv.lo);

851 
key
->
iv_öôülized
 = 
	`dtoh32
(key->iv_initialized);

852 
	}
}

854 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(3, 4, 0)

857 
	$wl_vÆid©e_wps_õ
(*
wps_õ
, 
s32
 
wps_õ_Àn
, 
boﬁ
 *
pbc
)

859 
	#WPS_IE_FIXED_LEN
 6

	)

860 
u16
 
Àn
;

861 
u8
 *
subñ
 = 
NULL
;

862 
u16
 
subñt_id
;

863 
u16
 
subñt_Àn
;

864 
u16
 
vÆ
;

865 
u8
 *
vÆ±r
 = (
uöt8
*Ë&
vÆ
;

866 i‡(
wps_õ
 =
NULL
 || 
wps_õ_Àn
 < 
WPS_IE_FIXED_LEN
) {

867 
	`WL_ERR
(("invalidárgument : NULL\n"));

870 
Àn
 = (
u16
)
wps_õ
[
TLV_LEN_OFF
];

872 i‡(
Àn
 > 
wps_õ_Àn
) {

873 
	`WL_ERR
(("övÆidÜígthÜí %d, wp†õÜí %d\n", 
Àn
, 
wps_õ_Àn
));

876 
	`WL_DBG
(("wps_õÜí=%d\n", 
Àn
));

877 
Àn
 -= 4;

878 
subñ
 = 
wps_õ
 + 
WPS_IE_FIXED_LEN
;

879 
Àn
 >= 4) {

880 
vÆ±r
[0] = *
subñ
++;

881 
vÆ±r
[1] = *
subñ
++;

882 
subñt_id
 = 
	`HTON16
(
vÆ
);

884 
vÆ±r
[0] = *
subñ
++;

885 
vÆ±r
[1] = *
subñ
++;

886 
subñt_Àn
 = 
	`HTON16
(
vÆ
);

888 
Àn
 -= 4;

889 
Àn
 -
subñt_Àn
;

890 
	`WL_DBG
((" subel=%p, subelt_id=0x%x subelt_len=%u\n",

891 
subñ
, 
subñt_id
, 
subñt_Àn
));

893 i‡(
subñt_id
 =
WPS_ID_VERSION
) {

894 
	`WL_DBG
(("áâ∏WPS_ID_VERSION: %u\n", *
subñ
));

895 } i‡(
subñt_id
 =
WPS_ID_REQ_TYPE
) {

896 
	`WL_DBG
(("áâ∏WPS_ID_REQ_TYPE: %u\n", *
subñ
));

897 } i‡(
subñt_id
 =
WPS_ID_CONFIG_METHODS
) {

898 
vÆ±r
[0] = *
subñ
;

899 
vÆ±r
[1] = *(
subñ
 + 1);

900 
	`WL_DBG
(("áâ∏WPS_ID_CONFIG_METHODS: %x\n", 
	`HTON16
(
vÆ
)));

901 } i‡(
subñt_id
 =
WPS_ID_DEVICE_NAME
) {

902 
dev«me
[100];

903 
	`mem˝y
(
dev«me
, 
subñ
, 
subñt_Àn
);

904 
dev«me
[
subñt_Àn
] = '\0';

905 
	`WL_DBG
(("áttr WPS_ID_DEVICE_NAME: %s (len %u)\n",

906 
dev«me
, 
subñt_Àn
));

907 } i‡(
subñt_id
 =
WPS_ID_DEVICE_PWD_ID
) {

908 
vÆ±r
[0] = *
subñ
;

909 
vÆ±r
[1] = *(
subñ
 + 1);

910 
	`WL_DBG
(("áâ∏WPS_ID_DEVICE_PWD_ID: %u\n", 
	`HTON16
(
vÆ
)));

911 *
pbc
 = (
	`HTON16
(
vÆ
Ë=
DEV_PW_PUSHBUTTON
Ë? 
åue
 : 
Ál£
;

912 } i‡(
subñt_id
 =
WPS_ID_PRIM_DEV_TYPE
) {

913 
vÆ±r
[0] = *
subñ
;

914 
vÆ±r
[1] = *(
subñ
 + 1);

915 
	`WL_DBG
(("áâ∏WPS_ID_PRIM_DEV_TYPE: c©=%u \n", 
	`HTON16
(
vÆ
)));

916 
vÆ±r
[0] = *(
subñ
 + 6);

917 
vÆ±r
[1] = *(
subñ
 + 7);

918 
	`WL_DBG
(("áâ∏WPS_ID_PRIM_DEV_TYPE: subˇt=%u\n", 
	`HTON16
(
vÆ
)));

919 } i‡(
subñt_id
 =
WPS_ID_REQ_DEV_TYPE
) {

920 
vÆ±r
[0] = *
subñ
;

921 
vÆ±r
[1] = *(
subñ
 + 1);

922 
	`WL_DBG
(("áâ∏WPS_ID_REQ_DEV_TYPE: c©=%u\n", 
	`HTON16
(
vÆ
)));

923 
vÆ±r
[0] = *(
subñ
 + 6);

924 
vÆ±r
[1] = *(
subñ
 + 7);

925 
	`WL_DBG
(("áâ∏WPS_ID_REQ_DEV_TYPE: subˇt=%u\n", 
	`HTON16
(
vÆ
)));

926 } i‡(
subñt_id
 =
WPS_ID_SELECTED_REGISTRAR_CONFIG_METHODS
) {

927 
vÆ±r
[0] = *
subñ
;

928 
vÆ±r
[1] = *(
subñ
 + 1);

929 
	`WL_DBG
(("áttr WPS_ID_SELECTED_REGISTRAR_CONFIG_METHODS"

930 ": c©=%u\n", 
	`HTON16
(
vÆ
)));

932 
	`WL_DBG
((" unknow¿©å 0x%x\n", 
subñt_id
));

935 
subñ
 +
subñt_Àn
;

937 
	}
}

940 
ch™•ec_t
 
	$wl_cfg80211_gë_sh¨ed_‰eq
(
wùhy
 *wiphy)

942 
ch™•ec_t
 
ch•ec
;

943 
îr
 = 0;

944 
wl_¥iv
 *
wl
 = 
	`wùhy_¥iv
(
wùhy
);

945 
√t_devi˚
 *
dev
 = 
	`wl_to_¥mry_ndev
(
wl
);

946 
ëhî_addr
 
bssid
;

947 
wl_bss_öfo
 *
bss
 = 
NULL
;

949 i‡((
îr
 = 
	`wldev_io˘l
(
dev
, 
WLC_GET_BSSID
, &
bssid
, (bssid), 
Ál£
))) {

954 
	`WL_DBG
(("Notássociated. ReturnáÅemp channel. \n"));

955  
	`wl_ch_ho°_to_drivî
(
WL_P2P_TEMP_CHAN
);

959 *(
u32
 *Ë
wl
->
exåa_buf
 = 
	`htod32
(
WL_EXTRA_BUF_MAX
);

960 i‡((
îr
 = 
	`wldev_io˘l
(
dev
, 
WLC_GET_BSS_INFO
, 
wl
->
exåa_buf
,

961 
WL_EXTRA_BUF_MAX
, 
Ál£
))) {

962 
	`WL_ERR
(("FailedÅo getássociated bss info, useÅemp channel \n"));

963 
ch•ec
 = 
	`wl_ch_ho°_to_drivî
(
WL_P2P_TEMP_CHAN
);

966 
bss
 = (
wl_bss_öfo
 *Ë(
wl
->
exåa_buf
 + 4);

967 
ch•ec
 = 
bss
->
ch™•ec
;

968 
	`WL_DBG
(("VÆid BSS Found. ch™•ec:%d \n", 
ch•ec
));

970  
ch•ec
;

971 
	}
}

973 
√t_devi˚
* 
	$wl_cfg80211_add_m⁄ô‹_if
(*
«me
)

975 #i‡
	`deföed
(
WLP2P
Ë&& deföed(
WL_ENABLE_P2P_IF
)

976 
	`WL_INFO
(("wl_cfg80211_add_monitor_if: No more support monitor interface\n"));

977  
	`ERR_PTR
(-
EOPNOTSUPP
);

979 
√t_devi˚
* 
ndev
 = 
NULL
;

981 
	`dhd_add_m⁄ô‹
(
«me
, &
ndev
);

982 
	`WL_INFO
(("wl_cfg80211_add_m⁄ô‹_i‡√àdevi˚Ñëu∫ed: 0x%p\n", 
ndev
));

983  
ndev
;

985 
	}
}

987 
√t_devi˚
 *

988 
	$wl_cfg80211_add_vútuÆ_iÁ˚
(
wùhy
 *wùhy, *
«me
,

989 
∆80211_i·y≥
 
ty≥
, 
u32
 *
Êags
,

990 
vif_∑øms
 *
∑øms
)

992 
s32
 
îr
;

993 
s32
 
timeout
 = -1;

994 
s32
 
wlif_ty≥
 = -1;

995 
s32
 
mode
 = 0;

996 
s32
 
vÆ
 = 0;

997 
s32
 
dhd_mode
 = 0;

998 
ch™•ec_t
 
ch•ec
;

999 
wl_¥iv
 *
wl
 = 
	`wùhy_¥iv
(
wùhy
);

1000 
√t_devi˚
 *
_ndev
;

1001 
ëhî_addr
 
¥im¨y_mac
;

1002 (*
√t_©èch
)(*
dhdp
, 
ifidx
);

1003 
boﬁ
 
rﬁlback_lock
 = 
Ál£
;

1004 #ifde‡
PROP_TXSTATUS_VSDB


1005 
s32
 
up
 = 1;

1006 
dhd_pub_t
 *
dhd
;

1009 i‡(!
wl
)

1010  
	`ERR_PTR
(-
EINVAL
);

1012 #ifde‡
PROP_TXSTATUS_VSDB


1013 
dhd
 = (
dhd_pub_t
 *)(
wl
->
pub
);

1018 
_ndev
 = 
	`wl_to_¥mry_ndev
(
wl
);

1020 
	`WL_DBG
(("i‡«me: %s,Åy≥: %d\n", 
«me
, 
ty≥
));

1021 
ty≥
) {

1022 
NL80211_IFTYPE_ADHOC
:

1023 
NL80211_IFTYPE_AP_VLAN
:

1024 
NL80211_IFTYPE_WDS
:

1025 
NL80211_IFTYPE_MESH_POINT
:

1026 
	`WL_ERR
(("Unsupported interfaceÅype\n"));

1027 
mode
 = 
WL_MODE_IBSS
;

1028  
NULL
;

1029 
NL80211_IFTYPE_MONITOR
:

1030  
	`wl_cfg80211_add_m⁄ô‹_if
(
«me
);

1031 
NL80211_IFTYPE_P2P_CLIENT
:

1032 
NL80211_IFTYPE_STATION
:

1033 
wlif_ty≥
 = 
WL_P2P_IF_CLIENT
;

1034 
mode
 = 
WL_MODE_BSS
;

1036 
NL80211_IFTYPE_P2P_GO
:

1037 
NL80211_IFTYPE_AP
:

1038 
wlif_ty≥
 = 
WL_P2P_IF_GO
;

1039 
mode
 = 
WL_MODE_AP
;

1042 
	`WL_ERR
(("Unsupported interfaceÅype\n"));

1043  
NULL
;

1047 i‡(!
«me
) {

1048 
	`WL_ERR
(("name is NULL\n"));

1049  
NULL
;

1051 i‡(
wl
->
p2p_suµ‹ãd
 && (
wlif_ty≥
 != -1)) {

1052 i‡(
	`wl_gë_p2p_°©us
(
wl
, 
IF_DELETING
)) {

1056 i‡(
	`π∆_is_locked
()) {

1057 
	`π∆_u∆ock
();

1058 
rﬁlback_lock
 = 
åue
;

1060 
	`WL_INFO
(("%s: ReleasedÅheÜockánd waitÅill IF_DEL is complete\n",

1061 
__func__
));

1062 
timeout
 = 
	`waô_evít_öãºu±ibÀ_timeout
(
wl
->
√tif_ch™ge_evít
,

1063 (
	`wl_gë_p2p_°©us
(
wl
, 
IF_DELETING
Ë=
Ál£
),

1064 
	`m£cs_to_jiffõs
(
MAX_WAIT_TIME
));

1067 i‡(
rﬁlback_lock
) {

1068 
	`π∆_lock
();

1069 
rﬁlback_lock
 = 
Ál£
;

1071 i‡(
timeout
 > 0) {

1072 
	`WL_ERR
(("IF DEL is Success\n"));

1075 
	`WL_ERR
(("timeount < 0,Ñeturn -EAGAIN\n"));

1076  
	`ERR_PTR
(-
EAGAIN
);

1081 i‡(
wl
->
iÁ˚_˙t
 =
IFACE_MAX_CNT
)

1082  
	`ERR_PTR
(-
ENOMEM
);

1085 #ifde‡
PROP_TXSTATUS_VSDB


1086 i‡(!
dhd
)

1087  
	`ERR_PTR
(-
ENODEV
);

1089 i‡(!
wl
->
p2p
)

1090  
	`ERR_PTR
(-
ENODEV
);

1092 i‡(
wl
->
p2p
 && !wl->p2p->
⁄
 && 
	`°r°r
(
«me
, 
WL_P2P_INTERFACE_PREFIX
)) {

1093 
	`p2p_⁄
(
wl
Ë
åue
;

1094 
	`wl_cfgp2p_£t_fúm_p2p
(
wl
);

1095 
	`wl_cfgp2p_öô_discovîy
(
wl
);

1096 
	`gë_¥im¨y_mac
(
wl
, &
¥im¨y_mac
);

1097 
	`wl_cfgp2p_gíî©e_bss_mac
(&
¥im¨y_mac
,

1098 &
wl
->
p2p
->
dev_addr
, &wl->p2p->
öt_addr
);

1101 
	`mem£t
(
wl
->
p2p
->
vú_i‚ame
, 0, 
IFNAMSIZ
);

1102 
	`°∫˝y
(
wl
->
p2p
->
vú_i‚ame
, 
«me
, 
IFNAMSIZ
 - 1);

1104 
	`wl_nŸify_esˇn_com∂ëe
(
wl
, 
_ndev
, 
åue
,Årue);

1105 #ifde‡
PROP_TXSTATUS_VSDB


1106 i‡(!
wl
->
wlfc_⁄
 && !
dißbÀ_¥›tx
) {

1107 
dhd
->
wlfc_íabÀd
 = 
åue
;

1108 
	`dhd_wlfc_öô
(
dhd
);

1109 
îr
 = 
	`wldev_io˘l
(
_ndev
, 
WLC_UP
, &
up
, (
s32
), 
åue
);

1110 i‡(
îr
 < 0)

1111 
	`WL_ERR
(("WLC_UPÑëu∫Éº:%d\n", 
îr
));

1112 
wl
->
wlfc_⁄
 = 
åue
;

1120 
ch•ec
 = 
	`wl_cfg80211_gë_sh¨ed_‰eq
(
wùhy
);

1125 
	`wl_£t_p2p_°©us
(
wl
, 
IF_ADD
);

1126 i‡(
wlif_ty≥
 =
WL_P2P_IF_GO
)

1127 
	`wldev_iov¨_£töt
(
_ndev
, "mpc", 0);

1128 
îr
 = 
	`wl_cfgp2p_iÁdd
(
wl
, &wl->
p2p
->
öt_addr
, 
	`htod32
(
wlif_ty≥
), 
ch•ec
);

1130 i‡(
	`u∆ikñy
(
îr
)) {

1131 
	`WL_ERR
((" vútuÆ iÁ˚ádd faûed (%dË\n", 
îr
));

1132  
	`ERR_PTR
(-
ENOMEM
);

1135 
timeout
 = 
	`waô_evít_öãºu±ibÀ_timeout
(
wl
->
√tif_ch™ge_evít
,

1136 (
	`wl_gë_p2p_°©us
(
wl
, 
IF_ADD
Ë=
Ál£
),

1137 
	`m£cs_to_jiffõs
(
MAX_WAIT_TIME
));

1138 i‡(
timeout
 > 0 && (!
	`wl_gë_p2p_°©us
(
wl
, 
IF_ADD
))) {

1140 
wúñess_dev
 *
vwdev
;

1141 
vwdev
 = 
	`kzÆloc
((*vwdev), 
GFP_KERNEL
);

1142 i‡(
	`u∆ikñy
(!
vwdev
)) {

1143 
	`WL_ERR
(("CouldÇotállocate wireless device\n"));

1144  
	`ERR_PTR
(-
ENOMEM
);

1146 
vwdev
->
wùhy
 = 
wl
->
wdev
->wiphy;

1147 
	`WL_INFO
((" virtual interface(%s) is created memalloc done \n",

1148 
wl
->
p2p
->
vú_i‚ame
));

1149 
vwdev
->
i·y≥
 = 
ty≥
;

1150 
_ndev
 = 
	`wl_to_p2p_bss_ndev
(
wl
, 
P2PAPI_BSSCFG_CONNECTION
);

1151 
_ndev
->
õì80211_±r
 = 
vwdev
;

1152 
	`SET_NETDEV_DEV
(
_ndev
, 
	`wùhy_dev
(
vwdev
->
wùhy
));

1153 
vwdev
->
√tdev
 = 
_ndev
;

1154 
	`wl_£t_drv_°©us
(
wl
, 
READY
, 
_ndev
);

1155 
wl
->
p2p
->
vif_¸óãd
 = 
åue
;

1156 
	`wl_£t_mode_by_√tdev
(
wl
, 
_ndev
, 
mode
);

1157 
√t_©èch
 = 
	`wl_to_p2p_bss_¥iv©e
(
wl
, 
P2PAPI_BSSCFG_CONNECTION
);

1158 i‡(
	`π∆_is_locked
()) {

1159 
	`π∆_u∆ock
();

1160 
rﬁlback_lock
 = 
åue
;

1162 i‡(
√t_©èch
 && !
	`√t_©èch
(
wl
->
pub
, 
_ndev
->
ifödex
)) {

1163 
	`wl_Æloc_√töfo
(
wl
, 
_ndev
, 
vwdev
, 
mode
, 
PM_ENABLE
);

1164 
vÆ
 = 1;

1166 
	`wldev_iov¨_£töt
(
_ndev
, "rﬂm_off", 
vÆ
);

1167 
	`WL_ERR
((" virtual interface(%s) is "

1168 "¸óãdÇëáâach d⁄e\n", 
wl
->
p2p
->
vú_i‚ame
));

1169 i‡(
mode
 =
WL_MODE_AP
)

1170 
	`wl_£t_drv_°©us
(
wl
, 
CONNECTED
, 
_ndev
);

1171 i‡(
ty≥
 =
NL80211_IFTYPE_P2P_CLIENT
)

1172 
dhd_mode
 = 
DHD_FLAG_P2P_GC_MODE
;

1173 i‡(
ty≥
 =
NL80211_IFTYPE_P2P_GO
)

1174 
dhd_mode
 = 
DHD_FLAG_P2P_GO_MODE
;

1175 
	`DNGL_FUNC
(
dhd_cfg80211_£t_p2p_öfo
, (
wl
, 
dhd_mode
));

1178 i‡(
rﬁlback_lock
)

1179 
	`π∆_lock
();

1180 
Áû
;

1183 i‡(
rﬁlback_lock
)

1184 
	`π∆_lock
();

1185  
_ndev
;

1188 
	`wl_˛r_p2p_°©us
(
wl
, 
IF_ADD
);

1189 
	`WL_ERR
((" vútuÆ i¡îÁ˚(%sËi†nŸ cª©ed \n", 
wl
->
p2p
->
vú_i‚ame
));

1190 
	`mem£t
(
wl
->
p2p
->
vú_i‚ame
, '\0', 
IFNAMSIZ
);

1191 
wl
->
p2p
->
vif_¸óãd
 = 
Ál£
;

1192 #ifde‡
PROP_TXSTATUS_VSDB


1193 i‡(
dhd
->
wlfc_íabÀd
 && 
wl
->
wlfc_⁄
) {

1194 
dhd
->
wlfc_íabÀd
 = 
Ál£
;

1195 
	`dhd_wlfc_deöô
(
dhd
);

1196 
wl
->
wlfc_⁄
 = 
Ál£
;

1201 
Áû
:

1202 i‡(
wlif_ty≥
 =
WL_P2P_IF_GO
)

1203 
	`wldev_iov¨_£töt
(
_ndev
, "mpc", 1);

1204  
	`ERR_PTR
(-
ENODEV
);

1205 
	}
}

1207 
s32


1208 
	$wl_cfg80211_dñ_vútuÆ_iÁ˚
(
wùhy
 *wùhy, 
√t_devi˚
 *
dev
)

1210 
ëhî_addr
 
p2p_mac
;

1211 
wl_¥iv
 *
wl
 = 
	`wùhy_¥iv
(
wùhy
);

1212 
s32
 
timeout
 = -1;

1213 
s32
 
ªt
 = 0;

1214 
	`WL_DBG
(("Enter\n"));

1216 i‡(
wl
->
p2p_√t
 =
dev
) {

1220 
dev
 = 
	`wl_to_¥mry_ndev
(
wl
);

1223 i‡(
wl
->
p2p_suµ‹ãd
) {

1224 
	`mem˝y
(
p2p_mac
.
o˘ë
, 
wl
->
p2p
->
öt_addr
.o˘ë, 
ETHER_ADDR_LEN
);

1228 
	`WL_DBG
(("P2P: GO_NEG_PHASE status cleared "));

1229 
	`wl_˛r_p2p_°©us
(
wl
, 
GO_NEG_PHASE
);

1230 i‡(
wl
->
p2p
->
vif_¸óãd
) {

1231 i‡(
	`wl_gë_drv_°©us
(
wl
, 
SCANNING
, 
dev
)) {

1232 
	`wl_nŸify_esˇn_com∂ëe
(
wl
, 
dev
, 
åue
,Årue);

1234 
	`wldev_iov¨_£töt
(
dev
, "mpc", 1);

1237 i‡(
	`wl_gë_drv_°©us
(
wl
, 
DISCONNECTING
, 
dev
) &&

1238 (
	`wl_gë_mode_by_√tdev
(
wl
, 
dev
Ë!
WL_MODE_AP
)) {

1239 
	`WL_ERR
(("Wait for Link DownÉvent for GC !\n"));

1240 
waô_f‹_com∂ëi⁄_timeout


1241 (&
wl
->
iÁ˚_dißbÀ
, 
	`m£cs_to_jiffõs
(500));

1243 
	`wl_£t_p2p_°©us
(
wl
, 
IF_DELETING
);

1244 
	`DNGL_FUNC
(
dhd_cfg80211_˛ón_p2p_öfo
, (
wl
));

1247 i‡(
	`wl_gë_mode_by_√tdev
(
wl
, 
dev
Ë=
WL_MODE_AP
) {

1248 
	`wl_add_ªmove_evítmsg
(
dev
, 
WLC_E_PROBREQ_MSG
, 
Ál£
);

1250 
ªt
 = 
	`wl_cfgp2p_ifdißbÀ
(
wl
, &
p2p_mac
);

1254 i‡(
ªt
 == 0) {

1255 
	`WL_ERR
(("Wait for Link DownÉvent for GO !!!\n"));

1256 
	`waô_f‹_com∂ëi⁄_timeout
(&
wl
->
iÁ˚_dißbÀ
,

1257 
	`m£cs_to_jiffõs
(500));

1259 
	`m¶ìp
(300);

1262 
	`wl_cfgp2p_˛ór_m™agemít_õ
(
wl
, 
	`wl_cfgp2p_föd_idx
(wl, 
dev
));

1264 
ªt
 = 
	`wl_cfgp2p_ifdñ
(
wl
, &
p2p_mac
);

1272 i‡(
ªt
) {

1273 
√t_devi˚
 *
ndev
 = 
	`wl_to_¥mry_ndev
(
wl
);

1274 
	`WL_ERR
(("FirmwareÑeturnedánÉrror (%d) fromÖ2p_ifdel"

1275 "HANG NŸifiˇti⁄ síàtÿ%s\n", 
ªt
, 
ndev
->
«me
));

1276 
	`√t_os_£nd_h™g_mesßge
(
ndev
);

1279 
timeout
 = 
	`waô_evít_öãºu±ibÀ_timeout
(
wl
->
√tif_ch™ge_evít
,

1280 (
wl
->
p2p
->
vif_¸óãd
 =
Ál£
),

1281 
	`m£cs_to_jiffõs
(
MAX_WAIT_TIME
));

1282 i‡(
timeout
 > 0 && (
wl
->
p2p
->
vif_¸óãd
 =
Ál£
)) {

1283 
	`WL_DBG
(("IFDEL operation done\n"));

1285 
	`WL_ERR
(("IFDEL didn't completeÖroperly\n"));

1287 
ªt
 = 
	`dhd_dñ_m⁄ô‹
(
dev
);

1290  
ªt
;

1291 
	}
}

1293 
s32


1294 
	$wl_cfg80211_ch™ge_vútuÆ_iÁ˚
(
wùhy
 *wùhy, 
√t_devi˚
 *
ndev
,

1295 
∆80211_i·y≥
 
ty≥
, 
u32
 *
Êags
,

1296 
vif_∑øms
 *
∑øms
)

1298 
s32
 
≠
 = 0;

1299 
s32
 
ö‰a
 = 0;

1300 
s32
 
wlif_ty≥
;

1301 
s32
 
mode
 = 0;

1302 
ch™•ec_t
 
ch•ec
;

1303 
wl_¥iv
 *
wl
 = 
	`wùhy_¥iv
(
wùhy
);

1304 
dhd_pub_t
 *
dhd
 = (dhd_pub_à*)(
wl
->
pub
);

1305 
	`WL_DBG
(("E¡îÅy≥ %d\n", 
ty≥
));

1306 
ty≥
) {

1307 
NL80211_IFTYPE_MONITOR
:

1308 
NL80211_IFTYPE_WDS
:

1309 
NL80211_IFTYPE_MESH_POINT
:

1310 
≠
 = 1;

1311 
	`WL_ERR
(("type (%d) : currently we doÇot supportÅhisÅype\n",

1312 
ty≥
));

1314 
NL80211_IFTYPE_ADHOC
:

1315 
mode
 = 
WL_MODE_IBSS
;

1317 
NL80211_IFTYPE_STATION
:

1318 
NL80211_IFTYPE_P2P_CLIENT
:

1319 
mode
 = 
WL_MODE_BSS
;

1320 
ö‰a
 = 1;

1322 
NL80211_IFTYPE_AP
:

1323 
NL80211_IFTYPE_AP_VLAN
:

1324 
NL80211_IFTYPE_P2P_GO
:

1325 
mode
 = 
WL_MODE_AP
;

1326 
≠
 = 1;

1329  -
EINVAL
;

1331 i‡(!
dhd
)

1332  -
EINVAL
;

1333 i‡(
≠
) {

1334 
	`wl_£t_mode_by_√tdev
(
wl
, 
ndev
, 
mode
);

1335 i‡(
wl
->
p2p_suµ‹ãd
 && wl->
p2p
->
vif_¸óãd
) {

1336 
	`WL_DBG
(("p2p_vif_¸óãd (%dËp2p_⁄ (%d)\n", 
wl
->
p2p
->
vif_¸óãd
,

1337 
	`p2p_⁄
(
wl
)));

1338 
	`wldev_iov¨_£töt
(
ndev
, "mpc", 0);

1339 
	`wl_nŸify_esˇn_com∂ëe
(
wl
, 
ndev
, 
åue
,Årue);

1345 
ch•ec
 = 
	`wl_cfg80211_gë_sh¨ed_‰eq
(
wùhy
);

1347 
wlif_ty≥
 = 
WL_P2P_IF_GO
;

1348 
	`WL_ERR
(("%s :áp (%d), infra (%d), iftype: (%d)\n",

1349 
ndev
->
«me
, 
≠
, 
ö‰a
, 
ty≥
));

1350 
	`wl_£t_p2p_°©us
(
wl
, 
IF_CHANGING
);

1351 
	`wl_˛r_p2p_°©us
(
wl
, 
IF_CHANGED
);

1352 
	`wl_cfgp2p_ifch™ge
(
wl
, &wl->
p2p
->
öt_addr
, 
	`htod32
(
wlif_ty≥
), 
ch•ec
);

1353 
	`waô_evít_öãºu±ibÀ_timeout
(
wl
->
√tif_ch™ge_evít
,

1354 (
	`wl_gë_p2p_°©us
(
wl
, 
IF_CHANGED
Ë=
åue
),

1355 
	`m£cs_to_jiffõs
(
MAX_WAIT_TIME
));

1356 
	`wl_£t_mode_by_√tdev
(
wl
, 
ndev
, 
mode
);

1357 
dhd
->
›_mode
 &~
DHD_FLAG_P2P_GC_MODE
;

1358 
dhd
->
›_mode
 |
DHD_FLAG_P2P_GO_MODE
;

1359 
	`wl_˛r_p2p_°©us
(
wl
, 
IF_CHANGING
);

1360 
	`wl_˛r_p2p_°©us
(
wl
, 
IF_CHANGED
);

1361 i‡(
mode
 =
WL_MODE_AP
)

1362 
	`wl_£t_drv_°©us
(
wl
, 
CONNECTED
, 
ndev
);

1363 } i‡(
ndev
 =
	`wl_to_¥mry_ndev
(
wl
) &&

1364 !
	`wl_gë_drv_°©us
(
wl
, 
AP_CREATED
, 
ndev
)) {

1365 
	`wl_£t_drv_°©us
(
wl
, 
AP_CREATING
, 
ndev
);

1366 i‡(!
wl
->
≠_öfo
 &&

1367 !(
wl
->
≠_öfo
 = 
	`kzÆloc
((≠_öfo), 
GFP_KERNEL
))) {

1368 
	`WL_ERR
(("structáp_saved_ieállocation failed\n"));

1369  -
ENOMEM
;

1372 
	`WL_ERR
(("Cannot changeÅhe interface for GO or SOFTAP\n"));

1373  -
EINVAL
;

1376 
	`WL_DBG
(("Change_virtual_iface forÅransition from GO/APÅo client/STA"));

1379 
ndev
->
õì80211_±r
->
i·y≥
 = 
ty≥
;

1381 
	}
}

1383 
s32


1384 
	$wl_cfg80211_nŸify_iÁdd
(
√t_devi˚
 *
ndev
, 
s32
 
idx
, s32 
bssidx
,

1385 * 
_√t_©èch
)

1387 
wl_¥iv
 *
wl
 = 
wlcfg_drv_¥iv
;

1388 
s32
 
ªt
 = 
BCME_OK
;

1389 
	`WL_DBG
(("Enter"));

1390 i‡(!
ndev
) {

1391 
	`WL_ERR
(("net is NULL\n"));

1394 i‡(
wl
->
p2p_suµ‹ãd
 && 
	`wl_gë_p2p_°©us
(wl, 
IF_ADD
)) {

1395 
	`WL_DBG
(("IF_ADDÉvent called from dongle, old interfaceÇame: %s,"

1396 "√wÇame: %s\n", 
ndev
->
«me
, 
wl
->
p2p
->
vú_i‚ame
));

1398 
	`°∫˝y
(
ndev
->
«me
, 
wl
->
p2p
->
vú_i‚ame
, 
IFNAMSIZ
 - 1);

1399 
	`wl_to_p2p_bss_ndev
(
wl
, 
P2PAPI_BSSCFG_CONNECTION
Ë
ndev
;

1400 
	`wl_to_p2p_bss_bssidx
(
wl
, 
P2PAPI_BSSCFG_CONNECTION
Ë
bssidx
;

1401 
	`wl_to_p2p_bss_¥iv©e
(
wl
, 
P2PAPI_BSSCFG_CONNECTION
Ë
_√t_©èch
;

1402 
ndev
->
ifödex
 = 
idx
;

1403 
	`wl_˛r_p2p_°©us
(
wl
, 
IF_ADD
);

1405 
	`wake_up_öãºu±ibÀ
(&
wl
->
√tif_ch™ge_evít
);

1407 
ªt
 = 
BCME_NOTREADY
;

1409  
ªt
;

1410 
	}
}

1412 
s32


1413 
	$wl_cfg80211_nŸify_ifdñ
()

1415 
wl_¥iv
 *
wl
 = 
wlcfg_drv_¥iv
;

1417 
	`WL_DBG
(("Enter \n"));

1418 
	`wl_˛r_p2p_°©us
(
wl
, 
IF_DELETING
);

1419 
	`wake_up_öãºu±ibÀ
(&
wl
->
√tif_ch™ge_evít
);

1421 
	}
}

1423 
s32


1424 
	$wl_cfg80211_ifdñ_›s
(
√t_devi˚
 *
ndev
)

1426 
wl_¥iv
 *
wl
 = 
wlcfg_drv_¥iv
;

1427 
boﬁ
 
rﬁlback_lock
 = 
Ál£
;

1428 
s32
 
ödex
 = 0;

1429 #ifde‡
PROP_TXSTATUS_VSDB


1430 
dhd_pub_t
 *
dhd
 = (dhd_pub_à*)(
wl
->
pub
);

1432 i‡(!
ndev
 || (
	`°æí
“dev->
«me
) == 0)) {

1433 
	`WL_ERR
(("net is NULL\n"));

1437 i‡(
	`p2p_is_⁄
(
wl
Ë&& wl->
p2p
->
vif_¸óãd
 &&

1438 
	`wl_gë_p2p_°©us
(
wl
, 
IF_DELETING
)) {

1439 i‡(
wl
->
sˇn_ªque°
 &&

1440 (
wl
->
esˇn_öfo
.
ndev
 ==Çdev)) {

1442 
wl
->
esˇn_öfo
.
esˇn_°©e
 = 
WL_ESCAN_STATE_IDLE
;

1443 i‡(!
	`π∆_is_locked
()) {

1444 
	`π∆_lock
();

1445 
rﬁlback_lock
 = 
åue
;

1447 
	`WL_DBG
(("ESCAN COMPLETED\n"));

1448 
	`wl_nŸify_esˇn_com∂ëe
(
wl
, 
ndev
, 
åue
, 
Ál£
);

1449 i‡(
rﬁlback_lock
)

1450 
	`π∆_u∆ock
();

1452 
	`WL_ERR
(("IF_DELÉvent called from dongle,Çet %x, vifÇame: %s\n",

1453 ()
ndev
, 
wl
->
p2p
->
vú_i‚ame
));

1455 
	`mem£t
(
wl
->
p2p
->
vú_i‚ame
, '\0', 
IFNAMSIZ
);

1456 
ödex
 = 
	`wl_cfgp2p_föd_idx
(
wl
, 
ndev
);

1457 
	`wl_to_p2p_bss_ndev
(
wl
, 
ödex
Ë
NULL
;

1458 
	`wl_to_p2p_bss_bssidx
(
wl
, 
ödex
Ë
WL_INVALID
;

1459 
wl
->
p2p
->
vif_¸óãd
 = 
Ál£
;

1461 
	`WL_DBG
(("ödex : %d\n", 
ödex
));

1462 #ifde‡
PROP_TXSTATUS_VSDB


1463 i‡(
dhd
->
wlfc_íabÀd
 && 
wl
->
wlfc_⁄
) {

1464 
dhd
->
wlfc_íabÀd
 = 
Ál£
;

1465 
	`dhd_wlfc_deöô
(
dhd
);

1466 
wl
->
wlfc_⁄
 = 
Ál£
;

1469 
	`wl_˛r_drv_°©us
(
wl
, 
CONNECTED
, 
ndev
);

1472 
	`wake_up_öãºu±ibÀ
(&
wl
->
√tif_ch™ge_evít
);

1475 
	}
}

1477 
s32


1478 
	$wl_cfg80211_is_¥ogªss_iÁdd
()

1480 
s32
 
is_¥ogªss
 = 0;

1481 
wl_¥iv
 *
wl
 = 
wlcfg_drv_¥iv
;

1482 i‡(
	`wl_gë_p2p_°©us
(
wl
, 
IF_ADD
))

1483 
is_¥ogªss
 = 1;

1484  
is_¥ogªss
;

1485 
	}
}

1487 
s32


1488 
	$wl_cfg80211_is_¥ogªss_ifch™ge
()

1490 
s32
 
is_¥ogªss
 = 0;

1491 
wl_¥iv
 *
wl
 = 
wlcfg_drv_¥iv
;

1492 i‡(
	`wl_gë_p2p_°©us
(
wl
, 
IF_CHANGING
))

1493 
is_¥ogªss
 = 1;

1494  
is_¥ogªss
;

1495 
	}
}

1498 
s32


1499 
	$wl_cfg80211_nŸify_ifch™ge
()

1501 
wl_¥iv
 *
wl
 = 
wlcfg_drv_¥iv
;

1502 i‡(
	`wl_gë_p2p_°©us
(
wl
, 
IF_CHANGING
)) {

1503 
	`wl_£t_p2p_°©us
(
wl
, 
IF_CHANGED
);

1504 
	`wake_up_öãºu±ibÀ
(&
wl
->
√tif_ch™ge_evít
);

1507 
	}
}

1510 
s32
 
	$wl_föd_li°í_ch™√l
(
wl_¥iv
 *
wl
,

1511 
u8
 *
õ
, 
u32
 
õ_Àn
)

1513 
wifi_p2p_õ_t
 *
p2p_õ
;

1514 
u8
 *
íd
, *
pos
;

1515 
s32
 
li°í_ch™√l
;

1517 
p2p_õ
 = 
	`wl_cfgp2p_föd_p2põ
(
õ
, 
õ_Àn
);

1519 i‡(
p2p_õ
 =
NULL
)

1522 
pos
 = 
p2p_õ
->
subñts
;

1523 
íd
 = 
p2p_õ
->
subñts
 + (p2p_õ->
Àn
 - 4);

1525 
	`CFGP2P_DBG
((" foundÖ2p ie !Üenth %d \n",

1526 
p2p_õ
->
Àn
));

1528 
pos
 < 
íd
) {

1529 
uöt16
 
©å_Àn
;

1530 i‡(
pos
 + 2 >
íd
) {

1531 
	`CFGP2P_DBG
((" -- Invalid P2Páttribute"));

1534 
©å_Àn
 = ((
uöt16
Ë(((
pos
 + 1)[1] << 8) | (pos + 1)[0]));

1536 i‡(
pos
 + 3 + 
©å_Àn
 > 
íd
) {

1537 
	`CFGP2P_DBG
(("P2P: Attribute underflow "

1539 
©å_Àn
, (Ë(
íd
 - 
pos
 - 3)));

1546 i‡(
pos
[0] == 6) {

1550 
li°í_ch™√l
 = 
pos
[1 + 2 + 3 + 1];

1552 i‡(
li°í_ch™√l
 =
SOCIAL_CHAN_1
 ||

1553 
li°í_ch™√l
 =
SOCIAL_CHAN_2
 ||

1554 
li°í_ch™√l
 =
SOCIAL_CHAN_3
) {

1555 
	`CFGP2P_DBG
((" Found my Li°í Ch™√»%d \n", 
li°í_ch™√l
));

1556  
li°í_ch™√l
;

1559 
pos
 +3 + 
©å_Àn
;

1562 
	}
}

1564 
	$wl_sˇn_¥ï
(
wl_sˇn_∑øms
 *
∑øms
, 
cfg80211_sˇn_ªque°
 *
ªque°
)

1566 
u32
 
n_ssids
;

1567 
u32
 
n_ch™√ls
;

1568 
u16
 
ch™√l
;

1569 
ch™•ec_t
 
ch™•ec
;

1570 
s32
 
i
 = 0, 
j
 = 0, 
off£t
;

1571 *
±r
;

1572 
wlc_ssid_t
 
ssid
;

1573 
wl_¥iv
 *
wl
 = 
wlcfg_drv_¥iv
;

1575 
	`mem˝y
(&
∑øms
->
bssid
, &
ëhî_bˇ°
, 
ETHER_ADDR_LEN
);

1576 
∑øms
->
bss_ty≥
 = 
DOT11_BSSTYPE_ANY
;

1577 
∑øms
->
sˇn_ty≥
 = 0;

1578 
∑øms
->
≈robes
 = -1;

1579 
∑øms
->
a˘ive_time
 = -1;

1580 
∑øms
->
∑ssive_time
 = -1;

1581 
∑øms
->
home_time
 = -1;

1582 
∑øms
->
ch™√l_num
 = 0;

1583 
	`mem£t
(&
∑øms
->
ssid
, 0, (
wlc_ssid_t
));

1585 
	`WL_SCAN
(("Preparing ScanÑequest\n"));

1586 
	`WL_SCAN
(("≈robes=%d\n", 
∑øms
->
≈robes
));

1587 
	`WL_SCAN
(("a˘ive_time=%d\n", 
∑øms
->
a˘ive_time
));

1588 
	`WL_SCAN
(("∑ssive_time=%d\n", 
∑øms
->
∑ssive_time
));

1589 
	`WL_SCAN
(("home_time=%d\n", 
∑øms
->
home_time
));

1590 
	`WL_SCAN
(("sˇn_ty≥=%d\n", 
∑øms
->
sˇn_ty≥
));

1592 
∑øms
->
≈robes
 = 
	`htod32
(params->nprobes);

1593 
∑øms
->
a˘ive_time
 = 
	`htod32
(params->active_time);

1594 
∑øms
->
∑ssive_time
 = 
	`htod32
(params->passive_time);

1595 
∑øms
->
home_time
 = 
	`htod32
(params->home_time);

1598 i‡(!
ªque°
)

1601 
n_ssids
 = 
ªque°
->n_ssids;

1602 
n_ch™√ls
 = 
ªque°
->n_channels;

1605 
	`WL_SCAN
(("### List of channelspecsÅo scan ###\n"));

1606 i‡(
n_ch™√ls
 > 0) {

1607 
i
 = 0; i < 
n_ch™√ls
; i++) {

1608 
ch™•ec
 = 0;

1609 
ch™√l
 = 
	`õì80211_‰equícy_to_ch™√l
(
ªque°
->
ch™√ls
[
i
]->
˚¡î_‰eq
);

1611 i‡((
wl
->
esˇn_öfo
.
ndev
 !
	`wl_to_¥mry_ndev
(wl)) &&

1612 (
ªque°
->
ch™√ls
[
i
]->
Êags
 &

1613 (
IEEE80211_CHAN_RADAR
 | 
IEEE80211_CHAN_PASSIVE_SCAN
)))

1616 i‡(
ªque°
->
ch™√ls
[
i
]->
b™d
 =
IEEE80211_BAND_2GHZ
) {

1617 #ifde‡
WL_HOST_BAND_MGMT


1618 i‡(
wl
->
cuº_b™d
 =
WLC_BAND_5G
) {

1619 
	`WL_DBG
(("I¿5G o∆y mode, omô 2G ch™√l:%d\n", 
ch™√l
));

1623 
ch™•ec
 |
WL_CHANSPEC_BAND_2G
;

1625 #ifde‡
WL_HOST_BAND_MGMT


1626 i‡(
wl
->
cuº_b™d
 =
WLC_BAND_2G
) {

1627 
	`WL_DBG
(("I¿2G o∆y mode, omô 5G ch™√l:%d\n", 
ch™√l
));

1631 
ch™•ec
 |
WL_CHANSPEC_BAND_5G
;

1634 
ch™•ec
 |
WL_CHANSPEC_BW_20
;

1635 
ch™•ec
 |
WL_CHANSPEC_CTL_SB_NONE
;

1637 
∑øms
->
ch™√l_li°
[
j
] = 
ch™√l
;

1638 
∑øms
->
ch™√l_li°
[
j
] &
WL_CHANSPEC_CHAN_MASK
;

1639 
∑øms
->
ch™√l_li°
[
j
] |
ch™•ec
;

1640 
	`WL_SCAN
(("Chan : %d, Channel spec: %x \n",

1641 
ch™√l
, 
∑øms
->
ch™√l_li°
[
j
]));

1642 
∑øms
->
ch™√l_li°
[
j
] = 
	`wl_ch•ec_ho°_to_drivî
(params->channel_list[j]);

1643 
j
++;

1646 
	`WL_SCAN
(("Scanningáll channels\n"));

1648 
n_ch™√ls
 = 
j
;

1650 
	`WL_SCAN
(("### List of SSIDsÅo scan ###\n"));

1651 i‡(
n_ssids
 > 0) {

1652 
off£t
 = 
	`off£tof
(
wl_sˇn_∑øms_t
, 
ch™√l_li°
Ë+ 
n_ch™√ls
 * (
u16
);

1653 
off£t
 = 
	`roundup
(off£t, (
u32
));

1654 
±r
 = (*)
∑øms
 + 
off£t
;

1655 
i
 = 0; i < 
n_ssids
; i++) {

1656 
	`mem£t
(&
ssid
, 0, (
wlc_ssid_t
));

1657 
ssid
.
SSID_Àn
 = 
ªque°
->
ssids
[
i
].
ssid_Àn
;

1658 
	`mem˝y
(
ssid
.
SSID
, 
ªque°
->
ssids
[
i
].ssid, ssid.
SSID_Àn
);

1659 i‡(!
ssid
.
SSID_Àn
)

1660 
	`WL_SCAN
(("%d: Brﬂdˇ° sˇn\n", 
i
));

1662 
	`WL_SCAN
(("%d: sˇ¿ f‹ %†sizê=%d\n", 
i
,

1663 
ssid
.
SSID
, ssid.
SSID_Àn
));

1664 
	`mem˝y
(
±r
, &
ssid
, (
wlc_ssid_t
));

1665 
±r
 +(
wlc_ssid_t
);

1668 
	`WL_SCAN
(("Broadcast scan\n"));

1671 
∑øms
->
ch™√l_num
 =

1672 
	`htod32
((
n_ssids
 << 
WL_SCAN_PARAMS_NSSID_SHIFT
) |

1673 (
n_ch™√ls
 & 
WL_SCAN_PARAMS_COUNT_MASK
));

1675 i‡(
n_ch™√ls
 =1 && 
	`wl_gë_drv_°©us_Æl
(
wl
, 
CONNECTED
)) {

1676 
∑øms
->
a˘ive_time
 = 
WL_SCAN_CONNECT_DWELL_TIME_MS
;

1678 
	}
}

1680 
s32


1681 
	$wl_run_isˇn
(
wl_isˇn_˘æ
 *
isˇn
, 
cfg80211_sˇn_ªque°
 *
ªque°
, 
u16
 
a˘i⁄
)

1683 
u32
 
n_ch™√ls
;

1684 
u32
 
n_ssids
;

1685 
s32
 
∑øms_size
 =

1686 (
WL_SCAN_PARAMS_FIXED_SIZE
 + 
	`off£tof
(
wl_isˇn_∑øms_t
, 
∑øms
));

1687 
wl_isˇn_∑øms
 *
∑øms
 = 
NULL
;

1688 
s32
 
îr
 = 0;

1690 i‡(
ªque°
 !
NULL
) {

1691 
n_ch™√ls
 = 
ªque°
->n_channels;

1692 
n_ssids
 = 
ªque°
->n_ssids;

1694 i‡(
n_ch™√ls
 % 2)

1696 
∑øms_size
 +(
u16
Ë* (
n_ch™√ls
 + 1);

1698 
∑øms_size
 +(
u16
Ë* 
n_ch™√ls
;

1701 
∑øms_size
 +(
wlc_ssid
Ë* 
n_ssids
;

1703 
∑øms
 = (
wl_isˇn_∑øms
 *)
	`kzÆloc
(
∑øms_size
, 
GFP_KERNEL
);

1704 i‡(!
∑øms
) {

1705 
îr
 = -
ENOMEM
;

1706 
d⁄e
;

1708 
	`wl_sˇn_¥ï
(&
∑øms
->∑øms, 
ªque°
);

1710 
∑øms
->
vîsi⁄
 = 
	`htod32
(
ISCAN_REQ_VERSION
);

1711 
∑øms
->
a˘i⁄
 = 
	`htod16
(action);

1712 
∑øms
->
sˇn_duøti⁄
 = 
	`htod16
(0);

1714 i‡(
∑øms_size
 + ("isˇn"Ë>
WLC_IOCTL_MEDLEN
) {

1715 
	`WL_ERR
(("ioctl bufferÜength isÇot sufficient\n"));

1716 
îr
 = -
ENOMEM
;

1717 
d⁄e
;

1719 
îr
 = 
	`wldev_iov¨_£tbuf
(
isˇn
->
dev
, "isˇn", 
∑øms
, 
∑øms_size
,

1720 
isˇn
->
io˘l_buf
, 
WLC_IOCTL_MEDLEN
, 
NULL
);

1721 i‡(
	`u∆ikñy
(
îr
)) {

1722 i‡(
îr
 =-
EBUSY
) {

1723 
	`WL_ERR
(("system busy : iscan canceled\n"));

1725 
	`WL_ERR
(("îr‹ (%d)\n", 
îr
));

1729 
d⁄e
:

1730 i‡(
∑øms
)

1731 
	`k‰ì
(
∑øms
);

1732  
îr
;

1733 
	}
}

1735 
s32
 
	$wl_do_isˇn
(
wl_¥iv
 *
wl
, 
cfg80211_sˇn_ªque°
 *
ªque°
)

1737 
wl_isˇn_˘æ
 *
isˇn
 = 
	`wl_to_isˇn
(
wl
);

1738 
√t_devi˚
 *
ndev
 = 
	`wl_to_¥mry_ndev
(
wl
);

1739 
s32
 
∑ssive_sˇn
;

1740 
s32
 
îr
 = 0;

1742 
isˇn
->
°©e
 = 
WL_ISCAN_STATE_SCANING
;

1744 
∑ssive_sˇn
 = 
wl
->
a˘ive_sˇn
 ? 0 : 1;

1745 
îr
 = 
	`wldev_io˘l
(
ndev
, 
WLC_SET_PASSIVE_SCAN
,

1746 &
∑ssive_sˇn
, ’assive_sˇn), 
åue
);

1747 i‡(
	`u∆ikñy
(
îr
)) {

1748 
	`WL_DBG
(("îr‹ (%d)\n", 
îr
));

1749  
îr
;

1751 
wl
->
isˇn_kick°¨t
 = 
åue
;

1752 
	`wl_run_isˇn
(
isˇn
, 
ªque°
, 
WL_SCAN_ACTION_START
);

1753 
	`mod_timî
(&
isˇn
->
timî
, 
jiffõs
 + 
	`m£cs_to_jiffõs
(isˇn->
timî_ms
));

1754 
isˇn
->
timî_⁄
 = 1;

1756  
îr
;

1757 
	}
}

1759 
s32


1760 
	$wl_gë_vÆid_ch™√ls
(
√t_devi˚
 *
ndev
, 
u8
 *
vÆid_ch™_li°
, 
s32
 
size
)

1762 
wl_uöt32_li°_t
 *
li°
;

1763 
s32
 
îr
 = 
BCME_OK
;

1764 i‡(
vÆid_ch™_li°
 =
NULL
 || 
size
 <= 0)

1765  -
ENOMEM
;

1767 
	`mem£t
(
vÆid_ch™_li°
, 0, 
size
);

1768 
li°
 = (
wl_uöt32_li°_t
 *)(*Ë
vÆid_ch™_li°
;

1769 
li°
->
cou¡
 = 
	`htod32
(
WL_NUMCHANNELS
);

1770 
îr
 = 
	`wldev_io˘l
(
ndev
, 
WLC_GET_VALID_CHANNELS
, 
vÆid_ch™_li°
, 
size
, 
Ál£
);

1771 i‡(
îr
 != 0) {

1772 
	`WL_ERR
(("gë ch™√l†Áûed wôh %d\n", 
îr
));

1775  
îr
;

1776 
	}
}

1778 
s32


1779 
	$wl_run_esˇn
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
,

1780 
cfg80211_sˇn_ªque°
 *
ªque°
, 
uöt16
 
a˘i⁄
)

1782 
s32
 
îr
 = 
BCME_OK
;

1783 
u32
 
n_ch™√ls
;

1784 
u32
 
n_ssids
;

1785 
s32
 
∑øms_size
 = (
WL_SCAN_PARAMS_FIXED_SIZE
 + 
	`OFFSETOF
(
wl_esˇn_∑øms_t
, 
∑øms
));

1786 
wl_esˇn_∑øms_t
 *
∑øms
 = 
NULL
;

1787 
u8
 
ch™_buf
[(
u32
)*(
WL_NUMCHANNELS
 + 1)];

1788 
u32
 
num_ch™s
 = 0;

1789 
s32
 
ch™√l
;

1790 
s32
 
n_vÆid_ch™
;

1791 
s32
 
£¨ch_°©e
 = 
WL_P2P_DISC_ST_SCAN
;

1792 
u32
 
i
, 
j
, 
n_nodfs
 = 0;

1793 
u16
 *
deÁu…_ch™_li°
 = 
NULL
;

1794 
wl_uöt32_li°_t
 *
li°
;

1795 
√t_devi˚
 *
dev
 = 
NULL
;

1797 
	`WL_DBG
(("Enter \n"));

1799 i‡(!
wl
) {

1800 
îr
 = -
EINVAL
;

1801 
exô
;

1803 i‡(!
wl
->
p2p_suµ‹ãd
 || !
	`p2p_sˇn
(wl)) {

1805 
	`WL_SCAN
((" LEGACY E-SCAN START\n"));

1808 i‡(
ªque°
 !
NULL
) {

1809 
n_ch™√ls
 = 
ªque°
->n_channels;

1810 
n_ssids
 = 
ªque°
->n_ssids;

1812 i‡(
n_ch™√ls
 % 2)

1814 
∑øms_size
 +(
u16
Ë* (
n_ch™√ls
 + 1);

1816 
∑øms_size
 +(
u16
Ë* 
n_ch™√ls
;

1819 
∑øms_size
 +(
wlc_ssid
Ë* 
n_ssids
;

1821 
∑øms
 = (
wl_esˇn_∑øms_t
 *Ë
	`kzÆloc
(
∑øms_size
, 
GFP_KERNEL
);

1822 i‡(
∑øms
 =
NULL
) {

1823 
îr
 = -
ENOMEM
;

1824 
exô
;

1827 
	`wl_sˇn_¥ï
(&
∑øms
->∑øms, 
ªque°
);

1829 
∑øms
->
vîsi⁄
 = 
	`htod32
(
ESCAN_REQ_VERSION
);

1830 
∑øms
->
a˘i⁄
 = 
	`htod16
(action);

1831 
∑øms
->
sync_id
 = 
	`htod16
(0x1234);

1832 i‡(
∑øms_size
 + ("esˇn"Ë>
WLC_IOCTL_MEDLEN
) {

1833 
	`WL_ERR
(("ioctl bufferÜengthÇot sufficient\n"));

1834 
	`k‰ì
(
∑øms
);

1835 
îr
 = -
ENOMEM
;

1836 
exô
;

1838 
îr
 = 
	`wldev_iov¨_£tbuf
(
ndev
, "esˇn", 
∑øms
, 
∑øms_size
,

1839 
wl
->
esˇn_io˘l_buf
, 
WLC_IOCTL_MEDLEN
, 
NULL
);

1840 i‡(
	`u∆ikñy
(
îr
)) {

1841 i‡(
îr
 =
BCME_EPERM
)

1843 
	`WL_DBG
((" Esˇ¿nŸÖîmôãdáàthi†timê(%d)\n", 
îr
));

1845 
	`WL_ERR
((" Esˇ¿£àîr‹ (%d)\n", 
îr
));

1847 
	`k‰ì
(
∑øms
);

1849 i‡(
	`p2p_is_⁄
(
wl
Ë&& 
	`p2p_sˇn
(wl)) {

1851 
s32
 
_‰eq
 = 0;

1852 
n_nodfs
 = 0;

1853 i‡(
ªque°
 &&Ñeque°->
n_ch™√ls
) {

1854 
num_ch™s
 = 
ªque°
->
n_ch™√ls
;

1855 
	`WL_SCAN
((" ch™¿numbî : %d\n", 
num_ch™s
));

1856 
deÁu…_ch™_li°
 = 
	`kzÆloc
(
num_ch™s
 * (*default_chan_list),

1857 
GFP_KERNEL
);

1858 i‡(
deÁu…_ch™_li°
 =
NULL
) {

1859 
	`WL_ERR
(("channelÜistállocation failed \n"));

1860 
îr
 = -
ENOMEM
;

1861 
exô
;

1863 i‡(!
	`wl_gë_vÆid_ch™√ls
(
ndev
, 
ch™_buf
, (chan_buf))) {

1864 
li°
 = (
wl_uöt32_li°_t
 *Ë
ch™_buf
;

1865 
n_vÆid_ch™
 = 
	`dtoh32
(
li°
->
cou¡
);

1866 
i
 = 0; i < 
num_ch™s
; i++)

1868 #ifde‡
WL_HOST_BAND_MGMT


1869 
ch™√l_b™d
 = 0;

1871 
_‰eq
 = 
ªque°
->
ch™√ls
[
i
]->
˚¡î_‰eq
;

1872 
ch™√l
 = 
	`õì80211_‰equícy_to_ch™√l
(
_‰eq
);

1873 #ifde‡
WL_HOST_BAND_MGMT


1874 
ch™√l_b™d
 = (
ch™√l
 > 
CH_MAX_2G_CHANNEL
) ?

1875 
WLC_BAND_5G
 : 
WLC_BAND_2G
;

1876 i‡((
wl
->
cuº_b™d
 !
WLC_BAND_AUTO
) &&

1877 (
wl
->
cuº_b™d
 !
ch™√l_b™d
) &&

1878 !
	`IS_P2P_SOCIAL_CHANNEL
(
ch™√l
))

1883 i‡(
ªque°
->
ch™√ls
[
i
]->
Êags
 &

1884 (
IEEE80211_CHAN_RADAR


1885 | 
IEEE80211_CHAN_PASSIVE_SCAN
))

1888 
j
 = 0; j < 
n_vÆid_ch™
; j++) {

1892 i‡(
ch™√l
 =(
	`dtoh32
(
li°
->
ñemít
[
j
])))

1893 
deÁu…_ch™_li°
[
n_nodfs
++] =

1894 
ch™√l
;

1899 i‡(
num_ch™s
 == 3 && (

1900 (
deÁu…_ch™_li°
[0] =
SOCIAL_CHAN_1
) &&

1901 (
deÁu…_ch™_li°
[1] =
SOCIAL_CHAN_2
) &&

1902 (
deÁu…_ch™_li°
[2] =
SOCIAL_CHAN_3
))) {

1904 
£¨ch_°©e
 = 
WL_P2P_DISC_ST_SEARCH
;

1905 
	`WL_INFO
(("P2P SEARCH PHASE START \n"));

1906 } i‡((
dev
 = 
	`wl_to_p2p_bss_ndev
(
wl
, 
P2PAPI_BSSCFG_CONNECTION
)) &&

1907 (
	`wl_gë_mode_by_√tdev
(
wl
, 
dev
Ë=
WL_MODE_AP
)) {

1909 
	`WL_INFO
(("Alreadyá GO. Do SEARCH Only"));

1910 
£¨ch_°©e
 = 
WL_P2P_DISC_ST_SEARCH
;

1911 
num_ch™s
 = 
n_nodfs
;

1914 
	`WL_INFO
(("P2P SCAN STATE START \n"));

1915 
num_ch™s
 = 
n_nodfs
;

1919 
îr
 = 
	`wl_cfgp2p_esˇn
(
wl
, 
ndev
, wl->
a˘ive_sˇn
, 
num_ch™s
, 
deÁu…_ch™_li°
,

1920 
£¨ch_°©e
, 
a˘i⁄
,

1921 
	`wl_to_p2p_bss_bssidx
(
wl
, 
P2PAPI_BSSCFG_DEVICE
));

1922 
	`k‰ì
(
deÁu…_ch™_li°
);

1924 
exô
:

1925 i‡(
	`u∆ikñy
(
îr
)) {

1927 i‡((
îr
 =
BCME_EPERM
Ë&& 
wl
->
sˇn_suµªs£d
)

1928 
	`WL_DBG
(("Escan failed: Scan Suppressed \n"));

1930 
	`WL_ERR
(("îr‹ (%d)\n", 
îr
));

1932  
îr
;

1933 
	}
}

1936 
s32


1937 
	$wl_do_esˇn
(
wl_¥iv
 *
wl
, 
wùhy
 *wùhy, 
√t_devi˚
 *
ndev
,

1938 
cfg80211_sˇn_ªque°
 *
ªque°
)

1940 
s32
 
îr
 = 
BCME_OK
;

1941 
s32
 
∑ssive_sˇn
;

1942 
wl_sˇn_ªsu…s_t
 *
ªsu…s
;

1943 
	`WL_SCAN
(("Enter \n"));

1944 
	`muãx_lock
(&
wl
->
u§_sync
);

1945 
ªsu…s
 = (
wl_sˇn_ªsu…s_t
 *Ë
wl
->
esˇn_öfo
.
esˇn_buf
;

1946 
ªsu…s
->
vîsi⁄
 = 0;

1947 
ªsu…s
->
cou¡
 = 0;

1948 
ªsu…s
->
buÊí
 = 
WL_SCAN_RESULTS_FIXED_SIZE
;

1950 
wl
->
esˇn_öfo
.
ndev
 =Çdev;

1951 
wl
->
esˇn_öfo
.
wùhy
 = wiphy;

1952 
wl
->
esˇn_öfo
.
esˇn_°©e
 = 
WL_ESCAN_STATE_SCANING
;

1953 
∑ssive_sˇn
 = 
wl
->
a˘ive_sˇn
 ? 0 : 1;

1954 
îr
 = 
	`wldev_io˘l
(
ndev
, 
WLC_SET_PASSIVE_SCAN
,

1955 &
∑ssive_sˇn
, ’assive_sˇn), 
åue
);

1956 i‡(
	`u∆ikñy
(
îr
)) {

1957 
	`WL_ERR
(("îr‹ (%d)\n", 
îr
));

1958 
exô
;

1961 
îr
 = 
	`wl_run_esˇn
(
wl
, 
ndev
, 
ªque°
, 
WL_SCAN_ACTION_START
);

1962 
exô
:

1963 
	`muãx_u∆ock
(&
wl
->
u§_sync
);

1964  
îr
;

1965 
	}
}

1967 
s32


1968 
	$__wl_cfg80211_sˇn
(
wùhy
 *wùhy, 
√t_devi˚
 *
ndev
,

1969 
cfg80211_sˇn_ªque°
 *
ªque°
,

1970 
cfg80211_ssid
 *
this_ssid
)

1972 
wl_¥iv
 *
wl
 = 
	`wùhy_¥iv
(
wùhy
);

1973 
cfg80211_ssid
 *
ssids
;

1974 
wl_sˇn_ªq
 *
§
 = 
	`wl_to_§
(
wl
);

1975 
ëhî_addr
 
¥im¨y_mac
;

1976 
s32
 
∑ssive_sˇn
;

1977 
boﬁ
 
isˇn_ªq
;

1978 
boﬁ
 
esˇn_ªq
 = 
Ál£
;

1979 
boﬁ
 
p2p_ssid
;

1980 #ifde‡
WL11U


1981 
bcm_év_t
 *
öãrw‹kög_õ
;

1982 
u32
 
õ_Àn
;

1984 
s32
 
îr
 = 0;

1985 
s32
 
bssidx
 = -1;

1986 
s32
 
i
;

1988 
Êags
;

1989 
s32
 
busy_cou¡
 = 0;

1994 i‡(
ndev
 =
wl
->
p2p_√t
) {

1995 
ndev
 = 
	`wl_to_¥mry_ndev
(
wl
);

1998 i‡(
	`WL_DRV_STATUS_SENDING_AF_FRM_EXT
(
wl
)) {

1999 
	`WL_ERR
(("Sending Action Frames. Try itágain.\n"));

2000  -
EAGAIN
;

2003 
	`WL_DBG
(("E¡î wùhy (%p)\n", 
wùhy
));

2004 i‡(
	`wl_gë_drv_°©us_Æl
(
wl
, 
SCANNING
)) {

2005 i‡(
wl
->
sˇn_ªque°
 =
NULL
) {

2006 
	`wl_˛r_drv_°©us_Æl
(
wl
, 
SCANNING
);

2007 
	`WL_DBG
(("<<<<<<<<<<<Force Clear Scanning Status>>>>>>>>>>>\n"));

2009 
	`WL_ERR
(("Scanningálready\n"));

2010  -
EAGAIN
;

2013 i‡(
	`wl_gë_drv_°©us
(
wl
, 
SCAN_ABORTING
, 
ndev
)) {

2014 
	`WL_ERR
(("Scanning beingáborted\n"));

2015  -
EAGAIN
;

2017 i‡(
ªque°
 &&Ñeque°->
n_ssids
 > 
WL_SCAN_PARAMS_SSID_MAX
) {

2018 
	`WL_ERR
(("requestÇull orÇ_ssids > WL_SCAN_PARAMS_SSID_MAX\n"));

2019  -
EOPNOTSUPP
;

2021 #ifde‡
WL_CFG80211_VSDB_PRIORITIZE_SCAN_REQUEST


2022 i‡(
	`wl_gë_drv_°©us_Æl
(
wl
, 
REMAINING_ON_CHANNEL
)) {

2023 
	`WL_DBG
(("Remain_on_channel bit is set, somehow it didn't get cleared\n"));

2024 
	`wl_nŸify_esˇn_com∂ëe
(
wl
, 
ndev
, 
åue
,Årue);

2029 
	`mod_timî
(&
wl
->
sˇn_timeout
, 
jiffõs
 + 
	`m£cs_to_jiffõs
(
WL_SCAN_TIMER_INTERVAL_MS
));

2030 
isˇn_ªq
 = 
Ál£
;

2031 i‡(
ªque°
) {

2032 
ssids
 = 
ªque°
->ssids;

2033 i‡(
wl
->
isˇn_⁄
 && (!
ssids
 || !ssids->
ssid_Àn
 || 
ªque°
->
n_ssids
 != 1)) {

2034 
isˇn_ªq
 = 
åue
;

2035 } i‡(
wl
->
esˇn_⁄
) {

2036 
esˇn_ªq
 = 
åue
;

2037 
p2p_ssid
 = 
Ál£
;

2038 
i
 = 0; i < 
ªque°
->
n_ssids
; i++) {

2039 i‡(
ssids
[
i
].
ssid_Àn
 &&

2040 
	`IS_P2P_SSID
(
ssids
[
i
].
ssid
, ssids[i].
ssid_Àn
)) {

2041 
p2p_ssid
 = 
åue
;

2045 i‡(
p2p_ssid
) {

2046 i‡(
wl
->
p2p_suµ‹ãd
) {

2048 i‡(
	`p2p_⁄
(
wl
Ë=
Ál£
) {

2050 
	`p2p_⁄
(
wl
Ë
åue
;

2051 
	`wl_cfgp2p_£t_fúm_p2p
(
wl
);

2052 
	`gë_¥im¨y_mac
(
wl
, &
¥im¨y_mac
);

2053 
	`wl_cfgp2p_gíî©e_bss_mac
(&
¥im¨y_mac
,

2054 &
wl
->
p2p
->
dev_addr
, &wl->p2p->
öt_addr
);

2056 
	`wl_˛r_p2p_°©us
(
wl
, 
GO_NEG_PHASE
);

2057 
	`WL_DBG
(("P2P: GO_NEG_PHASE status cleared \n"));

2058 
	`p2p_sˇn
(
wl
Ë
åue
;

2064 i‡(
wl
->
p2p_suµ‹ãd
) {

2065 
	`p2p_sˇn
(
wl
Ë
Ál£
;

2070 i‡(
	`p2p_sˇn
(
wl
Ë=
Ál£
) {

2071 i‡(
	`wl_gë_p2p_°©us
(
wl
, 
DISCOVERY_ON
)) {

2072 
îr
 = 
	`wl_cfgp2p_discovî_íabÀ_£¨ch
(
wl
,

2073 
Ál£
);

2074 i‡(
	`u∆ikñy
(
îr
)) {

2075 
sˇn_out
;

2081 i‡(!
wl
->
p2p_suµ‹ãd
 || !
	`p2p_sˇn
(wl)) {

2082 
bssidx
 = 
	`wl_cfgp2p_föd_idx
(
wl
, 
ndev
);

2084 #ifde‡
WL11U


2085 i‡((
öãrw‹kög_õ
 = 
	`wl_cfg80211_föd_öãrw‹kög_õ
(

2086 (
u8
 *)
ªque°
->
õ
,Ñeque°->
õ_Àn
)Ë!
NULL
) {

2087 
õ_Àn
 = 
öãrw‹kög_õ
->
Àn
;

2089 
îr
 = 
	`wl_cfg80211_add_iw_õ
(
wl
, 
ndev
, 
bssidx
,

2090 
VNDR_IE_CUSTOM_FLAG
, 
öãrw‹kög_õ
->
id
,

2091 
öãrw‹kög_õ
->
d©a
, i¡îw‹kög_õ->
Àn
);

2093 i‡(
	`u∆ikñy
(
îr
)) {

2094 
sˇn_out
;

2096 } i‡(
wl
->
iw_õ_Àn
 != 0) {

2098 
	`wl_cfg80211_add_iw_õ
(
wl
, 
ndev
, 
bssidx
,

2099 
VNDR_IE_CUSTOM_FLAG
,

2100 
DOT11_MNG_INTERWORKING_ID
,

2103 
	`wldev_iov¨_£töt_bsscfg
(
ndev
, "grat_arp", 0,

2104 
bssidx
);

2108 
îr
 = 
	`wl_cfgp2p_£t_m™agemít_õ
(
wl
, 
ndev
, 
bssidx
,

2109 
VNDR_IE_PRBREQ_FLAG
, (
u8
 *)
ªque°
->
õ
,

2110 
ªque°
->
õ_Àn
);

2112 i‡(
	`u∆ikñy
(
îr
)) {

2113 
sˇn_out
;

2121 
ssids
 = 
this_ssid
;

2123 
wl
->
sˇn_ªque°
 = 
ªque°
;

2124 
	`wl_£t_drv_°©us
(
wl
, 
SCANNING
, 
ndev
);

2125 i‡(
isˇn_ªq
) {

2126 
îr
 = 
	`wl_do_isˇn
(
wl
, 
ªque°
);

2127 i‡(
	`likñy
(!
îr
))

2128 
sˇn_suc˚ss
;

2130 
sˇn_out
;

2131 } i‡(
esˇn_ªq
) {

2132 i‡(
wl
->
p2p_suµ‹ãd
) {

2133 i‡(
	`p2p_⁄
(
wl
Ë&& 
	`p2p_sˇn
(wl)) {

2136 
wl
->
afx_hdl
->
my_li°í_ch™
 =

2137 
	`wl_föd_li°í_ch™√l
(
wl
, (
u8
 *)
ªque°
->
õ
,

2138 
ªque°
->
õ_Àn
);

2139 
îr
 = 
	`wl_cfgp2p_íabÀ_discovîy
(
wl
, 
ndev
,

2140 
ªque°
->
õ
,Ñeque°->
õ_Àn
);

2142 i‡(
	`u∆ikñy
(
îr
)) {

2143 
sˇn_out
;

2147 
îr
 = 
	`wl_do_esˇn
(
wl
, 
wùhy
, 
ndev
, 
ªque°
);

2148 i‡(
	`likñy
(!
îr
))

2149 
sˇn_suc˚ss
;

2151 
sˇn_out
;

2155 
	`mem£t
(&
§
->
ssid
, 0, (sr->ssid));

2156 
§
->
ssid
.
SSID_Àn
 =

2157 
	`mö_t
(
u8
, (
§
->
ssid
.
SSID
), 
ssids
->
ssid_Àn
);

2158 i‡(
§
->
ssid
.
SSID_Àn
) {

2159 
	`mem˝y
(
§
->
ssid
.
SSID
, 
ssids
->ssid, sr->ssid.
SSID_Àn
);

2160 
§
->
ssid
.
SSID_Àn
 = 
	`htod32
(sr->ssid.SSID_len);

2161 
	`WL_SCAN
(("Specific scan ssid=\"%s\"Üen=%d\n",

2162 
§
->
ssid
.
SSID
, sr->ssid.
SSID_Àn
));

2164 
	`WL_SCAN
(("Broadcast scan\n"));

2166 
	`WL_SCAN
(("§->ssid.SSID_À¿(%d)\n", 
§
->
ssid
.
SSID_Àn
));

2167 
∑ssive_sˇn
 = 
wl
->
a˘ive_sˇn
 ? 0 : 1;

2168 
îr
 = 
	`wldev_io˘l
(
ndev
, 
WLC_SET_PASSIVE_SCAN
,

2169 &
∑ssive_sˇn
, ’assive_sˇn), 
åue
);

2170 i‡(
	`u∆ikñy
(
îr
)) {

2171 
	`WL_SCAN
(("WLC_SET_PASSIVE_SCANÉº‹ (%d)\n", 
îr
));

2172 
sˇn_out
;

2174 
îr
 = 
	`wldev_io˘l
(
ndev
, 
WLC_SCAN
, &
§
->
ssid
,

2175 (
§
->
ssid
), 
Ál£
);

2176 i‡(
îr
) {

2177 i‡(
îr
 =-
EBUSY
) {

2178 
	`WL_ERR
(("system busy : scan for \"%s\" "

2179 "ˇn˚Àd\n", 
§
->
ssid
.
SSID
));

2181 
	`WL_ERR
(("WLC_SCANÉº‹ (%d)\n", 
îr
));

2183 
sˇn_out
;

2187 
sˇn_suc˚ss
:

2189 
busy_cou¡
 = 0;

2193 
sˇn_out
:

2195 i‡(
îr
 =
BCME_BUSY
 ||Éº =
BCME_NOTREADY
) {

2196 
	`WL_ERR
(("Sˇ¿î∏(%d), busy?%d", 
îr
, -
EBUSY
));

2197 
îr
 = -
EBUSY
;

2200 
	#SCAN_EBUSY_RETRY_LIMIT
 10

	)

2201 i‡(
îr
 =-
EBUSY
) {

2202 i‡(
busy_cou¡
++ > 
SCAN_EBUSY_RETRY_LIMIT
) {

2203 
ëhî_addr
 
bssid
;

2204 
s32
 
ªt
 = 0;

2205 
busy_cou¡
 = 0;

2206 
	`WL_ERR
(("Unusual continuous EBUSYÉrror, %d %d %d %d %d %d %d %d %d\n",

2207 
	`wl_gë_drv_°©us
(
wl
, 
SCANNING
, 
ndev
),

2208 
	`wl_gë_drv_°©us
(
wl
, 
SCAN_ABORTING
, 
ndev
),

2209 
	`wl_gë_drv_°©us
(
wl
, 
CONNECTING
, 
ndev
),

2210 
	`wl_gë_drv_°©us
(
wl
, 
CONNECTED
, 
ndev
),

2211 
	`wl_gë_drv_°©us
(
wl
, 
DISCONNECTING
, 
ndev
),

2212 
	`wl_gë_drv_°©us
(
wl
, 
AP_CREATING
, 
ndev
),

2213 
	`wl_gë_drv_°©us
(
wl
, 
AP_CREATED
, 
ndev
),

2214 
	`wl_gë_drv_°©us
(
wl
, 
SENDING_ACT_FRM
, 
ndev
),

2215 
	`wl_gë_drv_°©us
(
wl
, 
SENDING_ACT_FRM
, 
ndev
)));

2217 
	`bzîo
(&
bssid
, (bssid));

2218 i‡((
ªt
 = 
	`wldev_io˘l
(
ndev
, 
WLC_GET_BSSID
,

2219 &
bssid
, 
ETHER_ADDR_LEN
, 
Ál£
)) == 0)

2220 
	`WL_ERR
(("FW i†c⁄√˘ed wôh " 
MACDBG
 "/n",

2221 
	`MAC2STRDBG
(
bssid
.
o˘ë
)));

2223 
	`WL_ERR
(("GET BSSID faûed wôh %d\n", 
ªt
));

2225 
	`wl_cfg80211_disc⁄√˘
(
wùhy
, 
ndev
, 
DOT11_RC_DISASSOC_LEAVING
);

2228 
busy_cou¡
 = 0;

2230 
	`wl_˛r_drv_°©us
(
wl
, 
SCANNING
, 
ndev
);

2231 i‡(
	`timî_≥ndög
(&
wl
->
sˇn_timeout
))

2232 
	`dñ_timî_sync
(&
wl
->
sˇn_timeout
);

2233 
	`•ö_lock_úqßve
(&
wl
->
cfgdrv_lock
, 
Êags
);

2234 
wl
->
sˇn_ªque°
 = 
NULL
;

2235 
	`•ö_u∆ock_úqª°‹e
(&
wl
->
cfgdrv_lock
, 
Êags
);

2236  
îr
;

2237 
	}
}

2239 
s32


2240 
	$wl_cfg80211_sˇn
(
wùhy
 *wùhy, 
√t_devi˚
 *
ndev
,

2241 
cfg80211_sˇn_ªque°
 *
ªque°
)

2243 
s32
 
îr
 = 0;

2244 
wl_¥iv
 *
wl
 = 
	`wùhy_¥iv
(
wùhy
);

2246 
	`WL_DBG
(("Enter \n"));

2247 
	`CHECK_SYS_UP
(
wl
);

2249 
îr
 = 
	`__wl_cfg80211_sˇn
(
wùhy
, 
ndev
, 
ªque°
, 
NULL
);

2250 i‡(
	`u∆ikñy
(
îr
)) {

2251 i‡((
îr
 =
BCME_EPERM
Ë&& 
wl
->
sˇn_suµªs£d
)

2252 
	`WL_DBG
(("sˇ¿nŸÖîmôãdáàthi†timê(%d)\n", 
îr
));

2254 
	`WL_ERR
(("sˇ¿îr‹ (%d)\n", 
îr
));

2255  
îr
;

2258  
îr
;

2259 
	}
}

2261 
s32
 
	$wl_£t_πs
(
√t_devi˚
 *
dev
, 
u32
 
πs_thªshﬁd
)

2263 
s32
 
îr
 = 0;

2265 
îr
 = 
	`wldev_iov¨_£töt
(
dev
, "π°hªsh", 
πs_thªshﬁd
);

2266 i‡(
	`u∆ikñy
(
îr
)) {

2267 
	`WL_ERR
(("Eº‹ (%d)\n", 
îr
));

2268  
îr
;

2270  
îr
;

2271 
	}
}

2273 
s32
 
	$wl_£t_‰ag
(
√t_devi˚
 *
dev
, 
u32
 
‰ag_thªshﬁd
)

2275 
s32
 
îr
 = 0;

2277 
îr
 = 
	`wldev_iov¨_£töt_bsscfg
(
dev
, "‰agthªsh", 
‰ag_thªshﬁd
, 0);

2278 i‡(
	`u∆ikñy
(
îr
)) {

2279 
	`WL_ERR
(("Eº‹ (%d)\n", 
îr
));

2280  
îr
;

2282  
îr
;

2283 
	}
}

2285 
s32
 
	$wl_£t_ªåy
(
√t_devi˚
 *
dev
, 
u32
 
ªåy
, 
boﬁ
 
l
)

2287 
s32
 
îr
 = 0;

2288 
u32
 
cmd
 = (
l
 ? 
WLC_SET_LRL
 : 
WLC_SET_SRL
);

2290 
ªåy
 = 
	`htod32
(retry);

2291 
îr
 = 
	`wldev_io˘l
(
dev
, 
cmd
, &
ªåy
, ‘ëry), 
åue
);

2292 i‡(
	`u∆ikñy
(
îr
)) {

2293 
	`WL_ERR
(("cmd (%dË,Éº‹ (%d)\n", 
cmd
, 
îr
));

2294  
îr
;

2296  
îr
;

2297 
	}
}

2299 
s32
 
	$wl_cfg80211_£t_wùhy_∑øms
(
wùhy
 *wùhy, 
u32
 
ch™ged
)

2301 
wl_¥iv
 *
wl
 = (wl_¥iv *)
	`wùhy_¥iv
(
wùhy
);

2302 
√t_devi˚
 *
ndev
 = 
	`wl_to_¥mry_ndev
(
wl
);

2303 
s32
 
îr
 = 0;

2305 
	`CHECK_SYS_UP
(
wl
);

2306 
	`WL_DBG
(("Enter\n"));

2307 i‡(
ch™ged
 & 
WIPHY_PARAM_RTS_THRESHOLD
 &&

2308 (
wl
->
c⁄f
->
πs_thªshﬁd
 !
wùhy
->rts_threshold)) {

2309 
wl
->
c⁄f
->
πs_thªshﬁd
 = 
wùhy
->rts_threshold;

2310 
îr
 = 
	`wl_£t_πs
(
ndev
, 
wl
->
c⁄f
->
πs_thªshﬁd
);

2311 i‡(!
îr
)

2312  
îr
;

2314 i‡(
ch™ged
 & 
WIPHY_PARAM_FRAG_THRESHOLD
 &&

2315 (
wl
->
c⁄f
->
‰ag_thªshﬁd
 !
wùhy
->frag_threshold)) {

2316 
wl
->
c⁄f
->
‰ag_thªshﬁd
 = 
wùhy
->frag_threshold;

2317 
îr
 = 
	`wl_£t_‰ag
(
ndev
, 
wl
->
c⁄f
->
‰ag_thªshﬁd
);

2318 i‡(!
îr
)

2319  
îr
;

2321 i‡(
ch™ged
 & 
WIPHY_PARAM_RETRY_LONG
 &&

2322 (
wl
->
c⁄f
->
ªåy_l⁄g
 !
wùhy
->retry_long)) {

2323 
wl
->
c⁄f
->
ªåy_l⁄g
 = 
wùhy
->retry_long;

2324 
îr
 = 
	`wl_£t_ªåy
(
ndev
, 
wl
->
c⁄f
->
ªåy_l⁄g
, 
åue
);

2325 i‡(!
îr
)

2326  
îr
;

2328 i‡(
ch™ged
 & 
WIPHY_PARAM_RETRY_SHORT
 &&

2329 (
wl
->
c⁄f
->
ªåy_sh‹t
 !
wùhy
->retry_short)) {

2330 
wl
->
c⁄f
->
ªåy_sh‹t
 = 
wùhy
->retry_short;

2331 
îr
 = 
	`wl_£t_ªåy
(
ndev
, 
wl
->
c⁄f
->
ªåy_sh‹t
, 
Ál£
);

2332 i‡(!
îr
) {

2333  
îr
;

2337  
îr
;

2338 
	}
}

2340 
s32


2341 
	$wl_cfg80211_joö_ibss
(
wùhy
 *wùhy, 
√t_devi˚
 *
dev
,

2342 
cfg80211_ibss_∑øms
 *
∑øms
)

2344 
wl_¥iv
 *
wl
 = 
	`wùhy_¥iv
(
wùhy
);

2345 
cfg80211_bss
 *
bss
;

2346 
õì80211_ch™√l
 *
ch™
;

2347 
wl_joö_∑øms
 
joö_∑øms
;

2348 
cfg80211_ssid
 
ssid
;

2349 
s32
 
sˇn_ªåy
 = 0;

2350 
s32
 
îr
 = 0;

2351 
boﬁ
 
rﬁlback_lock
 = 
Ál£
;

2353 
	`WL_TRACE
(("In\n"));

2354 
	`CHECK_SYS_UP
(
wl
);

2355 i‡(
∑øms
->
bssid
) {

2356 
	`WL_ERR
(("Invalid bssid\n"));

2357  -
EOPNOTSUPP
;

2359 
bss
 = 
	`cfg80211_gë_ibss
(
wùhy
, 
NULL
, 
∑øms
->
ssid
,Ö¨ams->
ssid_Àn
);

2360 i‡(!
bss
) {

2361 
	`mem˝y
(
ssid
.ssid, 
∑øms
->ssid,Ö¨ams->
ssid_Àn
);

2362 
ssid
.
ssid_Àn
 = 
∑øms
->ssid_len;

2364 i‡(
u∆ikñy


2365 (
	`__wl_cfg80211_sˇn
(
wùhy
, 
dev
, 
NULL
, &
ssid
) ==

2366 -
EBUSY
)) {

2367 
	`wl_dñay
(150);

2371 } ++
sˇn_ªåy
 < 
WL_SCAN_RETRY_MAX
);

2373 i‡(
	`π∆_is_locked
()) {

2374 
	`π∆_u∆ock
();

2375 
rﬁlback_lock
 = 
åue
;

2379 
	`scheduÀ_timeout_öãºu±ibÀ
(
	`m£cs_to_jiffõs
(4000));

2380 i‡(
rﬁlback_lock
)

2381 
	`π∆_lock
();

2382 
bss
 = 
	`cfg80211_gë_ibss
(
wùhy
, 
NULL
,

2383 
∑øms
->
ssid
,Ö¨ams->
ssid_Àn
);

2385 i‡(
bss
) {

2386 
wl
->
ibss_°¨ãr
 = 
Ál£
;

2387 
	`WL_DBG
(("Found IBSS\n"));

2389 
wl
->
ibss_°¨ãr
 = 
åue
;

2391 
ch™
 = 
∑øms
->
ch™√l
;

2392 i‡(
ch™
)

2393 
wl
->
ch™√l
 = 
	`õì80211_‰equícy_to_ch™√l
(
ch™
->
˚¡î_‰eq
);

2398 
	`mem£t
(&
joö_∑øms
, 0, (join_params));

2399 
	`mem˝y
((*)
joö_∑øms
.
ssid
.
SSID
, (*)
∑øms
->ssid,

2400 
∑øms
->
ssid_Àn
);

2401 
joö_∑øms
.
ssid
.
SSID_Àn
 = 
	`htod32
(
∑øms
->
ssid_Àn
);

2402 i‡(
∑øms
->
bssid
)

2403 
	`mem˝y
(&
joö_∑øms
.
∑øms
.
bssid
,Öarams->bssid,

2404 
ETHER_ADDR_LEN
);

2406 
	`mem£t
(&
joö_∑øms
.
∑øms
.
bssid
, 0, 
ETHER_ADDR_LEN
);

2408 
îr
 = 
	`wldev_io˘l
(
dev
, 
WLC_SET_SSID
, &
joö_∑øms
,

2409 (
joö_∑øms
), 
åue
);

2410 i‡(
	`u∆ikñy
(
îr
)) {

2411 
	`WL_ERR
(("Eº‹ (%d)\n", 
îr
));

2412  
îr
;

2414  
îr
;

2415 
	}
}

2417 
s32
 
	$wl_cfg80211_Àave_ibss
(
wùhy
 *wùhy, 
√t_devi˚
 *
dev
)

2419 
wl_¥iv
 *
wl
 = 
	`wùhy_¥iv
(
wùhy
);

2420 
s32
 
îr
 = 0;

2422 
	`CHECK_SYS_UP
(
wl
);

2423 
	`wl_lök_down
(
wl
);

2425  
îr
;

2426 
	}
}

2428 
s32


2429 
	$wl_£t_w∑_vîsi⁄
(
√t_devi˚
 *
dev
, 
cfg80211_c⁄√˘_∑øms
 *
sme
)

2431 
wl_¥iv
 *
wl
 = 
wlcfg_drv_¥iv
;

2432 
wl_£curôy
 *
£c
;

2433 
s32
 
vÆ
 = 0;

2434 
s32
 
îr
 = 0;

2435 
s32
 
bssidx
 = 
	`wl_cfgp2p_föd_idx
(
wl
, 
dev
);

2437 i‡(
sme
->
¸y±o
.
w∑_vîsi⁄s
 & 
NL80211_WPA_VERSION_1
)

2438 
vÆ
 = 
WPA_AUTH_PSK
 |

2439 
WPA_AUTH_UNSPECIFIED
;

2440 i‡(
sme
->
¸y±o
.
w∑_vîsi⁄s
 & 
NL80211_WPA_VERSION_2
)

2441 
vÆ
 = 
WPA2_AUTH_PSK
|

2442 
WPA2_AUTH_UNSPECIFIED
;

2444 
vÆ
 = 
WPA_AUTH_DISABLED
;

2446 i‡(
	`is_wps_c⁄n
(
sme
))

2447 
vÆ
 = 
WPA_AUTH_DISABLED
;

2449 #ifde‡
BCMWAPI_WPI


2450 i‡(
sme
->
¸y±o
.
w∑_vîsi⁄s
 & 
NL80211_WAPI_VERSION_1
) {

2451 
	`WL_DBG
((" * wl_set_wpa_version, set wpa_auth"

2453 
vÆ
 = 
WAPI_AUTH_PSK
;

2456 
	`WL_DBG
(("£âög w∑_authÅÿ0x%0x\n", 
vÆ
));

2457 
îr
 = 
	`wldev_iov¨_£töt_bsscfg
(
dev
, "w∑_auth", 
vÆ
, 
bssidx
);

2458 i‡(
	`u∆ikñy
(
îr
)) {

2459 
	`WL_ERR
(("£àw∑_auth faûed (%d)\n", 
îr
));

2460  
îr
;

2462 
£c
 = 
	`wl_ªad_¥of
(
wl
, 
dev
, 
WL_PROF_SEC
);

2463 
£c
->
w∑_vîsi⁄s
 = 
sme
->
¸y±o
.wpa_versions;

2464  
îr
;

2465 
	}
}

2467 #ifde‡
BCMWAPI_WPI


2468 
s32


2469 
	$wl_£t_£t_w≠i_õ
(
√t_devi˚
 *
dev
, 
cfg80211_c⁄√˘_∑øms
 *
sme
)

2471 
wl_¥iv
 *
wl
 = 
wlcfg_drv_¥iv
;

2472 
s32
 
îr
 = 0;

2473 
s32
 
bssidx
 = 
	`wl_cfgp2p_föd_idx
(
wl
, 
dev
);

2475 
	`WL_DBG
((" %†\n", 
__FUNCTION__
));

2477 i‡(
sme
->
¸y±o
.
w∑_vîsi⁄s
 & 
NL80211_WAPI_VERSION_1
) {

2478 
îr
 = 
	`wldev_iov¨_£tbuf_bsscfg
(
dev
, "w≠iõ", 
sme
->
õ
,

2479 
sme
->
õ_Àn
, 
wl
->
io˘l_buf
, 
WLC_IOCTL_MAXLEN
, 
bssidx
, &wl->
io˘l_buf_sync
);

2480 i‡(
	`u∆ikñy
(
îr
)) {

2481 
	`WL_ERR
(("===> së_w≠i_õ Eº‹ (%d)\n", 
îr
));

2482  
îr
;

2485 
	`WL_DBG
((" * skip \n"));

2486  
îr
;

2487 
	}
}

2490 
s32


2491 
	$wl_£t_auth_ty≥
(
√t_devi˚
 *
dev
, 
cfg80211_c⁄√˘_∑øms
 *
sme
)

2493 
wl_¥iv
 *
wl
 = 
wlcfg_drv_¥iv
;

2494 
wl_£curôy
 *
£c
;

2495 
s32
 
vÆ
 = 0;

2496 
s32
 
îr
 = 0;

2497 
s32
 
bssidx
 = 
	`wl_cfgp2p_föd_idx
(
wl
, 
dev
);

2498 
sme
->
auth_ty≥
) {

2499 
NL80211_AUTHTYPE_OPEN_SYSTEM
:

2500 
vÆ
 = 
WL_AUTH_OPEN_SYSTEM
;

2501 
	`WL_DBG
(("open system\n"));

2503 
NL80211_AUTHTYPE_SHARED_KEY
:

2504 
vÆ
 = 
WL_AUTH_SHARED_KEY
;

2505 
	`WL_DBG
(("shared key\n"));

2507 
NL80211_AUTHTYPE_AUTOMATIC
:

2508 
vÆ
 = 
WL_AUTH_OPEN_SHARED
;

2509 
	`WL_DBG
(("automatic\n"));

2512 
vÆ
 = 
WL_AUTH_OPEN_SHARED
;

2513 
	`WL_ERR
(("övÆidáuthÅy≥ (%d)\n", 
sme
->
auth_ty≥
));

2517 
îr
 = 
	`wldev_iov¨_£töt_bsscfg
(
dev
, "auth", 
vÆ
, 
bssidx
);

2518 i‡(
	`u∆ikñy
(
îr
)) {

2519 
	`WL_ERR
(("£àauth faûed (%d)\n", 
îr
));

2520  
îr
;

2522 
£c
 = 
	`wl_ªad_¥of
(
wl
, 
dev
, 
WL_PROF_SEC
);

2523 
£c
->
auth_ty≥
 = 
sme
->auth_type;

2524  
îr
;

2525 
	}
}

2527 
s32


2528 
	$wl_£t_£t_cùhî
(
√t_devi˚
 *
dev
, 
cfg80211_c⁄√˘_∑øms
 *
sme
)

2530 
wl_¥iv
 *
wl
 = 
wlcfg_drv_¥iv
;

2531 
wl_£curôy
 *
£c
;

2532 
s32
 
pvÆ
 = 0;

2533 
s32
 
gvÆ
 = 0;

2534 
s32
 
îr
 = 0;

2535 #ifde‡
BCMWAPI_WPI


2536 
s32
 
vÆ
 = 0;

2538 
s32
 
bssidx
 = 
	`wl_cfgp2p_föd_idx
(
wl
, 
dev
);

2540 i‡(
sme
->
¸y±o
.
n_cùhîs_∑úwi£
) {

2541 
sme
->
¸y±o
.
cùhîs_∑úwi£
[0]) {

2542 
WLAN_CIPHER_SUITE_WEP40
:

2543 
WLAN_CIPHER_SUITE_WEP104
:

2544 
pvÆ
 = 
WEP_ENABLED
;

2546 
WLAN_CIPHER_SUITE_TKIP
:

2547 
pvÆ
 = 
TKIP_ENABLED
;

2549 
WLAN_CIPHER_SUITE_CCMP
:

2550 
pvÆ
 = 
AES_ENABLED
;

2552 
WLAN_CIPHER_SUITE_AES_CMAC
:

2553 
pvÆ
 = 
AES_ENABLED
;

2555 #ifde‡
BCMWAPI_WPI


2556 
WLAN_CIPHER_SUITE_SMS4
:

2557 
vÆ
 = 
SMS4_ENABLED
;

2558 
pvÆ
 = 
SMS4_ENABLED
;

2562 
	`WL_ERR
(("invalid cipherÖairwise (%d)\n",

2563 
sme
->
¸y±o
.
cùhîs_∑úwi£
[0]));

2564  -
EINVAL
;

2567 i‡(
sme
->
¸y±o
.
cùhî_group
) {

2568 
sme
->
¸y±o
.
cùhî_group
) {

2569 
WLAN_CIPHER_SUITE_WEP40
:

2570 
WLAN_CIPHER_SUITE_WEP104
:

2571 
gvÆ
 = 
WEP_ENABLED
;

2573 
WLAN_CIPHER_SUITE_TKIP
:

2574 
gvÆ
 = 
TKIP_ENABLED
;

2576 
WLAN_CIPHER_SUITE_CCMP
:

2577 
gvÆ
 = 
AES_ENABLED
;

2579 
WLAN_CIPHER_SUITE_AES_CMAC
:

2580 
gvÆ
 = 
AES_ENABLED
;

2582 #ifde‡
BCMWAPI_WPI


2583 
WLAN_CIPHER_SUITE_SMS4
:

2584 
vÆ
 = 
SMS4_ENABLED
;

2585 
gvÆ
 = 
SMS4_ENABLED
;

2589 
	`WL_ERR
(("invalid cipher group (%d)\n",

2590 
sme
->
¸y±o
.
cùhî_group
));

2591  -
EINVAL
;

2595 
	`WL_DBG
(("pvÆ (%dËgvÆ (%d)\n", 
pvÆ
, 
gvÆ
));

2597 i‡(
	`is_wps_c⁄n
(
sme
)) {

2598 i‡(
sme
->
¥ivacy
)

2599 
îr
 = 
	`wldev_iov¨_£töt_bsscfg
(
dev
, "w£c", 4, 
bssidx
);

2600 #ifde‡
BCMWAPI_WPI


2601 i‡(
sme
->
¸y±o
.
cùhî_group
 =
WLAN_CIPHER_SUITE_SMS4
) {

2602 
	`WL_DBG
((" NO, is_wps_conn, WAPI setÅo SMS4_ENABLED"));

2603 
îr
 = 
	`wldev_iov¨_£töt_bsscfg
(
dev
, "w£c", 
vÆ
, 
bssidx
);

2608 
îr
 = 
	`wldev_iov¨_£töt_bsscfg
(
dev
, "w£c", 0, 
bssidx
);

2610 
	`WL_DBG
((" NO, is_wps_conn, SetÖval | gvalÅo WSEC"));

2611 
îr
 = 
	`wldev_iov¨_£töt_bsscfg
(
dev
, "wsec",

2612 
pvÆ
 | 
gvÆ
, 
bssidx
);

2614 i‡(
	`u∆ikñy
(
îr
)) {

2615 
	`WL_ERR
(("îr‹ (%d)\n", 
îr
));

2616  
îr
;

2619 
£c
 = 
	`wl_ªad_¥of
(
wl
, 
dev
, 
WL_PROF_SEC
);

2620 
£c
->
cùhî_∑úwi£
 = 
sme
->
¸y±o
.
cùhîs_∑úwi£
[0];

2621 
£c
->
cùhî_group
 = 
sme
->
¸y±o
.cipher_group;

2623  
îr
;

2624 
	}
}

2626 
s32


2627 
	$wl_£t_key_mgmt
(
√t_devi˚
 *
dev
, 
cfg80211_c⁄√˘_∑øms
 *
sme
)

2629 
wl_¥iv
 *
wl
 = 
wlcfg_drv_¥iv
;

2630 
wl_£curôy
 *
£c
;

2631 
s32
 
vÆ
 = 0;

2632 
s32
 
îr
 = 0;

2633 
s32
 
bssidx
 = 
	`wl_cfgp2p_föd_idx
(
wl
, 
dev
);

2635 i‡(
sme
->
¸y±o
.
n_akm_suôes
) {

2636 
îr
 = 
	`wldev_iov¨_gëöt
(
dev
, "w∑_auth", &
vÆ
);

2637 i‡(
	`u∆ikñy
(
îr
)) {

2638 
	`WL_ERR
(("couldÇŸ gë w∑_auth (%d)\n", 
îr
));

2639  
îr
;

2641 i‡(
vÆ
 & (
WPA_AUTH_PSK
 |

2642 
WPA_AUTH_UNSPECIFIED
)) {

2643 
sme
->
¸y±o
.
akm_suôes
[0]) {

2644 
WLAN_AKM_SUITE_8021X
:

2645 
vÆ
 = 
WPA_AUTH_UNSPECIFIED
;

2647 
WLAN_AKM_SUITE_PSK
:

2648 
vÆ
 = 
WPA_AUTH_PSK
;

2651 
	`WL_ERR
(("invalid cipher group (%d)\n",

2652 
sme
->
¸y±o
.
cùhî_group
));

2653  -
EINVAL
;

2655 } i‡(
vÆ
 & (
WPA2_AUTH_PSK
 |

2656 
WPA2_AUTH_UNSPECIFIED
)) {

2657 
sme
->
¸y±o
.
akm_suôes
[0]) {

2658 
WLAN_AKM_SUITE_8021X
:

2659 
vÆ
 = 
WPA2_AUTH_UNSPECIFIED
;

2661 
WLAN_AKM_SUITE_PSK
:

2662 
vÆ
 = 
WPA2_AUTH_PSK
;

2665 
	`WL_ERR
(("invalid cipher group (%d)\n",

2666 
sme
->
¸y±o
.
cùhî_group
));

2667  -
EINVAL
;

2670 #ifde‡
BCMWAPI_WPI


2671 i‡(
vÆ
 & (
WAPI_AUTH_PSK
 | 
WAPI_AUTH_UNSPECIFIED
)) {

2672 
sme
->
¸y±o
.
akm_suôes
[0]) {

2673 
WLAN_AKM_SUITE_WAPI_CERT
:

2674 
vÆ
 = 
WAPI_AUTH_UNSPECIFIED
;

2676 
WLAN_AKM_SUITE_WAPI_PSK
:

2677 
vÆ
 = 
WAPI_AUTH_PSK
;

2680 
	`WL_ERR
(("invalid cipher group (%d)\n",

2681 
sme
->
¸y±o
.
cùhî_group
));

2682  -
EINVAL
;

2686 
	`WL_DBG
(("£âög w∑_authÅÿ%d\n", 
vÆ
));

2688 
îr
 = 
	`wldev_iov¨_£töt_bsscfg
(
dev
, "w∑_auth", 
vÆ
, 
bssidx
);

2689 i‡(
	`u∆ikñy
(
îr
)) {

2690 
	`WL_ERR
(("couldÇŸ së w∑_auth (%d)\n", 
îr
));

2691  
îr
;

2694 
£c
 = 
	`wl_ªad_¥of
(
wl
, 
dev
, 
WL_PROF_SEC
);

2695 
£c
->
w∑_auth
 = 
sme
->
¸y±o
.
akm_suôes
[0];

2697  
îr
;

2698 
	}
}

2700 
s32


2701 
	$wl_£t_£t_sh¨edkey
(
√t_devi˚
 *
dev
,

2702 
cfg80211_c⁄√˘_∑øms
 *
sme
)

2704 
wl_¥iv
 *
wl
 = 
wlcfg_drv_¥iv
;

2705 
wl_£curôy
 *
£c
;

2706 
wl_w£c_key
 
key
;

2707 
s32
 
vÆ
;

2708 
s32
 
îr
 = 0;

2709 
s32
 
bssidx
 = 
	`wl_cfgp2p_föd_idx
(
wl
, 
dev
);

2711 
	`WL_DBG
(("keyÜí (%d)\n", 
sme
->
key_Àn
));

2712 i‡(
sme
->
key_Àn
) {

2713 
£c
 = 
	`wl_ªad_¥of
(
wl
, 
dev
, 
WL_PROF_SEC
);

2714 
	`WL_DBG
(("wpa_versions 0x%x cipher_pairwise 0x%x\n",

2715 
£c
->
w∑_vîsi⁄s
, sec->
cùhî_∑úwi£
));

2716 i‡(!(
£c
->
w∑_vîsi⁄s
 & (
NL80211_WPA_VERSION_1
 |

2717 
NL80211_WPA_VERSION_2


2718 #ifde‡
BCMWAPI_WPI


2719 | 
NL80211_WAPI_VERSION_1


2722 (
£c
->
cùhî_∑úwi£
 & (
WLAN_CIPHER_SUITE_WEP40
 |

2723 
WLAN_CIPHER_SUITE_WEP104


2724 #ifde‡
BCMWAPI_WPI


2725 | 
WLAN_CIPHER_SUITE_SMS4


2729 
	`mem£t
(&
key
, 0, (key));

2730 
key
.
Àn
 = (
u32
Ë
sme
->
key_Àn
;

2731 
key
.
ödex
 = (
u32
Ë
sme
->
key_idx
;

2732 i‡(
	`u∆ikñy
(
key
.
Àn
 > (key.
d©a
))) {

2733 
	`WL_ERR
(("Toÿl⁄g keyÜígth (%u)\n", 
key
.
Àn
));

2734  -
EINVAL
;

2736 
	`mem˝y
(
key
.
d©a
, 
sme
->key, key.
Àn
);

2737 
key
.
Êags
 = 
WL_PRIMARY_KEY
;

2738 
£c
->
cùhî_∑úwi£
) {

2739 
WLAN_CIPHER_SUITE_WEP40
:

2740 
key
.
Ægo
 = 
CRYPTO_ALGO_WEP1
;

2742 
WLAN_CIPHER_SUITE_WEP104
:

2743 
key
.
Ægo
 = 
CRYPTO_ALGO_WEP128
;

2745 #ifde‡
BCMWAPI_WPI


2746 
WLAN_CIPHER_SUITE_SMS4
:

2747 
key
.
Ægo
 = 
CRYPTO_ALGO_SMS4
;

2751 
	`WL_ERR
(("Invalidálgorithm (%d)\n",

2752 
sme
->
¸y±o
.
cùhîs_∑úwi£
[0]));

2753  -
EINVAL
;

2756 
	`WL_DBG
(("keyÜength (%d) key index (%d)álgo (%d)\n",

2757 
key
.
Àn
, key.
ödex
, key.
Ægo
));

2758 
	`WL_DBG
(("key \"%s\"\n", 
key
.
d©a
));

2759 
	`sw≠_key_‰om_BE
(&
key
);

2760 
îr
 = 
	`wldev_iov¨_£tbuf_bsscfg
(
dev
, "w£c_key", &
key
, (key),

2761 
wl
->
io˘l_buf
, 
WLC_IOCTL_MAXLEN
, 
bssidx
, &wl->
io˘l_buf_sync
);

2762 i‡(
	`u∆ikñy
(
îr
)) {

2763 
	`WL_ERR
(("WLC_SET_KEYÉº‹ (%d)\n", 
îr
));

2764  
îr
;

2766 i‡(
£c
->
auth_ty≥
 =
NL80211_AUTHTYPE_SHARED_KEY
) {

2767 
	`WL_DBG
(("setáuth_typeÅo shared key\n"));

2768 
vÆ
 = 
WL_AUTH_SHARED_KEY
;

2769 
îr
 = 
	`wldev_iov¨_£töt_bsscfg
(
dev
, "auth", 
vÆ
, 
bssidx
);

2770 i‡(
	`u∆ikñy
(
îr
)) {

2771 
	`WL_ERR
(("£àauth faûed (%d)\n", 
îr
));

2772  
îr
;

2777  
îr
;

2778 
	}
}

2780 #ifde‡
ESCAN_RESULT_PATCH


2781 
u8
 
	gc⁄√˘_ªq_bssid
[6];

2782 
u8
 
	gbrﬂd_bssid
[6];

2786 
s32


2787 
	$wl_cfg80211_c⁄√˘
(
wùhy
 *wùhy, 
√t_devi˚
 *
dev
,

2788 
cfg80211_c⁄√˘_∑øms
 *
sme
)

2790 
wl_¥iv
 *
wl
 = 
	`wùhy_¥iv
(
wùhy
);

2791 
õì80211_ch™√l
 *
ch™
 = 
sme
->
ch™√l
;

2792 
wl_extjoö_∑øms_t
 *
ext_joö_∑øms
;

2793 
wl_joö_∑øms
 
joö_∑øms
;

2794 
size_t
 
joö_∑øms_size
;

2795 
s32
 
îr
 = 0;

2796 
w∑_õ_fixed_t
 *
w∑_õ
;

2797 
bcm_év_t
 *
w∑2_õ
;

2798 
u8
* 
w∑õ
 = 0;

2799 
u32
 
w∑õ_Àn
 = 0;

2800 
u32
 
ch™_˙t
 = 0;

2801 
ëhî_addr
 
bssid
;

2802 
ªt
;

2804 
	`WL_DBG
(("In\n"));

2806 i‡(
	`u∆ikñy
(!
sme
->
ssid
)) {

2807 
	`WL_ERR
(("Invalid ssid\n"));

2808  -
EOPNOTSUPP
;

2811 
	`CHECK_SYS_UP
(
wl
);

2816 #i‡!
	`deföed
(
ESCAN_RESULT_PATCH
)

2817 i‡(
wl
->
sˇn_ªque°
) {

2818 
	`wl_nŸify_esˇn_com∂ëe
(
wl
, 
dev
, 
åue
,Årue);

2821 #ifde‡
ESCAN_RESULT_PATCH


2822 i‡(
sme
->
bssid
) {

2823 
	`mem˝y
(
c⁄√˘_ªq_bssid
, 
sme
->
bssid
, 
ETHER_ADDR_LEN
);

2826 
	`bzîo
(
c⁄√˘_ªq_bssid
, 
ETHER_ADDR_LEN
);

2828 
	`bzîo
(
brﬂd_bssid
, 
ETHER_ADDR_LEN
);

2831 
	`bzîo
(&
bssid
, (bssid));

2832 i‡(!
	`wl_gë_drv_°©us
(
wl
, 
CONNECTED
, 
dev
)&&

2833 (
ªt
 = 
	`wldev_io˘l
(
dev
, 
WLC_GET_BSSID
, &
bssid
, 
ETHER_ADDR_LEN
, 
Ál£
)) == 0) {

2834 i‡(!
	`ETHER_ISNULLADDR
(&
bssid
)) {

2835 
scb_vÆ_t
 
scbvÆ
;

2836 
	`wl_£t_drv_°©us
(
wl
, 
DISCONNECTING
, 
dev
);

2837 
scbvÆ
.
vÆ
 = 
DOT11_RC_DISASSOC_LEAVING
;

2838 
	`mem˝y
(&
scbvÆ
.
ó
, &
bssid
, 
ETHER_ADDR_LEN
);

2839 
scbvÆ
.
vÆ
 = 
	`htod32
(scbval.val);

2841 
	`WL_DBG
(("drv sètu†CONNECTED i†nŸ së, buàc⁄√˘ed i¿FW!" 
MACDBG
 "/n",

2842 
	`MAC2STRDBG
(
bssid
.
o˘ë
)));

2843 
îr
 = 
	`wldev_io˘l
(
dev
, 
WLC_DISASSOC
, &
scbvÆ
,

2844 (
scb_vÆ_t
), 
åue
);

2845 i‡(
	`u∆ikñy
(
îr
)) {

2846 
	`wl_˛r_drv_°©us
(
wl
, 
DISCONNECTING
, 
dev
);

2847 
	`WL_ERR
(("îr‹ (%d)\n", 
îr
));

2848  
îr
;

2850 
	`wl_gë_drv_°©us
(
wl
, 
DISCONNECTING
, 
dev
)) {

2851 
	`WL_ERR
(("Waiting for disconnectionÅerminated.\n"));

2852 
	`m¶ìp
(20);

2855 
	`WL_DBG
(("CurrentlyÇotássociated!\n"));

2859 
	`bzîo
(&
bssid
, (bssid));

2860 i‡(!
	`wl_gë_drv_°©us
(
wl
, 
DISCONNECTING
, 
dev
))

2861 
	`wl_upd©e_¥of
(
wl
, 
dev
, 
NULL
, (*)&
bssid
, 
WL_PROF_BSSID
);

2863 i‡(
	`p2p_is_⁄
(
wl
Ë&& (
dev
 !
	`wl_to_¥mry_ndev
(wl))) {

2865 
	`wl_cfgp2p_£t_m™agemít_õ
(
wl
, 
dev
, 
	`wl_cfgp2p_föd_idx
(wl, dev),

2866 
VNDR_IE_ASSOCREQ_FLAG
, 
sme
->
õ
, sme->
õ_Àn
);

2867 } i‡(
dev
 =
	`wl_to_¥mry_ndev
(
wl
)) {

2869 i‡((
w∑2_õ
 = 
	`bcm_∑r£_évs
((
u8
 *)
sme
->
õ
, sme->
õ_Àn
,

2870 
DOT11_MNG_RSN_ID
)Ë!
NULL
) {

2871 
	`WL_DBG
((" WPA2 IE is found\n"));

2874 i‡((
w∑_õ
 = 
	`wl_cfgp2p_föd_w∑õ
((
u8
 *)
sme
->
õ
,

2875 
sme
->
õ_Àn
)Ë!
NULL
) {

2876 
	`WL_DBG
((" WPA IE is found\n"));

2878 i‡(
w∑_õ
 !
NULL
 || 
w∑2_õ
 != NULL) {

2879 
w∑õ
 = (
w∑_õ
 !
NULL
Ë? (
u8
 *)w∑_õ : (u8 *)
w∑2_õ
;

2880 
w∑õ_Àn
 = (
w∑_õ
 !
NULL
Ë? w∑_õ->
Àngth
 : 
w∑2_õ
->
Àn
;

2881 
w∑õ_Àn
 +
WPA_RSN_IE_TAG_FIXED_LEN
;

2882 
	`wldev_iov¨_£tbuf
(
dev
, "w∑õ", 
w∑õ
, 
w∑õ_Àn
,

2883 
wl
->
io˘l_buf
, 
WLC_IOCTL_MAXLEN
, &wl->
io˘l_buf_sync
);

2885 
	`wldev_iov¨_£tbuf
(
dev
, "w∑õ", 
NULL
, 0,

2886 
wl
->
io˘l_buf
, 
WLC_IOCTL_MAXLEN
, &wl->
io˘l_buf_sync
);

2889 
îr
 = 
	`wl_cfgp2p_£t_m™agemít_õ
(
wl
, 
dev
, 
	`wl_cfgp2p_föd_idx
(wl, dev),

2890 
VNDR_IE_ASSOCREQ_FLAG
, (
u8
 *)
sme
->
õ
, sme->
õ_Àn
);

2891 i‡(
	`u∆ikñy
(
îr
)) {

2892  
îr
;

2896 i‡(
ch™
) {

2897 
wl
->
ch™√l
 = 
	`õì80211_‰equícy_to_ch™√l
(
ch™
->
˚¡î_‰eq
);

2898 
ch™_˙t
 = 1;

2899 
	`WL_DBG
(("ch™√»(%d), cíãr_ªq (%d), %d ch™√ls\n", 
wl
->
ch™√l
,

2900 
ch™
->
˚¡î_‰eq
, 
ch™_˙t
));

2902 
wl
->
ch™√l
 = 0;

2904 #ifde‡
BCMWAPI_WPI


2905 
	`WL_DBG
(("1.Énable wapiáuth\n"));

2906 i‡(
sme
->
¸y±o
.
w∑_vîsi⁄s
 & 
NL80211_WAPI_VERSION_1
) {

2907 
	`WL_DBG
(("2. set wapi ie \n"));

2908 
îr
 = 
	`wl_£t_£t_w≠i_õ
(
dev
, 
sme
);

2909 i‡(
	`u∆ikñy
(
îr
))

2910  
îr
;

2912 
	`WL_DBG
(("2. Not wapi ie \n"));

2914 
	`WL_DBG
(("õ (%p), ie_À¿(%zd)\n", 
sme
->
õ
, sme->
õ_Àn
));

2915 
	`WL_DBG
(("3. set wapi version \n"));

2916 
îr
 = 
	`wl_£t_w∑_vîsi⁄
(
dev
, 
sme
);

2917 i‡(
	`u∆ikñy
(
îr
)) {

2918 
	`WL_ERR
(("Invalid wpa_version\n"));

2919  
îr
;

2921 #ifde‡
BCMWAPI_WPI


2922 i‡(
sme
->
¸y±o
.
w∑_vîsi⁄s
 & 
NL80211_WAPI_VERSION_1
)

2923 
	`WL_DBG
(("4. WAPI Dont Set wl_set_auth_type\n"));

2925 
	`WL_DBG
(("4. wl_set_auth_type\n"));

2927 
îr
 = 
	`wl_£t_auth_ty≥
(
dev
, 
sme
);

2928 i‡(
	`u∆ikñy
(
îr
)) {

2929 
	`WL_ERR
(("InvalidáuthÅype\n"));

2930  
îr
;

2932 #ifde‡
BCMWAPI_WPI


2937 
îr
 = 
	`wl_£t_£t_cùhî
(
dev
, 
sme
);

2938 i‡(
	`u∆ikñy
(
îr
)) {

2939 
	`WL_ERR
(("Invalid ciper\n"));

2940  
îr
;

2943 
îr
 = 
	`wl_£t_key_mgmt
(
dev
, 
sme
);

2944 i‡(
	`u∆ikñy
(
îr
)) {

2945 
	`WL_ERR
(("Invalid key mgmt\n"));

2946  
îr
;

2949 
îr
 = 
	`wl_£t_£t_sh¨edkey
(
dev
, 
sme
);

2950 i‡(
	`u∆ikñy
(
îr
)) {

2951 
	`WL_ERR
(("Invalid shared key\n"));

2952  
îr
;

2959 
joö_∑øms_size
 = 
WL_EXTJOIN_PARAMS_FIXED_SIZE
 +

2960 
ch™_˙t
 * (
ch™•ec_t
);

2961 
ext_joö_∑øms
 = (
wl_extjoö_∑øms_t
*)
	`kzÆloc
(
joö_∑øms_size
, 
GFP_KERNEL
);

2962 i‡(
ext_joö_∑øms
 =
NULL
) {

2963 
îr
 = -
ENOMEM
;

2964 
	`wl_˛r_drv_°©us
(
wl
, 
CONNECTING
, 
dev
);

2965 
exô
;

2967 
ext_joö_∑øms
->
ssid
.
SSID_Àn
 = 
	`mö
(”xt_joö_∑øms->ssid.
SSID
), 
sme
->
ssid_Àn
);

2968 
	`mem˝y
(&
ext_joö_∑øms
->
ssid
.
SSID
, 
sme
->ssid,Éxt_joö_∑øms->ssid.
SSID_Àn
);

2969 
	`wl_upd©e_¥of
(
wl
, 
dev
, 
NULL
, &
ext_joö_∑øms
->
ssid
, 
WL_PROF_SSID
);

2970 
ext_joö_∑øms
->
ssid
.
SSID_Àn
 = 
	`htod32
(ext_join_params->ssid.SSID_len);

2974 
ext_joö_∑øms
->
sˇn
.
a˘ive_time
 = 
WL_SCAN_JOIN_ACTIVE_DWELL_TIME_MS
;

2975 
ext_joö_∑øms
->
sˇn
.
∑ssive_time
 = 
WL_SCAN_JOIN_PASSIVE_DWELL_TIME_MS
;

2977 
ext_joö_∑øms
->
sˇn
.
sˇn_ty≥
 = -1;

2978 
ext_joö_∑øms
->
sˇn
.
≈robes


2979 (
ext_joö_∑øms
->
sˇn
.
a˘ive_time
/
WL_SCAN_JOIN_PROBE_INTERVAL_MS
);

2980 
ext_joö_∑øms
->
sˇn
.
home_time
 = -1;

2982 i‡(
sme
->
bssid
)

2983 
	`mem˝y
(&
ext_joö_∑øms
->
assoc
.
bssid
, 
sme
->bssid, 
ETH_ALEN
);

2985 
	`mem˝y
(&
ext_joö_∑øms
->
assoc
.
bssid
, &
ëhî_bˇ°
, 
ETH_ALEN
);

2986 
ext_joö_∑øms
->
assoc
.
ch™•ec_num
 = 
ch™_˙t
;

2987 i‡(
ch™_˙t
) {

2988 
u16
 
ch™√l
, 
b™d
, 
bw
, 
˘l_sb
;

2989 
ch™•ec_t
 
ch•ec
;

2990 
ch™√l
 = 
wl
->channel;

2991 
b™d
 = (
ch™√l
 <
CH_MAX_2G_CHANNEL
Ë? 
WL_CHANSPEC_BAND_2G


2992 : 
WL_CHANSPEC_BAND_5G
;

2993 
bw
 = 
WL_CHANSPEC_BW_20
;

2994 
˘l_sb
 = 
WL_CHANSPEC_CTL_SB_NONE
;

2995 
ch•ec
 = (
ch™√l
 | 
b™d
 | 
bw
 | 
˘l_sb
);

2996 
ext_joö_∑øms
->
assoc
.
ch™•ec_li°
[0] &
WL_CHANSPEC_CHAN_MASK
;

2997 
ext_joö_∑øms
->
assoc
.
ch™•ec_li°
[0] |
ch•ec
;

2998 
ext_joö_∑øms
->
assoc
.
ch™•ec_li°
[0] =

2999 
	`wl_ch•ec_ho°_to_drivî
(
ext_joö_∑øms
->
assoc
.
ch™•ec_li°
[0]);

3001 
ext_joö_∑øms
->
assoc
.
ch™•ec_num
 = 
	`htod32
(ext_join_params->assoc.chanspec_num);

3002 i‡(
ext_joö_∑øms
->
ssid
.
SSID_Àn
 < 
IEEE80211_MAX_SSID_LEN
) {

3003 
	`WL_INFO
(("ssid \"%s\",Üí (%d)\n", 
ext_joö_∑øms
->
ssid
.
SSID
,

3004 
ext_joö_∑øms
->
ssid
.
SSID_Àn
));

3006 
	`wl_£t_drv_°©us
(
wl
, 
CONNECTING
, 
dev
);

3007 
îr
 = 
	`wldev_iov¨_£tbuf_bsscfg
(
dev
, "joö", 
ext_joö_∑øms
, 
joö_∑øms_size
,

3008 
wl
->
io˘l_buf
, 
WLC_IOCTL_MAXLEN
, 
	`wl_cfgp2p_föd_idx
(wl, 
dev
), &wl->
io˘l_buf_sync
);

3009 
	`k‰ì
(
ext_joö_∑øms
);

3010 i‡(
îr
) {

3011 
	`wl_˛r_drv_°©us
(
wl
, 
CONNECTING
, 
dev
);

3012 i‡(
îr
 =
BCME_UNSUPPORTED
) {

3013 
	`WL_DBG
(("join iovar isÇot supported\n"));

3014 
£t_ssid
;

3016 
	`WL_ERR
(("îr‹ (%d)\n", 
îr
));

3018 
exô
;

3020 
£t_ssid
:

3021 
	`mem£t
(&
joö_∑øms
, 0, (join_params));

3022 
joö_∑øms_size
 = (
joö_∑øms
.
ssid
);

3024 
joö_∑øms
.
ssid
.
SSID_Àn
 = 
	`mö
((joö_∑øms.ssid.
SSID
), 
sme
->
ssid_Àn
);

3025 
	`mem˝y
(&
joö_∑øms
.
ssid
.
SSID
, 
sme
->ssid, joö_∑øms.ssid.
SSID_Àn
);

3026 
joö_∑øms
.
ssid
.
SSID_Àn
 = 
	`htod32
(join_params.ssid.SSID_len);

3027 
	`wl_upd©e_¥of
(
wl
, 
dev
, 
NULL
, &
joö_∑øms
.
ssid
, 
WL_PROF_SSID
);

3028 i‡(
sme
->
bssid
)

3029 
	`mem˝y
(&
joö_∑øms
.
∑øms
.
bssid
, 
sme
->bssid, 
ETH_ALEN
);

3031 
	`mem˝y
(&
joö_∑øms
.
∑øms
.
bssid
, &
ëhî_bˇ°
, 
ETH_ALEN
);

3033 
	`wl_ch_to_ch™•ec
(
wl
->
ch™√l
, &
joö_∑øms
, &
joö_∑øms_size
);

3034 
	`WL_DBG
(("joö_∑øm_sizê%d\n", 
joö_∑øms_size
));

3036 i‡(
joö_∑øms
.
ssid
.
SSID_Àn
 < 
IEEE80211_MAX_SSID_LEN
) {

3037 
	`WL_INFO
(("ssid \"%s\",Üí (%d)\n", 
joö_∑øms
.
ssid
.
SSID
,

3038 
joö_∑øms
.
ssid
.
SSID_Àn
));

3040 
	`wl_£t_drv_°©us
(
wl
, 
CONNECTING
, 
dev
);

3041 
îr
 = 
	`wldev_io˘l
(
dev
, 
WLC_SET_SSID
, &
joö_∑øms
, 
joö_∑øms_size
, 
åue
);

3042 i‡(
îr
) {

3043 
	`WL_ERR
(("îr‹ (%d)\n", 
îr
));

3044 
	`wl_˛r_drv_°©us
(
wl
, 
CONNECTING
, 
dev
);

3046 
exô
:

3047  
îr
;

3048 
	}
}

3050 
s32


3051 
	$wl_cfg80211_disc⁄√˘
(
wùhy
 *wùhy, 
√t_devi˚
 *
dev
,

3052 
u16
 
ªas⁄_code
)

3054 
wl_¥iv
 *
wl
 = 
	`wùhy_¥iv
(
wùhy
);

3055 
scb_vÆ_t
 
scbvÆ
;

3056 
boﬁ
 
a˘
 = 
Ál£
;

3057 
s32
 
îr
 = 0;

3058 
u8
 *
curbssid
;

3059 
	`WL_ERR
(("Rós⁄ %d\n", 
ªas⁄_code
));

3060 
	`CHECK_SYS_UP
(
wl
);

3061 
a˘
 = *(
boﬁ
 *Ë
	`wl_ªad_¥of
(
wl
, 
dev
, 
WL_PROF_ACT
);

3062 
curbssid
 = 
	`wl_ªad_¥of
(
wl
, 
dev
, 
WL_PROF_BSSID
);

3063 i‡(
a˘
) {

3067 #i‡!
	`deföed
(
ESCAN_RESULT_PATCH
)

3069 i‡(
wl
->
sˇn_ªque°
) {

3070 
	`wl_nŸify_esˇn_com∂ëe
(
wl
, 
dev
, 
åue
,Årue);

3073 
	`wl_£t_drv_°©us
(
wl
, 
DISCONNECTING
, 
dev
);

3074 
scbvÆ
.
vÆ
 = 
ªas⁄_code
;

3075 
	`mem˝y
(&
scbvÆ
.
ó
, 
curbssid
, 
ETHER_ADDR_LEN
);

3076 
scbvÆ
.
vÆ
 = 
	`htod32
(scbval.val);

3077 
îr
 = 
	`wldev_io˘l
(
dev
, 
WLC_DISASSOC
, &
scbvÆ
,

3078 (
scb_vÆ_t
), 
åue
);

3079 i‡(
	`u∆ikñy
(
îr
)) {

3080 
	`wl_˛r_drv_°©us
(
wl
, 
DISCONNECTING
, 
dev
);

3081 
	`WL_ERR
(("îr‹ (%d)\n", 
îr
));

3082  
îr
;

3086  
îr
;

3087 
	}
}

3089 
s32


3090 
	$wl_cfg80211_£t_tx_powî
(
wùhy
 *wiphy,

3091 
∆80211_tx_powî_£âög
 
ty≥
, 
s32
 
dbm
)

3094 
wl_¥iv
 *
wl
 = 
	`wùhy_¥iv
(
wùhy
);

3095 
√t_devi˚
 *
ndev
 = 
	`wl_to_¥mry_ndev
(
wl
);

3096 
u16
 
txpwrmw
;

3097 
s32
 
îr
 = 0;

3098 
s32
 
dißbÀ
 = 0;

3100 
	`CHECK_SYS_UP
(
wl
);

3101 
ty≥
) {

3102 
NL80211_TX_POWER_AUTOMATIC
:

3104 
NL80211_TX_POWER_LIMITED
:

3105 i‡(
dbm
 < 0) {

3106 
	`WL_ERR
(("TX_POWER_LIMITTED - dbm isÇegative\n"));

3107  -
EINVAL
;

3110 
NL80211_TX_POWER_FIXED
:

3111 i‡(
dbm
 < 0) {

3112 
	`WL_ERR
(("TX_POWER_FIXED - dbm isÇegative..\n"));

3113  -
EINVAL
;

3118 
dißbÀ
 = 
WL_RADIO_SW_DISABLE
 << 16;

3119 
dißbÀ
 = 
	`htod32
(disable);

3120 
îr
 = 
	`wldev_io˘l
(
ndev
, 
WLC_SET_RADIO
, &
dißbÀ
, (dißbÀ), 
åue
);

3121 i‡(
	`u∆ikñy
(
îr
)) {

3122 
	`WL_ERR
(("WLC_SET_RADIOÉº‹ (%d)\n", 
îr
));

3123  
îr
;

3126 i‡(
dbm
 > 0xffff)

3127 
txpwrmw
 = 0xffff;

3129 
txpwrmw
 = (
u16
Ë
dbm
;

3130 
îr
 = 
	`wldev_iov¨_£töt
(
ndev
, "qtxpower",

3131 (
s32
Ë(
	`bcm_mw_to_qdbm
(
txpwrmw
)));

3132 i‡(
	`u∆ikñy
(
îr
)) {

3133 
	`WL_ERR
(("qtxpowîÉº‹ (%d)\n", 
îr
));

3134  
îr
;

3136 
wl
->
c⁄f
->
tx_powî
 = 
dbm
;

3138  
îr
;

3139 
	}
}

3141 
s32
 
	$wl_cfg80211_gë_tx_powî
(
wùhy
 *wùhy, 
s32
 *
dbm
)

3143 
wl_¥iv
 *
wl
 = 
	`wùhy_¥iv
(
wùhy
);

3144 
√t_devi˚
 *
ndev
 = 
	`wl_to_¥mry_ndev
(
wl
);

3145 
s32
 
txpwrdbm
;

3146 
u8
 
ªsu…
;

3147 
s32
 
îr
 = 0;

3149 
	`CHECK_SYS_UP
(
wl
);

3150 
îr
 = 
	`wldev_iov¨_gëöt
(
ndev
, "qtxpowî", &
txpwrdbm
);

3151 i‡(
	`u∆ikñy
(
îr
)) {

3152 
	`WL_ERR
(("îr‹ (%d)\n", 
îr
));

3153  
îr
;

3155 
ªsu…
 = (
u8
Ë(
txpwrdbm
 & ~
WL_TXPWR_OVERRIDE
);

3156 *
dbm
 = (
s32
Ë
	`bcm_qdbm_to_mw
(
ªsu…
);

3158  
îr
;

3159 
	}
}

3161 
s32


3162 
	$wl_cfg80211_c⁄fig_deÁu…_key
(
wùhy
 *wùhy, 
√t_devi˚
 *
dev
,

3163 
u8
 
key_idx
, 
boﬁ
 
uniˇ°
, boﬁ 
mu…iˇ°
)

3165 
wl_¥iv
 *
wl
 = 
	`wùhy_¥iv
(
wùhy
);

3166 
u32
 
ödex
;

3167 
s32
 
w£c
;

3168 
s32
 
îr
 = 0;

3169 
s32
 
bssidx
 = 
	`wl_cfgp2p_föd_idx
(
wl
, 
dev
);

3171 
	`WL_DBG
(("key index (%d)\n", 
key_idx
));

3172 
	`CHECK_SYS_UP
(
wl
);

3173 
îr
 = 
	`wldev_iov¨_gëöt_bsscfg
(
dev
, "w£c", &
w£c
, 
bssidx
);

3174 i‡(
	`u∆ikñy
(
îr
)) {

3175 
	`WL_ERR
(("WLC_GET_WSECÉº‹ (%d)\n", 
îr
));

3176  
îr
;

3178 i‡(
w£c
 & 
WEP_ENABLED
) {

3180 
ödex
 = (
u32
Ë
key_idx
;

3181 
ödex
 = 
	`htod32
(index);

3182 
îr
 = 
	`wldev_io˘l
(
dev
, 
WLC_SET_KEY_PRIMARY
, &
ödex
,

3183 (
ödex
), 
åue
);

3184 i‡(
	`u∆ikñy
(
îr
)) {

3185 
	`WL_ERR
(("îr‹ (%d)\n", 
îr
));

3188  
îr
;

3189 
	}
}

3191 
s32


3192 
	$wl_add_keyext
(
wùhy
 *wùhy, 
√t_devi˚
 *
dev
,

3193 
u8
 
key_idx
, c⁄° u8 *
mac_addr
, 
key_∑øms
 *
∑øms
)

3195 
wl_¥iv
 *
wl
 = 
	`wùhy_¥iv
(
wùhy
);

3196 
wl_w£c_key
 
key
;

3197 
s32
 
îr
 = 0;

3198 
s32
 
bssidx
 = 
	`wl_cfgp2p_föd_idx
(
wl
, 
dev
);

3199 
s32
 
mode
 = 
	`wl_gë_mode_by_√tdev
(
wl
, 
dev
);

3200 
	`mem£t
(&
key
, 0, (key));

3201 
key
.
ödex
 = (
u32
Ë
key_idx
;

3203 i‡(!
	`ETHER_ISMULTI
(
mac_addr
))

3204 
	`mem˝y
((*)&
key
.
ó
, (*)
mac_addr
, 
ETHER_ADDR_LEN
);

3205 
key
.
Àn
 = (
u32
Ë
∑øms
->
key_Àn
;

3208 i‡(
key
.
Àn
 == 0) {

3210 
	`sw≠_key_‰om_BE
(&
key
);

3211 
îr
 = 
	`wldev_iov¨_£tbuf_bsscfg
(
dev
, "w£c_key", &
key
, (key),

3212 
wl
->
io˘l_buf
, 
WLC_IOCTL_MAXLEN
, 
bssidx
, &wl->
io˘l_buf_sync
);

3213 i‡(
	`u∆ikñy
(
îr
)) {

3214 
	`WL_ERR
(("key dñëêîr‹ (%d)\n", 
îr
));

3215  
îr
;

3218 i‡(
key
.
Àn
 > (key.
d©a
)) {

3219 
	`WL_ERR
(("InvÆid keyÜígth (%d)\n", 
key
.
Àn
));

3220  -
EINVAL
;

3222 
	`WL_DBG
(("SëtögÅhêkey index %d\n", 
key
.
ödex
));

3223 
	`mem˝y
(
key
.
d©a
, 
∑øms
->key, key.
Àn
);

3225 i‡((
mode
 =
WL_MODE_BSS
) &&

3226 (
∑øms
->
cùhî
 =
WLAN_CIPHER_SUITE_TKIP
)) {

3227 
u8
 
keybuf
[8];

3228 
	`mem˝y
(
keybuf
, &
key
.
d©a
[24], (keybuf));

3229 
	`mem˝y
(&
key
.
d©a
[24], &key.d©a[16], (
keybuf
));

3230 
	`mem˝y
(&
key
.
d©a
[16], 
keybuf
, (keybuf));

3234 i‡(
∑øms
->
£q
 &&Ö¨ams->
£q_Àn
 == 6) {

3236 
u8
 *
iv±r
;

3237 
iv±r
 = (
u8
 *Ë
∑øms
->
£q
;

3238 
key
.
rxiv
.
hi
 = (
iv±r
[5] << 24) | (ivptr[4] << 16) |

3239 (
iv±r
[3] << 8) | ivptr[2];

3240 
key
.
rxiv
.
lo
 = (
iv±r
[1] << 8) | ivptr[0];

3241 
key
.
iv_öôülized
 = 
åue
;

3244 
∑øms
->
cùhî
) {

3245 
WLAN_CIPHER_SUITE_WEP40
:

3246 
key
.
Ægo
 = 
CRYPTO_ALGO_WEP1
;

3247 
	`WL_DBG
(("WLAN_CIPHER_SUITE_WEP40\n"));

3249 
WLAN_CIPHER_SUITE_WEP104
:

3250 
key
.
Ægo
 = 
CRYPTO_ALGO_WEP128
;

3251 
	`WL_DBG
(("WLAN_CIPHER_SUITE_WEP104\n"));

3253 
WLAN_CIPHER_SUITE_TKIP
:

3254 
key
.
Ægo
 = 
CRYPTO_ALGO_TKIP
;

3255 
	`WL_DBG
(("WLAN_CIPHER_SUITE_TKIP\n"));

3257 
WLAN_CIPHER_SUITE_AES_CMAC
:

3258 
key
.
Ægo
 = 
CRYPTO_ALGO_AES_CCM
;

3259 
	`WL_DBG
(("WLAN_CIPHER_SUITE_AES_CMAC\n"));

3261 
WLAN_CIPHER_SUITE_CCMP
:

3262 
key
.
Ægo
 = 
CRYPTO_ALGO_AES_CCM
;

3263 
	`WL_DBG
(("WLAN_CIPHER_SUITE_CCMP\n"));

3265 #ifde‡
BCMWAPI_WPI


3266 
WLAN_CIPHER_SUITE_SMS4
:

3267 
key
.
Ægo
 = 
CRYPTO_ALGO_SMS4
;

3268 
	`WL_DBG
(("WLAN_CIPHER_SUITE_SMS4\n"));

3272 
	`WL_ERR
(("InvÆid cùhî (0x%x)\n", 
∑øms
->
cùhî
));

3273  -
EINVAL
;

3275 
	`sw≠_key_‰om_BE
(&
key
);

3277 
	`dhd_waô_≥nd8021x
(
dev
);

3278 
îr
 = 
	`wldev_iov¨_£tbuf_bsscfg
(
dev
, "w£c_key", &
key
, (key),

3279 
wl
->
io˘l_buf
, 
WLC_IOCTL_MAXLEN
, 
bssidx
, &wl->
io˘l_buf_sync
);

3280 i‡(
	`u∆ikñy
(
îr
)) {

3281 
	`WL_ERR
(("WLC_SET_KEYÉº‹ (%d)\n", 
îr
));

3282  
îr
;

3285  
îr
;

3286 
	}
}

3288 
s32


3289 
	$wl_cfg80211_add_key
(
wùhy
 *wùhy, 
√t_devi˚
 *
dev
,

3290 
u8
 
key_idx
, 
boﬁ
 
∑úwi£
, c⁄° u8 *
mac_addr
,

3291 
key_∑øms
 *
∑øms
)

3293 
wl_w£c_key
 
key
;

3294 
s32
 
vÆ
 = 0;

3295 
s32
 
w£c
 = 0;

3296 
s32
 
îr
 = 0;

3297 
u8
 
keybuf
[8];

3298 
s32
 
bssidx
 = 0;

3299 
wl_¥iv
 *
wl
 = 
	`wùhy_¥iv
(
wùhy
);

3300 
s32
 
mode
 = 
	`wl_gë_mode_by_√tdev
(
wl
, 
dev
);

3301 
	`WL_DBG
(("key index (%d)\n", 
key_idx
));

3302 
	`CHECK_SYS_UP
(
wl
);

3304 
bssidx
 = 
	`wl_cfgp2p_föd_idx
(
wl
, 
dev
);

3306 i‡(
mac_addr
) {

3307 
	`wl_add_keyext
(
wùhy
, 
dev
, 
key_idx
, 
mac_addr
, 
∑øms
);

3308 
exô
;

3310 
	`mem£t
(&
key
, 0, (key));

3312 
key
.
Àn
 = (
u32
Ë
∑øms
->
key_Àn
;

3313 
key
.
ödex
 = (
u32
Ë
key_idx
;

3315 i‡(
	`u∆ikñy
(
key
.
Àn
 > (key.
d©a
))) {

3316 
	`WL_ERR
(("Toÿl⁄g keyÜígth (%u)\n", 
key
.
Àn
));

3317  -
EINVAL
;

3319 
	`mem˝y
(
key
.
d©a
, 
∑øms
->key, key.
Àn
);

3321 
key
.
Êags
 = 
WL_PRIMARY_KEY
;

3322 
∑øms
->
cùhî
) {

3323 
WLAN_CIPHER_SUITE_WEP40
:

3324 
key
.
Ægo
 = 
CRYPTO_ALGO_WEP1
;

3325 
vÆ
 = 
WEP_ENABLED
;

3326 
	`WL_DBG
(("WLAN_CIPHER_SUITE_WEP40\n"));

3328 
WLAN_CIPHER_SUITE_WEP104
:

3329 
key
.
Ægo
 = 
CRYPTO_ALGO_WEP128
;

3330 
vÆ
 = 
WEP_ENABLED
;

3331 
	`WL_DBG
(("WLAN_CIPHER_SUITE_WEP104\n"));

3333 
WLAN_CIPHER_SUITE_TKIP
:

3334 
key
.
Ægo
 = 
CRYPTO_ALGO_TKIP
;

3335 
vÆ
 = 
TKIP_ENABLED
;

3337 i‡(
mode
 =
WL_MODE_BSS
) {

3338 
	`bc›y
(&
key
.
d©a
[24], 
keybuf
, (keybuf));

3339 
	`bc›y
(&
key
.
d©a
[16], &key.d©a[24], (
keybuf
));

3340 
	`bc›y
(
keybuf
, &
key
.
d©a
[16], (keybuf));

3342 
	`WL_DBG
(("WLAN_CIPHER_SUITE_TKIP\n"));

3344 
WLAN_CIPHER_SUITE_AES_CMAC
:

3345 
key
.
Ægo
 = 
CRYPTO_ALGO_AES_CCM
;

3346 
vÆ
 = 
AES_ENABLED
;

3347 
	`WL_DBG
(("WLAN_CIPHER_SUITE_AES_CMAC\n"));

3349 
WLAN_CIPHER_SUITE_CCMP
:

3350 
key
.
Ægo
 = 
CRYPTO_ALGO_AES_CCM
;

3351 
vÆ
 = 
AES_ENABLED
;

3352 
	`WL_DBG
(("WLAN_CIPHER_SUITE_CCMP\n"));

3354 #ifde‡
BCMWAPI_WPI


3355 
WLAN_CIPHER_SUITE_SMS4
:

3356 
key
.
Ægo
 = 
CRYPTO_ALGO_SMS4
;

3357 
vÆ
 = 
SMS4_ENABLED
;

3358 
	`WL_DBG
((" * wl_cfg80211_add_key, set key "

3363 
	`WL_ERR
(("InvÆid cùhî (0x%x)\n", 
∑øms
->
cùhî
));

3364  -
EINVAL
;

3368 
	`sw≠_key_‰om_BE
(&
key
);

3369 
îr
 = 
	`wldev_iov¨_£tbuf_bsscfg
(
dev
, "w£c_key", &
key
, (key), 
wl
->
io˘l_buf
,

3370 
WLC_IOCTL_MAXLEN
, 
bssidx
, &
wl
->
io˘l_buf_sync
);

3371 i‡(
	`u∆ikñy
(
îr
)) {

3372 
	`WL_ERR
(("WLC_SET_KEYÉº‹ (%d)\n", 
îr
));

3373  
îr
;

3376 
exô
:

3377 
îr
 = 
	`wldev_iov¨_gëöt_bsscfg
(
dev
, "w£c", &
w£c
, 
bssidx
);

3378 i‡(
	`u∆ikñy
(
îr
)) {

3379 
	`WL_ERR
(("gë w£¯îr‹ (%d)\n", 
îr
));

3380  
îr
;

3383 
w£c
 |
vÆ
;

3384 
îr
 = 
	`wldev_iov¨_£töt_bsscfg
(
dev
, "w£c", 
w£c
, 
bssidx
);

3385 i‡(
	`u∆ikñy
(
îr
)) {

3386 
	`WL_ERR
(("£àw£¯îr‹ (%d)\n", 
îr
));

3387  
îr
;

3390  
îr
;

3391 
	}
}

3393 
s32


3394 
	$wl_cfg80211_dñ_key
(
wùhy
 *wùhy, 
√t_devi˚
 *
dev
,

3395 
u8
 
key_idx
, 
boﬁ
 
∑úwi£
, c⁄° u8 *
mac_addr
)

3397 
wl_w£c_key
 
key
;

3398 
wl_¥iv
 *
wl
 = 
	`wùhy_¥iv
(
wùhy
);

3399 
s32
 
îr
 = 0;

3400 
s32
 
bssidx
 = 
	`wl_cfgp2p_föd_idx
(
wl
, 
dev
);

3402 
	`WL_DBG
(("Enter\n"));

3403 #i‚de‡
IEEE80211W


3404 i‡((
key_idx
 >
DOT11_MAX_DEFAULT_KEYS
) && (key_idx < DOT11_MAX_DEFAULT_KEYS+2))

3405  -
EINVAL
;

3407 
	`CHECK_SYS_UP
(
wl
);

3408 
	`mem£t
(&
key
, 0, (key));

3410 
key
.
Êags
 = 
WL_PRIMARY_KEY
;

3411 
key
.
Ægo
 = 
CRYPTO_ALGO_OFF
;

3412 
key
.
ödex
 = (
u32
Ë
key_idx
;

3414 
	`WL_DBG
(("key index (%d)\n", 
key_idx
));

3416 
	`sw≠_key_‰om_BE
(&
key
);

3417 
îr
 = 
	`wldev_iov¨_£tbuf_bsscfg
(
dev
, "w£c_key", &
key
, (key), 
wl
->
io˘l_buf
,

3418 
WLC_IOCTL_MAXLEN
, 
bssidx
, &
wl
->
io˘l_buf_sync
);

3419 i‡(
	`u∆ikñy
(
îr
)) {

3420 i‡(
îr
 =-
EINVAL
) {

3421 i‡(
key
.
ödex
 >
DOT11_MAX_DEFAULT_KEYS
) {

3423 
	`WL_DBG
(("övÆid key index (%d)\n", 
key_idx
));

3426 
	`WL_ERR
(("WLC_SET_KEYÉº‹ (%d)\n", 
îr
));

3428  
îr
;

3430  
îr
;

3431 
	}
}

3433 
s32


3434 
wl_cfg80211_gë_key
(
wùhy
 *wùhy, 
√t_devi˚
 *
dev
,

3435 
u8
 
key_idx
, 
boﬁ
 
∑úwi£
, c⁄° u8 *
mac_addr
, *
cookõ
,

3436 (*
ˇŒback
Ë(*
cookõ
, 
key_∑øms
 * 
∑øms
))

3438 
key_∑øms
 
∑øms
;

3439 
wl_w£c_key
 
key
;

3440 
wl_¥iv
 *
wl
 = 
	`wùhy_¥iv
(
wùhy
);

3441 
wl_£curôy
 *
£c
;

3442 
s32
 
w£c
;

3443 
s32
 
îr
 = 0;

3444 
s32
 
bssidx
 = 
	`wl_cfgp2p_föd_idx
(
wl
, 
dev
);

3446 
	`WL_DBG
(("key index (%d)\n", 
key_idx
));

3447 
	`CHECK_SYS_UP
(
wl
);

3448 
	`mem£t
(&
key
, 0, (key));

3449 
key
.
ödex
 = 
key_idx
;

3450 
	`sw≠_key_to_BE
(&
key
);

3451 
	`mem£t
(&
∑øms
, 0, (params));

3452 
∑øms
.
key_Àn
 = (
u8
Ë
	`mö_t
(u8, 
DOT11_MAX_KEY_SIZE
, 
key
.
Àn
);

3453 
	`mem˝y
(
∑øms
.
key
, key.
d©a
,Ö¨ams.
key_Àn
);

3455 
	`wldev_iov¨_gëöt_bsscfg
(
dev
, "w£c", &
w£c
, 
bssidx
);

3456 i‡(
	`u∆ikñy
(
îr
)) {

3457 
	`WL_ERR
(("WLC_GET_WSECÉº‹ (%d)\n", 
îr
));

3458  
îr
;

3460 
w£c
 & ~
SES_OW_ENABLED
) {

3461 
WEP_ENABLED
:

3462 
£c
 = 
	`wl_ªad_¥of
(
wl
, 
dev
, 
WL_PROF_SEC
);

3463 i‡(
£c
->
cùhî_∑úwi£
 & 
WLAN_CIPHER_SUITE_WEP40
) {

3464 
∑øms
.
cùhî
 = 
WLAN_CIPHER_SUITE_WEP40
;

3465 
	`WL_DBG
(("WLAN_CIPHER_SUITE_WEP40\n"));

3466 } i‡(
£c
->
cùhî_∑úwi£
 & 
WLAN_CIPHER_SUITE_WEP104
) {

3467 
∑øms
.
cùhî
 = 
WLAN_CIPHER_SUITE_WEP104
;

3468 
	`WL_DBG
(("WLAN_CIPHER_SUITE_WEP104\n"));

3471 
TKIP_ENABLED
:

3472 
∑øms
.
cùhî
 = 
WLAN_CIPHER_SUITE_TKIP
;

3473 
	`WL_DBG
(("WLAN_CIPHER_SUITE_TKIP\n"));

3475 
AES_ENABLED
:

3476 
∑øms
.
cùhî
 = 
WLAN_CIPHER_SUITE_AES_CMAC
;

3477 
	`WL_DBG
(("WLAN_CIPHER_SUITE_AES_CMAC\n"));

3479 #ifde‡
BCMWAPI_WPI


3480 
WLAN_CIPHER_SUITE_SMS4
:

3481 
key
.
Ægo
 = 
CRYPTO_ALGO_SMS4
;

3482 
	`WL_DBG
((" * wl_cfg80211_add_key, set key"

3487 
	`WL_ERR
(("InvÆidálgÿ(0x%x)\n", 
w£c
));

3488  -
EINVAL
;

3491 
	`ˇŒback
(
cookõ
, &
∑øms
);

3492  
îr
;

3493 
	}
}

3495 
s32


3496 
	$wl_cfg80211_c⁄fig_deÁu…_mgmt_key
(
wùhy
 *wiphy,

3497 
√t_devi˚
 *
dev
, 
u8
 
key_idx
)

3499 
	`WL_INFO
(("Not supported\n"));

3500  -
EOPNOTSUPP
;

3501 
	}
}

3503 
s32


3504 
	$wl_cfg80211_gë_°©i⁄
(
wùhy
 *wùhy, 
√t_devi˚
 *
dev
,

3505 
u8
 *
mac
, 
°©i⁄_öfo
 *
söfo
)

3507 
wl_¥iv
 *
wl
 = 
	`wùhy_¥iv
(
wùhy
);

3508 
scb_vÆ_t
 
scb_vÆ
;

3509 
s32
 
rssi
;

3510 
s32
 
øã
;

3511 
s32
 
îr
 = 0;

3512 
°a_öfo_t
 *
°a
;

3513 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(3, 0, 0)

3514 
s8
 
óbuf
[
ETHER_ADDR_STR_LEN
];

3516 
dhd_pub_t
 *
dhd
 = (dhd_pub_à*)(
wl
->
pub
);

3517 
	`CHECK_SYS_UP
(
wl
);

3518 i‡(
	`wl_gë_mode_by_√tdev
(
wl
, 
dev
Ë=
WL_MODE_AP
) {

3519 
îr
 = 
	`wldev_iov¨_gëbuf
(
dev
, "°a_öfo", (
ëhî_addr
 *)
mac
,

3520 
ETHER_ADDR_LEN
, 
wl
->
io˘l_buf
, 
WLC_IOCTL_SMLEN
, &wl->
io˘l_buf_sync
);

3521 i‡(
îr
 < 0) {

3522 
	`WL_ERR
(("GET STA INFO faûed, %d\n", 
îr
));

3523  
îr
;

3525 
söfo
->
fûÀd
 = 
STATION_INFO_INACTIVE_TIME
;

3526 
°a
 = (
°a_öfo_t
 *)
wl
->
io˘l_buf
;

3527 
°a
->
Àn
 = 
	`dtoh16
(sta->len);

3528 
°a
->
ˇp
 = 
	`dtoh16
(sta->cap);

3529 
°a
->
Êags
 = 
	`dtoh32
(sta->flags);

3530 
°a
->
idÀ
 = 
	`dtoh32
(sta->idle);

3531 
°a
->
ö
 = 
	`dtoh32
(sta->in);

3532 
söfo
->
öa˘ive_time
 = 
°a
->
idÀ
 * 1000;

3533 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(3, 0, 0)

3534 i‡(
°a
->
Êags
 & 
WL_STA_ASSOC
) {

3535 
söfo
->
fûÀd
 |
STATION_INFO_CONNECTED_TIME
;

3536 
söfo
->
c⁄√˘ed_time
 = 
°a
->
ö
;

3538 
	`WL_INFO
(("STA %s : idleÅime : %d sec, connectedÅime :%d ms\n",

3539 
	`bcm_ëhî_¡ﬂ
((c⁄° 
ëhî_addr
 *)
mac
, 
óbuf
), 
söfo
->
öa˘ive_time
,

3540 
°a
->
idÀ
 * 1000));

3542 } i‡(
	`wl_gë_mode_by_√tdev
(
wl
, 
dev
Ë=
WL_MODE_BSS
) {

3543 
gë_pkt˙t_t
 
pkt˙t
;

3544 
u8
 *
curma˝
 = 
	`wl_ªad_¥of
(
wl
, 
dev
, 
WL_PROF_BSSID
);

3545 i‡(!
	`wl_gë_drv_°©us
(
wl
, 
CONNECTED
, 
dev
) ||

3546 (
	`dhd_is_assocüãd
(
dhd
, 
NULL
, &
îr
Ë=
FALSE
)) {

3547 
	`WL_ERR
(("NOTássoc\n"));

3548 i‡(
îr
 =-
ERESTARTSYS
)

3549  
îr
;

3550 
îr
 = -
ENODEV
;

3551  
îr
;

3553 i‡(
	`memcmp
(
mac
, 
curma˝
, 
ETHER_ADDR_LEN
)) {

3554 
	`WL_ERR
(("Wr⁄g Ma¯addªss: "
MACDBG
" != "MACDBG"\n",

3555 
	`MAC2STRDBG
(
mac
), MAC2STRDBG(
curma˝
)));

3559 
îr
 = 
	`wldev_io˘l
(
dev
, 
WLC_GET_RATE
, &
øã
, ‘©e), 
Ál£
);

3560 i‡(
îr
) {

3561 
	`WL_ERR
(("CouldÇŸ gëÑ©ê(%d)\n", 
îr
));

3563 
øã
 = 
	`dtoh32
(rate);

3564 
söfo
->
fûÀd
 |
STATION_INFO_TX_BITRATE
;

3565 
söfo
->
txøã
.
Àgacy
 = 
øã
 * 5;

3566 
	`WL_DBG
(("R©ê%d Mbps\n", (
øã
 / 2)));

3569 
	`mem£t
(&
scb_vÆ
, 0, (scb_val));

3570 
scb_vÆ
.
vÆ
 = 0;

3571 
îr
 = 
	`wldev_io˘l
(
dev
, 
WLC_GET_RSSI
, &
scb_vÆ
,

3572 (
scb_vÆ_t
), 
Ál£
);

3573 i‡(
îr
) {

3574 
	`WL_ERR
(("CouldÇŸ gëÑssò(%d)\n", 
îr
));

3575 
gë_°©i⁄_îr
;

3577 
rssi
 = 
	`dtoh32
(
scb_vÆ
.
vÆ
);

3578 #i‡
	`deföed
(
RSSIOFFSET
)

3579 
rssi
 = 
	`wl_upd©e_rssi_off£t
(rssi);

3581 
söfo
->
fûÀd
 |
STATION_INFO_SIGNAL
;

3582 
söfo
->
sig«l
 = 
rssi
;

3583 
	`WL_DBG
(("RSSI %d dBm\n", 
rssi
));

3584 
îr
 = 
	`wldev_io˘l
(
dev
, 
WLC_GET_PKTCNTS
, &
pkt˙t
,

3585 (
pkt˙t
), 
Ál£
);

3586 i‡(!
îr
) {

3587 
söfo
->
fûÀd
 |(
STATION_INFO_RX_PACKETS
 |

3588 
STATION_INFO_RX_DROP_MISC
 |

3589 
STATION_INFO_TX_PACKETS
 |

3590 
STATION_INFO_TX_FAILED
);

3591 
söfo
->
rx_∑ckës
 = 
pkt˙t
.
rx_good_pkt
;

3592 
söfo
->
rx_dr›≥d_misc
 = 
pkt˙t
.
rx_bad_pkt
;

3593 
söfo
->
tx_∑ckës
 = 
pkt˙t
.
tx_good_pkt
;

3594 
söfo
->
tx_Áûed
 = 
pkt˙t
.
tx_bad_pkt
;

3596 
gë_°©i⁄_îr
:

3597 i‡(
îr
 && (î∏!-
ERESTARTSYS
)) {

3599 
	`WL_ERR
(("force cfg80211_disconnected\n"));

3600 
	`wl_˛r_drv_°©us
(
wl
, 
CONNECTED
, 
dev
);

3601 
	`cfg80211_disc⁄√˘ed
(
dev
, 0, 
NULL
, 0, 
GFP_KERNEL
);

3602 
	`wl_lök_down
(
wl
);

3606  
îr
;

3607 
	}
}

3610 
	$wl_cfg80211_upd©e_powî_mode
(
√t_devi˚
 *
dev
)

3612 
pm
 = -1;

3613 
îr
;

3615 
îr
 = 
	`wldev_io˘l
(
dev
, 
WLC_GET_PM
, &
pm
, ’m), 
Ál£
);

3616 i‡(
îr
 || (
pm
 == -1)) {

3617 
	`WL_ERR
(("îr‹ (%d)\n", 
îr
));

3619 
pm
 = (pm =
PM_OFF
Ë? 
Ál£
 : 
åue
;

3620 
	`WL_DBG
(("%s: %d\n", 
__func__
, 
pm
));

3621 i‡(
dev
->
õì80211_±r
)

3622 
dev
->
õì80211_±r
->
ps
 = 
pm
;

3624  
îr
;

3625 
	}
}

3627 
s32


3628 
	$wl_cfg80211_£t_powî_mgmt
(
wùhy
 *wùhy, 
√t_devi˚
 *
dev
,

3629 
boﬁ
 
íabÀd
, 
s32
 
timeout
)

3631 
s32
 
pm
;

3632 
s32
 
îr
 = 0;

3633 
wl_¥iv
 *
wl
 = 
	`wùhy_¥iv
(
wùhy
);

3634 
√t_öfo
 *
_√t_öfo
 = 
	`wl_gë_√töfo_by_√tdev
(
wl
, 
dev
);

3635 #i‡!
	`deföed
(
SUPPORT_PM2_ONLY
)

3636 
dhd_pub_t
 *
dhd
 = (dhd_pub_à*)(
wl
->
pub
);

3638 
	`CHECK_SYS_UP
(
wl
);

3640 i‡(
wl
->
p2p_√t
 =
dev
 || 
_√t_öfo
 =
NULL
) {

3641  
îr
;

3643 
	`WL_DBG
(("%s: E¡îÖowî savêíabÀd %d\n", 
dev
->
«me
, 
íabÀd
));

3645 #i‡!
	`deföed
(
SUPPORT_PM2_ONLY
)

3647 
pm
 = 
íabÀd
 ? ((
dhd
->
ö_su•íd
Ë? 
PM_MAX
 : 
PM_FAST
Ë: 
PM_OFF
;

3649 
pm
 = 
íabÀd
 ? 
PM_FAST
 : 
PM_OFF
;

3652 i‡(
_√t_öfo
->
pm_block
 || 
wl
->
vsdb_mode
) {

3654 
	`WL_DBG
(("%s:DoÇotÉnableÅheÖower save forÖm_block %d or vsdb_mode %d\n",

3655 
dev
->
«me
, 
_√t_öfo
->
pm_block
, 
wl
->
vsdb_mode
));

3656 
pm
 = 
PM_OFF
;

3658 
pm
 = 
	`htod32
(pm);

3659 
	`WL_DBG
(("%s:powî savê%s\n", 
dev
->
«me
, (
pm
 ? "enabled" : "disabled")));

3660 
îr
 = 
	`wldev_io˘l
(
dev
, 
WLC_SET_PM
, &
pm
, ’m), 
åue
);

3661 i‡(
	`u∆ikñy
(
îr
)) {

3662 i‡(
îr
 =-
ENODEV
)

3663 
	`WL_DBG
(("net_device isÇotÑeady yet\n"));

3665 
	`WL_ERR
(("îr‹ (%d)\n", 
îr
));

3666  
îr
;

3668  
îr
;

3669 
	}
}

3671 
__u£d
 
u32
 
	$wl_föd_msb
(
u16
 
bô16
)

3673 
u32
 
ªt
 = 0;

3675 i‡(
bô16
 & 0xff00) {

3676 
ªt
 += 8;

3677 
bô16
 >>= 8;

3680 i‡(
bô16
 & 0xf0) {

3681 
ªt
 += 4;

3682 
bô16
 >>= 4;

3685 i‡(
bô16
 & 0xc) {

3686 
ªt
 += 2;

3687 
bô16
 >>= 2;

3690 i‡(
bô16
 & 2)

3691 
ªt
 +
bô16
 & 2;

3692 i‡(
bô16
)

3693 
ªt
 +
bô16
;

3695  
ªt
;

3696 
	}
}

3698 
s32
 
	$wl_cfg80211_ªsume
(
wùhy
 *wiphy)

3700 
wl_¥iv
 *
wl
 = 
	`wùhy_¥iv
(
wùhy
);

3701 
√t_devi˚
 *
ndev
 = 
	`wl_to_¥mry_ndev
(
wl
);

3702 
s32
 
îr
 = 0;

3704 i‡(
	`u∆ikñy
(!
	`wl_gë_drv_°©us
(
wl
, 
READY
, 
ndev
))) {

3705 
	`WL_INFO
(("device isÇotÑeady\n"));

3709 
	`wl_övoke_isˇn
(
wl
);

3711  
îr
;

3712 
	}
}

3714 
	gs32


3715 #i‡
LINUX_VERSION_CODE
 > 
KERNEL_VERSION
(2, 6, 39)

3716 
	$wl_cfg80211_su•íd
(
wùhy
 *wùhy, 
cfg80211_wowœn
 *
wow
)

3718 
	$wl_cfg80211_su•íd
(
wùhy
 *wiphy)

3721 #ifde‡
DHD_CLEAR_ON_SUSPEND


3722 
wl_¥iv
 *
wl
 = 
	`wùhy_¥iv
(
wùhy
);

3723 
√t_öfo
 *
ôî
, *
√xt
;

3724 
√t_devi˚
 *
ndev
 = 
	`wl_to_¥mry_ndev
(
wl
);

3725 
Êags
;

3726 i‡(
	`u∆ikñy
(!
	`wl_gë_drv_°©us
(
wl
, 
READY
, 
ndev
))) {

3727 
	`WL_INFO
(("device isÇotÑeady : status (%d)\n",

3728 ()
wl
->
°©us
));

3731 
	`f‹_óch_ndev
(
wl
, 
ôî
, 
√xt
)

3732 
	`wl_£t_drv_°©us
(
wl
, 
SCAN_ABORTING
, 
ôî
->
ndev
);

3733 
	`wl_ãrm_isˇn
(
wl
);

3734 
	`•ö_lock_úqßve
(&
wl
->
cfgdrv_lock
, 
Êags
);

3735 i‡(
wl
->
sˇn_ªque°
) {

3736 
	`cfg80211_sˇn_d⁄e
(
wl
->
sˇn_ªque°
, 
åue
);

3737 
wl
->
sˇn_ªque°
 = 
NULL
;

3739 
	`f‹_óch_ndev
(
wl
, 
ôî
, 
√xt
) {

3740 
	`wl_˛r_drv_°©us
(
wl
, 
SCANNING
, 
ôî
->
ndev
);

3741 
	`wl_˛r_drv_°©us
(
wl
, 
SCAN_ABORTING
, 
ôî
->
ndev
);

3743 
	`•ö_u∆ock_úqª°‹e
(&
wl
->
cfgdrv_lock
, 
Êags
);

3744 
	`f‹_óch_ndev
(
wl
, 
ôî
, 
√xt
) {

3745 i‡(
	`wl_gë_drv_°©us
(
wl
, 
CONNECTING
, 
ôî
->
ndev
)) {

3746 
	`wl_bss_c⁄√˘_d⁄e
(
wl
, 
ôî
->
ndev
, 
NULL
, NULL, 
Ál£
);

3751 
	}
}

3753 
s32


3754 
	$wl_upd©e_pmkli°
(
√t_devi˚
 *
dev
, 
wl_pmk_li°
 *
pmk_li°
,

3755 
s32
 
îr
)

3757 
i
, 
j
;

3758 
wl_¥iv
 *
wl
 = 
wlcfg_drv_¥iv
;

3759 
√t_devi˚
 *
¥im¨y_dev
 = 
	`wl_to_¥mry_ndev
(
wl
);

3761 i‡(!
pmk_li°
) {

3762 
	`¥ötk
("pmk_list is NULL\n");

3763  -
EINVAL
;

3768 i‡(
¥im¨y_dev
 !
dev
) {

3769 
	`WL_INFO
(("Not supporting FlushingÖmklist on virtual"

3771  
îr
;

3774 
	`WL_DBG
(("Nÿo‡ñemít†%d\n", 
pmk_li°
->
pmkids
.
≈mkid
));

3775 
i
 = 0; i < 
pmk_li°
->
pmkids
.
≈mkid
; i++) {

3776 
	`WL_DBG
(("PMKID[%d]: %pM =\n", 
i
,

3777 &
pmk_li°
->
pmkids
.
pmkid
[
i
].
BSSID
));

3778 
j
 = 0; j < 
WPA2_PMKID_LEN
; j++) {

3779 
	`WL_DBG
(("%02x\n", 
pmk_li°
->
pmkids
.
pmkid
[
i
].
PMKID
[
j
]));

3782 i‡(
	`likñy
(!
îr
)) {

3783 
îr
 = 
	`wldev_iov¨_£tbuf
(
dev
, "pmkid_öfo", (*)
pmk_li°
,

3784 (*
pmk_li°
), 
wl
->
io˘l_buf
, 
WLC_IOCTL_MAXLEN
, 
NULL
);

3787  
îr
;

3788 
	}
}

3790 
s32


3791 
	$wl_cfg80211_£t_pmkß
(
wùhy
 *wùhy, 
√t_devi˚
 *
dev
,

3792 
cfg80211_pmkß
 *
pmkß
)

3794 
wl_¥iv
 *
wl
 = 
	`wùhy_¥iv
(
wùhy
);

3795 
s32
 
îr
 = 0;

3796 
i
;

3798 
	`CHECK_SYS_UP
(
wl
);

3799 
i
 = 0; i < 
wl
->
pmk_li°
->
pmkids
.
≈mkid
; i++)

3800 i‡(!
	`memcmp
(
pmkß
->
bssid
, &
wl
->
pmk_li°
->
pmkids
.
pmkid
[
i
].
BSSID
,

3801 
ETHER_ADDR_LEN
))

3803 i‡(
i
 < 
WL_NUM_PMKIDS_MAX
) {

3804 
	`mem˝y
(&
wl
->
pmk_li°
->
pmkids
.
pmkid
[
i
].
BSSID
, 
pmkß
->
bssid
,

3805 
ETHER_ADDR_LEN
);

3806 
	`mem˝y
(&
wl
->
pmk_li°
->
pmkids
.
pmkid
[
i
].
PMKID
, 
pmkß
->pmkid,

3807 
WPA2_PMKID_LEN
);

3808 i‡(
i
 =
wl
->
pmk_li°
->
pmkids
.
≈mkid
)

3809 
wl
->
pmk_li°
->
pmkids
.
≈mkid
++;

3811 
îr
 = -
EINVAL
;

3813 
	`WL_DBG
(("set_pmksa,IW_PMKSA_ADD - PMKID: %pM =\n",

3814 &
wl
->
pmk_li°
->
pmkids
.
pmkid
[wl->pmk_li°->pmkids.
≈mkid
 - 1].
BSSID
));

3815 
i
 = 0; i < 
WPA2_PMKID_LEN
; i++) {

3816 
	`WL_DBG
(("%02x\n",

3817 
wl
->
pmk_li°
->
pmkids
.
pmkid
[wl->pmk_li°->pmkids.
≈mkid
 - 1].

3818 
PMKID
[
i
]));

3821 
îr
 = 
	`wl_upd©e_pmkli°
(
dev
, 
wl
->
pmk_li°
,Érr);

3823  
îr
;

3824 
	}
}

3826 
s32


3827 
	$wl_cfg80211_dñ_pmkß
(
wùhy
 *wùhy, 
√t_devi˚
 *
dev
,

3828 
cfg80211_pmkß
 *
pmkß
)

3830 
wl_¥iv
 *
wl
 = 
	`wùhy_¥iv
(
wùhy
);

3831 
_pmkid_li°
 
pmkid
;

3832 
s32
 
îr
 = 0;

3833 
i
;

3835 
	`CHECK_SYS_UP
(
wl
);

3836 
	`mem˝y
(&
pmkid
.pmkid[0].
BSSID
, 
pmkß
->
bssid
, 
ETHER_ADDR_LEN
);

3837 
	`mem˝y
(
pmkid
.pmkid[0].
PMKID
, 
pmkß
->pmkid, 
WPA2_PMKID_LEN
);

3839 
	`WL_DBG
(("del_pmksa,IW_PMKSA_REMOVE - PMKID: %pM =\n",

3840 &
pmkid
.pmkid[0].
BSSID
));

3841 
i
 = 0; i < 
WPA2_PMKID_LEN
; i++) {

3842 
	`WL_DBG
(("%02x\n", 
pmkid
.pmkid[0].
PMKID
[
i
]));

3845 
i
 = 0; i < 
wl
->
pmk_li°
->
pmkids
.
≈mkid
; i++)

3846 i‡(!
memcmp


3847 (
pmkß
->
bssid
, &
wl
->
pmk_li°
->
pmkids
.
pmkid
[
i
].
BSSID
,

3848 
ETHER_ADDR_LEN
))

3851 i‡((
wl
->
pmk_li°
->
pmkids
.
≈mkid
 > 0) &&

3852 (
i
 < 
wl
->
pmk_li°
->
pmkids
.
≈mkid
)) {

3853 
	`mem£t
(&
wl
->
pmk_li°
->
pmkids
.
pmkid
[
i
], 0, (
pmkid_t
));

3854 ; 
i
 < (
wl
->
pmk_li°
->
pmkids
.
≈mkid
 - 1); i++) {

3855 
	`mem˝y
(&
wl
->
pmk_li°
->
pmkids
.
pmkid
[
i
].
BSSID
,

3856 &
wl
->
pmk_li°
->
pmkids
.
pmkid
[
i
 + 1].
BSSID
,

3857 
ETHER_ADDR_LEN
);

3858 
	`mem˝y
(&
wl
->
pmk_li°
->
pmkids
.
pmkid
[
i
].
PMKID
,

3859 &
wl
->
pmk_li°
->
pmkids
.
pmkid
[
i
 + 1].
PMKID
,

3860 
WPA2_PMKID_LEN
);

3862 
wl
->
pmk_li°
->
pmkids
.
≈mkid
--;

3864 
îr
 = -
EINVAL
;

3867 
îr
 = 
	`wl_upd©e_pmkli°
(
dev
, 
wl
->
pmk_li°
,Érr);

3869  
îr
;

3871 
	}
}

3873 
s32


3874 
	$wl_cfg80211_Êush_pmkß
(
wùhy
 *wùhy, 
√t_devi˚
 *
dev
)

3876 
wl_¥iv
 *
wl
 = 
	`wùhy_¥iv
(
wùhy
);

3877 
s32
 
îr
 = 0;

3878 
	`CHECK_SYS_UP
(
wl
);

3879 
	`mem£t
(
wl
->
pmk_li°
, 0, (*wl->pmk_list));

3880 
îr
 = 
	`wl_upd©e_pmkli°
(
dev
, 
wl
->
pmk_li°
,Érr);

3881  
îr
;

3883 
	}
}

3885 
wl_sˇn_∑øms_t
 *

3886 
	$wl_cfg80211_sˇn_Æloc_∑øms
(
ch™√l
, 
≈robes
, *
out_∑øms_size
)

3888 
wl_sˇn_∑øms_t
 *
∑øms
;

3889 
∑øms_size
;

3890 
num_ch™s
;

3892 *
out_∑øms_size
 = 0;

3895 
∑øms_size
 = 
WL_SCAN_PARAMS_FIXED_SIZE
 + 1 * (
uöt16
);

3896 
∑øms
 = (
wl_sˇn_∑øms_t
*Ë
	`kzÆloc
(
∑øms_size
, 
GFP_KERNEL
);

3897 i‡(
∑øms
 =
NULL
) {

3898 
	`WL_ERR
(("%s: memáŒo¯Áûed (%d byãs)\n", 
__func__
, 
∑øms_size
));

3899  
∑øms
;

3901 
	`mem£t
(
∑øms
, 0, 
∑øms_size
);

3902 
∑øms
->
≈robes
 =Çprobes;

3904 
num_ch™s
 = (
ch™√l
 == 0) ? 0 : 1;

3906 
	`mem˝y
(&
∑øms
->
bssid
, &
ëhî_bˇ°
, 
ETHER_ADDR_LEN
);

3907 
∑øms
->
bss_ty≥
 = 
DOT11_BSSTYPE_ANY
;

3908 
∑øms
->
sˇn_ty≥
 = 
DOT11_SCANTYPE_ACTIVE
;

3909 
∑øms
->
≈robes
 = 
	`htod32
(1);

3910 
∑øms
->
a˘ive_time
 = 
	`htod32
(-1);

3911 
∑øms
->
∑ssive_time
 = 
	`htod32
(-1);

3912 
∑øms
->
home_time
 = 
	`htod32
(10);

3913 i‡(
ch™√l
 == -1)

3914 
∑øms
->
ch™√l_li°
[0] = 
	`htodch™•ec
(
ch™√l
);

3916 
∑øms
->
ch™√l_li°
[0] = 
	`wl_ch_ho°_to_drivî
(
ch™√l
);

3919 
∑øms
->
ch™√l_num
 = 
	`htod32
((0 << 
WL_SCAN_PARAMS_NSSID_SHIFT
) |

3920 (
num_ch™s
 & 
WL_SCAN_PARAMS_COUNT_MASK
));

3922 *
out_∑øms_size
 = 
∑øms_size
;

3923  
∑øms
;

3924 
	}
}

3926 
s32


3927 
	$wl_cfg80211_ªmaö_⁄_ch™√l
(
wùhy
 *wùhy, 
√t_devi˚
 *
dev
,

3928 
õì80211_ch™√l
 * 
ch™√l
,

3929 
∆80211_ch™√l_ty≥
 
ch™√l_ty≥
,

3930 
duøti⁄
, 
u64
 *
cookõ
)

3932 
s32
 
èrgë_ch™√l
;

3933 
u32
 
id
;

3934 
ëhî_addr
 
¥im¨y_mac
;

3935 
√t_devi˚
 *
ndev
 = 
NULL
;

3937 
s32
 
îr
 = 
BCME_OK
;

3938 
wl_¥iv
 *
wl
 = 
	`wùhy_¥iv
(
wùhy
);

3940 
	`WL_DBG
(("Enter, ifindex: %d, channel: %d, duration ms (%d) SCANNING ?? %s \n",

3941 
dev
->
ifödex
, 
	`õì80211_‰equícy_to_ch™√l
(
ch™√l
->
˚¡î_‰eq
),

3942 
duøti⁄
, (
	`wl_gë_drv_°©us
(
wl
, 
SCANNING
, 
ndev
)) ? "YES":"NO"));

3944 i‡(
wl
->
p2p_√t
 =
dev
) {

3945 
ndev
 = 
	`wl_to_¥mry_ndev
(
wl
);

3947 
ndev
 = 
dev
;

3950 i‡(!
wl
->
p2p
) {

3951 
	`WL_ERR
(("wl->p2p isÇot initialized\n"));

3952 
îr
 = 
BCME_ERROR
;

3953 
exô
;

3956 #i‚de‡
WL_CFG80211_VSDB_PRIORITIZE_SCAN_REQUEST


3957 i‡(
	`wl_gë_drv_°©us
(
wl
, 
SCANNING
, 
ndev
)) {

3958 
	`wl_nŸify_esˇn_com∂ëe
(
wl
, 
ndev
, 
åue
,Årue);

3962 
èrgë_ch™√l
 = 
	`õì80211_‰equícy_to_ch™√l
(
ch™√l
->
˚¡î_‰eq
);

3963 
	`mem˝y
(&
wl
->
ªmaö_⁄_ch™
, 
ch™√l
, (
õì80211_ch™√l
));

3964 
wl
->
ªmaö_⁄_ch™_ty≥
 = 
ch™√l_ty≥
;

3965 
id
 = ++
wl
->
œ°_roc_id
;

3966 i‡(
id
 == 0)

3967 
id
 = ++
wl
->
œ°_roc_id
;

3968 *
cookõ
 = 
id
;

3970 #ifde‡
WL_CFG80211_VSDB_PRIORITIZE_SCAN_REQUEST


3971 i‡(
	`wl_gë_drv_°©us
(
wl
, 
SCANNING
, 
ndev
)) {

3972 
timî_li°
 *
_timî
;

3973 
	`WL_DBG
(("scan isÑunning. goÅo fakeÜisten state\n"));

3975 
	`wl_£t_drv_°©us
(
wl
, 
FAKE_REMAINING_ON_CHANNEL
, 
ndev
);

3977 i‡(
	`timî_≥ndög
(&
wl
->
p2p
->
li°í_timî
)) {

3978 
	`WL_DBG
(("cancel currentÜistenÅimer \n"));

3979 
	`dñ_timî_sync
(&
wl
->
p2p
->
li°í_timî
);

3982 
_timî
 = &
wl
->
p2p
->
li°í_timî
;

3983 
	`wl_˛r_p2p_°©us
(
wl
, 
LISTEN_EXPIRED
);

3985 
	`INIT_TIMER
(
_timî
, 
wl_cfgp2p_li°í_expúed
, 
duøti⁄
, 0);

3987 
îr
 = 
BCME_OK
;

3988 
exô
;

3992 #ifde‡
WL_CFG80211_SYNC_GON


3993 i‡(
	`wl_gë_drv_°©us_Æl
(
wl
, 
WAITING_NEXT_ACT_FRM_LISTEN
)) {

3997 #ifde‡
WL_CFG80211_VSDB_PRIORITIZE_SCAN_REQUEST


3998 
	`wl_£t_drv_°©us
(
wl
, 
FAKE_REMAINING_ON_CHANNEL
, 
ndev
);

4000 
	`wl_£t_drv_°©us
(
wl
, 
REMAINING_ON_CHANNEL
, 
ndev
);

4002 
exô
;

4005 i‡(
wl
->
p2p
 && !wl->p2p->
⁄
) {

4009 
	`gë_¥im¨y_mac
(
wl
, &
¥im¨y_mac
);

4010 
	`wl_cfgp2p_gíî©e_bss_mac
(&
¥im¨y_mac
, &
wl
->
p2p
->
dev_addr
, &wl->p2p->
öt_addr
);

4011 
	`p2p_⁄
(
wl
Ë
åue
;

4014 i‡(
	`p2p_is_⁄
(
wl
)) {

4015 
îr
 = 
	`wl_cfgp2p_íabÀ_discovîy
(
wl
, 
ndev
, 
NULL
, 0);

4016 i‡(
	`u∆ikñy
(
îr
)) {

4017 
exô
;

4019 #i‚de‡
WL_CFG80211_VSDB_PRIORITIZE_SCAN_REQUEST


4020 
	`wl_£t_drv_°©us
(
wl
, 
REMAINING_ON_CHANNEL
, 
ndev
);

4022 
îr
 = 
	`wl_cfgp2p_discovî_li°í
(
wl
, 
èrgë_ch™√l
, 
duøti⁄
);

4024 #ifde‡
WL_CFG80211_VSDB_PRIORITIZE_SCAN_REQUEST


4025 i‡(
îr
 =
BCME_OK
) {

4026 
	`wl_£t_drv_°©us
(
wl
, 
REMAINING_ON_CHANNEL
, 
ndev
);

4031 
	`wl_£t_drv_°©us
(
wl
, 
FAKE_REMAINING_ON_CHANNEL
, 
ndev
);

4037 
îr
 = 
BCME_OK
;

4040 
exô
:

4041 i‡(
îr
 =
BCME_OK
) {

4042 
	`WL_INFO
(("Success\n"));

4043 
	`cfg80211_ªady_⁄_ch™√l
(
dev
, *
cookõ
, 
ch™√l
,

4044 
ch™√l_ty≥
, 
duøti⁄
, 
GFP_KERNEL
);

4046 
	`WL_ERR
(("FaûÅÿSë (îr=%d cookõ:%Œu)\n", 
îr
, *
cookõ
));

4048  
îr
;

4049 
	}
}

4051 
s32


4052 
	$wl_cfg80211_ˇn˚l_ªmaö_⁄_ch™√l
(
wùhy
 *wùhy, 
√t_devi˚
 *
dev
,

4053 
u64
 
cookõ
)

4055 
s32
 
îr
 = 0;

4056 
	`WL_DBG
(("É¡î )Çëdev_ifidx: %d \n", 
dev
->
ifödex
));

4057  
îr
;

4058 
	}
}

4061 
	$wl_cfg80211_afx_h™dÀr
(
w‹k_°ru˘
 *
w‹k
)

4063 
afx_hdl
 *
afx_ö°™˚
;

4064 
wl_¥iv
 *
wl
 = 
wlcfg_drv_¥iv
;

4065 
s32
 
ªt
 = 
BCME_OK
;

4067 
afx_ö°™˚
 = 
	`c⁄èöî_of
(
w‹k
, 
afx_hdl
, work);

4068 i‡(
afx_ö°™˚
 !
NULL
 && 
wl
->
afx_hdl
->
is_a˘ive
) {

4069 i‡(
wl
->
afx_hdl
->
is_li°í
 && wl->afx_hdl->
my_li°í_ch™
) {

4070 
ªt
 = 
	`wl_cfgp2p_discovî_li°í
(
wl
, wl->
afx_hdl
->
my_li°í_ch™
,

4071 (100 * (1 + (
	`øndom32
() % 3))));

4073 
ªt
 = 
	`wl_cfgp2p_a˘_‰m_£¨ch
(
wl
, wl->
afx_hdl
->
dev
,

4074 
wl
->
afx_hdl
->
bssidx
, wl->afx_hdl->
≥î_li°í_ch™
);

4076 i‡(
	`u∆ikñy
(
ªt
 !
BCME_OK
)) {

4077 
	`WL_ERR
(("ERROR occuºed!Ñëu∫ed vÆuêi†(%d)\n", 
ªt
));

4078 i‡(
	`wl_gë_drv_°©us_Æl
(
wl
, 
FINDING_COMMON_CHANNEL
))

4079 
	`com∂ëe
(&
wl
->
a˘_‰m_sˇn
);

4082 
	}
}

4084 
s32


4085 
	$wl_cfg80211_af_£¨chög_ch™√l
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
dev
)

4087 
u32
 
max_ªåy
 = 
WL_CHANNEL_SYNC_RETRY
;

4089 i‡(
dev
 =
NULL
)

4092 
	`WL_DBG
(("Énter ) \n"));

4094 
	`wl_£t_drv_°©us
(
wl
, 
FINDING_COMMON_CHANNEL
, 
dev
);

4095 
wl
->
afx_hdl
->
is_a˘ive
 = 
TRUE
;

4100 (
wl
->
afx_hdl
->
ªåy
 < 
max_ªåy
) &&

4101 (
wl
->
afx_hdl
->
≥î_ch™
 =
WL_INVALID
)) {

4102 
wl
->
afx_hdl
->
is_li°í
 = 
FALSE
;

4103 
	`wl_£t_drv_°©us
(
wl
, 
SCANNING
, 
dev
);

4104 
	`WL_DBG
(("SchedulingÅheáction frame for sending..Ñetry %d\n",

4105 
wl
->
afx_hdl
->
ªåy
));

4107 
	`scheduÀ_w‹k
(&
wl
->
afx_hdl
->
w‹k
);

4108 
	`waô_f‹_com∂ëi⁄_timeout
(&
wl
->
a˘_‰m_sˇn
,

4109 
	`m£cs_to_jiffõs
(
MAX_WAIT_TIME
));

4111 i‡((
wl
->
afx_hdl
->
≥î_ch™
 !
WL_INVALID
) ||

4112 !(
	`wl_gë_drv_°©us
(
wl
, 
FINDING_COMMON_CHANNEL
, 
dev
)))

4115 i‡(
wl
->
afx_hdl
->
my_li°í_ch™
) {

4116 
	`WL_DBG
(("Scheduling ListenÖeer in myÜisten channel = %d\n",

4117 
wl
->
afx_hdl
->
my_li°í_ch™
));

4119 
wl
->
afx_hdl
->
is_li°í
 = 
TRUE
;

4120 
	`scheduÀ_w‹k
(&
wl
->
afx_hdl
->
w‹k
);

4121 
	`waô_f‹_com∂ëi⁄_timeout
(&
wl
->
a˘_‰m_sˇn
,

4122 
	`m£cs_to_jiffõs
(
MAX_WAIT_TIME
));

4124 i‡(!
	`wl_gë_drv_°©us
(
wl
, 
FINDING_COMMON_CHANNEL
, 
dev
))

4126 
wl
->
afx_hdl
->
ªåy
++;

4128 
	`WL_AF_TX_KEEP_PRI_CONNECTION_VSDB
(
wl
);

4131 
wl
->
afx_hdl
->
is_a˘ive
 = 
FALSE
;

4133 
	`wl_˛r_drv_°©us
(
wl
, 
SCANNING
, 
dev
);

4134 
	`wl_˛r_drv_°©us
(
wl
, 
FINDING_COMMON_CHANNEL
, 
dev
);

4136  (
wl
->
afx_hdl
->
≥î_ch™
);

4137 
	}
}

4139 
	sp2p_c⁄fig_af_∑øms
 {

4140 
s32
 
	mmax_tx_ªåy
;

4144 
s32
 
	mmpc_⁄off
;

4145 #ifde‡
WL_CFG80211_SYNC_GON


4146 
boﬁ
 
	mexåa_li°í
;

4148 
boﬁ
 
	m£¨ch_ch™√l
;

4151 
s32


4152 
	$wl_cfg80211_c⁄fig_p2p_pub_af_tx
(
wùhy
 *wiphy,

4153 
wl_a˘i⁄_‰ame_t
 *
a˘i⁄_‰ame
, 
wl_af_∑øms_t
 *
af_∑øms
,

4154 
p2p_c⁄fig_af_∑øms
 *
c⁄fig_af_∑øms
)

4156 
s32
 
îr
 = 
BCME_OK
;

4157 
wl_¥iv
 *
wl
 = 
	`wùhy_¥iv
(
wùhy
);

4158 
wifi_p2p_pub_a˘_‰ame_t
 *
a˘_‰m
 =

4159 (
wifi_p2p_pub_a˘_‰ame_t
 *Ë(
a˘i⁄_‰ame
->
d©a
);

4162 #ifde‡
WL_CFG80211_SYNC_GON


4163 
c⁄fig_af_∑øms
->
exåa_li°í
 = 
åue
;

4165 
c⁄fig_af_∑øms
->
£¨ch_ch™√l
 = 
Ál£
;

4166 
c⁄fig_af_∑øms
->
max_tx_ªåy
 = 
WL_AF_TX_MAX_RETRY
;

4167 
c⁄fig_af_∑øms
->
mpc_⁄off
 = -1;

4169 
a˘_‰m
->
subty≥
) {

4170 
P2P_PAF_GON_REQ
: {

4171 
	`WL_DBG
(("P2P: GO_NEG_PHASE status set \n"));

4172 
	`wl_£t_p2p_°©us
(
wl
, 
GO_NEG_PHASE
);

4174 
c⁄fig_af_∑øms
->
mpc_⁄off
 = 0;

4175 
c⁄fig_af_∑øms
->
£¨ch_ch™√l
 = 
åue
;

4176 
wl
->
√xt_af_subty≥
 = 
a˘_‰m
->
subty≥
 + 1;

4179 
af_∑øms
->
dwñl_time
 = 
WL_MED_DWELL_TIME
;

4183 
P2P_PAF_GON_RSP
: {

4184 
wl
->
√xt_af_subty≥
 = 
a˘_‰m
->
subty≥
 + 1;

4186 
af_∑øms
->
dwñl_time
 = 
WL_MED_DWELL_TIME
;

4189 
P2P_PAF_GON_CONF
: {

4191 
	`WL_DBG
(("P2P: GO_NEG_PHASE status cleared \n"));

4192 
	`wl_˛r_p2p_°©us
(
wl
, 
GO_NEG_PHASE
);

4195 
c⁄fig_af_∑øms
->
mpc_⁄off
 = 1;

4198 
af_∑øms
->
dwñl_time
 = 
WL_MIN_DWELL_TIME
;

4200 #ifde‡
WL_CFG80211_SYNC_GON


4201 
c⁄fig_af_∑øms
->
exåa_li°í
 = 
Ál£
;

4205 
P2P_PAF_INVITE_REQ
: {

4206 
c⁄fig_af_∑øms
->
£¨ch_ch™√l
 = 
åue
;

4207 
wl
->
√xt_af_subty≥
 = 
a˘_‰m
->
subty≥
 + 1;

4210 
af_∑øms
->
dwñl_time
 = 
WL_MED_DWELL_TIME
;

4213 
P2P_PAF_INVITE_RSP
:

4215 
af_∑øms
->
dwñl_time
 = 
WL_MIN_DWELL_TIME
;

4216 #ifde‡
WL_CFG80211_SYNC_GON


4217 
c⁄fig_af_∑øms
->
exåa_li°í
 = 
Ál£
;

4220 
P2P_PAF_DEVDIS_REQ
: {

4221 
c⁄fig_af_∑øms
->
£¨ch_ch™√l
 = 
åue
;

4223 
wl
->
√xt_af_subty≥
 = 
a˘_‰m
->
subty≥
 + 1;

4225 
af_∑øms
->
dwñl_time
 = 
WL_LONG_DWELL_TIME
;

4228 
P2P_PAF_DEVDIS_RSP
:

4230 
af_∑øms
->
dwñl_time
 = 
WL_MIN_DWELL_TIME
;

4231 #ifde‡
WL_CFG80211_SYNC_GON


4232 
c⁄fig_af_∑øms
->
exåa_li°í
 = 
Ál£
;

4235 
P2P_PAF_PROVDIS_REQ
: {

4236 i‡(
	`IS_PROV_DISC_WITHOUT_GROUP_ID
(&
a˘_‰m
->
ñts
[0],

4237 
a˘i⁄_‰ame
->
Àn
)) {

4238 
c⁄fig_af_∑øms
->
£¨ch_ch™√l
 = 
åue
;

4241 
c⁄fig_af_∑øms
->
mpc_⁄off
 = 0;

4242 
wl
->
√xt_af_subty≥
 = 
a˘_‰m
->
subty≥
 + 1;

4244 
af_∑øms
->
dwñl_time
 = 
WL_MED_DWELL_TIME
;

4247 
P2P_PAF_PROVDIS_RSP
: {

4248 
wl
->
√xt_af_subty≥
 = 
P2P_PAF_GON_REQ
;

4250 
af_∑øms
->
dwñl_time
 = 
WL_MED_DWELL_TIME
;

4251 #ifde‡
WL_CFG80211_SYNC_GON


4252 
c⁄fig_af_∑øms
->
exåa_li°í
 = 
Ál£
;

4257 
	`WL_DBG
(("UnknownÖ2pÖubáct frame subtype: %d\n",

4258 
a˘_‰m
->
subty≥
));

4259 
îr
 = 
BCME_BADARG
;

4261  
îr
;

4262 
	}
}

4265 
boﬁ


4266 
	$wl_cfg80211_£nd_a˘i⁄_‰ame
(
wùhy
 *wùhy, 
√t_devi˚
 *
dev
,

4267 
√t_devi˚
 *
ndev
, 
wl_af_∑øms_t
 *
af_∑øms
,

4268 
wl_a˘i⁄_‰ame_t
 *
a˘i⁄_‰ame
, 
u16
 
a˘i⁄_‰ame_Àn
, 
s32
 
bssidx
)

4270 
wl_¥iv
 *
wl
 = 
	`wùhy_¥iv
(
wùhy
);

4271 
boﬁ
 
ack
 = 
Ál£
;

4272 
u8
 
ˇãg‹y
, 
a˘i⁄
;

4273 
s32
 
tx_ªåy
;

4274 
p2p_c⁄fig_af_∑øms
 
c⁄fig_af_∑øms
;

4275 #ifde‡
VSDB


4276 
ul⁄g
 
off_ch™_°¨ãd_jiffõs
 = 0;

4278 
dhd_pub_t
 *
dhd
 = (dhd_pub_à*)(
wl
->
pub
);

4280 
	`wl_cfgp2p_¥öt_a˘‰ame
(
åue
, 
a˘i⁄_‰ame
->
d©a
,á˘i⁄_‰ame->
Àn
);

4282 
ˇãg‹y
 = 
a˘i⁄_‰ame
->
d©a
[
DOT11_ACTION_CAT_OFF
];

4283 
a˘i⁄
 = 
a˘i⁄_‰ame
->
d©a
[
DOT11_ACTION_ACT_OFF
];

4286 
tx_ªåy
 = 0;

4287 
wl
->
√xt_af_subty≥
 = 
P2P_PAF_SUBTYPE_INVALID
;

4288 
c⁄fig_af_∑øms
.
max_tx_ªåy
 = 
WL_AF_TX_MAX_RETRY
;

4289 
c⁄fig_af_∑øms
.
mpc_⁄off
 = -1;

4290 
c⁄fig_af_∑øms
.
£¨ch_ch™√l
 = 
Ál£
;

4291 #ifde‡
WL_CFG80211_SYNC_GON


4292 
c⁄fig_af_∑øms
.
exåa_li°í
 = 
Ál£
;

4297 i‡(
ˇãg‹y
 =
DOT11_ACTION_CAT_PUBLIC
) {

4298 i‡((
a˘i⁄
 =
P2P_PUB_AF_ACTION
) &&

4299 (
a˘i⁄_‰ame_Àn
 >(
wifi_p2p_pub_a˘_‰ame_t
))) {

4301 i‡(
BCME_OK
 !
	`wl_cfg80211_c⁄fig_p2p_pub_af_tx
(
wùhy
,

4302 
a˘i⁄_‰ame
, 
af_∑øms
, &
c⁄fig_af_∑øms
)) {

4303 
	`WL_DBG
(("Unknown subtype.\n"));

4306 } i‡(
a˘i⁄_‰ame_Àn
 >(
wifi_p2psd_gas_pub_a˘_‰ame_t
)) {

4308 i‡(
a˘i⁄
 =
P2PSD_ACTION_ID_GAS_IREQ
 ||

4309 
a˘i⁄
 =
P2PSD_ACTION_ID_GAS_CREQ
) {

4312 
c⁄fig_af_∑øms
.
£¨ch_ch™√l
 = 
åue
;

4315 
wl
->
√xt_af_subty≥
 = 
a˘i⁄
 + 1;

4317 
af_∑øms
->
dwñl_time
 = 
WL_MED_DWELL_TIME
;

4318 } i‡(
a˘i⁄
 =
P2PSD_ACTION_ID_GAS_IRESP
 ||

4319 
a˘i⁄
 =
P2PSD_ACTION_ID_GAS_CRESP
) {

4321 
af_∑øms
->
dwñl_time
 = 
WL_MIN_DWELL_TIME
;

4323 
	`WL_DBG
(("Unknow¿a˘i⁄Åy≥: %d\n", 
a˘i⁄
));

4326 
	`WL_DBG
(("Unknown Frame: category 0x%x,áction 0x%x,Üength %d\n",

4327 
ˇãg‹y
, 
a˘i⁄
, 
a˘i⁄_‰ame_Àn
));

4329 } i‡(
ˇãg‹y
 =
P2P_AF_CATEGORY
) {

4332 
	`WL_DBG
(("Unknown Frame: category 0x%x,áction 0x%x\n",

4333 
ˇãg‹y
, 
a˘i⁄
));

4334 i‡(
dhd
->
›_mode
 & 
DHD_FLAG_HOSTAP_MODE
) {

4335 
	`wl_˛r_drv_°©us
(
wl
, 
SENDING_ACT_FRM
, 
dev
);

4336  
Ál£
;

4341 i‡(
c⁄fig_af_∑øms
.
mpc_⁄off
 == 0) {

4342 
	`wldev_iov¨_£töt
(
dev
, "mpc", 0);

4346 i‡(
c⁄fig_af_∑øms
.
£¨ch_ch™√l
 && 
	`IS_P2P_SOCIAL
(
af_∑øms
->
ch™√l
) &&

4347 
	`wl_to_p2p_bss_ßved_õ
(
wl
, 
P2PAPI_BSSCFG_DEVICE
).
p2p_¥obe_ªq_õ_Àn
) {

4348 
c⁄fig_af_∑øms
.
£¨ch_ch™√l
 = 
åue
;

4350 
c⁄fig_af_∑øms
.
£¨ch_ch™√l
 = 
Ál£
;

4353 #ifde‡
WL11U


4354 i‡(
ndev
 =
	`wl_to_¥mry_ndev
(
wl
))

4355 
c⁄fig_af_∑øms
.
£¨ch_ch™√l
 = 
Ál£
;

4358 #ifde‡
VSDB


4360 i‡(
	`wl_gë_drv_°©us
(
wl
, 
CONNECTING
, 
	`wl_to_¥mry_ndev
(wl))) {

4361 
	`m¶ìp
(50);

4366 i‡(
	`wl_gë_drv_°©us_Æl
(
wl
, 
SCANNING
)) {

4367 
	`wl_nŸify_esˇn_com∂ëe
(
wl
, 
ndev
, 
åue
,Årue);

4371 i‡(
wl
->
√xt_af_subty≥
 !
P2P_PAF_SUBTYPE_INVALID
) {

4373 
	`wl_£t_drv_°©us
(
wl
, 
WAITING_NEXT_ACT_FRM
, 
dev
);

4375 
	`wl_£t_drv_°©us
(
wl
, 
SENDING_ACT_FRM
, 
dev
);

4376 
	`mem˝y
(
wl
->
afx_hdl
->
tx_d°_addr
.
o˘ë
,

4377 
af_∑øms
->
a˘i⁄_‰ame
.
da
.
o˘ë
,

4378 (
wl
->
afx_hdl
->
tx_d°_addr
.
o˘ë
));

4381 
wl
->
afx_hdl
->
≥ndög_tx_a˘_‰m
 = 
af_∑øms
;

4384 i‡(
c⁄fig_af_∑øms
.
£¨ch_ch™√l
) {

4386 
wl
->
afx_hdl
->
bssidx
 = 
	`wl_cfgp2p_föd_idx
(wl, 
dev
);

4387 
wl
->
afx_hdl
->
dev
 = dev;

4388 
wl
->
afx_hdl
->
ªåy
 = 0;

4389 
wl
->
afx_hdl
->
≥î_ch™
 = 
WL_INVALID
;

4391 i‡(
	`wl_cfg80211_af_£¨chög_ch™√l
(
wl
, 
dev
Ë=
WL_INVALID
) {

4392 
	`WL_ERR
(("couldn't findÖeer's channel.\n"));

4393 
exô
;

4399 
	`wl_˛r_drv_°©us
(
wl
, 
SCANNING
, wl->
afx_hdl
->
dev
);

4401 #i‚de‡
WL_CFG80211_VSDB_PRIORITIZE_SCAN_REQUEST


4402 
	`wl_nŸify_esˇn_com∂ëe
(
wl
, 
dev
, 
åue
,Årue);

4404 
	`wl_cfgp2p_discovî_íabÀ_£¨ch
(
wl
, 
Ál£
);

4407 
af_∑øms
->
ch™√l
 = 
wl
->
afx_hdl
->
≥î_ch™
;

4410 #ifde‡
VSDB


4411 
off_ch™_°¨ãd_jiffõs
 = 
jiffõs
;

4415 
ack
 = 
	`wl_cfgp2p_tx_a˘i⁄_‰ame
(
wl
, 
dev
, 
af_∑øms
, 
bssidx
Ë? 
Ál£
 : 
åue
;

4418 (
ack
 =
Ál£
Ë&& (
tx_ªåy
++ < 
c⁄fig_af_∑øms
.
max_tx_ªåy
)) {

4419 #ifde‡
VSDB


4420 i‡(
af_∑øms
->
ch™√l
) {

4421 i‡(
	`jiffõs_to_m£cs
(
jiffõs
 - 
off_ch™_°¨ãd_jiffõs
) >

4422 
OFF_CHAN_TIME_THRESHOLD_MS
) {

4423 
	`WL_AF_TX_KEEP_PRI_CONNECTION_VSDB
(
wl
);

4424 
off_ch™_°¨ãd_jiffõs
 = 
jiffõs
;

4428 
ack
 = 
	`wl_cfgp2p_tx_a˘i⁄_‰ame
(
wl
, 
dev
, 
af_∑øms
, 
bssidx
) ?

4429 
Ál£
 : 
åue
;

4431 i‡(
ack
 =
Ál£
) {

4432 
	`WL_ERR
(("FaûedÅÿ£nd A˘i⁄ Føme‘ëry %d)\n", 
tx_ªåy
));

4434 
exô
:

4436 
	`wl_˛r_drv_°©us
(
wl
, 
SENDING_ACT_FRM
, 
dev
);

4438 #ifde‡
WL_CFG80211_SYNC_GON


4443 i‡(
ack
 && 
c⁄fig_af_∑øms
.
exåa_li°í
 &&

4444 
	`wl_gë_drv_°©us_Æl
(
wl
, 
WAITING_NEXT_ACT_FRM
) &&

4445 
wl
->
af_£¡_ch™√l
 =wl->
afx_hdl
->
my_li°í_ch™
) {

4446 
s32
 
exèr_li°í_time
;

4448 
exèr_li°í_time
 = 
af_∑øms
->
dwñl_time
 -

4449 
	`jiffõs_to_m£cs
(
jiffõs
 - 
wl
->
af_tx_£¡_jiffõs
);

4451 i‡(
exèr_li°í_time
 > 50) {

4452 
	`wl_£t_drv_°©us
(
wl
, 
WAITING_NEXT_ACT_FRM_LISTEN
, 
dev
);

4453 
	`WL_DBG
(("Wait moreÅime!áctualáfÅime:%d,"

4455 
af_∑øms
->
dwñl_time
, 
exèr_li°í_time
));

4456 i‡(
	`wl_cfgp2p_discovî_li°í
(
wl
, wl->
af_£¡_ch™√l
,

4457 
exèr_li°í_time
 + 100Ë=
BCME_OK
) {

4458 
	`waô_f‹_com∂ëi⁄_timeout
(&
wl
->
waô_√xt_af
,

4459 
	`m£cs_to_jiffõs
(
exèr_li°í_time
 + 100 + 300));

4461 
	`wl_˛r_drv_°©us
(
wl
, 
WAITING_NEXT_ACT_FRM_LISTEN
, 
dev
);

4465 
	`wl_˛r_drv_°©us
(
wl
, 
WAITING_NEXT_ACT_FRM
, 
dev
);

4467 i‡(
wl
->
afx_hdl
->
≥ndög_tx_a˘_‰m
)

4468 
wl
->
afx_hdl
->
≥ndög_tx_a˘_‰m
 = 
NULL
;

4470 
	`WL_INFO
(("-- sending Action Frame is %s,Üisten chan: %d\n",

4471 (
ack
Ë? "Suc˚eded!!":"Faûed!!", 
wl
->
afx_hdl
->
my_li°í_ch™
));

4475 i‡(
c⁄fig_af_∑øms
.
mpc_⁄off
 == 1) {

4476 
	`wldev_iov¨_£töt
(
dev
, "mpc", 1);

4479  
ack
;

4480 
	}
}

4482 
s32


4483 
wl_cfg80211_mgmt_tx
(
wùhy
 *wùhy, 
√t_devi˚
 *
ndev
,

4484 
õì80211_ch™√l
 *
ch™√l
, 
boﬁ
 
offch™
,

4485 
∆80211_ch™√l_ty≥
 
ch™√l_ty≥
,

4486 
boﬁ
 
ch™√l_ty≥_vÆid
, 
waô
,

4487 c⁄° 
u8
* 
buf
, 
size_t
 
Àn
,

4488 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(3, 2, 0)

4489 
boﬁ
 
no_cck
,

4491 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(3, 3, 0)

4492 
boﬁ
 
d⁄t_waô_f‹_ack
,

4494 
u64
 *
cookõ
)

4496 
wl_a˘i⁄_‰ame_t
 *
	ga˘i⁄_‰ame
;

4497 
wl_af_∑øms_t
 *
	gaf_∑øms
;

4498 
scb_vÆ_t
 
	gscb_vÆ
;

4499 c⁄° 
õì80211_mgmt
 *
	gmgmt
;

4500 
wl_¥iv
 *
	gwl
 = 
wùhy_¥iv
(
wùhy
);

4501 
√t_devi˚
 *
	gdev
 = 
NULL
;

4502 
s32
 
	gîr
 = 
BCME_OK
;

4503 
s32
 
	gbssidx
 = 0;

4504 
u32
 
	gid
;

4505 
boﬁ
 
	gack
 = 
Ál£
;

4506 
s8
 
	góbuf
[
ETHER_ADDR_STR_LEN
];

4508 
WL_DBG
(("Enter \n"));

4510 i‡(
	gndev
 =
wl
->
p2p_√t
) {

4511 
dev
 = 
wl_to_¥mry_ndev
(
wl
);

4514 
	gdev
 = 
ndev
;

4518 
	gbssidx
 = 
wl_cfgp2p_föd_idx
(
wl
, 
dev
);

4519 i‡(
	gbssidx
 == -1) {

4521 
WL_ERR
(("C™ÇŸ födÅhêbssidx f‹ dev–%∞)\n", 
dev
));

4522  -
	gENODEV
;

4524 i‡(
p2p_is_⁄
(
wl
)) {

4528 i‡((
	gîr
 = 
wl_cfgp2p_discovî_íabÀ_£¨ch
(
wl
, 
Ál£
)) < 0) {

4529 
WL_ERR
(("CanÇot disable discovery mode\n"));

4530  -
	gEFAULT
;

4533 *
	gcookõ
 = 0;

4534 
	gid
 = 
wl
->
£nd_a˘i⁄_id
++;

4535 i‡(
	gid
 == 0)

4536 
id
 = 
wl
->
£nd_a˘i⁄_id
++;

4537 *
	gcookõ
 = 
id
;

4538 
	gmgmt
 = (c⁄° 
õì80211_mgmt
 *)
buf
;

4539 i‡(
õì80211_is_mgmt
(
mgmt
->
‰ame_c⁄åﬁ
)) {

4540 i‡(
õì80211_is_¥obe_ª•
(
mgmt
->
‰ame_c⁄åﬁ
)) {

4541 
s32
 
	gõ_off£t
 = 
DOT11_MGMT_HDR_LEN
 + 
DOT11_BCN_PRB_FIXED_LEN
;

4542 
s32
 
	gõ_Àn
 = 
Àn
 - 
õ_off£t
;

4543 i‡(
	gdev
 =
wl_to_¥mry_ndev
(
wl
))

4544 
bssidx
 = 
wl_to_p2p_bss_bssidx
(
wl
, 
P2PAPI_BSSCFG_DEVICE
);

4545 
wl_cfgp2p_£t_m™agemít_õ
(
wl
, 
dev
, 
bssidx
,

4546 
VNDR_IE_PRBRSP_FLAG
, (
u8
 *)(
buf
 + 
õ_off£t
), 
õ_Àn
);

4547 
cfg80211_mgmt_tx_°©us
(
ndev
, *
cookõ
, 
buf
, 
Àn
, 
åue
, 
GFP_KERNEL
);

4548 
	gexô
;

4549 } i‡(
õì80211_is_dißssoc
(
mgmt
->
‰ame_c⁄åﬁ
) ||

4550 
õì80211_is_dóuth
(
mgmt
->
‰ame_c⁄åﬁ
)) {

4551 
mem˝y
(
scb_vÆ
.
ó
.
o˘ë
, 
mgmt
->
da
, 
ETH_ALEN
);

4552 
	gscb_vÆ
.
	gvÆ
 = 
mgmt
->
u
.
dißssoc
.
ªas⁄_code
;

4553 
	gîr
 = 
wldev_io˘l
(
dev
, 
WLC_SCB_DEAUTHENTICATE_FOR_REASON
, &
scb_vÆ
,

4554 (
scb_vÆ_t
), 
åue
);

4555 i‡(
	gîr
 < 0)

4556 
WL_ERR
(("WLC_SCB_DEAUTHENTICATE_FOR_REASONÉº‹ %d\n", 
îr
));

4557 
WL_DBG
(("Disconnect STA : %s scb_val.val %d\n",

4558 
bcm_ëhî_¡ﬂ
((c⁄° 
ëhî_addr
 *)
mgmt
->
da
, 
óbuf
),

4559 
scb_vÆ
.
vÆ
));

4560 
wl_dñay
(400);

4561 
cfg80211_mgmt_tx_°©us
(
ndev
, *
cookõ
, 
buf
, 
Àn
, 
åue
, 
GFP_KERNEL
);

4562 
	gexô
;

4564 } i‡(
õì80211_is_a˘i⁄
(
mgmt
->
‰ame_c⁄åﬁ
)) {

4575 #i‚de‡
WL_CFG80211_VSDB_PRIORITIZE_SCAN_REQUEST


4576 
wl_nŸify_esˇn_com∂ëe
(
wl
, 
dev
, 
åue
,Årue);

4581 
WL_ERR
(("Driver onlyállows MGMTÖacketÅype\n"));

4582 
	gexô
;

4585 
	gaf_∑øms
 = (
wl_af_∑øms_t
 *Ë
kzÆloc
(
WL_WIFI_AF_PARAMS_SIZE
, 
GFP_KERNEL
);

4587 i‡(
	gaf_∑øms
 =
NULL
)

4589 
WL_ERR
(("unableÅoállocate frame\n"));

4590  -
	gENOMEM
;

4593 
	ga˘i⁄_‰ame
 = &
af_∑øms
->
a˘i⁄_‰ame
;

4596 
	ga˘i⁄_‰ame
->
	g∑ckëId
 = *
cookõ
;

4597 
WL_DBG
(("a˘i⁄ fømê%d\n", 
a˘i⁄_‰ame
->
∑ckëId
));

4599 
mem˝y
(&
a˘i⁄_‰ame
->
da
, &
mgmt
->da[0], 
ETHER_ADDR_LEN
);

4600 
mem˝y
(&
af_∑øms
->
BSSID
, &
mgmt
->
bssid
[0], 
ETHER_ADDR_LEN
);

4603 
	ga˘i⁄_‰ame
->
	gÀn
 = 
Àn
 - 
DOT11_MGMT_HDR_LEN
;

4604 
WL_DBG
(("a˘i⁄_‰ame->Àn: %d\n", 
a˘i⁄_‰ame
->
Àn
));

4607 
	gaf_∑øms
->
	gch™√l
 =

4608 
õì80211_‰equícy_to_ch™√l
(
ch™√l
->
˚¡î_‰eq
);

4611 
	gwl
->
	gafx_hdl
->
	g≥î_li°í_ch™
 = 
af_∑øms
->
ch™√l
;

4612 
WL_DBG
(("ch™√»‰om uµîÜayî %d\n", 
wl
->
afx_hdl
->
≥î_li°í_ch™
));

4618 
	gaf_∑øms
->
	gdwñl_time
 = 
WL_DWELL_TIME
;

4620 
mem˝y
(
a˘i⁄_‰ame
->
d©a
, &
buf
[
DOT11_MGMT_HDR_LEN
],á˘i⁄_‰ame->
Àn
);

4622 
	gack
 = 
wl_cfg80211_£nd_a˘i⁄_‰ame
(
wùhy
, 
dev
, 
ndev
, 
af_∑øms
,

4623 
a˘i⁄_‰ame
,á˘i⁄_‰ame->
Àn
, 
bssidx
);

4625 
cfg80211_mgmt_tx_°©us
(
ndev
, *
cookõ
, 
buf
, 
Àn
, 
ack
, 
GFP_KERNEL
);

4627 
k‰ì
(
af_∑øms
);

4628 
	gexô
:

4629  
îr
;

4634 
	$wl_cfg80211_mgmt_‰ame_ªgi°î
(
wùhy
 *wùhy, 
√t_devi˚
 *
dev
,

4635 
u16
 
‰ame_ty≥
, 
boﬁ
 
ªg
)

4638 
	`WL_DBG
(("%s: føme_ty≥: %x,Ñeg: %d\n", 
__func__
, 
‰ame_ty≥
, 
ªg
));

4640 i‡(
‰ame_ty≥
 !(
IEEE80211_FTYPE_MGMT
 | 
IEEE80211_STYPE_PROBE_REQ
))

4644 
	}
}

4647 
s32


4648 
	$wl_cfg80211_ch™ge_bss
(
wùhy
 *wiphy,

4649 
√t_devi˚
 *
dev
,

4650 
bss_∑ømëîs
 *
∑øms
)

4652 i‡(
∑øms
->
u£_˘s_¥Ÿ
 >= 0) {

4655 i‡(
∑øms
->
u£_sh‹t_¥ómbÀ
 >= 0) {

4658 i‡(
∑øms
->
u£_sh‹t_¶Ÿ_time
 >= 0) {

4661 i‡(
∑øms
->
basic_øãs
) {

4664 i‡(
∑øms
->
≠_isﬁ©e
 >= 0) {

4667 i‡(
∑øms
->
ht_›mode
 >= 0) {

4671 
	}
}

4673 
s32


4674 
	$wl_cfg80211_£t_ch™√l
(
wùhy
 *wùhy, 
√t_devi˚
 *
dev
,

4675 
õì80211_ch™√l
 *
ch™
,

4676 
∆80211_ch™√l_ty≥
 
ch™√l_ty≥
)

4678 
s32
 
_ch™
;

4679 
ch™•ec_t
 
ch•ec
 = 0;

4680 
ch™•ec_t
 
fw_ch•ec
 = 0;

4681 
u32
 
bw
 = 
WL_CHANSPEC_BW_20
;

4683 
s32
 
îr
 = 
BCME_OK
;

4684 
s32
 
bw_ˇp
 = 0;

4686 
u32
 
b™d
;

4687 
u32
 
bw_ˇp
;

4688 } 
∑øm
 = {0, 0};

4689 
wl_¥iv
 *
wl
 = 
	`wùhy_¥iv
(
wùhy
);

4691 i‡(
wl
->
p2p_√t
 =
dev
) {

4692 
dev
 = 
	`wl_to_¥mry_ndev
(
wl
);

4694 
_ch™
 = 
	`õì80211_‰equícy_to_ch™√l
(
ch™
->
˚¡î_‰eq
);

4695 
	`WL_ERR
(("netdev_ifidx(%d), chan_type(%d)Åarget channel(%d) \n",

4696 
dev
->
ifödex
, 
ch™√l_ty≥
, 
_ch™
));

4699 i‡(
ch™
->
b™d
 =
IEEE80211_BAND_5GHZ
) {

4700 
∑øm
.
b™d
 = 
WLC_BAND_5G
;

4701 
îr
 = 
	`wldev_iov¨_gëbuf
(
dev
, "bw_ˇp", &
∑øm
, (param),

4702 
wl
->
io˘l_buf
, 
WLC_IOCTL_SMLEN
, &wl->
io˘l_buf_sync
);

4703 i‡(
îr
) {

4704 i‡(
îr
 !
BCME_UNSUPPORTED
) {

4705 
	`WL_ERR
(("bw_ˇ∞Áûed, %d\n", 
îr
));

4706  
îr
;

4708 
îr
 = 
	`wldev_iov¨_gëöt
(
dev
, "mimo_bw_ˇp", &
bw_ˇp
);

4709 i‡(
îr
) {

4710 
	`WL_ERR
(("îr‹ gë mimo_bw_ˇ∞(%d)\n", 
îr
));

4712 i‡(
bw_ˇp
 !
WLC_N_BW_20ALL
)

4713 
bw
 = 
WL_CHANSPEC_BW_40
;

4716 i‡(
	`WL_BW_CAP_80MHZ
(
wl
->
io˘l_buf
[0]))

4717 
bw
 = 
WL_CHANSPEC_BW_80
;

4718 i‡(
	`WL_BW_CAP_40MHZ
(
wl
->
io˘l_buf
[0]))

4719 
bw
 = 
WL_CHANSPEC_BW_40
;

4721 
bw
 = 
WL_CHANSPEC_BW_20
;

4725 } i‡(
ch™
->
b™d
 =
IEEE80211_BAND_2GHZ
)

4726 
bw
 = 
WL_CHANSPEC_BW_20
;

4727 
£t_ch™√l
:

4728 
ch•ec
 = 
	`wf_ch™√l2ch•ec
(
_ch™
, 
bw
);

4729 i‡(
	`wf_ch•ec_vÆid
(
ch•ec
)) {

4730 
fw_ch•ec
 = 
	`wl_ch•ec_ho°_to_drivî
(
ch•ec
);

4731 i‡(
fw_ch•ec
 !
INVCHANSPEC
) {

4732 i‡((
îr
 = 
	`wldev_iov¨_£töt
(
dev
, "chanspec",

4733 
fw_ch•ec
)Ë=
BCME_BADCHAN
) {

4734 i‡(
bw
 =
WL_CHANSPEC_BW_80
)

4735 
ch™ge_bw
;

4736 
îr
 = 
	`wldev_io˘l
(
dev
, 
WLC_SET_CHANNEL
,

4737 &
_ch™
, (_ch™), 
åue
);

4738 i‡(
îr
 < 0) {

4739 
	`WL_ERR
(("WLC_SET_CHANNELÉrror %d"

4740 "chù mayÇŸ bêsuµ‹tögÅhi†ch™√l\n", 
îr
));

4742 } i‡(
îr
) {

4743 
	`WL_ERR
(("ÁûedÅÿ£àch™•e¯îr‹ %d\n", 
îr
));

4746 
	`WL_ERR
(("failedÅo convert host chanspecÅo fw chanspec\n"));

4747 
îr
 = 
BCME_ERROR
;

4750 
ch™ge_bw
:

4751 i‡(
bw
 =
WL_CHANSPEC_BW_80
)

4752 
bw
 = 
WL_CHANSPEC_BW_40
;

4753 i‡(
bw
 =
WL_CHANSPEC_BW_40
)

4754 
bw
 = 
WL_CHANSPEC_BW_20
;

4756 
bw
 = 0;

4757 i‡(
bw
)

4758 
£t_ch™√l
;

4759 
	`WL_ERR
(("InvÆid ch™•e¯0x%x\n", 
ch•ec
));

4760 
îr
 = 
BCME_ERROR
;

4762  
îr
;

4763 
	}
}

4765 
s32


4766 
	$wl_vÆid©e_›í£curôy
(
√t_devi˚
 *
dev
, 
s32
 
bssidx
)

4768 
s32
 
îr
 = 
BCME_OK
;

4771 
îr
 = 
	`wldev_iov¨_£töt_bsscfg
(
dev
, "auth", 0, 
bssidx
);

4772 i‡(
îr
 < 0) {

4773 
	`WL_ERR
(("authÉº‹ %d\n", 
îr
));

4774  
BCME_ERROR
;

4777 
îr
 = 
	`wldev_iov¨_£töt_bsscfg
(
dev
, "w£c", 0, 
bssidx
);

4778 i‡(
îr
 < 0) {

4779 
	`WL_ERR
(("w£¯îr‹ %d\n", 
îr
));

4780  
BCME_ERROR
;

4783 
îr
 = 
	`wldev_iov¨_£töt_bsscfg
(
dev
, "w∑_auth", 
WPA_AUTH_NONE
, 
bssidx
);

4784 i‡(
îr
 < 0) {

4785 
	`WL_ERR
(("w∑_authÉº‹ %d\n", 
îr
));

4786  
BCME_ERROR
;

4790 
	}
}

4792 
s32


4793 
	$wl_vÆid©e_w∑2õ
(
√t_devi˚
 *
dev
, 
bcm_év_t
 *
w∑2õ
, 
s32
 
bssidx
)

4795 
s32
 
Àn
 = 0;

4796 
s32
 
îr
 = 
BCME_OK
;

4797 
u16
 
auth
 = 0;

4798 
u32
 
w£c
;

4799 
u32
 
pvÆ
 = 0;

4800 
u32
 
gvÆ
 = 0;

4801 
u32
 
w∑_auth
 = 0;

4802 
w∑_suôe_mˇ°_t
 *
mˇ°
;

4803 
w∑_suôe_uˇ°_t
 *
uˇ°
;

4804 
w∑_suôe_auth_key_mgmt_t
 *
mgmt
;

4806 
u16
 
suôe_cou¡
;

4807 
u8
 
r¢_ˇp
[2];

4808 
u32
 
wme_bss_dißbÀ
;

4810 i‡(
w∑2õ
 =
NULL
)

4811 
exô
;

4813 
	`WL_DBG
(("Enter \n"));

4814 
Àn
 = 
w∑2õ
->len;

4816 
mˇ°
 = (
w∑_suôe_mˇ°_t
 *)&
w∑2õ
->
d©a
[
WPA2_VERSION_LEN
];

4817 
mˇ°
->
ty≥
) {

4818 
WPA_CIPHER_NONE
:

4819 
gvÆ
 = 0;

4821 
WPA_CIPHER_WEP_40
:

4822 
WPA_CIPHER_WEP_104
:

4823 
gvÆ
 = 
WEP_ENABLED
;

4825 
WPA_CIPHER_TKIP
:

4826 
gvÆ
 = 
TKIP_ENABLED
;

4828 
WPA_CIPHER_AES_CCM
:

4829 
gvÆ
 = 
AES_ENABLED
;

4831 #ifde‡
BCMWAPI_WPI


4832 
WAPI_CIPHER_SMS4
:

4833 
gvÆ
 = 
SMS4_ENABLED
;

4837 
	`WL_ERR
(("No Security Info\n"));

4840 i‡((
Àn
 -
WPA_SUITE_LEN
) <= 0)

4841  
BCME_BADLEN
;

4844 
uˇ°
 = (
w∑_suôe_uˇ°_t
 *)&
mˇ°
[1];

4845 
suôe_cou¡
 = 
	`…oh16_ua
(&
uˇ°
->
cou¡
);

4846 
uˇ°
->
li°
[0].
ty≥
) {

4847 
WPA_CIPHER_NONE
:

4848 
pvÆ
 = 0;

4850 
WPA_CIPHER_WEP_40
:

4851 
WPA_CIPHER_WEP_104
:

4852 
pvÆ
 = 
WEP_ENABLED
;

4854 
WPA_CIPHER_TKIP
:

4855 
pvÆ
 = 
TKIP_ENABLED
;

4857 
WPA_CIPHER_AES_CCM
:

4858 
pvÆ
 = 
AES_ENABLED
;

4860 #ifde‡
BCMWAPI_WPI


4861 
WAPI_CIPHER_SMS4
:

4862 
pvÆ
 = 
SMS4_ENABLED
;

4866 
	`WL_ERR
(("No Security Info\n"));

4868 i‡((
Àn
 -(
WPA_IE_SUITE_COUNT_LEN
 + (
WPA_SUITE_LEN
 * 
suôe_cou¡
))) <= 0)

4869  
BCME_BADLEN
;

4872 
w£c
 = (
pvÆ
 | 
gvÆ
 | 
SES_OW_ENABLED
);

4874 
mgmt
 = (
w∑_suôe_auth_key_mgmt_t
 *)&
uˇ°
->
li°
[
suôe_cou¡
];

4875 
suôe_cou¡
 = 
	`…oh16_ua
(&
mgmt
->
cou¡
);

4876 
mgmt
->
li°
[0].
ty≥
) {

4877 
RSN_AKM_NONE
:

4878 
w∑_auth
 = 
WPA_AUTH_NONE
;

4880 
RSN_AKM_UNSPECIFIED
:

4881 
w∑_auth
 = 
WPA2_AUTH_UNSPECIFIED
;

4883 
RSN_AKM_PSK
:

4884 
w∑_auth
 = 
WPA2_AUTH_PSK
;

4887 
	`WL_ERR
(("No Key Mgmt Info\n"));

4890 i‡((
Àn
 -(
WPA_IE_SUITE_COUNT_LEN
 + (
WPA_SUITE_LEN
 * 
suôe_cou¡
))Ë>
RSN_CAP_LEN
) {

4891 
r¢_ˇp
[0] = *(
u8
 *)&
mgmt
->
li°
[
suôe_cou¡
];

4892 
r¢_ˇp
[1] = *((
u8
 *)&
mgmt
->
li°
[
suôe_cou¡
] + 1);

4894 i‡(
r¢_ˇp
[0] & (
RSN_CAP_16_REPLAY_CNTRS
 << 
RSN_CAP_PTK_REPLAY_CNTR_SHIFT
)) {

4895 
wme_bss_dißbÀ
 = 0;

4897 
wme_bss_dißbÀ
 = 1;

4901 
îr
 = 
	`wldev_iov¨_£töt_bsscfg
(
dev
, "wme_bss_dißbÀ", 
wme_bss_dißbÀ
, 
bssidx
);

4902 i‡(
îr
 < 0) {

4903 
	`WL_ERR
(("wme_bss_dißbÀÉº‹ %d\n", 
îr
));

4904  
BCME_ERROR
;

4907 
	`WL_DBG
(("Thîêi†nÿRSN C≠abûôõs.ÑemaöedÜí %d\n", 
Àn
));

4911 
îr
 = 
	`wldev_iov¨_£töt_bsscfg
(
dev
, "auth", 
auth
, 
bssidx
);

4912 i‡(
îr
 < 0) {

4913 
	`WL_ERR
(("authÉº‹ %d\n", 
îr
));

4914  
BCME_ERROR
;

4917 
îr
 = 
	`wldev_iov¨_£töt_bsscfg
(
dev
, "w£c", 
w£c
, 
bssidx
);

4918 i‡(
îr
 < 0) {

4919 
	`WL_ERR
(("w£¯îr‹ %d\n", 
îr
));

4920  
BCME_ERROR
;

4923 
îr
 = 
	`wldev_iov¨_£töt_bsscfg
(
dev
, "w∑_auth", 
w∑_auth
, 
bssidx
);

4924 i‡(
îr
 < 0) {

4925 
	`WL_ERR
(("w∑_authÉº‹ %d\n", 
îr
));

4926  
BCME_ERROR
;

4928 
exô
:

4930 
	}
}

4932 
s32


4933 
	$wl_vÆid©e_w∑õ
(
√t_devi˚
 *
dev
, 
w∑_õ_fixed_t
 *
w∑õ
, 
s32
 
bssidx
)

4935 
w∑_suôe_mˇ°_t
 *
mˇ°
;

4936 
w∑_suôe_uˇ°_t
 *
uˇ°
;

4937 
w∑_suôe_auth_key_mgmt_t
 *
mgmt
;

4938 
u16
 
auth
 = 0;

4939 
u16
 
cou¡
;

4940 
s32
 
îr
 = 
BCME_OK
;

4941 
s32
 
Àn
 = 0;

4942 
u32
 
i
;

4943 
u32
 
w£c
;

4944 
u32
 
pvÆ
 = 0;

4945 
u32
 
gvÆ
 = 0;

4946 
u32
 
w∑_auth
 = 0;

4947 
u32
 
tmp
 = 0;

4949 i‡(
w∑õ
 =
NULL
)

4950 
exô
;

4951 
	`WL_DBG
(("Enter \n"));

4952 
Àn
 = 
w∑õ
->
Àngth
;

4953 
Àn
 -
WPA_IE_TAG_FIXED_LEN
;

4955 i‡(
Àn
 < 
WPA_SUITE_LEN
) {

4956 
	`WL_INFO
(("no multicast cipher suite\n"));

4957 
exô
;

4961 
mˇ°
 = (
w∑_suôe_mˇ°_t
 *)&
w∑õ
[1];

4962 
Àn
 -
WPA_SUITE_LEN
;

4963 i‡(!
	`bcmp
(
mˇ°
->
oui
, 
WPA_OUI
, 
WPA_OUI_LEN
)) {

4964 i‡(
	`IS_WPA_CIPHER
(
mˇ°
->
ty≥
)) {

4965 
tmp
 = 0;

4966 
mˇ°
->
ty≥
) {

4967 
WPA_CIPHER_NONE
:

4968 
tmp
 = 0;

4970 
WPA_CIPHER_WEP_40
:

4971 
WPA_CIPHER_WEP_104
:

4972 
tmp
 = 
WEP_ENABLED
;

4974 
WPA_CIPHER_TKIP
:

4975 
tmp
 = 
TKIP_ENABLED
;

4977 
WPA_CIPHER_AES_CCM
:

4978 
tmp
 = 
AES_ENABLED
;

4981 
	`WL_ERR
(("No Security Info\n"));

4983 
gvÆ
 |
tmp
;

4987 i‡(
Àn
 < 
WPA_IE_SUITE_COUNT_LEN
) {

4988 
	`WL_INFO
(("no unicast suite\n"));

4989 
exô
;

4992 
uˇ°
 = (
w∑_suôe_uˇ°_t
 *)&
mˇ°
[1];

4993 
cou¡
 = 
	`…oh16_ua
(&
uˇ°
->count);

4994 
Àn
 -
WPA_IE_SUITE_COUNT_LEN
;

4995 
i
 = 0; i < 
cou¡
 && 
Àn
 >
WPA_SUITE_LEN
;

4996 
i
++, 
Àn
 -
WPA_SUITE_LEN
) {

4997 i‡(!
	`bcmp
(
uˇ°
->
li°
[
i
].
oui
, 
WPA_OUI
, 
WPA_OUI_LEN
)) {

4998 i‡(
	`IS_WPA_CIPHER
(
uˇ°
->
li°
[
i
].
ty≥
)) {

4999 
tmp
 = 0;

5000 
uˇ°
->
li°
[
i
].
ty≥
) {

5001 
WPA_CIPHER_NONE
:

5002 
tmp
 = 0;

5004 
WPA_CIPHER_WEP_40
:

5005 
WPA_CIPHER_WEP_104
:

5006 
tmp
 = 
WEP_ENABLED
;

5008 
WPA_CIPHER_TKIP
:

5009 
tmp
 = 
TKIP_ENABLED
;

5011 
WPA_CIPHER_AES_CCM
:

5012 
tmp
 = 
AES_ENABLED
;

5015 
	`WL_ERR
(("No Security Info\n"));

5017 
pvÆ
 |
tmp
;

5021 
Àn
 -(
cou¡
 - 
i
Ë* 
WPA_SUITE_LEN
;

5023 i‡(
Àn
 < 
WPA_IE_SUITE_COUNT_LEN
) {

5024 
	`WL_INFO
(("Çoáuth key mgmt suite\n"));

5025 
exô
;

5028 
mgmt
 = (
w∑_suôe_auth_key_mgmt_t
 *)&
uˇ°
->
li°
[
cou¡
];

5029 
cou¡
 = 
	`…oh16_ua
(&
mgmt
->count);

5030 
Àn
 -
WPA_IE_SUITE_COUNT_LEN
;

5031 
i
 = 0; i < 
cou¡
 && 
Àn
 >
WPA_SUITE_LEN
;

5032 
i
++, 
Àn
 -
WPA_SUITE_LEN
) {

5033 i‡(!
	`bcmp
(
mgmt
->
li°
[
i
].
oui
, 
WPA_OUI
, 
WPA_OUI_LEN
)) {

5034 i‡(
	`IS_WPA_AKM
(
mgmt
->
li°
[
i
].
ty≥
)) {

5035 
tmp
 = 0;

5036 
mgmt
->
li°
[
i
].
ty≥
) {

5037 
RSN_AKM_NONE
:

5038 
tmp
 = 
WPA_AUTH_NONE
;

5040 
RSN_AKM_UNSPECIFIED
:

5041 
tmp
 = 
WPA_AUTH_UNSPECIFIED
;

5043 
RSN_AKM_PSK
:

5044 
tmp
 = 
WPA_AUTH_PSK
;

5047 
	`WL_ERR
(("No Key Mgmt Info\n"));

5049 
w∑_auth
 |
tmp
;

5055 
w£c
 = (
pvÆ
 | 
gvÆ
 | 
SES_OW_ENABLED
);

5057 
îr
 = 
	`wldev_iov¨_£töt_bsscfg
(
dev
, "auth", 
auth
, 
bssidx
);

5058 i‡(
îr
 < 0) {

5059 
	`WL_ERR
(("authÉº‹ %d\n", 
îr
));

5060  
BCME_ERROR
;

5063 
îr
 = 
	`wldev_iov¨_£töt_bsscfg
(
dev
, "w£c", 
w£c
, 
bssidx
);

5064 i‡(
îr
 < 0) {

5065 
	`WL_ERR
(("w£¯îr‹ %d\n", 
îr
));

5066  
BCME_ERROR
;

5069 
îr
 = 
	`wldev_iov¨_£töt_bsscfg
(
dev
, "w∑_auth", 
w∑_auth
, 
bssidx
);

5070 i‡(
îr
 < 0) {

5071 
	`WL_ERR
(("w∑_authÉº‹ %d\n", 
îr
));

5072  
BCME_ERROR
;

5074 
exô
:

5076 
	}
}

5078 
s32


5079 
	$wl_cfg80211_b˙_vÆid©e_£c
(

5080 
√t_devi˚
 *
dev
,

5081 
∑r£d_õs
 *
õs
,

5082 
u32
 
dev_rﬁe
,

5083 
s32
 
bssidx
)

5085 
wl_¥iv
 *
wl
 = 
wlcfg_drv_¥iv
;

5087 i‡(
dev_rﬁe
 =
NL80211_IFTYPE_P2P_GO
 && (
õs
->
w∑2_õ
)) {

5089 
	`WL_DBG
(("P2P GO: validating wpa2_ie"));

5090 i‡(
	`wl_vÆid©e_w∑2õ
(
dev
, 
õs
->
w∑2_õ
, 
bssidx
) < 0)

5091  
BCME_ERROR
;

5093 } i‡(
dev_rﬁe
 =
NL80211_IFTYPE_AP
) {

5095 
	`WL_DBG
(("SoftAP: validating security"));

5097 i‡((
õs
->
w∑2_õ
 || ies->
w∑_õ
) &&

5098 ((
	`wl_vÆid©e_w∑2õ
(
dev
, 
õs
->
w∑2_õ
, 
bssidx
) < 0 ||

5099 
	`wl_vÆid©e_w∑õ
(
dev
, 
õs
->
w∑_õ
, 
bssidx
) < 0))) {

5100 
wl
->
≠_öfo
->
£curôy_mode
 = 
Ál£
;

5101  
BCME_ERROR
;

5104 
wl
->
≠_öfo
->
£curôy_mode
 = 
åue
;

5105 i‡(
wl
->
≠_öfo
->
r¢_õ
) {

5106 
	`k‰ì
(
wl
->
≠_öfo
->
r¢_õ
);

5107 
wl
->
≠_öfo
->
r¢_õ
 = 
NULL
;

5109 i‡(
wl
->
≠_öfo
->
w∑_õ
) {

5110 
	`k‰ì
(
wl
->
≠_öfo
->
w∑_õ
);

5111 
wl
->
≠_öfo
->
w∑_õ
 = 
NULL
;

5113 i‡(
wl
->
≠_öfo
->
wps_õ
) {

5114 
	`k‰ì
(
wl
->
≠_öfo
->
wps_õ
);

5115 
wl
->
≠_öfo
->
wps_õ
 = 
NULL
;

5117 i‡(
õs
->
w∑_õ
 !
NULL
) {

5119 
wl
->
≠_öfo
->
r¢_õ
 = 
NULL
;

5120 
wl
->
≠_öfo
->
w∑_õ
 = 
	`kmemdup
(
õs
->wpa_ie,

5121 
õs
->
w∑_õ
->
Àngth
 + 
WPA_RSN_IE_TAG_FIXED_LEN
,

5122 
GFP_KERNEL
);

5123 } i‡(
õs
->
w∑2_õ
 !
NULL
) {

5125 
wl
->
≠_öfo
->
w∑_õ
 = 
NULL
;

5126 
wl
->
≠_öfo
->
r¢_õ
 = 
	`kmemdup
(
õs
->
w∑2_õ
,

5127 
õs
->
w∑2_õ
->
Àn
 + 
WPA_RSN_IE_TAG_FIXED_LEN
,

5128 
GFP_KERNEL
);

5131 i‡(!
õs
->
w∑2_õ
 && !õs->
w∑_õ
) {

5132 
	`wl_vÆid©e_›í£curôy
(
dev
, 
bssidx
);

5133 
wl
->
≠_öfo
->
£curôy_mode
 = 
Ál£
;

5136 i‡(
õs
->
wps_õ
) {

5137 
wl
->
≠_öfo
->
wps_õ
 = 
	`kmemdup
(
õs
->wps_õ, ies->
wps_õ_Àn
, 
GFP_KERNEL
);

5143 
	}
}

5145 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(3, 4, 0)

5146 
s32
 
	$wl_cfg80211_b˙_£t_∑øms
(

5147 
cfg80211_≠_£âögs
 *
öfo
,

5148 
√t_devi˚
 *
dev
,

5149 
u32
 
dev_rﬁe
, 
s32
 
bssidx
)

5151 
wl_¥iv
 *
wl
 = 
wlcfg_drv_¥iv
;

5152 
s32
 
îr
 = 
BCME_OK
;

5154 
	`WL_DBG
(("interval (%d) \ndtim_period (%d) \n",

5155 
öfo
->
bóc⁄_öãrvÆ
, info->
dtim_≥riod
));

5157 i‡(
öfo
->
bóc⁄_öãrvÆ
) {

5158 i‡((
îr
 = 
	`wldev_io˘l
(
dev
, 
WLC_SET_BCNPRD
,

5159 &
öfo
->
bóc⁄_öãrvÆ
, (
s32
), 
åue
)) < 0) {

5160 
	`WL_ERR
(("Bóc⁄ I¡îvÆ Së Eº‹, %d\n", 
îr
));

5161  
îr
;

5165 i‡(
öfo
->
dtim_≥riod
) {

5166 i‡((
îr
 = 
	`wldev_io˘l
(
dev
, 
WLC_SET_DTIMPRD
,

5167 &
öfo
->
dtim_≥riod
, (
s32
), 
åue
)) < 0) {

5168 
	`WL_ERR
(("DTIM I¡îvÆ Së Eº‹, %d\n", 
îr
));

5169  
îr
;

5173 i‡((
öfo
->
ssid
Ë&& (öfo->
ssid_Àn
 > 0) &&

5174 (
öfo
->
ssid_Àn
 <= 32)) {

5175 
	`WL_DBG
(("SSID (%sËÀn:%d \n", 
öfo
->
ssid
, info->
ssid_Àn
));

5176 i‡(
dev_rﬁe
 =
NL80211_IFTYPE_AP
) {

5178 
	`mem£t
(
wl
->
ho°≠d_ssid
.
SSID
, 0x00, 32);

5179 
	`mem˝y
(
wl
->
ho°≠d_ssid
.
SSID
, 
öfo
->
ssid
, info->
ssid_Àn
);

5180 
wl
->
ho°≠d_ssid
.
SSID_Àn
 = 
öfo
->
ssid_Àn
;

5183 
	`mem£t
(
wl
->
p2p
->
ssid
.
SSID
, 0x00, 32);

5184 
	`mem˝y
(
wl
->
p2p
->
ssid
.
SSID
, 
öfo
->ssid, info->
ssid_Àn
);

5185 
wl
->
p2p
->
ssid
.
SSID_Àn
 = 
öfo
->
ssid_Àn
;

5189 i‡(
öfo
->
hiddí_ssid
) {

5190 i‡((
îr
 = 
	`wldev_iov¨_£töt
(
dev
, "closednet", 1)) < 0)

5191 
	`WL_ERR
(("ÁûedÅÿ£àhiddí : %d\n", 
îr
));

5192 
	`WL_DBG
(("hiddí_ssid_íum_vÆ: %d \n", 
öfo
->
hiddí_ssid
));

5195  
îr
;

5196 
	}
}

5199 
s32


5200 
	$wl_cfg80211_∑r£_õs
(
u8
 *
±r
, 
u32
 
Àn
, 
∑r£d_õs
 *
õs
)

5202 
s32
 
îr
 = 
BCME_OK
;

5204 
	`mem£t
(
õs
, 0, (
∑r£d_õs
));

5207 i‡((
õs
->
wps_õ
 = 
	`wl_cfgp2p_föd_wpsõ
(
±r
, 
Àn
)Ë!
NULL
) {

5208 
	`WL_DBG
(("WPSIE in beacon \n"));

5209 
õs
->
wps_õ_Àn
 = ies->
wps_õ
->
Àngth
 + 
WPA_RSN_IE_TAG_FIXED_LEN
;

5211 
	`WL_ERR
(("No WPSIE in beacon \n"));

5215 i‡((
õs
->
w∑2_õ
 = 
	`bcm_∑r£_évs
(
±r
, 
Àn
,

5216 
DOT11_MNG_RSN_ID
)Ë!
NULL
) {

5217 
	`WL_DBG
((" WPA2 IE found\n"));

5218 
õs
->
w∑2_õ_Àn
 = ies->
w∑2_õ
->
Àn
;

5222 i‡((
õs
->
w∑_õ
 = 
	`wl_cfgp2p_föd_w∑õ
(
±r
, 
Àn
)Ë!
NULL
) {

5223 
	`WL_DBG
((" WPA found\n"));

5224 
õs
->
w∑_õ_Àn
 = ies->
w∑_õ
->
Àngth
;

5227  
îr
;

5229 
	}
}

5231 
s32


5232 
	$wl_cfg80211_b˙_brögup_≠
(

5233 
√t_devi˚
 *
dev
,

5234 
∑r£d_õs
 *
õs
,

5235 
u32
 
dev_rﬁe
, 
s32
 
bssidx
)

5237 
wl_¥iv
 *
wl
 = 
wlcfg_drv_¥iv
;

5238 
wl_joö_∑øms
 
joö_∑øms
;

5239 
boﬁ
 
is_bssup
 = 
Ál£
;

5240 
s32
 
ö‰a
 = 1;

5241 
s32
 
joö_∑øms_size
 = 0;

5242 
s32
 
≠
 = 1;

5243 
s32
 
îr
 = 
BCME_OK
;

5245 
	`WL_DBG
(("E¡î dev_rﬁe: %d\n", 
dev_rﬁe
));

5248 
	`wldev_iov¨_£töt
(
dev
, "mpc", 0);

5250 i‡(
dev_rﬁe
 =
NL80211_IFTYPE_P2P_GO
) {

5251 
is_bssup
 = 
	`wl_cfgp2p_bss_isup
(
dev
, 
bssidx
);

5252 i‡(!
is_bssup
 && (
õs
->
w∑2_õ
 !
NULL
)) {

5254 
îr
 = 
	`wldev_io˘l
(
dev
, 
WLC_SET_INFRA
, &
ö‰a
, (
s32
), 
åue
);

5255 i‡(
îr
 < 0) {

5256 
	`WL_ERR
(("SET INFRAÉº‹ %d\n", 
îr
));

5257 
exô
;

5260 
îr
 = 
	`wldev_iov¨_£tbuf_bsscfg
(
dev
, "ssid", &
wl
->
p2p
->
ssid
,

5261 (
wl
->
p2p
->
ssid
), wl->
io˘l_buf
, 
WLC_IOCTL_MAXLEN
,

5262 
bssidx
, &
wl
->
io˘l_buf_sync
);

5263 i‡(
îr
 < 0) {

5264 
	`WL_ERR
(("GO SSID sëtögÉº‹ %d\n", 
îr
));

5265 
exô
;

5268 i‡((
îr
 = 
	`wl_cfgp2p_bss
(
wl
, 
dev
, 
bssidx
, 1)) < 0) {

5269 
	`WL_ERR
(("GO Brög u∞îr‹ %d\n", 
îr
));

5270 
exô
;

5273 
	`WL_DBG
(("Bss isálready up\n"));

5274 } i‡((
dev_rﬁe
 =
NL80211_IFTYPE_AP
) &&

5275 (
	`wl_gë_drv_°©us
(
wl
, 
AP_CREATING
, 
dev
))) {

5277 
îr
 = 
	`wldev_io˘l
(
dev
, 
WLC_DOWN
, &
≠
, (
s32
), 
åue
);

5278 i‡(
îr
 < 0) {

5279 
	`WL_ERR
(("WLC_DOWNÉº‹ %d\n", 
îr
));

5280 
exô
;

5282 
îr
 = 
	`wldev_io˘l
(
dev
, 
WLC_SET_INFRA
, &
ö‰a
, (
s32
), 
åue
);

5283 i‡(
îr
 < 0) {

5284 
	`WL_ERR
(("SET INFRAÉº‹ %d\n", 
îr
));

5285 
exô
;

5287 i‡((
îr
 = 
	`wldev_io˘l
(
dev
, 
WLC_SET_AP
, &
≠
, (
s32
), 
åue
)) < 0) {

5288 
	`WL_ERR
(("£âög AP modêÁûed %d \n", 
îr
));

5289 
exô
;

5292 
îr
 = 
	`wldev_io˘l
(
dev
, 
WLC_UP
, &
≠
, (
s32
), 
åue
);

5293 i‡(
	`u∆ikñy
(
îr
)) {

5294 
	`WL_ERR
(("WLC_UPÉº‹ (%d)\n", 
îr
));

5295 
exô
;

5298 
	`mem£t
(&
joö_∑øms
, 0, (join_params));

5300 
joö_∑øms_size
 = (
joö_∑øms
.
ssid
);

5301 
	`mem˝y
(
joö_∑øms
.
ssid
.
SSID
, 
wl
->
ho°≠d_ssid
.SSID,

5302 
wl
->
ho°≠d_ssid
.
SSID_Àn
);

5303 
joö_∑øms
.
ssid
.
SSID_Àn
 = 
	`htod32
(
wl
->
ho°≠d_ssid
.SSID_len);

5306 i‡((
îr
 = 
	`wldev_io˘l
(
dev
, 
WLC_SET_SSID
, &
joö_∑øms
,

5307 
joö_∑øms_size
, 
åue
)) == 0) {

5308 
	`WL_DBG
(("So·AP së SSID (%sËsuc˚ss\n", 
joö_∑øms
.
ssid
.
SSID
));

5309 
	`wl_˛r_drv_°©us
(
wl
, 
AP_CREATING
, 
dev
);

5310 
	`wl_£t_drv_°©us
(
wl
, 
AP_CREATED
, 
dev
);

5315 
exô
:

5316  
îr
;

5317 
	}
}

5319 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(3, 4, 0)

5320 
s32


5321 
	$wl_cfg80211_∑r£_£t_õs
(

5322 
√t_devi˚
 *
dev
,

5323 
cfg80211_bóc⁄_d©a
 *
öfo
,

5324 
∑r£d_õs
 *
õs
,

5325 
u32
 
dev_rﬁe
,

5326 
s32
 
bssidx
)

5328 
wl_¥iv
 *
wl
 = 
wlcfg_drv_¥iv
;

5329 
∑r£d_õs
 
¥b_õs
;

5330 
s32
 
îr
 = 
BCME_OK
;

5332 
	`mem£t
(
õs
, 0, (
∑r£d_õs
));

5333 
	`mem£t
(&
¥b_õs
, 0, (
∑r£d_õs
));

5336 i‡(
	`wl_cfg80211_∑r£_õs
((
u8
 *)
öfo
->
èû
,

5337 
öfo
->
èû_Àn
, 
õs
) < 0) {

5338 
	`WL_ERR
(("Beacon get IEs failed \n"));

5339 
îr
 = -
EINVAL
;

5340 
Áû
;

5344 i‡((
îr
 = 
	`wl_cfgp2p_£t_m™agemít_õ
(
wl
, 
dev
, 
bssidx
,

5345 
VNDR_IE_BEACON_FLAG
, (
u8
 *)
öfo
->
èû
,

5346 
öfo
->
èû_Àn
)) < 0) {

5347 
	`WL_ERR
(("Set Beacon IE Failed \n"));

5349 
	`WL_DBG
(("Applied Vndr IEs for Beacon \n"));

5353 i‡(
	`wl_cfg80211_∑r£_õs
((
u8
 *)
öfo
->
¥obîe•_õs
,

5354 
öfo
->
¥obîe•_õs_Àn
, &
¥b_õs
) < 0) {

5355 
	`WL_ERR
(("PRB RESP get IEs failed \n"));

5356 
îr
 = -
EINVAL
;

5357 
Áû
;

5361 i‡((
îr
 = 
	`wl_cfgp2p_£t_m™agemít_õ
(
wl
, 
dev
, 
bssidx
,

5362 
VNDR_IE_PRBRSP_FLAG
, (
u8
 *)
öfo
->
¥obîe•_õs
,

5363 
öfo
->
¥obîe•_õs_Àn
)) < 0) {

5364 
	`WL_ERR
(("Set Probe Resp IE Failed \n"));

5366 
	`WL_DBG
(("Applied Vndr IEs for Probe Resp \n"));

5369 
Áû
:

5371  
îr
;

5372 
	}
}

5375 
s32
 
	$wl_cfg80211_ho°≠d_£c
(

5376 
√t_devi˚
 *
dev
,

5377 
∑r£d_õs
 *
õs
,

5378 
s32
 
bssidx
)

5380 
boﬁ
 
upd©e_bss
 = 0;

5381 
wl_¥iv
 *
wl
 = 
wlcfg_drv_¥iv
;

5384 i‡(
õs
->
wps_õ
) {

5385 i‡(
wl
->
≠_öfo
->
wps_õ
 &&

5386 
	`memcmp
(
wl
->
≠_öfo
->
wps_õ
, 
õs
->wps_õ, ies->
wps_õ_Àn
)) {

5387 
	`WL_DBG
((" WPS IE is changed\n"));

5388 
	`k‰ì
(
wl
->
≠_öfo
->
wps_õ
);

5389 
wl
->
≠_öfo
->
wps_õ
 = 
	`kmemdup
(
õs
->wps_õ, ies->
wps_õ_Àn
, 
GFP_KERNEL
);

5390 } i‡(
wl
->
≠_öfo
->
wps_õ
 =
NULL
) {

5391 
	`WL_DBG
((" WPS IE isádded\n"));

5392 
wl
->
≠_öfo
->
wps_õ
 = 
	`kmemdup
(
õs
->wps_õ, ies->
wps_õ_Àn
, 
GFP_KERNEL
);

5394 i‡((
õs
->
w∑_õ
 !
NULL
 || ies->
w∑2_õ
 != NULL)) {

5395 i‡(!
wl
->
≠_öfo
->
£curôy_mode
) {

5397 
upd©e_bss
 = 
åue
;

5398 i‡(
õs
->
w∑_õ
 !
NULL
) {

5399 
wl
->
≠_öfo
->
w∑_õ
 = 
	`kmemdup
(
õs
->wpa_ie,

5400 
õs
->
w∑_õ
->
Àngth
 + 
WPA_RSN_IE_TAG_FIXED_LEN
,

5401 
GFP_KERNEL
);

5403 
wl
->
≠_öfo
->
r¢_õ
 = 
	`kmemdup
(
õs
->
w∑2_õ
,

5404 
õs
->
w∑2_õ
->
Àn
 + 
WPA_RSN_IE_TAG_FIXED_LEN
,

5405 
GFP_KERNEL
);

5407 } i‡(
wl
->
≠_öfo
->
w∑_õ
) {

5409 i‡(
õs
->
w∑_õ
 !
NULL
) {

5410 
upd©e_bss
 = 
åue
;

5411 
	`k‰ì
(
wl
->
≠_öfo
->
r¢_õ
);

5412 
wl
->
≠_öfo
->
r¢_õ
 = 
NULL
;

5413 
wl
->
≠_öfo
->
w∑_õ
 = 
	`kmemdup
(
õs
->wpa_ie,

5414 
õs
->
w∑_õ
->
Àngth
 + 
WPA_RSN_IE_TAG_FIXED_LEN
,

5415 
GFP_KERNEL
);

5416 } i‡(
	`memcmp
(
wl
->
≠_öfo
->
r¢_õ
,

5417 
õs
->
w∑2_õ
, ies->w∑2_õ->
Àn


5418 + 
WPA_RSN_IE_TAG_FIXED_LEN
)) {

5419 
upd©e_bss
 = 
åue
;

5420 
	`k‰ì
(
wl
->
≠_öfo
->
r¢_õ
);

5421 
wl
->
≠_öfo
->
r¢_õ
 = 
	`kmemdup
(
õs
->
w∑2_õ
,

5422 
õs
->
w∑2_õ
->
Àn
 + 
WPA_RSN_IE_TAG_FIXED_LEN
,

5423 
GFP_KERNEL
);

5424 
wl
->
≠_öfo
->
w∑_õ
 = 
NULL
;

5427 i‡(
upd©e_bss
) {

5428 
wl
->
≠_öfo
->
£curôy_mode
 = 
åue
;

5429 
	`wl_cfgp2p_bss
(
wl
, 
dev
, 
bssidx
, 0);

5430 i‡(
	`wl_vÆid©e_w∑2õ
(
dev
, 
õs
->
w∑2_õ
, 
bssidx
) < 0 ||

5431 
	`wl_vÆid©e_w∑õ
(
dev
, 
õs
->
w∑_õ
, 
bssidx
) < 0) {

5432  
BCME_ERROR
;

5434 
	`wl_cfgp2p_bss
(
wl
, 
dev
, 
bssidx
, 1);

5438 
	`WL_ERR
(("No WPSIE in beacon \n"));

5441 
	}
}

5443 #i‡
deföed
(
WL_SUPPORT_BACKPORTED_KPATCHES
Ë|| (
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(3, \

5445 
s32


5446 
	$wl_cfg80211_dñ_°©i⁄
(

5447 
wùhy
 *wiphy,

5448 
√t_devi˚
 *
ndev
,

5449 
u8
* 
mac_addr
)

5451 
√t_devi˚
 *
dev
;

5452 
wl_¥iv
 *
wl
 = 
	`wùhy_¥iv
(
wùhy
);

5453 
scb_vÆ_t
 
scb_vÆ
;

5454 
s8
 
óbuf
[
ETHER_ADDR_STR_LEN
];

5456 
	`WL_DBG
(("Entry\n"));

5457 i‡(
mac_addr
 =
NULL
) {

5458 
	`WL_DBG
(("mac_addr is NULL ignore it\n"));

5462 i‡(
ndev
 =
wl
->
p2p_√t
) {

5463 
dev
 = 
	`wl_to_¥mry_ndev
(
wl
);

5465 
dev
 = 
ndev
;

5468 i‡(
	`p2p_is_⁄
(
wl
)) {

5472 i‡((
	`wl_cfgp2p_discovî_íabÀ_£¨ch
(
wl
, 
Ál£
)) < 0) {

5473 
	`WL_ERR
(("CanÇot disable discovery mode\n"));

5474  -
EFAULT
;

5478 
	`mem˝y
(
scb_vÆ
.
ó
.
o˘ë
, 
mac_addr
, 
ETHER_ADDR_LEN
);

5479 
scb_vÆ
.
vÆ
 = 
DOT11_RC_DEAUTH_LEAVING
;

5480 i‡(
	`wldev_io˘l
(
dev
, 
WLC_SCB_DEAUTHENTICATE_FOR_REASON
, &
scb_vÆ
,

5481 (
scb_vÆ_t
), 
åue
))

5482 
	`WL_ERR
(("WLC_SCB_DEAUTHENTICATE_FOR_REASON failed\n"));

5483 
	`WL_DBG
(("Disconnect STA : %s scb_val.val %d\n",

5484 
	`bcm_ëhî_¡ﬂ
((c⁄° 
ëhî_addr
 *)
mac_addr
, 
óbuf
),

5485 
scb_vÆ
.
vÆ
));

5486 
	`wl_dñay
(400);

5488 
	}
}

5491 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(3, 4, 0)

5492 
s32


5493 
	$wl_cfg80211_°¨t_≠
(

5494 
wùhy
 *wiphy,

5495 
√t_devi˚
 *
dev
,

5496 
cfg80211_≠_£âögs
 *
öfo
)

5498 
wl_¥iv
 *
wl
 = 
	`wùhy_¥iv
(
wùhy
);

5499 
s32
 
îr
 = 
BCME_OK
;

5500 
∑r£d_õs
 
õs
;

5501 
s32
 
bssidx
 = 0;

5502 
u32
 
dev_rﬁe
 = 0;

5504 
	`WL_DBG
(("Enter \n"));

5505 i‡(
dev
 =
	`wl_to_¥mry_ndev
(
wl
)) {

5506 
	`WL_DBG
(("Start APÑeq onÖrimary iface: Softap\n"));

5507 
dev_rﬁe
 = 
NL80211_IFTYPE_AP
;

5508 } i‡(
dev
 =
wl
->
p2p_√t
) {

5510 
	`WL_DBG
(("Start APÑeq on P2P iface: GO\n"));

5511 
dev
 = 
	`wl_to_¥mry_ndev
(
wl
);

5512 
dev_rﬁe
 = 
NL80211_IFTYPE_P2P_GO
;

5515 
bssidx
 = 
	`wl_cfgp2p_föd_idx
(
wl
, 
dev
);

5516 i‡(
	`p2p_is_⁄
(
wl
) &&

5517 (
bssidx
 =
	`wl_to_p2p_bss_bssidx
(
wl
,

5518 
P2PAPI_BSSCFG_CONNECTION
))) {

5519 
dev_rﬁe
 = 
NL80211_IFTYPE_P2P_GO
;

5520 
	`WL_DBG
(("Start APÑeq on P2P connection iface\n"));

5523 i‡((
îr
 = 
	`wl_cfg80211_b˙_£t_∑øms
(
öfo
, 
dev
,

5524 
dev_rﬁe
, 
bssidx
)) < 0) {

5525 
	`WL_ERR
(("BeaconÖarams set failed \n"));

5526 
Áû
;

5530 i‡((
îr
 = 
	`wl_cfg80211_∑r£_£t_õs
(
dev
, &
öfo
->
bóc⁄
,

5531 &
õs
, 
dev_rﬁe
, 
bssidx
) < 0)) {

5532 
	`WL_ERR
(("Set IEs failed \n"));

5533 
Áû
;

5536 i‡((
	`wl_cfg80211_b˙_vÆid©e_£c
(
dev
, &
õs
,

5537 
dev_rﬁe
, 
bssidx
)) < 0)

5539 
	`WL_ERR
(("Beacon set security failed \n"));

5540 
Áû
;

5543 i‡((
îr
 = 
	`wl_cfg80211_b˙_brögup_≠
(
dev
, &
õs
,

5544 
dev_rﬁe
, 
bssidx
)) < 0) {

5545 
	`WL_ERR
(("Beacon bring up AP/GO failed \n"));

5546 
Áû
;

5549 
	`WL_DBG
(("** AP/GO Created **\n"));

5551 
Áû
:

5552 i‡(
îr
) {

5553 
	`WL_ERR
(("ADD/SET beacon failed\n"));

5554 
	`wldev_iov¨_£töt
(
dev
, "mpc", 1);

5557  
îr
;

5558 
	}
}

5560 
s32


5561 
	$wl_cfg80211_°›_≠
(

5562 
wùhy
 *wiphy,

5563 
√t_devi˚
 *
dev
)

5565 
îr
 = 0;

5566 
u32
 
dev_rﬁe
 = 0;

5567 
ö‰a
 = 0;

5568 
≠
 = 0;

5569 
s32
 
bssidx
 = 0;

5570 
wl_¥iv
 *
wl
 = 
	`wùhy_¥iv
(
wùhy
);

5572 
	`WL_DBG
(("Enter \n"));

5573 i‡(
dev
 =
	`wl_to_¥mry_ndev
(
wl
)) {

5574 
dev_rﬁe
 = 
NL80211_IFTYPE_AP
;

5575 } i‡(
dev
 =
wl
->
p2p_√t
) {

5577 
dev
 = 
	`wl_to_¥mry_ndev
(
wl
);

5578 
dev_rﬁe
 = 
NL80211_IFTYPE_P2P_GO
;

5580 
bssidx
 = 
	`wl_cfgp2p_föd_idx
(
wl
, 
dev
);

5581 i‡(
	`p2p_is_⁄
(
wl
) &&

5582 (
bssidx
 =
	`wl_to_p2p_bss_bssidx
(
wl
,

5583 
P2PAPI_BSSCFG_CONNECTION
))) {

5584 
dev_rﬁe
 = 
NL80211_IFTYPE_P2P_GO
;

5587 i‡(
dev_rﬁe
 =
NL80211_IFTYPE_AP
) {

5591 
îr
 = 
	`wldev_io˘l
(
dev
, 
WLC_SET_INFRA
, &
ö‰a
, (
s32
), 
åue
);

5592 i‡(
îr
 < 0) {

5593 
	`WL_ERR
(("SET INFRAÉº‹ %d\n", 
îr
));

5594 
îr
 = -
ENOTSUPP
;

5595 
exô
;

5597 i‡((
îr
 = 
	`wldev_io˘l
(
dev
, 
WLC_SET_AP
, &
≠
, (
s32
), 
åue
)) < 0) {

5598 
	`WL_ERR
(("£âög AP modêÁûed %d \n", 
îr
));

5599 
îr
 = -
ENOTSUPP
;

5600 
exô
;

5603 
îr
 = 
	`wldev_io˘l
(
dev
, 
WLC_UP
, &
≠
, (
s32
), 
åue
);

5604 i‡(
	`u∆ikñy
(
îr
)) {

5605 
	`WL_ERR
(("WLC_UPÉº‹ (%d)\n", 
îr
));

5606 
îr
 = -
EINVAL
;

5607 
exô
;

5610 
	`wl_˛r_drv_°©us
(
wl
, 
AP_CREATED
, 
dev
);

5612 
	`wldev_iov¨_£töt
(
dev
, "mpc", 1);

5614 
	`WL_DBG
(("Stopping P2P GO \n"));

5617 
exô
:

5618  
îr
;

5619 
	}
}

5621 
s32


5622 
	$wl_cfg80211_ch™ge_bóc⁄
(

5623 
wùhy
 *wiphy,

5624 
√t_devi˚
 *
dev
,

5625 
cfg80211_bóc⁄_d©a
 *
öfo
)

5627 
s32
 
îr
 = 
BCME_OK
;

5628 
wl_¥iv
 *
wl
 = 
	`wùhy_¥iv
(
wùhy
);

5629 
∑r£d_õs
 
õs
;

5630 
u32
 
dev_rﬁe
 = 0;

5631 
s32
 
bssidx
 = 0;

5633 
	`WL_DBG
(("Enter \n"));

5635 i‡(
dev
 =
	`wl_to_¥mry_ndev
(
wl
)) {

5636 
dev_rﬁe
 = 
NL80211_IFTYPE_AP
;

5637 } i‡(
dev
 =
wl
->
p2p_√t
) {

5639 
dev
 = 
	`wl_to_¥mry_ndev
(
wl
);

5640 
dev_rﬁe
 = 
NL80211_IFTYPE_P2P_GO
;

5643 
bssidx
 = 
	`wl_cfgp2p_föd_idx
(
wl
, 
dev
);

5644 i‡(
	`p2p_is_⁄
(
wl
) &&

5645 (
bssidx
 =
	`wl_to_p2p_bss_bssidx
(
wl
,

5646 
P2PAPI_BSSCFG_CONNECTION
))) {

5647 
dev_rﬁe
 = 
NL80211_IFTYPE_P2P_GO
;

5651 i‡((
îr
 = 
	`wl_cfg80211_∑r£_£t_õs
(
dev
, 
öfo
,

5652 &
õs
, 
dev_rﬁe
, 
bssidx
) < 0)) {

5653 
	`WL_ERR
(("Set IEs failed \n"));

5654 
Áû
;

5657 i‡(
dev_rﬁe
 =
NL80211_IFTYPE_AP
) {

5658 i‡(
	`wl_cfg80211_ho°≠d_£c
(
dev
, &
õs
, 
bssidx
) < 0) {

5659 
	`WL_ERR
(("Hostapd update sec failed \n"));

5660 
îr
 = -
EINVAL
;

5661 
Áû
;

5665 
Áû
:

5666  
îr
;

5667 
	}
}

5669 
s32


5670 
	$wl_cfg80211_add_£t_bóc⁄
(
wùhy
 *wùhy, 
√t_devi˚
 *
dev
,

5671 
bóc⁄_∑ømëîs
 *
öfo
)

5673 
s32
 
îr
 = 
BCME_OK
;

5674 
wl_¥iv
 *
wl
 = 
	`wùhy_¥iv
(
wùhy
);

5675 
s32
 
õ_off£t
 = 0;

5676 
s32
 
bssidx
 = 0;

5677 
u32
 
dev_rﬁe
 = 
NL80211_IFTYPE_AP
;

5678 
∑r£d_õs
 
õs
;

5679 
bcm_év_t
 *
ssid_õ
;

5680 
boﬁ
 
pbc
 = 0;

5682 
	`WL_DBG
(("interval (%d) dtim_period (%d) head_len (%d)Åail_len (%d)\n",

5683 
öfo
->
öãrvÆ
, info->
dtim_≥riod
, info->
hód_Àn
, info->
èû_Àn
));

5685 i‡(
dev
 =
	`wl_to_¥mry_ndev
(
wl
)) {

5686 
dev_rﬁe
 = 
NL80211_IFTYPE_AP
;

5687 } i‡(
dev
 =
wl
->
p2p_√t
) {

5689 
dev
 = 
	`wl_to_¥mry_ndev
(
wl
);

5690 
dev_rﬁe
 = 
NL80211_IFTYPE_P2P_GO
;

5693 
bssidx
 = 
	`wl_cfgp2p_föd_idx
(
wl
, 
dev
);

5694 i‡(
	`p2p_is_⁄
(
wl
) &&

5695 (
bssidx
 =
	`wl_to_p2p_bss_bssidx
(
wl
,

5696 
P2PAPI_BSSCFG_CONNECTION
))) {

5697 
dev_rﬁe
 = 
NL80211_IFTYPE_P2P_GO
;

5700 
õ_off£t
 = 
DOT11_MGMT_HDR_LEN
 + 
DOT11_BCN_PRB_FIXED_LEN
;

5702 i‡((
ssid_õ
 = 
	`bcm_∑r£_évs
((
u8
 *)&
öfo
->
hód
[
õ_off£t
],

5703 
öfo
->
hód_Àn
 - 
õ_off£t
,

5704 
DOT11_MNG_SSID_ID
)Ë!
NULL
) {

5705 i‡(
dev_rﬁe
 =
NL80211_IFTYPE_AP
) {

5707 
	`mem£t
(&
wl
->
ho°≠d_ssid
.
SSID
[0], 0x00, 32);

5708 
	`mem˝y
(&
wl
->
ho°≠d_ssid
.
SSID
[0], 
ssid_õ
->
d©a
, ssid_õ->
Àn
);

5709 
wl
->
ho°≠d_ssid
.
SSID_Àn
 = 
ssid_õ
->
Àn
;

5712 
	`mem£t
(&
wl
->
p2p
->
ssid
.
SSID
[0], 0x00, 32);

5713 
	`mem˝y
(
wl
->
p2p
->
ssid
.
SSID
, 
ssid_õ
->
d©a
, ssid_õ->
Àn
);

5714 
wl
->
p2p
->
ssid
.
SSID_Àn
 = 
ssid_õ
->
Àn
;

5718 i‡(
	`wl_cfg80211_∑r£_õs
((
u8
 *)
öfo
->
èû
,

5719 
öfo
->
èû_Àn
, &
õs
) < 0) {

5720 
	`WL_ERR
(("Beacon get IEs failed \n"));

5721 
îr
 = -
EINVAL
;

5722 
Áû
;

5725 i‡(
	`wl_cfgp2p_£t_m™agemít_õ
(
wl
, 
dev
, 
bssidx
,

5726 
VNDR_IE_BEACON_FLAG
, (
u8
 *)
öfo
->
èû
,

5727 
öfo
->
èû_Àn
) < 0) {

5728 
	`WL_ERR
(("Beacon set IEs failed \n"));

5729 
Áû
;

5731 
	`WL_DBG
(("Applied Vndr IEs for Beacon \n"));

5733 i‡(!
	`wl_cfgp2p_bss_isup
(
dev
, 
bssidx
) &&

5734 (
	`wl_cfg80211_b˙_vÆid©e_£c
(
dev
, &
õs
, 
dev_rﬁe
, 
bssidx
) < 0))

5736 
	`WL_ERR
(("Beacon set security failed \n"));

5737 
Áû
;

5741 i‡(
öfo
->
öãrvÆ
) {

5742 i‡((
îr
 = 
	`wldev_io˘l
(
dev
, 
WLC_SET_BCNPRD
,

5743 &
öfo
->
öãrvÆ
, (
s32
), 
åue
)) < 0) {

5744 
	`WL_ERR
(("Bóc⁄ I¡îvÆ Së Eº‹, %d\n", 
îr
));

5745  
îr
;

5748 i‡(
öfo
->
dtim_≥riod
) {

5749 i‡((
îr
 = 
	`wldev_io˘l
(
dev
, 
WLC_SET_DTIMPRD
,

5750 &
öfo
->
dtim_≥riod
, (
s32
), 
åue
)) < 0) {

5751 
	`WL_ERR
(("DTIM I¡îvÆ Së Eº‹, %d\n", 
îr
));

5752  
îr
;

5756 i‡(
	`wl_cfg80211_b˙_brögup_≠
(
dev
, &
õs
, 
dev_rﬁe
, 
bssidx
) < 0) {

5757 
	`WL_ERR
(("Beacon bring up AP/GO failed \n"));

5758 
Áû
;

5761 i‡(
	`wl_gë_drv_°©us
(
wl
, 
AP_CREATED
, 
dev
)) {

5763 i‡(
	`wl_cfg80211_ho°≠d_£c
(
dev
, &
õs
, 
bssidx
) < 0) {

5764 
	`WL_ERR
(("Hostapd update sec failed \n"));

5765 
îr
 = -
EINVAL
;

5766 
Áû
;

5771 i‡(((
dev_rﬁe
 =
NL80211_IFTYPE_P2P_GO
) ||

5772 (
dev_rﬁe
 =
NL80211_IFTYPE_AP
)Ë&& (
õs
.
wps_õ
 !
NULL
)) {

5773 
	`wl_vÆid©e_wps_õ
((*Ë
õs
.
wps_õ
, ies.
wps_õ_Àn
, &
pbc
);

5774 i‡(
pbc
)

5775 
	`wl_add_ªmove_evítmsg
(
dev
, 
WLC_E_PROBREQ_MSG
, 
åue
);

5778 
	`WL_DBG
(("** ADD/SET beacon done **\n"));

5780 
Áû
:

5781 i‡(
îr
) {

5782 
	`WL_ERR
(("ADD/SET beacon failed\n"));

5783 
	`wldev_iov¨_£töt
(
dev
, "mpc", 1);

5785  
îr
;

5787 
	}
}

5790 #ifde‡
WL_SCHED_SCAN


5791 
	#PNO_TIME
 30

	)

5792 
	#PNO_REPEAT
 4

	)

5793 
	#PNO_FREQ_EXPO_MAX
 2

	)

5794 
	$wl_cfg80211_sched_sˇn_°¨t
(
wùhy
 *wiphy,

5795 
√t_devi˚
 *
dev
,

5796 
cfg80211_sched_sˇn_ªque°
 *
ªque°
)

5798 
ush‹t
 
≤o_time
 = 
PNO_TIME
;

5799 
≤o_ª≥©
 = 
PNO_REPEAT
;

5800 
≤o_‰eq_expo_max
 = 
PNO_FREQ_EXPO_MAX
;

5801 
wlc_ssid_t
 
ssids_loˇl
[
MAX_PFN_LIST_COUNT
];

5802 
wl_¥iv
 *
wl
 = 
	`wùhy_¥iv
(
wùhy
);

5803 
cfg80211_ssid
 *
ssid
 = 
NULL
;

5804 
ssid_cou¡
 = 0;

5805 
i
;

5806 
ªt
 = 0;

5808 
	`WL_DBG
(("Enter \n"));

5809 
	`WL_PNO
((">>> SCHED SCAN START\n"));

5810 
	`WL_PNO
(("EnterÇ_match_sets:%dÇ_ssids:%d \n",

5811 
ªque°
->
n_m©ch_£ts
,Ñeque°->
n_ssids
));

5812 
	`WL_PNO
(("ssids:%dÖno_time:%dÖno_repeat:%dÖno_freq:%d \n",

5813 
ªque°
->
n_ssids
, 
≤o_time
, 
≤o_ª≥©
, 
≤o_‰eq_expo_max
));

5816 i‡(!
ªque°
 || !ªque°->
n_ssids
 || !ªque°->
n_m©ch_£ts
) {

5817 
	`WL_ERR
(("InvÆid sched sˇ¿ªq!!Ç_ssids:%d \n", 
ªque°
->
n_ssids
));

5818  -
EINVAL
;

5821 
	`mem£t
(&
ssids_loˇl
, 0, (ssids_local));

5823 i‡(
ªque°
->
n_m©ch_£ts
 > 0) {

5824 
i
 = 0; i < 
ªque°
->
n_m©ch_£ts
; i++) {

5825 
ssid
 = &
ªque°
->
m©ch_£ts
[
i
].ssid;

5826 
	`mem˝y
(
ssids_loˇl
[
i
].
SSID
, 
ssid
->ssid, ssid->
ssid_Àn
);

5827 
ssids_loˇl
[
i
].
SSID_Àn
 = 
ssid
->
ssid_Àn
;

5828 
	`WL_PNO
((">>> PNO fûã∏£àf‹ ssid (%sË\n", 
ssid
->ssid));

5829 
ssid_cou¡
++;

5833 i‡(
ªque°
->
n_ssids
 > 0) {

5834 
i
 = 0; i < 
ªque°
->
n_ssids
; i++) {

5836 
	`WL_PNO
((">>> A˘ivêsˇ¿ªq f‹ ssid (%sË\n", 
ªque°
->
ssids
[
i
].
ssid
));

5844 i‡(
ssid_cou¡
) {

5845 i‡((
ªt
 = 
	`dhd_dev_≤o_£t
(
dev
, 
ssids_loˇl
, 
ªque°
->
n_m©ch_£ts
,

5846 
≤o_time
, 
≤o_ª≥©
, 
≤o_‰eq_expo_max
)) < 0) {

5847 
	`WL_ERR
(("PNO sëu∞Áûed!!Ñë=%d \n", 
ªt
));

5848  -
EINVAL
;

5852 i‡(
	`dhd_dev_≤o_íabÀ
(
dev
, 1) < 0) {

5853 
	`WL_ERR
(("PNOÉ«bÀ faûed!!Ñë=%d \n", 
ªt
));

5854  -
EINVAL
;

5856 
wl
->
sched_sˇn_ªq
 = 
ªque°
;

5858  -
EINVAL
;

5862 
	}
}

5864 
	$wl_cfg80211_sched_sˇn_°›
(
wùhy
 *wùhy, 
√t_devi˚
 *
dev
)

5866 
wl_¥iv
 *
wl
 = 
	`wùhy_¥iv
(
wùhy
);

5868 
	`WL_DBG
(("Enter \n"));

5869 
	`WL_PNO
((">>> SCHED SCAN STOP\n"));

5871 i‡(
	`dhd_dev_≤o_íabÀ
(
dev
, 0) < 0)

5872 
	`WL_ERR
(("PNO disable failed"));

5874 i‡(
	`dhd_dev_≤o_ª£t
(
dev
) < 0)

5875 
	`WL_ERR
(("PNOÑeset failed"));

5877 i‡(
wl
->
sˇn_ªque°
 && wl->
sched_sˇn_ru¬ög
) {

5878 
	`WL_PNO
((">>> Sched scanÑunning. Aborting it..\n"));

5879 
	`wl_nŸify_esˇn_com∂ëe
(
wl
, 
dev
, 
åue
,Årue);

5882 
wl
->
sched_sˇn_ªq
 = 
NULL
;

5883 
wl
->
sched_sˇn_ru¬ög
 = 
FALSE
;

5886 
	}
}

5889 
cfg80211_›s
 
	gwl_cfg80211_›s
 = {

5890 .
add_vútuÆ_ötf
 = 
wl_cfg80211_add_vútuÆ_iÁ˚
,

5891 .
	gdñ_vútuÆ_ötf
 = 
wl_cfg80211_dñ_vútuÆ_iÁ˚
,

5892 .
	gch™ge_vútuÆ_ötf
 = 
wl_cfg80211_ch™ge_vútuÆ_iÁ˚
,

5893 .
	gsˇn
 = 
wl_cfg80211_sˇn
,

5894 .
	g£t_wùhy_∑øms
 = 
wl_cfg80211_£t_wùhy_∑øms
,

5895 .
	gjoö_ibss
 = 
wl_cfg80211_joö_ibss
,

5896 .
	gÀave_ibss
 = 
wl_cfg80211_Àave_ibss
,

5897 .
	ggë_°©i⁄
 = 
wl_cfg80211_gë_°©i⁄
,

5898 .
	g£t_tx_powî
 = 
wl_cfg80211_£t_tx_powî
,

5899 .
	ggë_tx_powî
 = 
wl_cfg80211_gë_tx_powî
,

5900 .
	gadd_key
 = 
wl_cfg80211_add_key
,

5901 .
	gdñ_key
 = 
wl_cfg80211_dñ_key
,

5902 .
	ggë_key
 = 
wl_cfg80211_gë_key
,

5903 .
	g£t_deÁu…_key
 = 
wl_cfg80211_c⁄fig_deÁu…_key
,

5904 .
	g£t_deÁu…_mgmt_key
 = 
wl_cfg80211_c⁄fig_deÁu…_mgmt_key
,

5905 .
	g£t_powî_mgmt
 = 
wl_cfg80211_£t_powî_mgmt
,

5906 .
	gc⁄√˘
 = 
wl_cfg80211_c⁄√˘
,

5907 .
	gdisc⁄√˘
 = 
wl_cfg80211_disc⁄√˘
,

5908 .
	gsu•íd
 = 
wl_cfg80211_su•íd
,

5909 .
	gªsume
 = 
wl_cfg80211_ªsume
,

5910 .
	g£t_pmkß
 = 
wl_cfg80211_£t_pmkß
,

5911 .
	gdñ_pmkß
 = 
wl_cfg80211_dñ_pmkß
,

5912 .
	gÊush_pmkß
 = 
wl_cfg80211_Êush_pmkß
,

5913 .
	gªmaö_⁄_ch™√l
 = 
wl_cfg80211_ªmaö_⁄_ch™√l
,

5914 .
	gˇn˚l_ªmaö_⁄_ch™√l
 = 
wl_cfg80211_ˇn˚l_ªmaö_⁄_ch™√l
,

5915 .
	gmgmt_tx
 = 
wl_cfg80211_mgmt_tx
,

5916 .
	gmgmt_‰ame_ªgi°î
 = 
wl_cfg80211_mgmt_‰ame_ªgi°î
,

5917 .
	gch™ge_bss
 = 
wl_cfg80211_ch™ge_bss
,

5918 .
	g£t_ch™√l
 = 
wl_cfg80211_£t_ch™√l
,

5919 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(3, 4, 0)

5920 .
	g£t_bóc⁄
 = 
wl_cfg80211_add_£t_bóc⁄
,

5921 .
	gadd_bóc⁄
 = 
wl_cfg80211_add_£t_bóc⁄
,

5923 .
	gch™ge_bóc⁄
 = 
wl_cfg80211_ch™ge_bóc⁄
,

5924 .
	g°¨t_≠
 = 
wl_cfg80211_°¨t_≠
,

5925 .
	g°›_≠
 = 
wl_cfg80211_°›_≠
,

5927 #ifde‡
WL_SCHED_SCAN


5928 .
	gsched_sˇn_°¨t
 = 
wl_cfg80211_sched_sˇn_°¨t
,

5929 .
	gsched_sˇn_°›
 = 
wl_cfg80211_sched_sˇn_°›
,

5931 #i‡
deföed
(
WL_SUPPORT_BACKPORTED_KPATCHES
Ë|| (
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(3, \

5933 .
	gdñ_°©i⁄
 = 
wl_cfg80211_dñ_°©i⁄
,

5934 .
	gmgmt_tx_ˇn˚l_waô
 = 
wl_cfg80211_mgmt_tx_ˇn˚l_waô
,

5938 
s32
 
	$wl_mode_to_∆80211_i·y≥
(
s32
 
mode
)

5940 
s32
 
îr
 = 0;

5942 
mode
) {

5943 
WL_MODE_BSS
:

5944  
NL80211_IFTYPE_STATION
;

5945 
WL_MODE_IBSS
:

5946  
NL80211_IFTYPE_ADHOC
;

5947 
WL_MODE_AP
:

5948  
NL80211_IFTYPE_AP
;

5950  
NL80211_IFTYPE_UNSPECIFIED
;

5953  
îr
;

5954 
	}
}

5957 
	$wl_cfg80211_ªg_nŸifõr
(

5958 
wùhy
 *wiphy,

5959 
ªguœt‹y_ªque°
 *
ªque°
)

5961 
wl_¥iv
 *
wl
 = (wl_¥iv *)
	`wùhy_¥iv
(
wùhy
);

5962 
wl_cou¡ry_t
 
c•ec
 = {{0}, 0, {0} };

5963 
ªt
 = 0;

5965 i‡(!
ªque°
 || !
wl
) {

5966 
	`WL_ERR
(("Invalidárg\n"));

5967  -
EINVAL
;

5970 
	`WL_DBG
(("ccode: %c%c Initiator: %d\n",

5971 
ªque°
->
Æpha2
[0],Ñeque°->Æpha2[1],Ñeque°->
öôüt‹
));

5974 i‡(
ªque°
->
öôüt‹
 !
NL80211_REGDOM_SET_BY_USER
) {

5975 
	`WL_ERR
(("reg_notifier for intiator:%dÇot supported \n",

5976 
ªque°
->
öôüt‹
));

5977  -
ENOTSUPP
;

5980 i‡(
ªque°
->
Æpha2
[0] == '0' &&Ñequest->alpha2[1] == '0') {

5982 
	`WL_ERR
(("World domain. Setting XY/4 \n"));

5983 
	`°∫˝y
(
c•ec
.
cou¡ry_abbªv
, "XY", 
	`°æí
("XY"));

5984 
c•ec
.
ªv
 = 4;

5986 
	`mem˝y
(
c•ec
.
cou¡ry_abbªv
, 
ªque°
->
Æpha2
, 2);

5987 
c•ec
.
cou¡ry_abbªv
[3] = '\0';

5988 
c•ec
.
ªv
 = -1;

5991 i‡((
ªt
 = 
	`wldev_iov¨_£tbuf
(
	`wl_to_¥mry_ndev
(
wl
), "cou¡ry", (*)&
c•ec
,

5992 (
c•ec
), 
wl
->
io˘l_buf
, 
WLC_IOCTL_SMLEN
, 
NULL
)) < 0) {

5993 
	`WL_ERR
(("£àcou¡ry Faûed :%d\n", 
ªt
));

5994 
exô
;

5997 i‡((
ªt
 = 
	`wl_upd©e_wùhyb™ds
(
wl
, 
Ál£
)) < 0) {

5998 
	`WL_ERR
(("wl_update_wiphybands failed\n"));

5999 
exô
;

6002 
	`WL_DBG
(("%s: set country '%s/%d' done\n",

6003 
__FUNCTION__
, 
c•ec
.
cou¡ry_abbªv
, c•ec.
ªv
));

6005 
exô
:

6006  
ªt
;

6007 
	}
}

6009 
s32
 
	$wl_£tup_wùhy
(
wúñess_dev
 *
wdev
, 
devi˚
 *
sdiofunc_dev
)

6011 
s32
 
îr
 = 0;

6012 
wdev
->
wùhy
 =

6013 
	`wùhy_√w
(&
wl_cfg80211_›s
, (
wl_¥iv
));

6014 i‡(
	`u∆ikñy
(!
wdev
->
wùhy
)) {

6015 
	`WL_ERR
(("CouldnÇotállocate wiphy device\n"));

6016 
îr
 = -
ENOMEM
;

6017  
îr
;

6019 
	`£t_wùhy_dev
(
wdev
->
wùhy
, 
sdiofunc_dev
);

6020 
wdev
->
wùhy
->
max_sˇn_õ_Àn
 = 
WL_SCAN_IE_LEN_MAX
;

6022 
wdev
->
wùhy
->
max_sˇn_ssids
 = 
WL_SCAN_PARAMS_SSID_MAX
;

6023 
wdev
->
wùhy
->
max_num_pmkids
 = 
WL_NUM_PMKIDS_MAX
;

6024 #ifde‡
WL_SCHED_SCAN


6025 
wdev
->
wùhy
->
max_sched_sˇn_ssids
 = 
MAX_PFN_LIST_COUNT
;

6026 
wdev
->
wùhy
->
max_m©ch_£ts
 = 
MAX_PFN_LIST_COUNT
;

6027 
wdev
->
wùhy
->
max_sched_sˇn_õ_Àn
 = 
WL_SCAN_IE_LEN_MAX
;

6028 
wdev
->
wùhy
->
Êags
 |
WIPHY_FLAG_SUPPORTS_SCHED_SCAN
;

6030 
wdev
->
wùhy
->
öãrÁ˚_modes
 =

6031 
	`BIT
(
NL80211_IFTYPE_STATION
)

6032 #i‡!(
	`deföed
(
WLP2P
Ë&& deföed(
WL_ENABLE_P2P_IF
))

6033 | 
	`BIT
(
NL80211_IFTYPE_MONITOR
)

6035 | 
	`BIT
(
NL80211_IFTYPE_AP
);

6037 
wdev
->
wùhy
->
b™ds
[
IEEE80211_BAND_2GHZ
] = &
__wl_b™d_2ghz
;

6039 
wdev
->
wùhy
->
sig«l_ty≥
 = 
CFG80211_SIGNAL_TYPE_MBM
;

6040 
wdev
->
wùhy
->
cùhî_suôes
 = 
__wl_cùhî_suôes
;

6041 
wdev
->
wùhy
->
n_cùhî_suôes
 = 
	`ARRAY_SIZE
(
__wl_cùhî_suôes
);

6042 
wdev
->
wùhy
->
max_ªmaö_⁄_ch™√l_duøti⁄
 = 5000;

6043 
wdev
->
wùhy
->
mgmt_°y≥s
 = 
wl_cfg80211_deÁu…_mgmt_°y≥s
;

6044 #i‚de‡
WL_POWERSAVE_DISABLED


6045 
wdev
->
wùhy
->
Êags
 |
WIPHY_FLAG_PS_ON_BY_DEFAULT
;

6047 
wdev
->
wùhy
->
Êags
 &~
WIPHY_FLAG_PS_ON_BY_DEFAULT
;

6049 
wdev
->
wùhy
->
Êags
 |
WIPHY_FLAG_NETNS_OK
 |

6050 
WIPHY_FLAG_4ADDR_AP
 |

6051 #i‡
LINUX_VERSION_CODE
 <
	`KERNEL_VERSION
(2, 6, 39)

6052 
WIPHY_FLAG_SUPPORTS_SEPARATE_DEFAULT_KEYS
 |

6054 
WIPHY_FLAG_4ADDR_STATION
;

6064 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(3, 2, 0)

6067 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(3, 3, 0)

6068 
wdev
->
wùhy
->
Êags
 |
WIPHY_FLAG_HAS_REMAIN_ON_CHANNEL
 |

6069 
WIPHY_FLAG_OFFCHAN_TX
;

6071 #i‡
	`deföed
(
WL_SUPPORT_BACKPORTED_KPATCHES
Ë|| (
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(3, \

6076 
wdev
->
wùhy
->
Êags
 |
WIPHY_FLAG_HAVE_AP_SME
;

6079 
wdev
->
wùhy
->
ªg_nŸifõr
 = 
wl_cfg80211_ªg_nŸifõr
;

6081 
	`WL_DBG
(("Registering customÑegulatory)\n"));

6082 
wdev
->
wùhy
->
Êags
 |
WIPHY_FLAG_CUSTOM_REGULATORY
;

6083 
	`wùhy_≠∂y_cu°om_ªguœt‹y
(
wdev
->
wùhy
, &
brcm_ªgdom
);

6085 
îr
 = 
	`wùhy_ªgi°î
(
wdev
->
wùhy
);

6086 i‡(
	`u∆ikñy
(
îr
 < 0)) {

6087 
	`WL_ERR
(("Could¿nŸÑegi°î wùhy devi˚ (%d)\n", 
îr
));

6088 
	`wùhy_‰ì
(
wdev
->
wùhy
);

6090  
îr
;

6091 
	}
}

6093 
	$wl_‰ì_wdev
(
wl_¥iv
 *
wl
)

6095 
wúñess_dev
 *
wdev
 = 
wl
->wdev;

6096 
wùhy
 *wiphy;

6097 i‡(!
wdev
) {

6098 
	`WL_ERR
(("wdev is invalid\n"));

6101 
wùhy
 = 
wdev
->wiphy;

6102 
	`wùhy_uƒegi°î
(
wdev
->
wùhy
);

6103 
wdev
->
wùhy
->
dev
.
∑ª¡
 = 
NULL
;

6105 
	`wl_dñëe_Æl_√töfo
(
wl
);

6106 
	`wùhy_‰ì
(
wùhy
);

6110 
	}
}

6112 #i‡
deföed
(
RSSIAVG
)

6113 
wl_rssi_ˇche_˘æ_t
 
	gg_rssi_ˇche_˘æ
;

6115 #i‡
deföed
(
BSSCACHE
)

6116 
wl_bss_ˇche_˘æ_t
 
	gg_bss_ˇche_˘æ
;

6119 
s32
 
	$wl_öf‹m_bss
(
wl_¥iv
 *
wl
)

6121 
wl_sˇn_ªsu…s
 *
bss_li°
;

6122 
wl_bss_öfo
 *
bi
 = 
NULL
;

6123 
s32
 
îr
 = 0;

6124 
s32
 
i
;

6125 #i‡
	`deföed
(
RSSIAVG
)

6126 
√t_devi˚
 *
ndev
 = 
	`wl_to_¥mry_ndev
(
wl
);

6128 #i‡
	`deföed
(
BSSCACHE
)

6129 
wl_bss_ˇche_t
 *
node
;

6132 
bss_li°
 = 
wl
->bss_list;

6133 #i‡
	`deföed
(
BSSCACHE
)

6134 i‡(
g_bss_ˇche_˘æ
.
m_timî_expúed
 || (
	`p2p_is_⁄
(
wl
Ë&& 
	`p2p_sˇn
(wl))) {

6135 #i‡
	`deföed
(
RSSIAVG
)

6136 
	`wl_‰ì_rssi_ˇche
(&
g_rssi_ˇche_˘æ
);

6138 
	`wl_‰ì_bss_ˇche
(&
g_bss_ˇche_˘æ
);

6139 
g_bss_ˇche_˘æ
.
m_timî_expúed
 ^= 1;

6141 
	`wl_upd©e_bss_ˇche
(&
g_bss_ˇche_˘æ
, 
bss_li°
);

6142 
	`wl_dñëe_dúty_bss_ˇche
(&
g_bss_ˇche_˘æ
);

6143 
	`wl_ª£t_bss_ˇche
(&
g_bss_ˇche_˘æ
);

6146 #i‡
	`deföed
(
RSSIAVG
)

6147 #i‡
	`deföed
(
BSSCACHE
)

6148 
node
 = 
g_bss_ˇche_˘æ
.
m_ˇche_hód
;

6149 ;
node
;) {

6150 
	`wl_upd©e_rssi_ˇche
(&
g_rssi_ˇche_˘æ
, &
node
->
ªsu…s
);

6151 
node
 =Çode->
√xt
;

6154 
	`wl_upd©e_rssi_ˇche
(&
g_rssi_ˇche_˘æ
, 
bss_li°
);

6156 i‡(!
	`ö_©omic
())

6157 
	`wl_upd©e_c⁄√˘ed_rssi_ˇche
(&
g_rssi_ˇche_˘æ
, 
ndev
);

6158 
	`wl_dñëe_dúty_rssi_ˇche
(&
g_rssi_ˇche_˘æ
);

6159 
	`wl_ª£t_rssi_ˇche
(&
g_rssi_ˇche_˘æ
);

6162 
	`WL_SCAN
(("sˇ¬ed AP cou¡ (%d)\n", 
bss_li°
->
cou¡
));

6164 #i‡
	`deföed
(
BSSCACHE
)

6165 
node
 = 
g_bss_ˇche_˘æ
.
m_ˇche_hód
;

6166 
i
=0; 
node
 && i<
WL_AP_MAX
; i++) {

6167 
bi
 = 
node
->
ªsu…s
.
bss_öfo
;

6168 
îr
 = 
	`wl_öf‹m_sögÀ_bss
(
wl
, 
bi
, 0);

6169 i‡(
	`u∆ikñy
(
îr
))

6171 
node
 =Çode->
√xt
;

6173 
	`wl_run_bss_ˇche_timî
(&
g_bss_ˇche_˘æ
, 0);

6174 
	`wl_run_bss_ˇche_timî
(&
g_bss_ˇche_˘æ
, 1);

6176 
bi
 = 
	`√xt_bss
(
bss_li°
, bi);

6177 
	`f‹_óch_bss
(
bss_li°
, 
bi
, 
i
) {

6178 
îr
 = 
	`wl_öf‹m_sögÀ_bss
(
wl
, 
bi
, 0);

6179 i‡(
	`u∆ikñy
(
îr
))

6183  
îr
;

6184 
	}
}

6186 
s32
 
	$wl_öf‹m_sögÀ_bss
(
wl_¥iv
 *
wl
, 
wl_bss_öfo
 *
bi
, 
u8
 
is_rﬂm_d⁄e
)

6188 
wùhy
 *wùhy = 
	`wl_to_wùhy
(
wl
);

6189 
õì80211_mgmt
 *
mgmt
;

6190 
õì80211_ch™√l
 *
ch™√l
;

6191 
õì80211_suµ‹ãd_b™d
 *
b™d
;

6192 
wl_cfg80211_bss_öfo
 *
nŸif_bss_öfo
;

6193 
wl_sˇn_ªq
 *
§
 = 
	`wl_to_§
(
wl
);

6194 
bóc⁄_¥obîe•
 *beacon_proberesp;

6195 
cfg80211_bss
 *
cbss
 = 
NULL
;

6196 
s32
 
mgmt_ty≥
;

6197 
s32
 
sig«l
;

6198 
u32
 
‰eq
;

6199 
s32
 
îr
 = 0;

6200 
gÂ_t
 
aÊags
;

6201 
u8
 *
õ_off£t
 = 
NULL
;

6203 i‡(
	`u∆ikñy
(
	`dtoh32
(
bi
->
Àngth
Ë> 
WL_BSS_INFO_MAX
)) {

6204 
	`WL_DBG
(("Beacon isÜargerÅhan buffer. Discarding\n"));

6205  
îr
;

6207 
aÊags
 = (
	`ö_©omic
()Ë? 
GFP_ATOMIC
 : 
GFP_KERNEL
;

6208 
nŸif_bss_öfo
 = 
	`kzÆloc
((*nŸif_bss_öfoË+ (*
mgmt
)

6209 - (
u8
Ë+ 
WL_BSS_INFO_MAX
, 
aÊags
);

6210 i‡(
	`u∆ikñy
(!
nŸif_bss_öfo
)) {

6211 
	`WL_ERR
(("notif_bss_infoálloc failed\n"));

6212  -
ENOMEM
;

6214 
mgmt
 = (
õì80211_mgmt
 *)
nŸif_bss_öfo
->
‰ame_buf
;

6215 
nŸif_bss_öfo
->
ch™√l
 =

6216 
bi
->
˘l_ch
 ? bi->˘l_ch : 
	`CHSPEC_CHANNEL
(
	`wl_ch•ec_drivî_to_ho°
(bi->
ch™•ec
));

6218 i‡(
nŸif_bss_öfo
->
ch™√l
 <
CH_MAX_2G_CHANNEL
)

6219 
b™d
 = 
wùhy
->
b™ds
[
IEEE80211_BAND_2GHZ
];

6221 
b™d
 = 
wùhy
->
b™ds
[
IEEE80211_BAND_5GHZ
];

6222 i‡(!
b™d
) {

6223 
	`WL_ERR
(("No valid band"));

6224 
	`k‰ì
(
nŸif_bss_öfo
);

6225  -
EINVAL
;

6227 
nŸif_bss_öfo
->
rssi
 = 
	`dtoh16
(
bi
->
RSSI
);

6228 #i‡
	`deföed
(
RSSIAVG
)

6229 
nŸif_bss_öfo
->
rssi
 = 
	`wl_gë_avg_rssi
(&
g_rssi_ˇche_˘æ
, &
bi
->
BSSID
);

6231 #i‡
	`deföed
(
RSSIOFFSET
)

6232 
nŸif_bss_öfo
->
rssi
 = 
	`wl_upd©e_rssi_off£t
(notif_bss_info->rssi);

6234 
	`mem˝y
(
mgmt
->
bssid
, &
bi
->
BSSID
, 
ETHER_ADDR_LEN
);

6235 
mgmt_ty≥
 = 
wl
->
a˘ive_sˇn
 ?

6236 
IEEE80211_STYPE_PROBE_RESP
 : 
IEEE80211_STYPE_BEACON
;

6237 i‡(!
	`memcmp
(
bi
->
SSID
, 
§
->
ssid
.SSID, bi->
SSID_Àn
)) {

6238 
mgmt
->
‰ame_c⁄åﬁ
 = 
	`˝u_to_À16
(
IEEE80211_FTYPE_MGMT
 | 
mgmt_ty≥
);

6240 
bóc⁄_¥obîe•
 = 
wl
->
a˘ive_sˇn
 ?

6241 (
bóc⁄_¥obîe•
 *)&
mgmt
->
u
.
¥obe_ª•
 :

6242 (
bóc⁄_¥obîe•
 *)&
mgmt
->
u
.
bóc⁄
;

6243 
bóc⁄_¥obîe•
->
time°amp
 = 0;

6244 
bóc⁄_¥obîe•
->
bóc⁄_öt
 = 
	`˝u_to_À16
(
bi
->
bóc⁄_≥riod
);

6245 
bóc⁄_¥obîe•
->
ˇ∑b_öfo
 = 
	`˝u_to_À16
(
bi
->
ˇ∑bûôy
);

6246 
	`wl_r°_õ
(
wl
);

6248 
õ_off£t
 = ((
u8
 *Ë
bi
) + bi->ie_offset;

6250 i‡(
is_rﬂm_d⁄e
 && (()(*(
õ_off£t
)Ë=
WLAN_EID_SSID
 &&

6251 (()(*(
õ_off£t
+1)) == 0 || ()(*(ie_offset+2)) == 0))) {

6252 
u8
 *
õ_√w_off£t
 = 
NULL
;

6253 
uöt8
 
õ_√w_Àngth
;

6255 
	`WL_ERR
(("WARÅrace: ChangingÅhe SSID Info, from beacon %d\n",

6256 
bi
->
Êags
 & 
WL_BSS_FLAGS_FROM_BEACON
));

6258 
õ_√w_off£t
 = (
u8
 *)
	`kzÆloc
(
WL_BSS_INFO_MAX
, 
GFP_KERNEL
);

6259 i‡(
õ_√w_off£t
) {

6260 *(
õ_√w_off£t
Ë
WLAN_EID_SSID
;

6261 *(
õ_√w_off£t
+1Ë
bi
->
SSID_Àn
;

6262 
	`mem˝y
(
õ_√w_off£t
+2, 
bi
->
SSID
, bi->
SSID_Àn
);

6263 
õ_√w_Àngth
 = 
bi
->
õ_Àngth
 - *(
õ_off£t
+1Ë+ bi->
SSID_Àn
;

6266 
	`mem˝y
(
õ_√w_off£t
+2 + 
bi
->
SSID_Àn
,

6267 
õ_off£t
+2 + *(ie_offset+1),

6268 
bi
->
õ_Àngth
 - 2 - *(
õ_off£t
+1));

6269 
	`wl_mrg_õ
(
wl
, 
õ_√w_off£t
, 
õ_√w_Àngth
);

6270 
	`k‰ì
(
õ_√w_off£t
);

6272 
	`wl_mrg_õ
(
wl
, ((
u8
 *Ë
bi
Ë+ bi->
õ_off£t
, bi->
õ_Àngth
);

6275 
	`wl_mrg_õ
(
wl
, ((
u8
 *Ë
bi
Ë+ bi->
õ_off£t
, bi->
õ_Àngth
);

6278 
	`wl_˝_õ
(
wl
, 
bóc⁄_¥obîe•
->
v¨übÀ
, 
WL_BSS_INFO_MAX
 -

6279 
	`off£tof
(
wl_cfg80211_bss_öfo
, 
‰ame_buf
));

6280 
nŸif_bss_öfo
->
‰ame_Àn
 = 
	`off£tof
(
õì80211_mgmt
,

6281 
u
.
bóc⁄
.
v¨übÀ
Ë+ 
	`wl_gë_õÀn
(
wl
);

6282 #i‡
LINUX_VERSION_CODE
 =
	`KERNEL_VERSION
(2, 6, 38Ë&& !
	`deföed
(
WL_COMPAT_WIRELESS
)

6283 
‰eq
 = 
	`õì80211_ch™√l_to_‰equícy
(
nŸif_bss_öfo
->
ch™√l
);

6284 ()
b™d
->band;

6286 
‰eq
 = 
	`õì80211_ch™√l_to_‰equícy
(
nŸif_bss_öfo
->
ch™√l
, 
b™d
->band);

6288 i‡(
‰eq
 == 0) {

6289 
	`WL_ERR
(("Invalid channel, failÅo chcnage channelÅo freq\n"));

6290 
	`k‰ì
(
nŸif_bss_öfo
);

6291  -
EINVAL
;

6293 
ch™√l
 = 
	`õì80211_gë_ch™√l
(
wùhy
, 
‰eq
);

6294 i‡(
	`u∆ikñy
(!
ch™√l
)) {

6295 
	`WL_ERR
(("ieee80211_get_channelÉrror\n"));

6296 
	`k‰ì
(
nŸif_bss_öfo
);

6297  -
EINVAL
;

6299 
	`WL_SCAN
(("BSSID %pM, channel %d,Ñssi %d, capability 0x04%x, mgmt_type %d, "

6300 "‰ame_À¿%d, SSID \"%s\"\n", &
bi
->
BSSID
, 
nŸif_bss_öfo
->
ch™√l
,

6301 
nŸif_bss_öfo
->
rssi
, 
mgmt
->
u
.
bóc⁄
.
ˇ∑b_öfo
, 
mgmt_ty≥
,

6302 
nŸif_bss_öfo
->
‰ame_Àn
, 
bi
->
SSID
));

6304 
sig«l
 = 
nŸif_bss_öfo
->
rssi
 * 100;

6305 i‡(!
mgmt
->
u
.
¥obe_ª•
.
time°amp
) {

6306 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 39)

6307 
time•ec
 
ts
;

6308 
	`gë_m⁄Ÿ⁄ic_boŸtime
(&
ts
);

6309 
mgmt
->
u
.
¥obe_ª•
.
time°amp
 = ((
u64
)
ts
.
tv_£c
*1000000)

6310 + 
ts
.
tv_n£c
 / 1000;

6312 
timevÆ
 
tv
;

6313 
	`do_gëtimeofday
(&
tv
);

6314 
mgmt
->
u
.
¥obe_ª•
.
time°amp
 = ((
u64
)
tv
.
tv_£c
*1000000)

6315 + 
tv
.
tv_u£c
;

6319 
cbss
 = 
	`cfg80211_öf‹m_bss_‰ame
(
wùhy
, 
ch™√l
, 
mgmt
,

6320 
	`À16_to_˝u
(
nŸif_bss_öfo
->
‰ame_Àn
), 
sig«l
, 
aÊags
);

6321 i‡(
	`u∆ikñy
(!
cbss
)) {

6322 
	`WL_ERR
(("cfg80211_inform_bss_frameÉrror\n"));

6323 
	`k‰ì
(
nŸif_bss_öfo
);

6324  -
EINVAL
;

6327 
	`cfg80211_put_bss
(
cbss
);

6328 
	`k‰ì
(
nŸif_bss_öfo
);

6329  
îr
;

6330 
	}
}

6332 
boﬁ
 
	$wl_is_lökup
(
wl_¥iv
 *
wl
, c⁄° 
wl_evít_msg_t
 *
e
, 
√t_devi˚
 *
ndev
)

6334 
u32
 
evít
 = 
	`¡oh32
(
e
->
evít_ty≥
);

6335 
u32
 
°©us
 = 
	`¡oh32
(
e
->status);

6336 
u16
 
Êags
 = 
	`¡oh16
(
e
->flags);

6338 
	`WL_DBG
(("evíà%d, sètu†%d fœg†%x\n", 
evít
, 
°©us
, 
Êags
));

6339 i‡(
evít
 =
WLC_E_SET_SSID
) {

6340 i‡(
°©us
 =
WLC_E_STATUS_SUCCESS
) {

6341 i‡(!
	`wl_is_ibssmode
(
wl
, 
ndev
))

6342  
åue
;

6344 } i‡(
evít
 =
WLC_E_LINK
) {

6345 i‡(
Êags
 & 
WLC_EVENT_MSG_LINK
)

6346  
åue
;

6349 
	`WL_DBG
(("wl_is_linkup false\n"));

6350  
Ál£
;

6351 
	}
}

6353 
boﬁ
 
	$wl_is_lökdown
(
wl_¥iv
 *
wl
, c⁄° 
wl_evít_msg_t
 *
e
)

6355 
u32
 
evít
 = 
	`¡oh32
(
e
->
evít_ty≥
);

6356 
u16
 
Êags
 = 
	`¡oh16
(
e
->flags);

6358 i‡(
evít
 =
WLC_E_DEAUTH_IND
 ||

6359 
evít
 =
WLC_E_DISASSOC_IND
 ||

6360 
evít
 =
WLC_E_DISASSOC
 ||

6361 
evít
 =
WLC_E_DEAUTH
) {

6362 #i‡(
WL_DBG_LEVEL
 > 0)

6363 
	`WL_ERR
(("Lök dow¿Rós⁄ : WLC_E_%s\n", 
wl_dbg_e°r
[
evít
]));

6365  
åue
;

6366 } i‡(
evít
 =
WLC_E_LINK
) {

6367 i‡(!(
Êags
 & 
WLC_EVENT_MSG_LINK
)) {

6368 #i‡(
WL_DBG_LEVEL
 > 0)

6369 
	`WL_ERR
(("Lök dow¿Rós⁄ : WLC_E_%s\n", 
wl_dbg_e°r
[
evít
]));

6371  
åue
;

6375  
Ál£
;

6376 
	}
}

6378 
boﬁ
 
	$wl_is_n⁄ëw‹k
(
wl_¥iv
 *
wl
, c⁄° 
wl_evít_msg_t
 *
e
)

6380 
u32
 
evít
 = 
	`¡oh32
(
e
->
evít_ty≥
);

6381 
u32
 
°©us
 = 
	`¡oh32
(
e
->status);

6383 i‡(
evít
 =
WLC_E_LINK
 && 
°©us
 =
WLC_E_STATUS_NO_NETWORKS
)

6384  
åue
;

6385 i‡(
evít
 =
WLC_E_SET_SSID
 && 
°©us
 !
WLC_E_STATUS_SUCCESS
)

6386  
åue
;

6388  
Ál£
;

6389 
	}
}

6396 
s32


6397 
	$wl_nŸify_c⁄√˘_°©us_≠
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
,

6398 c⁄° 
wl_evít_msg_t
 *
e
, *
d©a
)

6400 
s32
 
îr
 = 0;

6401 
u32
 
evít
 = 
	`¡oh32
(
e
->
evít_ty≥
);

6402 
u32
 
ªas⁄
 = 
	`¡oh32
(
e
->reason);

6403 
u32
 
Àn
 = 
	`¡oh32
(
e
->
d©Æí
);

6405 #i‡(
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(3, 2, 0)Ë&& !
	`deföed
(
WL_CFG80211_STA_EVENT
)

6406 
boﬁ
 
is‰ì
 = 
Ál£
;

6407 
u8
 *
mgmt_‰ame
;

6408 
u8
 
bsscfgidx
 = 
e
->bsscfgidx;

6409 
s32
 
‰eq
;

6410 
s32
 
ch™√l
;

6411 
u8
 *
body
 = 
NULL
;

6412 
u16
 
fc
 = 0;

6414 
õì80211_suµ‹ãd_b™d
 *
b™d
;

6415 
ëhî_addr
 
da
;

6416 
ëhî_addr
 
bssid
;

6417 
wùhy
 *wùhy = 
	`wl_to_wùhy
(
wl
);

6418 
ch™√l_öfo_t
 
ci
;

6420 
°©i⁄_öfo
 
söfo
;

6423 
	`WL_DBG
(("evíà%d sètu†%dÑós⁄ %d\n", 
evít
, 
	`¡oh32
(
e
->
°©us
), 
ªas⁄
));

6425 i‡(
evít
 =
WLC_E_LINK
 && 
ªas⁄
 =
WLC_E_LINK_BSSCFG_DIS
 &&

6426 
	`wl_gë_p2p_°©us
(
wl
, 
IF_DELETING
Ë&& (
ndev
 !
	`wl_to_¥mry_ndev
(wl))) {

6427 
	`wl_add_ªmove_evítmsg
(
ndev
, 
WLC_E_PROBREQ_MSG
, 
Ál£
);

6428 
	`WL_INFO
(("AP modeÜink down !! \n"));

6429 
	`com∂ëe
(&
wl
->
iÁ˚_dißbÀ
);

6433 #i‡(
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(3, 2, 0)Ë&& !
	`deföed
(
WL_CFG80211_STA_EVENT
)

6434 
	`WL_DBG
(("Enter \n"));

6435 i‡(!
Àn
 && (
evít
 =
WLC_E_DEAUTH
)) {

6436 
Àn
 = 2;

6437 
d©a
 = &
ªas⁄
;

6439 i‡(
Àn
) {

6440 
body
 = 
	`kzÆloc
(
Àn
, 
GFP_KERNEL
);

6442 i‡(
body
 =
NULL
) {

6443 
	`WL_ERR
(("wl_notify_connect_status: FailedÅoállocate body\n"));

6444  
WL_INVALID
;

6447 
	`mem£t
(&
bssid
, 0, 
ETHER_ADDR_LEN
);

6448 
	`WL_DBG
(("E¡îÉvíà%dÇdev %p\n", 
evít
, 
ndev
));

6449 i‡(
	`wl_gë_mode_by_√tdev
(
wl
, 
ndev
Ë=
WL_INVALID
) {

6450 
	`k‰ì
(
body
);

6451  
WL_INVALID
;

6453 i‡(
Àn
)

6454 
	`mem˝y
(
body
, 
d©a
, 
Àn
);

6456 
	`wldev_iov¨_gëbuf_bsscfg
(
ndev
, "cur_etheraddr",

6457 
NULL
, 0, 
wl
->
io˘l_buf
, 
WLC_IOCTL_SMLEN
, 
bsscfgidx
, &wl->
io˘l_buf_sync
);

6458 
	`mem˝y
(
da
.
o˘ë
, 
wl
->
io˘l_buf
, 
ETHER_ADDR_LEN
);

6459 
îr
 = 
	`wldev_io˘l
(
ndev
, 
WLC_GET_BSSID
, &
bssid
, 
ETHER_ADDR_LEN
, 
Ál£
);

6460 
evít
) {

6461 
WLC_E_ASSOC_IND
:

6462 
fc
 = 
FC_ASSOC_REQ
;

6464 
WLC_E_REASSOC_IND
:

6465 
fc
 = 
FC_REASSOC_REQ
;

6467 
WLC_E_DISASSOC_IND
:

6468 
fc
 = 
FC_DISASSOC
;

6470 
WLC_E_DEAUTH_IND
:

6471 
fc
 = 
FC_DISASSOC
;

6473 
WLC_E_DEAUTH
:

6474 
fc
 = 
FC_DISASSOC
;

6477 
fc
 = 0;

6478 
exô
;

6480 i‡((
îr
 = 
	`wldev_io˘l
(
ndev
, 
WLC_GET_CHANNEL
, &
ci
, (ci), 
Ál£
))) {

6481 
	`k‰ì
(
body
);

6482  
îr
;

6485 
ch™√l
 = 
	`dtoh32
(
ci
.
hw_ch™√l
);

6486 i‡(
ch™√l
 <
CH_MAX_2G_CHANNEL
)

6487 
b™d
 = 
wùhy
->
b™ds
[
IEEE80211_BAND_2GHZ
];

6489 
b™d
 = 
wùhy
->
b™ds
[
IEEE80211_BAND_5GHZ
];

6490 i‡(!
b™d
) {

6491 
	`WL_ERR
(("No valid band"));

6492 i‡(
body
)

6493 
	`k‰ì
(
body
);

6494  -
EINVAL
;

6496 #i‡
LINUX_VERSION_CODE
 =
	`KERNEL_VERSION
(2, 6, 38Ë&& !
	`deföed
(
WL_COMPAT_WIRELESS
)

6497 
‰eq
 = 
	`õì80211_ch™√l_to_‰equícy
(
ch™√l
);

6498 ()
b™d
->band;

6500 
‰eq
 = 
	`õì80211_ch™√l_to_‰equícy
(
ch™√l
, 
b™d
->band);

6503 
îr
 = 
	`wl_‰ame_gë_mgmt
(
fc
, &
da
, &
e
->
addr
, &
bssid
,

6504 &
mgmt_‰ame
, &
Àn
, 
body
);

6505 i‡(
îr
 < 0)

6506 
exô
;

6507 
is‰ì
 = 
åue
;

6509 i‡(
evít
 =
WLC_E_ASSOC_IND
 && 
ªas⁄
 =
DOT11_SC_SUCCESS
) {

6510 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(3, 4, 0)

6511 
	`cfg80211_rx_mgmt
(
ndev
, 
‰eq
, 0, 
mgmt_‰ame
, 
Àn
, 
GFP_ATOMIC
);

6513 
	`cfg80211_rx_mgmt
(
ndev
, 
‰eq
, 
mgmt_‰ame
, 
Àn
, 
GFP_ATOMIC
);

6515 } i‡(
evít
 =
WLC_E_DISASSOC_IND
) {

6516 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(3, 4, 0)

6517 
	`cfg80211_rx_mgmt
(
ndev
, 
‰eq
, 0, 
mgmt_‰ame
, 
Àn
, 
GFP_ATOMIC
);

6519 
	`cfg80211_rx_mgmt
(
ndev
, 
‰eq
, 
mgmt_‰ame
, 
Àn
, 
GFP_ATOMIC
);

6521 } i‡((
evít
 =
WLC_E_DEAUTH_IND
Ë|| (evíà=
WLC_E_DEAUTH
)) {

6522 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(3, 4, 0)

6523 
	`cfg80211_rx_mgmt
(
ndev
, 
‰eq
, 0, 
mgmt_‰ame
, 
Àn
, 
GFP_ATOMIC
);

6525 
	`cfg80211_rx_mgmt
(
ndev
, 
‰eq
, 
mgmt_‰ame
, 
Àn
, 
GFP_ATOMIC
);

6529 
exô
:

6530 i‡(
is‰ì
)

6531 
	`k‰ì
(
mgmt_‰ame
);

6532 i‡(
body
)

6533 
	`k‰ì
(
body
);

6534  
îr
;

6536 
söfo
.
fûÀd
 = 0;

6537 i‡(((
evít
 =
WLC_E_ASSOC_IND
Ë|| (evíà=
WLC_E_REASSOC_IND
)) &&

6538 
ªas⁄
 =
DOT11_SC_SUCCESS
) {

6539 
söfo
.
fûÀd
 = 
STATION_INFO_ASSOC_REQ_IES
;

6540 i‡(!
d©a
) {

6541 
	`WL_ERR
(("No IEsÖresent in ASSOC/REASSOC_IND"));

6542  -
EINVAL
;

6544 
söfo
.
assoc_ªq_õs
 = 
d©a
;

6545 
söfo
.
assoc_ªq_õs_Àn
 = 
Àn
;

6546 
	`cfg80211_√w_°a
(
ndev
, 
e
->
addr
.
o˘ë
, &
söfo
, 
GFP_ATOMIC
);

6547 } i‡(
evít
 =
WLC_E_DISASSOC_IND
) {

6548 
	`cfg80211_dñ_°a
(
ndev
, 
e
->
addr
.
o˘ë
, 
GFP_ATOMIC
);

6549 } i‡((
evít
 =
WLC_E_DEAUTH_IND
Ë|| (evíà=
WLC_E_DEAUTH
)) {

6550 
	`cfg80211_dñ_°a
(
ndev
, 
e
->
addr
.
o˘ë
, 
GFP_ATOMIC
);

6553  
îr
;

6554 
	}
}

6556 
s32


6557 
	$wl_gë_auth_assoc_°©us
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
,

6558 c⁄° 
wl_evít_msg_t
 *
e
)

6560 
u32
 
ªas⁄
 = 
	`¡oh32
(
e
->reason);

6561 
u32
 
evít
 = 
	`¡oh32
(
e
->
evít_ty≥
);

6562 
wl_£curôy
 *
£c
 = 
	`wl_ªad_¥of
(
wl
, 
ndev
, 
WL_PROF_SEC
);

6563 
	`WL_DBG
(("evíàty≥ : %d,Ñós⁄ : %d\n", 
evít
, 
ªas⁄
));

6564 i‡(
£c
) {

6565 
evít
) {

6566 
WLC_E_ASSOC
:

6567 
WLC_E_AUTH
:

6568 
£c
->
auth_assoc_ªs_°©us
 = 
ªas⁄
;

6573 
	`WL_ERR
(("sec is NULL\n"));

6575 
	}
}

6577 
s32


6578 
	$wl_nŸify_c⁄√˘_°©us
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
,

6579 c⁄° 
wl_evít_msg_t
 *
e
, *
d©a
)

6581 
boﬁ
 
a˘
;

6582 
s32
 
îr
 = 0;

6583 
u32
 
evít
 = 
	`¡oh32
(
e
->
evít_ty≥
);

6585 i‡(
	`wl_gë_mode_by_√tdev
(
wl
, 
ndev
Ë=
WL_MODE_AP
) {

6586 
	`wl_nŸify_c⁄√˘_°©us_≠
(
wl
, 
ndev
, 
e
, 
d©a
);

6588 
	`WL_DBG
(("wl_notify_connect_status :Évent %d status : %dÇdev %p\n",

6589 
	`¡oh32
(
e
->
evít_ty≥
),Çtoh32”->
°©us
), 
ndev
));

6590 i‡(
evít
 =
WLC_E_ASSOC
 ||Évíà=
WLC_E_AUTH
) {

6591 
	`wl_gë_auth_assoc_°©us
(
wl
, 
ndev
, 
e
);

6592  
îr
;

6594 i‡(
	`wl_is_lökup
(
wl
, 
e
, 
ndev
)) {

6595 
	`wl_lök_up
(
wl
);

6596 
a˘
 = 
åue
;

6597 i‡(
	`wl_is_ibssmode
(
wl
, 
ndev
)) {

6598 
	`¥ötk
("cfg80211_ibss_joined\n");

6599 
	`cfg80211_ibss_joöed
(
ndev
, (
s8
 *)&
e
->
addr
,

6600 
GFP_KERNEL
);

6601 
	`WL_DBG
(("joined in IBSSÇetwork\n"));

6603 i‡(!
	`wl_gë_drv_°©us
(
wl
, 
DISCONNECTING
, 
ndev
)) {

6604 
	`¥ötk
("wl_bss_c⁄√˘_d⁄êsuc˚eded wôh " 
MACDBG
 "\n",

6605 
	`MAC2STRDBG
((
u8
*)(&
e
->
addr
)));

6606 
	`wl_bss_c⁄√˘_d⁄e
(
wl
, 
ndev
, 
e
, 
d©a
, 
åue
);

6607 
	`WL_DBG
(("joined in BSSÇetwork \"%s\"\n",

6608 ((
wlc_ssid
 *)

6609 
	`wl_ªad_¥of
(
wl
, 
ndev
, 
WL_PROF_SSID
))->
SSID
));

6612 
	`wl_upd©e_¥of
(
wl
, 
ndev
, 
e
, &
a˘
, 
WL_PROF_ACT
);

6613 
	`wl_upd©e_¥of
(
wl
, 
ndev
, 
NULL
, (*)&
e
->
addr
, 
WL_PROF_BSSID
);

6615 } i‡(
	`wl_is_lökdown
(
wl
, 
e
)) {

6616 i‡(
wl
->
sˇn_ªque°
) {

6617 i‡(
wl
->
esˇn_⁄
) {

6618 
	`wl_nŸify_esˇn_com∂ëe
(
wl
, 
ndev
, 
åue
,Årue);

6620 
	`dñ_timî_sync
(&
wl
->
sˇn_timeout
);

6621 
	`wl_isˇn_ab‹ãd
(
wl
);

6624 i‡(
	`wl_gë_drv_°©us
(
wl
, 
CONNECTED
, 
ndev
)) {

6625 
scb_vÆ_t
 
scbvÆ
;

6626 
u8
 *
curbssid
 = 
	`wl_ªad_¥of
(
wl
, 
ndev
, 
WL_PROF_BSSID
);

6627 
s32
 
ªas⁄
 = 0;

6628 i‡(
evít
 =
WLC_E_DEAUTH_IND
 ||Évíà=
WLC_E_DISASSOC_IND
)

6629 
ªas⁄
 = 
	`¡oh32
(
e
->reason);

6631 
ªas⁄
 = (ªas⁄ =
WLAN_REASON_UNSPECIFIED
)? 0 :Ñeason;

6633 
	`¥ötk
("link down if %s may call cfg80211_disconnected. "

6634 "evíà: %d,Ñós⁄=%d from " 
MACDBG
 "\n",

6635 
ndev
->
«me
, 
evít
, 
	`¡oh32
(
e
->
ªas⁄
),

6636 
	`MAC2STRDBG
((
u8
*)(&
e
->
addr
)));

6637 i‡(
	`memcmp
(
curbssid
, &
e
->
addr
, 
ETHER_ADDR_LEN
) != 0) {

6638 
	`WL_ERR
(("BSSID ofÉvent isÇotÅhe connected BSSID"

6639 "(ign‹êôËcur: " 
MACDBG
 "Évent: " MACDBG"\n",

6640 
	`MAC2STRDBG
(
curbssid
), MAC2STRDBG((
u8
*)(&
e
->
addr
))));

6643 
	`wl_˛r_drv_°©us
(
wl
, 
CONNECTED
, 
ndev
);

6644 i‡(! 
	`wl_gë_drv_°©us
(
wl
, 
DISCONNECTING
, 
ndev
)) {

6648 
scbvÆ
.
vÆ
 = 
WLAN_REASON_DEAUTH_LEAVING
;

6650 
	`mem˝y
(&
scbvÆ
.
ó
, 
curbssid
, 
ETHER_ADDR_LEN
);

6651 
scbvÆ
.
vÆ
 = 
	`htod32
(scbval.val);

6652 
îr
 = 
	`wldev_io˘l
(
ndev
, 
WLC_DISASSOC
, &
scbvÆ
,

6653 (
scb_vÆ_t
), 
åue
);

6654 i‡(
îr
 < 0) {

6655 
	`WL_ERR
(("WLC_DISASSOCÉº‹ %d\n", 
îr
));

6656 
îr
 = 0;

6658 
	`cfg80211_disc⁄√˘ed
(
ndev
, 
ªas⁄
, 
NULL
, 0, 
GFP_KERNEL
);

6659 
	`wl_lök_down
(
wl
);

6660 
	`wl_öô_¥of
(
wl
, 
ndev
);

6663 i‡(
	`wl_gë_drv_°©us
(
wl
, 
CONNECTING
, 
ndev
)) {

6664 
	`¥ötk
("link down, during connecting\n");

6665 #ifde‡
ESCAN_RESULT_PATCH


6666 i‡((
	`memcmp
(
c⁄√˘_ªq_bssid
, 
brﬂd_bssid
, 
ETHER_ADDR_LEN
) == 0) ||

6667 (
	`memcmp
(&
e
->
addr
, 
brﬂd_bssid
, 
ETHER_ADDR_LEN
) == 0) ||

6668 (
	`memcmp
(&
e
->
addr
, 
c⁄√˘_ªq_bssid
, 
ETHER_ADDR_LEN
) == 0))

6671 
	`wl_bss_c⁄√˘_d⁄e
(
wl
, 
ndev
, 
e
, 
d©a
, 
Ál£
);

6673 
	`wl_˛r_drv_°©us
(
wl
, 
DISCONNECTING
, 
ndev
);

6676 i‡(
ndev
 !
	`wl_to_¥mry_ndev
(
wl
))

6677 
	`com∂ëe
(&
wl
->
iÁ˚_dißbÀ
);

6679 } i‡(
	`wl_is_n⁄ëw‹k
(
wl
, 
e
)) {

6680 
	`¥ötk
("connect failedÉvent=%dÉ->status %dÉ->reason %d \n",

6681 
evít
, ()
	`¡oh32
(
e
->
°©us
), (Ítoh32”->
ªas⁄
));

6683 i‡(
wl
->
sˇn_ªque°
) {

6684 i‡(
wl
->
esˇn_⁄
) {

6685 
	`wl_nŸify_esˇn_com∂ëe
(
wl
, 
ndev
, 
åue
,Årue);

6687 
	`dñ_timî_sync
(&
wl
->
sˇn_timeout
);

6688 
	`wl_isˇn_ab‹ãd
(
wl
);

6691 i‡(
	`wl_gë_drv_°©us
(
wl
, 
CONNECTING
, 
ndev
))

6692 
	`wl_bss_c⁄√˘_d⁄e
(
wl
, 
ndev
, 
e
, 
d©a
, 
Ál£
);

6694 
	`¥ötk
("%†nŸhög\n", 
__FUNCTION__
);

6697  
îr
;

6698 
	}
}

6700 
s32


6701 
	$wl_nŸify_rﬂmög_°©us
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
,

6702 c⁄° 
wl_evít_msg_t
 *
e
, *
d©a
)

6704 
boﬁ
 
a˘
;

6705 
s32
 
îr
 = 0;

6706 
u32
 
evít
 = 
	`be32_to_˝u
(
e
->
evít_ty≥
);

6707 
u32
 
°©us
 = 
	`be32_to_˝u
(
e
->status);

6708 
	`WL_DBG
(("Enter \n"));

6709 i‡(
evít
 =
WLC_E_ROAM
 && 
°©us
 =
WLC_E_STATUS_SUCCESS
) {

6710 i‡(
	`wl_gë_drv_°©us
(
wl
, 
CONNECTED
, 
ndev
))

6711 
	`wl_bss_rﬂmög_d⁄e
(
wl
, 
ndev
, 
e
, 
d©a
);

6713 
	`wl_bss_c⁄√˘_d⁄e
(
wl
, 
ndev
, 
e
, 
d©a
, 
åue
);

6714 
a˘
 = 
åue
;

6715 
	`wl_upd©e_¥of
(
wl
, 
ndev
, 
e
, &
a˘
, 
WL_PROF_ACT
);

6716 
	`wl_upd©e_¥of
(
wl
, 
ndev
, 
NULL
, (*)&
e
->
addr
, 
WL_PROF_BSSID
);

6718  
îr
;

6719 
	}
}

6721 
s32
 
	$wl_gë_assoc_õs
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
)

6723 
wl_assoc_öfo_t
 
assoc_öfo
;

6724 
wl_c⁄√˘_öfo
 *
c⁄n_öfo
 = 
	`wl_to_c⁄n
(
wl
);

6725 
s32
 
îr
 = 0;

6727 
	`WL_DBG
(("Enter \n"));

6728 
îr
 = 
	`wldev_iov¨_gëbuf
(
ndev
, "assoc_öfo", 
NULL
, 0, 
wl
->
exåa_buf
,

6729 
WL_ASSOC_INFO_MAX
, 
NULL
);

6730 i‡(
	`u∆ikñy
(
îr
)) {

6731 
	`WL_ERR
(("couldÇŸ gëásso¯öfÿ(%d)\n", 
îr
));

6732  
îr
;

6734 
	`mem˝y
(&
assoc_öfo
, 
wl
->
exåa_buf
, (
wl_assoc_öfo_t
));

6735 
assoc_öfo
.
ªq_Àn
 = 
	`htod32
(assoc_info.req_len);

6736 
assoc_öfo
.
ª•_Àn
 = 
	`htod32
(assoc_info.resp_len);

6737 
assoc_öfo
.
Êags
 = 
	`htod32
(assoc_info.flags);

6738 i‡(
c⁄n_öfo
->
ªq_õ_Àn
) {

6739 
c⁄n_öfo
->
ªq_õ_Àn
 = 0;

6740 
	`bzîo
(
c⁄n_öfo
->
ªq_õ
, (conn_info->req_ie));

6742 i‡(
c⁄n_öfo
->
ª•_õ_Àn
) {

6743 
c⁄n_öfo
->
ª•_õ_Àn
 = 0;

6744 
	`bzîo
(
c⁄n_öfo
->
ª•_õ
, (conn_info->resp_ie));

6746 i‡(
assoc_öfo
.
ªq_Àn
) {

6747 
îr
 = 
	`wldev_iov¨_gëbuf
(
ndev
, "assoc_ªq_õs", 
NULL
, 0, 
wl
->
exåa_buf
,

6748 
WL_ASSOC_INFO_MAX
, 
NULL
);

6749 i‡(
	`u∆ikñy
(
îr
)) {

6750 
	`WL_ERR
(("couldÇŸ gëásso¯ªq (%d)\n", 
îr
));

6751  
îr
;

6753 
c⁄n_öfo
->
ªq_õ_Àn
 = 
assoc_öfo
.
ªq_Àn
 - (
dŸ11_assoc_ªq
);

6754 i‡(
assoc_öfo
.
Êags
 & 
WLC_ASSOC_REQ_IS_REASSOC
) {

6755 
c⁄n_öfo
->
ªq_õ_Àn
 -
ETHER_ADDR_LEN
;

6757 i‡(
c⁄n_öfo
->
ªq_õ_Àn
 <
MAX_REQ_LINE
)

6758 
	`mem˝y
(
c⁄n_öfo
->
ªq_õ
, 
wl
->
exåa_buf
, c⁄n_öfo->
ªq_õ_Àn
);

6760 
	`WL_ERR
(("%s IE size %dábove max %d size \n",

6761 
__FUNCTION__
, 
c⁄n_öfo
->
ªq_õ_Àn
, 
MAX_REQ_LINE
));

6762  
îr
;

6765 
c⁄n_öfo
->
ªq_õ_Àn
 = 0;

6767 i‡(
assoc_öfo
.
ª•_Àn
) {

6768 
îr
 = 
	`wldev_iov¨_gëbuf
(
ndev
, "assoc_ª•_õs", 
NULL
, 0, 
wl
->
exåa_buf
,

6769 
WL_ASSOC_INFO_MAX
, 
NULL
);

6770 i‡(
	`u∆ikñy
(
îr
)) {

6771 
	`WL_ERR
(("couldÇŸ gëásso¯ª• (%d)\n", 
îr
));

6772  
îr
;

6774 
c⁄n_öfo
->
ª•_õ_Àn
 = 
assoc_öfo
.
ª•_Àn
 -(
dŸ11_assoc_ª•
);

6775 i‡(
c⁄n_öfo
->
ª•_õ_Àn
 <
MAX_REQ_LINE
)

6776 
	`mem˝y
(
c⁄n_öfo
->
ª•_õ
, 
wl
->
exåa_buf
, c⁄n_öfo->
ª•_õ_Àn
);

6778 
	`WL_ERR
(("%s IE size %dábove max %d size \n",

6779 
__FUNCTION__
, 
c⁄n_öfo
->
ª•_õ_Àn
, 
MAX_REQ_LINE
));

6780  
îr
;

6783 
c⁄n_öfo
->
ª•_õ_Àn
 = 0;

6785 
	`WL_DBG
(("ªqÜí (%dËª•Üí (%d)\n", 
c⁄n_öfo
->
ªq_õ_Àn
,

6786 
c⁄n_öfo
->
ª•_õ_Àn
));

6788  
îr
;

6789 
	}
}

6791 
	$wl_ch_to_ch™•ec
(
ch
, 
wl_joö_∑øms
 *
joö_∑øms
,

6792 
size_t
 *
joö_∑øms_size
)

6794 
ch™•ec_t
 
ch™•ec
 = 0;

6795 i‡(
ch
 != 0) {

6796 
joö_∑øms
->
∑øms
.
ch™•ec_num
 = 1;

6797 
joö_∑øms
->
∑øms
.
ch™•ec_li°
[0] = 
ch
;

6799 i‡(
joö_∑øms
->
∑øms
.
ch™•ec_li°
[0] <
CH_MAX_2G_CHANNEL
)

6800 
ch™•ec
 |
WL_CHANSPEC_BAND_2G
;

6802 
ch™•ec
 |
WL_CHANSPEC_BAND_5G
;

6804 
ch™•ec
 |
WL_CHANSPEC_BW_20
;

6805 
ch™•ec
 |
WL_CHANSPEC_CTL_SB_NONE
;

6807 *
joö_∑øms_size
 +
WL_ASSOC_PARAMS_FIXED_SIZE
 +

6808 
joö_∑øms
->
∑øms
.
ch™•ec_num
 * (
ch™•ec_t
);

6810 
joö_∑øms
->
∑øms
.
ch™•ec_li°
[0] &
WL_CHANSPEC_CHAN_MASK
;

6811 
joö_∑øms
->
∑øms
.
ch™•ec_li°
[0] |
ch™•ec
;

6812 
joö_∑øms
->
∑øms
.
ch™•ec_li°
[0] =

6813 
	`wl_ch•ec_ho°_to_drivî
(
joö_∑øms
->
∑øms
.
ch™•ec_li°
[0]);

6815 
joö_∑øms
->
∑øms
.
ch™•ec_num
 =

6816 
	`htod32
(
joö_∑øms
->
∑øms
.
ch™•ec_num
);

6817 
	`WL_DBG
(("join_params->params.chanspec_list[0]= %X, %d channels\n",

6818 
joö_∑øms
->
∑øms
.
ch™•ec_li°
[0],

6819 
joö_∑øms
->
∑øms
.
ch™•ec_num
));

6821 
	}
}

6823 
s32
 
	$wl_upd©e_bss_öfo
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
, 
u8
 
is_rﬂm_d⁄e
)

6825 
cfg80211_bss
 *
bss
;

6826 
wl_bss_öfo
 *
bi
;

6827 
wlc_ssid
 *
ssid
;

6828 
bcm_év
 *
tim
;

6829 
s32
 
bóc⁄_öãrvÆ
;

6830 
s32
 
dtim_≥riod
;

6831 
size_t
 
õ_Àn
;

6832 
u8
 *
õ
;

6833 
u8
 *
ssidõ
;

6834 
u8
 *
curbssid
;

6835 
s32
 
îr
 = 0;

6836 
wùhy
 *wiphy;

6838 
wùhy
 = 
	`wl_to_wùhy
(
wl
);

6840 i‡(
	`wl_is_ibssmode
(
wl
, 
ndev
))

6841  
îr
;

6843 
ssid
 = (
wlc_ssid
 *)
	`wl_ªad_¥of
(
wl
, 
ndev
, 
WL_PROF_SSID
);

6844 
curbssid
 = 
	`wl_ªad_¥of
(
wl
, 
ndev
, 
WL_PROF_BSSID
);

6845 
bss
 = 
	`cfg80211_gë_bss
(
wùhy
, 
NULL
, 
curbssid
,

6846 
ssid
->
SSID
, ssid->
SSID_Àn
, 
WLAN_CAPABILITY_ESS
,

6847 
WLAN_CAPABILITY_ESS
);

6849 
	`muãx_lock
(&
wl
->
u§_sync
);

6850 i‡(!
bss
) {

6851 
	`WL_DBG
(("CouldÇot findÅhe AP\n"));

6852 *(
u32
 *Ë
wl
->
exåa_buf
 = 
	`htod32
(
WL_EXTRA_BUF_MAX
);

6853 
îr
 = 
	`wldev_io˘l
(
ndev
, 
WLC_GET_BSS_INFO
,

6854 
wl
->
exåa_buf
, 
WL_EXTRA_BUF_MAX
, 
Ál£
);

6855 i‡(
	`u∆ikñy
(
îr
)) {

6856 
	`WL_ERR
(("CouldÇŸ gë bs†öfÿ%d\n", 
îr
));

6857 
upd©e_bss_öfo_out
;

6859 
bi
 = (
wl_bss_öfo
 *)(
wl
->
exåa_buf
 + 4);

6860 i‡(
	`memcmp
(
bi
->
BSSID
.
o˘ë
, 
curbssid
, 
ETHER_ADDR_LEN
)) {

6861 
îr
 = -
EIO
;

6862 
upd©e_bss_öfo_out
;

6865 
õ
 = ((
u8
 *)
bi
Ë+ bi->
õ_off£t
;

6866 
õ_Àn
 = 
bi
->
õ_Àngth
;

6867 
ssidõ
 = (
u8
 *)
	`cfg80211_föd_õ
(
WLAN_EID_SSID
, 
õ
, 
õ_Àn
);

6868 i‡(
ssidõ
 && ssidõ[1] =
bi
->
SSID_Àn
 && !ssidõ[2] && bi->
SSID
[0])

6869 
	`mem˝y
(
ssidõ
 + 2, 
bi
->
SSID
, bi->
SSID_Àn
);

6871 
îr
 = 
	`wl_öf‹m_sögÀ_bss
(
wl
, 
bi
, 
is_rﬂm_d⁄e
);

6872 i‡(
	`u∆ikñy
(
îr
))

6873 
upd©e_bss_öfo_out
;

6875 
õ
 = ((
u8
 *)
bi
Ë+ bi->
õ_off£t
;

6876 
õ_Àn
 = 
bi
->
õ_Àngth
;

6877 
bóc⁄_öãrvÆ
 = 
	`˝u_to_À16
(
bi
->
bóc⁄_≥riod
);

6879 
	`WL_DBG
(("FoundÅhêAP i¿thêli° - BSSID %pM\n", 
bss
->
bssid
));

6880 
õ
 = 
bss
->
öf‹m©i⁄_ñemíts
;

6881 
õ_Àn
 = 
bss
->
Àn_öf‹m©i⁄_ñemíts
;

6882 
bóc⁄_öãrvÆ
 = 
bss
->beacon_interval;

6883 
	`cfg80211_put_bss
(
bss
);

6886 
tim
 = 
	`bcm_∑r£_évs
(
õ
, 
õ_Àn
, 
WLAN_EID_TIM
);

6887 i‡(
tim
) {

6888 
dtim_≥riod
 = 
tim
->
d©a
[1];

6895 
îr
 = 
	`wldev_io˘l
(
ndev
, 
WLC_GET_DTIMPRD
,

6896 &
dtim_≥riod
, (dtim_≥riod), 
Ál£
);

6897 i‡(
	`u∆ikñy
(
îr
)) {

6898 
	`WL_ERR
(("WLC_GET_DTIMPRDÉº‹ (%d)\n", 
îr
));

6899 
upd©e_bss_öfo_out
;

6903 
	`wl_upd©e_¥of
(
wl
, 
ndev
, 
NULL
, &
bóc⁄_öãrvÆ
, 
WL_PROF_BEACONINT
);

6904 
	`wl_upd©e_¥of
(
wl
, 
ndev
, 
NULL
, &
dtim_≥riod
, 
WL_PROF_DTIMPERIOD
);

6906 
upd©e_bss_öfo_out
:

6907 
	`muãx_u∆ock
(&
wl
->
u§_sync
);

6908  
îr
;

6909 
	}
}

6911 
s32


6912 
	$wl_bss_rﬂmög_d⁄e
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
,

6913 c⁄° 
wl_evít_msg_t
 *
e
, *
d©a
)

6915 
wl_c⁄√˘_öfo
 *
c⁄n_öfo
 = 
	`wl_to_c⁄n
(
wl
);

6916 
s32
 
îr
 = 0;

6917 
u8
 *
curbssid
;

6919 
	`wl_gë_assoc_õs
(
wl
, 
ndev
);

6920 
	`wl_upd©e_¥of
(
wl
, 
ndev
, 
NULL
, (*)(
e
->
addr
.
o˘ë
), 
WL_PROF_BSSID
);

6921 
curbssid
 = 
	`wl_ªad_¥of
(
wl
, 
ndev
, 
WL_PROF_BSSID
);

6922 
	`wl_upd©e_bss_öfo
(
wl
, 
ndev
, 1);

6923 
	`wl_upd©e_pmkli°
(
ndev
, 
wl
->
pmk_li°
, 
îr
);

6924 
	`¥ötk
("wl_bss_rﬂmög_d⁄êsuc˚ededÅÿ" 
MACDBG
 "\n",

6925 
	`MAC2STRDBG
((
u8
*)(&
e
->
addr
)));

6927 
	`cfg80211_rﬂmed
(
ndev
,

6929 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(3, 3, 0)

6930 
NULL
,

6931 #ñi‡
LINUX_VERSION_CODE
 > 
	`KERNEL_VERSION
(2, 6, 39)

6932 
NULL
,

6934 
curbssid
,

6935 
c⁄n_öfo
->
ªq_õ
, c⁄n_öfo->
ªq_õ_Àn
,

6936 
c⁄n_öfo
->
ª•_õ
, c⁄n_öfo->
ª•_õ_Àn
, 
GFP_KERNEL
);

6937 
	`WL_DBG
(("ReportÑoamingÑesult\n"));

6939 
	`wl_£t_drv_°©us
(
wl
, 
CONNECTED
, 
ndev
);

6941  
îr
;

6942 
	}
}

6944 
s32


6945 
	$wl_bss_c⁄√˘_d⁄e
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
,

6946 c⁄° 
wl_evít_msg_t
 *
e
, *
d©a
, 
boﬁ
 
com∂ëed
)

6948 
wl_c⁄√˘_öfo
 *
c⁄n_öfo
 = 
	`wl_to_c⁄n
(
wl
);

6949 
wl_£curôy
 *
£c
 = 
	`wl_ªad_¥of
(
wl
, 
ndev
, 
WL_PROF_SEC
);

6950 
s32
 
îr
 = 0;

6951 
u8
 *
curbssid
 = 
	`wl_ªad_¥of
(
wl
, 
ndev
, 
WL_PROF_BSSID
);

6952 i‡(!
£c
) {

6953 
	`WL_ERR
(("sec is NULL\n"));

6954  -
ENODEV
;

6956 
	`WL_DBG
(("Énter\n"));

6957 #ifde‡
ESCAN_RESULT_PATCH


6958 i‡(
	`wl_gë_drv_°©us
(
wl
, 
CONNECTED
, 
ndev
)) {

6959 i‡(
	`memcmp
(
curbssid
, 
c⁄√˘_ªq_bssid
, 
ETHER_ADDR_LEN
) == 0) {

6960 
	`WL_DBG
((" ConnectedÉvent of connected deviceÉ=%d s=%d, ignore it\n",

6961 
	`¡oh32
(
e
->
evít_ty≥
),Çtoh32”->
°©us
)));

6962  
îr
;

6965 i‡(
	`memcmp
(
curbssid
, 
brﬂd_bssid
, 
ETHER_ADDR_LEN
) == 0 &&

6966 
	`memcmp
(
brﬂd_bssid
, 
c⁄√˘_ªq_bssid
, 
ETHER_ADDR_LEN
) != 0) {

6967 
	`WL_DBG
(("copy bssid\n"));

6968 
	`mem˝y
(
curbssid
, 
c⁄√˘_ªq_bssid
, 
ETHER_ADDR_LEN
);

6972 i‡(
wl
->
sˇn_ªque°
) {

6973 
	`wl_nŸify_esˇn_com∂ëe
(
wl
, 
ndev
, 
åue
,Årue);

6976 i‡(
	`wl_gë_drv_°©us
(
wl
, 
CONNECTING
, 
ndev
)) {

6977 
	`wl_˛r_drv_°©us
(
wl
, 
CONNECTING
, 
ndev
);

6978 i‡(
com∂ëed
) {

6979 
	`wl_gë_assoc_õs
(
wl
, 
ndev
);

6980 
	`wl_upd©e_¥of
(
wl
, 
ndev
, 
NULL
, (*)(
e
->
addr
.
o˘ë
), 
WL_PROF_BSSID
);

6981 
curbssid
 = 
	`wl_ªad_¥of
(
wl
, 
ndev
, 
WL_PROF_BSSID
);

6982 
	`wl_upd©e_bss_öfo
(
wl
, 
ndev
, 0);

6983 
	`wl_upd©e_pmkli°
(
ndev
, 
wl
->
pmk_li°
, 
îr
);

6984 
	`wl_£t_drv_°©us
(
wl
, 
CONNECTED
, 
ndev
);

6986 
	`cfg80211_c⁄√˘_ªsu…
(
ndev
,

6987 
curbssid
,

6988 
c⁄n_öfo
->
ªq_õ
,

6989 
c⁄n_öfo
->
ªq_õ_Àn
,

6990 
c⁄n_öfo
->
ª•_õ
,

6991 
c⁄n_öfo
->
ª•_õ_Àn
,

6992 
com∂ëed
 ? 
WLAN_STATUS_SUCCESS
 :

6993 (
£c
->
auth_assoc_ªs_°©us
) ?

6994 
£c
->
auth_assoc_ªs_°©us
 :

6995 
WLAN_STATUS_UNSPECIFIED_FAILURE
,

6996 
GFP_KERNEL
);

6997 i‡(
com∂ëed
)

6998 
	`WL_INFO
(("Report connectÑesult - connection succeeded\n"));

7000 
	`WL_ERR
(("Report connectÑesult - connection failed\n"));

7002  
îr
;

7003 
	}
}

7005 
s32


7006 
	$wl_nŸify_mic_°©us
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
,

7007 c⁄° 
wl_evít_msg_t
 *
e
, *
d©a
)

7009 
u16
 
Êags
 = 
	`¡oh16
(
e
->flags);

7010 
∆80211_key_ty≥
 
key_ty≥
;

7012 
	`muãx_lock
(&
wl
->
u§_sync
);

7013 i‡(
Êags
 & 
WLC_EVENT_MSG_GROUP
)

7014 
key_ty≥
 = 
NL80211_KEYTYPE_GROUP
;

7016 
key_ty≥
 = 
NL80211_KEYTYPE_PAIRWISE
;

7018 
	`cfg80211_mich´l_mic_Áûuª
(
ndev
, (
u8
 *)&
e
->
addr
, 
key_ty≥
, -1,

7019 
NULL
, 
GFP_KERNEL
);

7020 
	`muãx_u∆ock
(&
wl
->
u§_sync
);

7023 
	}
}

7025 #ifde‡
PNO_SUPPORT


7026 
s32


7027 
	$wl_nŸify_p‚_°©us
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
,

7028 c⁄° 
wl_evít_msg_t
 *
e
, *
d©a
)

7030 
	`WL_ERR
((">>> PNO Event\n"));

7032 #i‚de‡
WL_SCHED_SCAN


7033 
	`muãx_lock
(&
wl
->
u§_sync
);

7035 
	`cfg80211_disc⁄√˘ed
(
ndev
, 0, 
NULL
, 0, 
GFP_KERNEL
);

7036 
	`muãx_u∆ock
(&
wl
->
u§_sync
);

7041 
	`wl_nŸify_sched_sˇn_ªsu…s
(
wl
, 
ndev
, 
e
, 
d©a
);

7044 
	}
}

7047 
s32


7048 
	$wl_nŸify_sˇn_°©us
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
,

7049 c⁄° 
wl_evít_msg_t
 *
e
, *
d©a
)

7051 
ch™√l_öfo
 
ch™√l_öf‹m
;

7052 
wl_sˇn_ªsu…s
 *
bss_li°
;

7053 
u32
 
Àn
 = 
WL_SCAN_BUF_MAX
;

7054 
s32
 
îr
 = 0;

7055 
Êags
;

7057 
	`WL_DBG
(("Enter \n"));

7058 i‡(!
	`wl_gë_drv_°©us
(
wl
, 
SCANNING
, 
ndev
)) {

7059 
	`WL_ERR
(("scan isÇotÑeady \n"));

7060  
îr
;

7062 i‡(
wl
->
isˇn_⁄
 && wl->
isˇn_kick°¨t
)

7063  
	`wl_wakeup_isˇn
(
	`wl_to_isˇn
(
wl
));

7065 
	`muãx_lock
(&
wl
->
u§_sync
);

7066 
	`wl_˛r_drv_°©us
(
wl
, 
SCANNING
, 
ndev
);

7067 
îr
 = 
	`wldev_io˘l
(
ndev
, 
WLC_GET_CHANNEL
, &
ch™√l_öf‹m
,

7068 (
ch™√l_öf‹m
), 
Ál£
);

7069 i‡(
	`u∆ikñy
(
îr
)) {

7070 
	`WL_ERR
(("sˇ¿busy (%d)\n", 
îr
));

7071 
sˇn_d⁄e_out
;

7073 
ch™√l_öf‹m
.
sˇn_ch™√l
 = 
	`dtoh32
(channel_inform.scan_channel);

7074 i‡(
	`u∆ikñy
(
ch™√l_öf‹m
.
sˇn_ch™√l
)) {

7076 
	`WL_DBG
(("channel_inform.scan_channel (%d)\n",

7077 
ch™√l_öf‹m
.
sˇn_ch™√l
));

7079 
wl
->
bss_li°
 = wl->
sˇn_ªsu…s
;

7080 
bss_li°
 = 
wl
->bss_list;

7081 
	`mem£t
(
bss_li°
, 0, 
Àn
);

7082 
bss_li°
->
buÊí
 = 
	`htod32
(
Àn
);

7083 
îr
 = 
	`wldev_io˘l
(
ndev
, 
WLC_SCAN_RESULTS
, 
bss_li°
, 
Àn
, 
Ál£
);

7084 i‡(
	`u∆ikñy
(
îr
Ë&& u∆ikñy(!
wl
->
sˇn_suµªs£d
)) {

7085 
	`WL_ERR
(("%†Sˇn_ªsu…†îr‹ (%d)\n", 
ndev
->
«me
, 
îr
));

7086 
îr
 = -
EINVAL
;

7087 
sˇn_d⁄e_out
;

7089 
bss_li°
->
buÊí
 = 
	`dtoh32
(bss_list->buflen);

7090 
bss_li°
->
vîsi⁄
 = 
	`dtoh32
(bss_list->version);

7091 
bss_li°
->
cou¡
 = 
	`dtoh32
(bss_list->count);

7093 
îr
 = 
	`wl_öf‹m_bss
(
wl
);

7095 
sˇn_d⁄e_out
:

7096 
	`dñ_timî_sync
(&
wl
->
sˇn_timeout
);

7097 
	`•ö_lock_úqßve
(&
wl
->
cfgdrv_lock
, 
Êags
);

7098 i‡(
wl
->
sˇn_ªque°
) {

7099 
	`cfg80211_sˇn_d⁄e
(
wl
->
sˇn_ªque°
, 
Ál£
);

7100 
wl
->
sˇn_ªque°
 = 
NULL
;

7102 
	`•ö_u∆ock_úqª°‹e
(&
wl
->
cfgdrv_lock
, 
Êags
);

7103 
	`WL_DBG
(("cfg80211_scan_done\n"));

7104 
	`muãx_u∆ock
(&
wl
->
u§_sync
);

7105  
îr
;

7106 
	}
}

7107 
s32


7108 
	$wl_‰ame_gë_mgmt
(
u16
 
fc
, c⁄° 
ëhî_addr
 *
da
,

7109 c⁄° 
ëhî_addr
 *
ß
, c⁄° ëhî_add∏*
bssid
,

7110 
u8
 **
phódî
, 
u32
 *
body_Àn
, u8 *
pbody
)

7112 
dŸ11_m™agemít_hódî
 *
hdr
;

7113 
u32
 
tŸÀn
 = 0;

7114 
s32
 
îr
 = 0;

7115 
u8
 *
off£t
;

7116 
u32
 
¥ebody_Àn
 = *
body_Àn
;

7117 
fc
) {

7118 
FC_ASSOC_REQ
:

7120 
tŸÀn
 = 
DOT11_ASSOC_REQ_FIXED_LEN
;

7121 *
body_Àn
 +
DOT11_ASSOC_REQ_FIXED_LEN
;

7124 
FC_REASSOC_REQ
:

7126 
tŸÀn
 = 
DOT11_REASSOC_REQ_FIXED_LEN
;

7127 *
body_Àn
 +
DOT11_REASSOC_REQ_FIXED_LEN
;

7130 
tŸÀn
 +
DOT11_MGMT_HDR_LEN
 + 
¥ebody_Àn
;

7131 *
phódî
 = 
	`kzÆloc
(
tŸÀn
, 
GFP_KERNEL
);

7132 i‡(*
phódî
 =
NULL
) {

7133 
	`WL_ERR
(("memoryálloc failed \n"));

7134  -
ENOMEM
;

7136 
hdr
 = (
dŸ11_m™agemít_hódî
 *Ë(*
phódî
);

7137 
hdr
->
fc
 = 
	`htﬁ16
(fc);

7138 
hdr
->
durid
 = 0;

7139 
hdr
->
£q
 = 0;

7140 
off£t
 = (
u8
*)(
hdr
 + 1Ë+ (
tŸÀn
 - 
DOT11_MGMT_HDR_LEN
 - 
¥ebody_Àn
);

7141 
	`bc›y
((c⁄° *)
da
, (
u8
*)&
hdr
->da, 
ETHER_ADDR_LEN
);

7142 
	`bc›y
((c⁄° *)
ß
, (
u8
*)&
hdr
->ß, 
ETHER_ADDR_LEN
);

7143 
	`bc›y
((c⁄° *)
bssid
, (
u8
*)&
hdr
->bssid, 
ETHER_ADDR_LEN
);

7144 i‡((
pbody
 !
NULL
Ë&& 
¥ebody_Àn
)

7145 
	`bc›y
((c⁄° *)
pbody
, 
off£t
, 
¥ebody_Àn
);

7146 *
body_Àn
 = 
tŸÀn
;

7147  
îr
;

7148 
	}
}

7152 
	$wl_°›_waô_√xt_a˘i⁄_‰ame
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
)

7154 i‡(
	`wl_gë_drv_°©us_Æl
(
wl
, 
SENDING_ACT_FRM
) &&

7155 (
	`wl_gë_p2p_°©us
(
wl
, 
ACTION_TX_COMPLETED
) ||

7156 
	`wl_gë_p2p_°©us
(
wl
, 
ACTION_TX_NOACK
))) {

7157 
	`WL_DBG
(("*** Wake UP **ábortáctframe iovar\n"));

7161 i‡(
wl
->
af_£¡_ch™√l
)

7163 
	`wl_nŸify_esˇn_com∂ëe
(
wl
,

7164 (
ndev
 =
wl
->
p2p_√t
Ë? 
	`wl_to_¥mry_ndev
(wlË:Çdev, 
åue
,Årue);

7166 #ifde‡
WL_CFG80211_SYNC_GON


7167 i‡(
	`wl_gë_drv_°©us_Æl
(
wl
, 
WAITING_NEXT_ACT_FRM_LISTEN
)) {

7168 
	`WL_DBG
(("*** Wake UP **ábortÜisten forÇextáf frame\n"));

7170 
	`wl_nŸify_esˇn_com∂ëe
(
wl
,

7171 (
ndev
 =
wl
->
p2p_√t
Ë? 
	`wl_to_¥mry_ndev
(wlË:Çdev, 
åue
,Årue);

7174 
	}
}

7176 
s32


7177 
	$wl_nŸify_rx_mgmt_‰ame
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
,

7178 c⁄° 
wl_evít_msg_t
 *
e
, *
d©a
)

7180 
õì80211_suµ‹ãd_b™d
 *
b™d
;

7181 
wùhy
 *wùhy = 
	`wl_to_wùhy
(
wl
);

7182 
ëhî_addr
 
da
;

7183 
ëhî_addr
 
bssid
;

7184 
boﬁ
 
is‰ì
 = 
Ál£
;

7185 
s32
 
îr
 = 0;

7186 
s32
 
‰eq
;

7187 
√t_devi˚
 *
dev
 = 
NULL
;

7188 
wifi_p2p_pub_a˘_‰ame_t
 *
a˘_‰m
 = 
NULL
;

7189 
wifi_p2p_a˘i⁄_‰ame_t
 *
p2p_a˘_‰m
 = 
NULL
;

7190 
wifi_p2psd_gas_pub_a˘_‰ame_t
 *
sd_a˘_‰m
 = 
NULL
;

7191 
wl_evít_rx_‰ame_d©a_t
 *
rx‰ame
 =

7192 (
wl_evít_rx_‰ame_d©a_t
*)
d©a
;

7193 
u32
 
evít
 = 
	`¡oh32
(
e
->
evít_ty≥
);

7194 
u8
 *
mgmt_‰ame
;

7195 
u8
 
bsscfgidx
 = 
e
->bsscfgidx;

7196 
u32
 
mgmt_‰ame_Àn
 = 
	`¡oh32
(
e
->
d©Æí
Ë- (
wl_evít_rx_‰ame_d©a_t
);

7197 
u16
 
ch™√l
 = ((
	`¡oh16
(
rx‰ame
->ch™√lË& 
WL_CHANSPEC_CHAN_MASK
));

7199 
	`mem£t
(&
bssid
, 0, 
ETHER_ADDR_LEN
);

7201 i‡(
wl
->
p2p_√t
 =
ndev
) {

7202 
dev
 = 
	`wl_to_¥mry_ndev
(
wl
);

7204 
dev
 = 
ndev
;

7207 i‡(
ch™√l
 <
CH_MAX_2G_CHANNEL
)

7208 
b™d
 = 
wùhy
->
b™ds
[
IEEE80211_BAND_2GHZ
];

7210 
b™d
 = 
wùhy
->
b™ds
[
IEEE80211_BAND_5GHZ
];

7211 i‡(!
b™d
) {

7212 
	`WL_ERR
(("No valid band"));

7213  -
EINVAL
;

7215 #i‡
LINUX_VERSION_CODE
 =
	`KERNEL_VERSION
(2, 6, 38Ë&& !
	`deföed
(
WL_COMPAT_WIRELESS
)

7216 
‰eq
 = 
	`õì80211_ch™√l_to_‰equícy
(
ch™√l
);

7217 ()
b™d
->band;

7219 
‰eq
 = 
	`õì80211_ch™√l_to_‰equícy
(
ch™√l
, 
b™d
->band);

7221 i‡(
evít
 =
WLC_E_ACTION_FRAME_RX
) {

7222 
	`wldev_iov¨_gëbuf_bsscfg
(
dev
, "cur_etheraddr",

7223 
NULL
, 0, 
wl
->
io˘l_buf
, 
WLC_IOCTL_SMLEN
, 
bsscfgidx
, &wl->
io˘l_buf_sync
);

7225 
îr
 = 
	`wldev_io˘l
(
dev
, 
WLC_GET_BSSID
, &
bssid
, 
ETHER_ADDR_LEN
, 
Ál£
);

7226 i‡(
îr
 < 0)

7227 
	`WL_ERR
(("WLC_GET_BSSIDÉº‹ %d\n", 
îr
));

7228 
	`mem˝y
(
da
.
o˘ë
, 
wl
->
io˘l_buf
, 
ETHER_ADDR_LEN
);

7229 
îr
 = 
	`wl_‰ame_gë_mgmt
(
FC_ACTION
, &
da
, &
e
->
addr
, &
bssid
,

7230 &
mgmt_‰ame
, &
mgmt_‰ame_Àn
,

7231 (
u8
 *)((
wl_evít_rx_‰ame_d©a_t
 *)
rx‰ame
 + 1));

7232 i‡(
îr
 < 0) {

7233 
	`WL_ERR
(("%s: Error inÑeceivingáction frameÜen %d channel %d freq %d\n",

7234 
__func__
, 
mgmt_‰ame_Àn
, 
ch™√l
, 
‰eq
));

7235 
exô
;

7237 
is‰ì
 = 
åue
;

7238 i‡(
	`wl_cfgp2p_is_pub_a˘i⁄
(&
mgmt_‰ame
[
DOT11_MGMT_HDR_LEN
],

7239 
mgmt_‰ame_Àn
 - 
DOT11_MGMT_HDR_LEN
)) {

7240 
a˘_‰m
 = (
wifi_p2p_pub_a˘_‰ame_t
 *)

7241 (&
mgmt_‰ame
[
DOT11_MGMT_HDR_LEN
]);

7242 } i‡(
	`wl_cfgp2p_is_p2p_a˘i⁄
(&
mgmt_‰ame
[
DOT11_MGMT_HDR_LEN
],

7243 
mgmt_‰ame_Àn
 - 
DOT11_MGMT_HDR_LEN
)) {

7244 
p2p_a˘_‰m
 = (
wifi_p2p_a˘i⁄_‰ame_t
 *)

7245 (&
mgmt_‰ame
[
DOT11_MGMT_HDR_LEN
]);

7246 (Ë
p2p_a˘_‰m
;

7247 } i‡(
	`wl_cfgp2p_is_gas_a˘i⁄
(&
mgmt_‰ame
[
DOT11_MGMT_HDR_LEN
],

7248 
mgmt_‰ame_Àn
 - 
DOT11_MGMT_HDR_LEN
)) {

7249 
sd_a˘_‰m
 = (
wifi_p2psd_gas_pub_a˘_‰ame_t
 *)

7250 (&
mgmt_‰ame
[
DOT11_MGMT_HDR_LEN
]);

7251 i‡(
sd_a˘_‰m
 && 
	`wl_gë_drv_°©us_Æl
(
wl
, 
WAITING_NEXT_ACT_FRM
)) {

7252 i‡(
wl
->
√xt_af_subty≥
 =
sd_a˘_‰m
->
a˘i⁄
) {

7253 
	`WL_DBG
(("We gotáÑightÇext frame of SD!(%d)\n",

7254 
sd_a˘_‰m
->
a˘i⁄
));

7255 
	`wl_˛r_drv_°©us
(
wl
, 
WAITING_NEXT_ACT_FRM
,

7256 (
ndev
 =
wl
->
p2p_√t
) ?

7257 
	`wl_to_¥mry_ndev
(
wl
Ë: 
ndev
);

7260 
	`wl_°›_waô_√xt_a˘i⁄_‰ame
(
wl
, 
ndev
);

7263 (Ë
sd_a˘_‰m
;

7269 i‡(
wl
->
p2p_√t
 =
ndev
)

7270 
ndev
 = 
	`wl_to_¥mry_ndev
(
wl
);

7273 i‡(
a˘_‰m
) {

7275 i‡(
	`wl_gë_drv_°©us_Æl
(
wl
, 
WAITING_NEXT_ACT_FRM
)) {

7276 i‡(
wl
->
√xt_af_subty≥
 =
a˘_‰m
->
subty≥
) {

7277 
	`WL_DBG
(("We gotáÑightÇext frame!(%d)\n",

7278 
a˘_‰m
->
subty≥
));

7279 
	`wl_˛r_drv_°©us
(
wl
, 
WAITING_NEXT_ACT_FRM
,

7280 (
ndev
 =
wl
->
p2p_√t
) ?

7281 
	`wl_to_¥mry_ndev
(
wl
Ë: 
ndev
);

7284 
	`wl_°›_waô_√xt_a˘i⁄_‰ame
(
wl
, 
ndev
);

7289 
	`wl_cfgp2p_¥öt_a˘‰ame
(
Ál£
, &
mgmt_‰ame
[
DOT11_MGMT_HDR_LEN
],

7290 
mgmt_‰ame_Àn
 - 
DOT11_MGMT_HDR_LEN
);

7294 i‡(
a˘_‰m
 && (◊˘_‰m->
subty≥
 =
P2P_PAF_GON_CONF
) ||

7295 (
a˘_‰m
->
subty≥
 =
P2P_PAF_PROVDIS_RSP
))) {

7296 
	`wldev_iov¨_£töt
(
dev
, "mpc", 1);

7298 i‡(
a˘_‰m
 && (a˘_‰m->
subty≥
 =
P2P_PAF_GON_CONF
)) {

7299 
	`WL_DBG
(("P2P: GO_NEG_PHASE status cleared \n"));

7300 
	`wl_˛r_p2p_°©us
(
wl
, 
GO_NEG_PHASE
);

7303 
mgmt_‰ame
 = (
u8
 *)((
wl_evít_rx_‰ame_d©a_t
 *)
rx‰ame
 + 1);

7310 i‡(
evít
 =
WLC_E_P2P_PROBREQ_MSG
) {

7311 
	`WL_DBG
((" Evíà%s\n", (
evít
 =
WLC_E_P2P_PROBREQ_MSG
) ?

7318 i‡(
wl
->
p2p
 &&

7319 
	`wl_gë_p2p_°©us
(
wl
, 
GO_NEG_PHASE
)) {

7320 
	`WL_DBG
(("Filtering P2PÖrobe_req while "

7327 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(3, 4, 0)

7328 
	`cfg80211_rx_mgmt
(
ndev
, 
‰eq
, 0, 
mgmt_‰ame
, 
mgmt_‰ame_Àn
, 
GFP_ATOMIC
);

7330 
	`cfg80211_rx_mgmt
(
ndev
, 
‰eq
, 
mgmt_‰ame
, 
mgmt_‰ame_Àn
, 
GFP_ATOMIC
);

7333 
	`WL_DBG
(("%s: mgmt_‰ame_À¿(%dË,É->d©Æí (%d), ch™√»(%d), fªq (%d)\n", 
__func__
,

7334 
mgmt_‰ame_Àn
, 
	`¡oh32
(
e
->
d©Æí
), 
ch™√l
, 
‰eq
));

7335 
exô
:

7336 i‡(
is‰ì
)

7337 
	`k‰ì
(
mgmt_‰ame
);

7339 
	}
}

7341 #ifde‡
WL_SCHED_SCAN


7345 
	#FULL_ESCAN_ON_PFN_NET_FOUND
 0

	)

7346 
s32


7347 
	$wl_nŸify_sched_sˇn_ªsu…s
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
,

7348 c⁄° 
wl_evít_msg_t
 *
e
, *
d©a
)

7350 
wl_p‚_√t_öfo_t
 *
√töfo
, *
≤ëöfo
;

7351 
cfg80211_sˇn_ªque°
 
ªque°
;

7352 
wùhy
 *wùhy = 
	`wl_to_wùhy
(
wl
);

7353 
îr
 = 0;

7354 
cfg80211_ssid
 
ssid
[
MAX_PFN_LIST_COUNT
];

7355 
õì80211_ch™√l
 *
ch™√l
 = 
NULL
;

7356 
ch™√l_ªq
 = 0;

7357 
b™d
 = 0;

7358 
wl_p‚_sˇƒesu…s
 *
p‚_ªsu…
 = (wl_p‚_sˇƒesu…†*)
d©a
;

7360 
	`WL_DBG
(("Enter\n"));

7362 i‡(
e
->
evít_ty≥
 =
WLC_E_PFN_NET_LOST
) {

7363 
	`WL_PNO
(("PFN NET LOSTÉvent. Do Nothing \n"));

7366 
	`WL_PNO
((">>> PFN NET FOUNDÉvít. cou¡:%d \n", 
p‚_ªsu…
->
cou¡
));

7367 i‡(
p‚_ªsu…
->
cou¡
 > 0) {

7368 
i
;

7370 
	`mem£t
(&
ªque°
, 0x00, (
cfg80211_sˇn_ªque°
));

7371 
	`mem£t
(&
ssid
, 0x00, (ssid));

7372 
ªque°
.
wùhy
 = wiphy;

7374 
≤ëöfo
 = (
wl_p‚_√t_öfo_t
 *)(
d©a
 + (
wl_p‚_sˇƒesu…s_t
)

7375 - (
wl_p‚_√t_öfo_t
));

7376 
ch™√l
 = (
õì80211_ch™√l
 *)
	`kzÆloc
(

7377 ((
õì80211_ch™√l
Ë* 
MAX_PFN_LIST_COUNT
),

7378 
GFP_KERNEL
);

7379 i‡(!
ch™√l
) {

7380 
	`WL_ERR
(("No memory"));

7381 
îr
 = -
ENOMEM
;

7382 
out_îr
;

7385 
i
 = 0; i < 
p‚_ªsu…
->
cou¡
; i++) {

7386 
√töfo
 = &
≤ëöfo
[
i
];

7387 i‡(!
√töfo
) {

7388 
	`WL_ERR
(("InvÆidÇëöfÿ±r. index:%d", 
i
));

7389 
îr
 = -
EINVAL
;

7390 
out_îr
;

7392 
	`WL_PNO
((">>> SSID:%s Channel:%d \n",

7393 
√töfo
->
p‚sub√t
.
SSID
,Çëöfo->p‚sub√t.
ch™√l
));

7400 
	`mem˝y
(
ssid
[
i
].ssid, 
√töfo
->
p‚sub√t
.
SSID
,

7401 
√töfo
->
p‚sub√t
.
SSID_Àn
);

7402 
ssid
[
i
].
ssid_Àn
 = 
√töfo
->
p‚sub√t
.
SSID_Àn
;

7403 
ªque°
.
n_ssids
++;

7405 
ch™√l_ªq
 = 
√töfo
->
p‚sub√t
.
ch™√l
;

7406 
b™d
 = (
ch™√l_ªq
 <
CH_MAX_2G_CHANNEL
Ë? 
NL80211_BAND_2GHZ


7407 : 
NL80211_BAND_5GHZ
;

7408 
ch™√l
[
i
].
˚¡î_‰eq
 = 
	`õì80211_ch™√l_to_‰equícy
(
ch™√l_ªq
, 
b™d
);

7409 
ch™√l
[
i
].
b™d
 = band;

7410 
ch™√l
[
i
].
Êags
 |
IEEE80211_CHAN_NO_HT40
;

7411 
ªque°
.
ch™√ls
[
i
] = &
ch™√l
[i];

7412 
ªque°
.
n_ch™√ls
++;

7416 i‡(
ªque°
.
n_ssids
)

7417 
ªque°
.
ssids
 = &
ssid
[0];

7419 i‡(
	`wl_gë_drv_°©us_Æl
(
wl
, 
SCANNING
)) {

7421 
	`wl_nŸify_esˇn_com∂ëe
(
wl
, 
ndev
, 
åue
,Årue);

7424 i‡(
	`wl_gë_p2p_°©us
(
wl
, 
DISCOVERY_ON
)) {

7425 
	`WL_PNO
((">>> P2P discovery was ON. Disabling it\n"));

7426 
îr
 = 
	`wl_cfgp2p_discovî_íabÀ_£¨ch
(
wl
, 
Ál£
);

7427 i‡(
	`u∆ikñy
(
îr
)) {

7428 
	`wl_˛r_drv_°©us
(
wl
, 
SCANNING
, 
ndev
);

7429 
out_îr
;

7433 
	`wl_£t_drv_°©us
(
wl
, 
SCANNING
, 
ndev
);

7434 #i‡
FULL_ESCAN_ON_PFN_NET_FOUND


7435 
	`WL_PNO
((">>> Doing Full ESCAN on PNOÉvent\n"));

7436 
îr
 = 
	`wl_do_esˇn
(
wl
, 
wùhy
, 
ndev
, 
NULL
);

7438 
	`WL_PNO
((">>> DoingÅargeted ESCAN on PNOÉvent\n"));

7439 
îr
 = 
	`wl_do_esˇn
(
wl
, 
wùhy
, 
ndev
, &
ªque°
);

7441 i‡(
îr
) {

7442 
	`wl_˛r_drv_°©us
(
wl
, 
SCANNING
, 
ndev
);

7443 
out_îr
;

7445 
wl
->
sched_sˇn_ru¬ög
 = 
TRUE
;

7448 
	`WL_ERR
(("FALSE PNO Event. (pfn_count == 0) \n"));

7450 
out_îr
:

7451 i‡(
ch™√l
)

7452 
	`k‰ì
(
ch™√l
);

7453  
îr
;

7454 
	}
}

7457 
	$wl_öô_c⁄f
(
wl_c⁄f
 *
c⁄f
)

7459 
	`WL_DBG
(("Enter \n"));

7460 
c⁄f
->
‰ag_thªshﬁd
 = (
u32
)-1;

7461 
c⁄f
->
πs_thªshﬁd
 = (
u32
)-1;

7462 
c⁄f
->
ªåy_sh‹t
 = (
u32
)-1;

7463 
c⁄f
->
ªåy_l⁄g
 = (
u32
)-1;

7464 
c⁄f
->
tx_powî
 = -1;

7465 
	}
}

7467 
	$wl_öô_¥of
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
)

7469 
Êags
;

7470 
wl_¥ofûe
 *
¥ofûe
 = 
	`wl_gë_¥ofûe_by_√tdev
(
wl
, 
ndev
);

7472 
	`•ö_lock_úqßve
(&
wl
->
cfgdrv_lock
, 
Êags
);

7473 
	`mem£t
(
¥ofûe
, 0, (
wl_¥ofûe
));

7474 
	`•ö_u∆ock_úqª°‹e
(&
wl
->
cfgdrv_lock
, 
Êags
);

7475 
	}
}

7477 
	$wl_öô_evít_h™dÀr
(
wl_¥iv
 *
wl
)

7479 
	`mem£t
(
wl
->
evt_h™dÀr
, 0, (wl->evt_handler));

7481 
wl
->
evt_h™dÀr
[
WLC_E_SCAN_COMPLETE
] = 
wl_nŸify_sˇn_°©us
;

7482 
wl
->
evt_h™dÀr
[
WLC_E_AUTH
] = 
wl_nŸify_c⁄√˘_°©us
;

7483 
wl
->
evt_h™dÀr
[
WLC_E_ASSOC
] = 
wl_nŸify_c⁄√˘_°©us
;

7484 
wl
->
evt_h™dÀr
[
WLC_E_LINK
] = 
wl_nŸify_c⁄√˘_°©us
;

7485 
wl
->
evt_h™dÀr
[
WLC_E_DEAUTH_IND
] = 
wl_nŸify_c⁄√˘_°©us
;

7486 
wl
->
evt_h™dÀr
[
WLC_E_DEAUTH
] = 
wl_nŸify_c⁄√˘_°©us
;

7487 
wl
->
evt_h™dÀr
[
WLC_E_DISASSOC_IND
] = 
wl_nŸify_c⁄√˘_°©us
;

7488 
wl
->
evt_h™dÀr
[
WLC_E_ASSOC_IND
] = 
wl_nŸify_c⁄√˘_°©us
;

7489 
wl
->
evt_h™dÀr
[
WLC_E_REASSOC_IND
] = 
wl_nŸify_c⁄√˘_°©us
;

7490 
wl
->
evt_h™dÀr
[
WLC_E_ROAM
] = 
wl_nŸify_rﬂmög_°©us
;

7491 
wl
->
evt_h™dÀr
[
WLC_E_MIC_ERROR
] = 
wl_nŸify_mic_°©us
;

7492 
wl
->
evt_h™dÀr
[
WLC_E_SET_SSID
] = 
wl_nŸify_c⁄√˘_°©us
;

7493 
wl
->
evt_h™dÀr
[
WLC_E_ACTION_FRAME_RX
] = 
wl_nŸify_rx_mgmt_‰ame
;

7494 
wl
->
evt_h™dÀr
[
WLC_E_PROBREQ_MSG
] = 
wl_nŸify_rx_mgmt_‰ame
;

7495 
wl
->
evt_h™dÀr
[
WLC_E_P2P_PROBREQ_MSG
] = 
wl_nŸify_rx_mgmt_‰ame
;

7496 
wl
->
evt_h™dÀr
[
WLC_E_P2P_DISC_LISTEN_COMPLETE
] = 
wl_cfgp2p_li°í_com∂ëe
;

7497 
wl
->
evt_h™dÀr
[
WLC_E_ACTION_FRAME_COMPLETE
] = 
wl_cfgp2p_a˘i⁄_tx_com∂ëe
;

7498 
wl
->
evt_h™dÀr
[
WLC_E_ACTION_FRAME_OFF_CHAN_COMPLETE
] = 
wl_cfgp2p_a˘i⁄_tx_com∂ëe
;

7499 #ifde‡
PNO_SUPPORT


7500 
wl
->
evt_h™dÀr
[
WLC_E_PFN_NET_FOUND
] = 
wl_nŸify_p‚_°©us
;

7502 
	}
}

7504 
s32
 
	$wl_öô_¥iv_mem
(
wl_¥iv
 *
wl
)

7506 
	`WL_DBG
(("Enter \n"));

7507 
wl
->
sˇn_ªsu…s
 = (*)
	`kzÆloc
(
WL_SCAN_BUF_MAX
, 
GFP_KERNEL
);

7508 i‡(
	`u∆ikñy
(!
wl
->
sˇn_ªsu…s
)) {

7509 
	`WL_ERR
(("ScanÑesultsálloc failed\n"));

7510 
öô_¥iv_mem_out
;

7512 
wl
->
c⁄f
 = (*)
	`kzÆloc
((*wl->c⁄f), 
GFP_KERNEL
);

7513 i‡(
	`u∆ikñy
(!
wl
->
c⁄f
)) {

7514 
	`WL_ERR
(("wl_confálloc failed\n"));

7515 
öô_¥iv_mem_out
;

7517 
wl
->
sˇn_ªq_öt
 =

7518 (*)
	`kzÆloc
((*
wl
->
sˇn_ªq_öt
), 
GFP_KERNEL
);

7519 i‡(
	`u∆ikñy
(!
wl
->
sˇn_ªq_öt
)) {

7520 
	`WL_ERR
(("ScanÑeqálloc failed\n"));

7521 
öô_¥iv_mem_out
;

7523 
wl
->
io˘l_buf
 = (*)
	`kzÆloc
(
WLC_IOCTL_MAXLEN
, 
GFP_KERNEL
);

7524 i‡(
	`u∆ikñy
(!
wl
->
io˘l_buf
)) {

7525 
	`WL_ERR
(("Ioctl bufálloc failed\n"));

7526 
öô_¥iv_mem_out
;

7528 
wl
->
esˇn_io˘l_buf
 = (*)
	`kzÆloc
(
WLC_IOCTL_MAXLEN
, 
GFP_KERNEL
);

7529 i‡(
	`u∆ikñy
(!
wl
->
esˇn_io˘l_buf
)) {

7530 
	`WL_ERR
(("Ioctl bufálloc failed\n"));

7531 
öô_¥iv_mem_out
;

7533 
wl
->
exåa_buf
 = (*)
	`kzÆloc
(
WL_EXTRA_BUF_MAX
, 
GFP_KERNEL
);

7534 i‡(
	`u∆ikñy
(!
wl
->
exåa_buf
)) {

7535 
	`WL_ERR
(("Extra bufálloc failed\n"));

7536 
öô_¥iv_mem_out
;

7538 
wl
->
isˇn
 = (*)
	`kzÆloc
((*wl->isˇn), 
GFP_KERNEL
);

7539 i‡(
	`u∆ikñy
(!
wl
->
isˇn
)) {

7540 
	`WL_ERR
(("Iscan bufálloc failed\n"));

7541 
öô_¥iv_mem_out
;

7543 
wl
->
pmk_li°
 = (*)
	`kzÆloc
((*wl->pmk_li°), 
GFP_KERNEL
);

7544 i‡(
	`u∆ikñy
(!
wl
->
pmk_li°
)) {

7545 
	`WL_ERR
(("pmkÜistálloc failed\n"));

7546 
öô_¥iv_mem_out
;

7548 
wl
->
°a_öfo
 = (*)
	`kzÆloc
((*wl->°a_öfo), 
GFP_KERNEL
);

7549 i‡(
	`u∆ikñy
(!
wl
->
°a_öfo
)) {

7550 
	`WL_ERR
(("sta infoálloc failed\n"));

7551 
öô_¥iv_mem_out
;

7554 #i‡
	`deföed
(
STATIC_WL_PRIV_STRUCT
)

7555 
wl
->
c⁄n_öfo
 = (*)
	`kzÆloc
((*wl->c⁄n_öfo), 
GFP_KERNEL
);

7556 i‡(
	`u∆ikñy
(!
wl
->
c⁄n_öfo
)) {

7557 
	`WL_ERR
(("wl->conn_infoálloc failed\n"));

7558 
öô_¥iv_mem_out
;

7560 
wl
->
õ
 = (*)
	`kzÆloc
((*wl->õ), 
GFP_KERNEL
);

7561 i‡(
	`u∆ikñy
(!
wl
->
õ
)) {

7562 
	`WL_ERR
(("wl->ieálloc failed\n"));

7563 
öô_¥iv_mem_out
;

7565 
wl
->
esˇn_öfo
.
esˇn_buf
 = 
	`dhd_os_¥óŒoc
(
NULL
, 
DHD_PREALLOC_WIPHY_ESCAN0
, 0);

7566 
	`bzîo
(
wl
->
esˇn_öfo
.
esˇn_buf
, 
ESCAN_BUF_SIZE
);

7568 
wl
->
afx_hdl
 = (*)
	`kzÆloc
((*wl->afx_hdl), 
GFP_KERNEL
);

7569 i‡(
	`u∆ikñy
(!
wl
->
afx_hdl
)) {

7570 
	`WL_ERR
(("afx hdlálloc failed\n"));

7571 
öô_¥iv_mem_out
;

7573 
	`öô_com∂ëi⁄
(&
wl
->
a˘_‰m_sˇn
);

7574 
	`öô_com∂ëi⁄
(&
wl
->
waô_√xt_af
);

7576 
	`INIT_WORK
(&
wl
->
afx_hdl
->
w‹k
, 
wl_cfg80211_afx_h™dÀr
);

7580 
öô_¥iv_mem_out
:

7581 
	`wl_deöô_¥iv_mem
(
wl
);

7583  -
ENOMEM
;

7584 
	}
}

7586 
	$wl_deöô_¥iv_mem
(
wl_¥iv
 *
wl
)

7588 
	`k‰ì
(
wl
->
sˇn_ªsu…s
);

7589 
wl
->
sˇn_ªsu…s
 = 
NULL
;

7590 
	`k‰ì
(
wl
->
c⁄f
);

7591 
wl
->
c⁄f
 = 
NULL
;

7592 
	`k‰ì
(
wl
->
sˇn_ªq_öt
);

7593 
wl
->
sˇn_ªq_öt
 = 
NULL
;

7594 
	`k‰ì
(
wl
->
io˘l_buf
);

7595 
wl
->
io˘l_buf
 = 
NULL
;

7596 
	`k‰ì
(
wl
->
esˇn_io˘l_buf
);

7597 
wl
->
esˇn_io˘l_buf
 = 
NULL
;

7598 
	`k‰ì
(
wl
->
exåa_buf
);

7599 
wl
->
exåa_buf
 = 
NULL
;

7600 
	`k‰ì
(
wl
->
isˇn
);

7601 
wl
->
isˇn
 = 
NULL
;

7602 
	`k‰ì
(
wl
->
pmk_li°
);

7603 
wl
->
pmk_li°
 = 
NULL
;

7604 
	`k‰ì
(
wl
->
°a_öfo
);

7605 
wl
->
°a_öfo
 = 
NULL
;

7606 #i‡
	`deföed
(
STATIC_WL_PRIV_STRUCT
)

7607 
	`k‰ì
(
wl
->
c⁄n_öfo
);

7608 
wl
->
c⁄n_öfo
 = 
NULL
;

7609 
	`k‰ì
(
wl
->
õ
);

7610 
wl
->
õ
 = 
NULL
;

7611 
wl
->
esˇn_öfo
.
esˇn_buf
 = 
NULL
;

7613 i‡(
wl
->
afx_hdl
) {

7614 
	`ˇn˚l_w‹k_sync
(&
wl
->
afx_hdl
->
w‹k
);

7615 
	`k‰ì
(
wl
->
afx_hdl
);

7616 
wl
->
afx_hdl
 = 
NULL
;

7619 i‡(
wl
->
≠_öfo
) {

7620 
	`k‰ì
(
wl
->
≠_öfo
->
w∑_õ
);

7621 
	`k‰ì
(
wl
->
≠_öfo
->
r¢_õ
);

7622 
	`k‰ì
(
wl
->
≠_öfo
->
wps_õ
);

7623 
	`k‰ì
(
wl
->
≠_öfo
);

7624 
wl
->
≠_öfo
 = 
NULL
;

7626 
	}
}

7628 
s32
 
	$wl_¸óã_evít_h™dÀr
(
wl_¥iv
 *
wl
)

7630 
ªt
 = 0;

7631 
	`WL_DBG
(("Enter \n"));

7634 
wl
->
evít_tsk
.
thr_pid
 = -1;

7636 #ifde‡
USE_KTHREAD_API


7637 
	`PROC_START2
(
wl_evít_h™dÀr
, 
wl
, &wl->
evít_tsk
, 0, "wl_event_handler");

7639 
	`PROC_START
(
wl_evít_h™dÀr
, 
wl
, &wl->
evít_tsk
, 0);

7641 i‡(
wl
->
evít_tsk
.
thr_pid
 < 0)

7642 
ªt
 = -
ENOMEM
;

7643  
ªt
;

7644 
	}
}

7646 
	$wl_de°roy_evít_h™dÀr
(
wl_¥iv
 *
wl
)

7648 i‡(
wl
->
evít_tsk
.
thr_pid
 >= 0)

7649 
	`PROC_STOP
(&
wl
->
evít_tsk
);

7650 
	}
}

7652 
	$wl_ãrm_isˇn
(
wl_¥iv
 *
wl
)

7654 
wl_isˇn_˘æ
 *
isˇn
 = 
	`wl_to_isˇn
(
wl
);

7655 
	`WL_TRACE
(("In\n"));

7656 i‡(
wl
->
isˇn_⁄
 && 
isˇn
->
tsk
) {

7657 
isˇn
->
°©e
 = 
WL_ISCAN_STATE_IDLE
;

7658 
	`WL_INFO
(("SIGTERM\n"));

7659 
	`£nd_sig
(
SIGTERM
, 
isˇn
->
tsk
, 1);

7660 
	`WL_DBG
(("kthread_stop\n"));

7661 
	`kthªad_°›
(
isˇn
->
tsk
);

7662 
isˇn
->
tsk
 = 
NULL
;

7664 
	}
}

7666 
	$wl_nŸify_isˇn_com∂ëe
(
wl_isˇn_˘æ
 *
isˇn
, 
boﬁ
 
ab‹ãd
)

7668 
wl_¥iv
 *
wl
 = 
	`isˇn_to_wl
(
isˇn
);

7669 
√t_devi˚
 *
ndev
 = 
	`wl_to_¥mry_ndev
(
wl
);

7670 
Êags
;

7672 
	`WL_DBG
(("Enter \n"));

7673 i‡(!
	`wl_gë_drv_°©us
(
wl
, 
SCANNING
, 
ndev
)) {

7674 
	`wl_˛r_drv_°©us
(
wl
, 
SCANNING
, 
ndev
);

7675 
	`WL_ERR
(("Scan complete while deviceÇot scanning\n"));

7678 
	`•ö_lock_úqßve
(&
wl
->
cfgdrv_lock
, 
Êags
);

7679 
	`wl_˛r_drv_°©us
(
wl
, 
SCANNING
, 
ndev
);

7680 i‡(
	`likñy
(
wl
->
sˇn_ªque°
)) {

7681 
	`cfg80211_sˇn_d⁄e
(
wl
->
sˇn_ªque°
, 
ab‹ãd
);

7682 
wl
->
sˇn_ªque°
 = 
NULL
;

7684 
	`•ö_u∆ock_úqª°‹e
(&
wl
->
cfgdrv_lock
, 
Êags
);

7685 
wl
->
isˇn_kick°¨t
 = 
Ál£
;

7686 
	}
}

7688 
s32
 
	$wl_wakeup_isˇn
(
wl_isˇn_˘æ
 *
isˇn
)

7690 i‡(
	`likñy
(
isˇn
->
°©e
 !
WL_ISCAN_STATE_IDLE
)) {

7691 
	`WL_DBG
(("wake up iscan\n"));

7692 
	`up
(&
isˇn
->
sync
);

7696  -
EIO
;

7697 
	}
}

7699 
s32


7700 
	$wl_gë_isˇn_ªsu…s
(
wl_isˇn_˘æ
 *
isˇn
, 
u32
 *
°©us
,

7701 
wl_sˇn_ªsu…s
 **
bss_li°
)

7703 
wl_isˇn_ªsu…s
 
li°
;

7704 
wl_sˇn_ªsu…s
 *
ªsu…s
;

7705 
wl_isˇn_ªsu…s
 *
li°_buf
;

7706 
s32
 
îr
 = 0;

7708 
	`WL_DBG
(("Enter \n"));

7709 
	`mem£t
(
isˇn
->
sˇn_buf
, 0, 
WL_ISCAN_BUF_MAX
);

7710 
li°_buf
 = (
wl_isˇn_ªsu…s
 *)
isˇn
->
sˇn_buf
;

7711 
ªsu…s
 = &
li°_buf
->results;

7712 
ªsu…s
->
buÊí
 = 
WL_ISCAN_RESULTS_FIXED_SIZE
;

7713 
ªsu…s
->
vîsi⁄
 = 0;

7714 
ªsu…s
->
cou¡
 = 0;

7716 
	`mem£t
(&
li°
, 0, (list));

7717 
li°
.
ªsu…s
.
buÊí
 = 
	`htod32
(
WL_ISCAN_BUF_MAX
);

7718 
îr
 = 
	`wldev_iov¨_gëbuf
(
isˇn
->
dev
, "isˇƒesu…s", &
li°
,

7719 
WL_ISCAN_RESULTS_FIXED_SIZE
, 
isˇn
->
sˇn_buf
,

7720 
WL_ISCAN_BUF_MAX
, 
NULL
);

7721 i‡(
	`u∆ikñy
(
îr
)) {

7722 
	`WL_ERR
(("îr‹ (%d)\n", 
îr
));

7723  
îr
;

7725 
ªsu…s
->
buÊí
 = 
	`dtoh32
(results->buflen);

7726 
ªsu…s
->
vîsi⁄
 = 
	`dtoh32
(results->version);

7727 
ªsu…s
->
cou¡
 = 
	`dtoh32
(results->count);

7728 
	`WL_DBG
(("ªsu…s->cou¡ = %d\n", 
ªsu…s
->
cou¡
));

7729 
	`WL_DBG
(("ªsu…s->buÊí = %d\n", 
ªsu…s
->
buÊí
));

7730 *
°©us
 = 
	`dtoh32
(
li°_buf
->status);

7731 *
bss_li°
 = 
ªsu…s
;

7733  
îr
;

7734 
	}
}

7736 
s32
 
	$wl_isˇn_d⁄e
(
wl_¥iv
 *
wl
)

7738 
wl_isˇn_˘æ
 *
isˇn
 = 
wl
->iscan;

7739 
s32
 
îr
 = 0;

7741 
isˇn
->
°©e
 = 
WL_ISCAN_STATE_IDLE
;

7742 
	`muãx_lock
(&
wl
->
u§_sync
);

7743 
	`wl_öf‹m_bss
(
wl
);

7744 
	`wl_nŸify_isˇn_com∂ëe
(
isˇn
, 
Ál£
);

7745 
	`muãx_u∆ock
(&
wl
->
u§_sync
);

7747  
îr
;

7748 
	}
}

7750 
s32
 
	$wl_isˇn_≥ndög
(
wl_¥iv
 *
wl
)

7752 
wl_isˇn_˘æ
 *
isˇn
 = 
wl
->iscan;

7753 
s32
 
îr
 = 0;

7756 
	`mod_timî
(&
isˇn
->
timî
, 
jiffõs
 + 
	`m£cs_to_jiffõs
(isˇn->
timî_ms
));

7757 
isˇn
->
timî_⁄
 = 1;

7759  
îr
;

7760 
	}
}

7762 
s32
 
	$wl_isˇn_ö¥ogªss
(
wl_¥iv
 *
wl
)

7764 
wl_isˇn_˘æ
 *
isˇn
 = 
wl
->iscan;

7765 
s32
 
îr
 = 0;

7767 
	`muãx_lock
(&
wl
->
u§_sync
);

7768 
	`wl_öf‹m_bss
(
wl
);

7769 
	`wl_run_isˇn
(
isˇn
, 
NULL
, 
WL_SCAN_ACTION_CONTINUE
);

7770 
	`muãx_u∆ock
(&
wl
->
u§_sync
);

7772 
	`mod_timî
(&
isˇn
->
timî
, 
jiffõs
 + 
	`m£cs_to_jiffõs
(isˇn->
timî_ms
));

7773 
isˇn
->
timî_⁄
 = 1;

7775  
îr
;

7776 
	}
}

7778 
s32
 
	$wl_isˇn_ab‹ãd
(
wl_¥iv
 *
wl
)

7780 
wl_isˇn_˘æ
 *
isˇn
 = 
wl
->iscan;

7781 
s32
 
îr
 = 0;

7783 
isˇn
->
°©e
 = 
WL_ISCAN_STATE_IDLE
;

7784 
	`muãx_lock
(&
wl
->
u§_sync
);

7785 
	`wl_nŸify_isˇn_com∂ëe
(
isˇn
, 
åue
);

7786 
	`muãx_u∆ock
(&
wl
->
u§_sync
);

7788  
îr
;

7789 
	}
}

7791 
s32
 
	$wl_isˇn_thªad
(*
d©a
)

7793 
wl_isˇn_˘æ
 *
isˇn
 = (wl_isˇn_˘æ *)
d©a
;

7794 
wl_¥iv
 *
wl
 = 
	`isˇn_to_wl
(
isˇn
);

7795 
u32
 
°©us
;

7796 
îr
 = 0;

7798 
	`Ælow_sig«l
(
SIGTERM
);

7799 
°©us
 = 
WL_SCAN_RESULTS_PARTIAL
;

7800 
	`likñy
(!
	`down_öãºu±ibÀ
(&
isˇn
->
sync
))) {

7801 i‡(
	`kthªad_should_°›
())

7803 i‡(
isˇn
->
timî_⁄
) {

7804 
	`dñ_timî_sync
(&
isˇn
->
timî
);

7805 
isˇn
->
timî_⁄
 = 0;

7807 
	`muãx_lock
(&
wl
->
u§_sync
);

7808 
îr
 = 
	`wl_gë_isˇn_ªsu…s
(
isˇn
, &
°©us
, &
wl
->
bss_li°
);

7809 i‡(
	`u∆ikñy
(
îr
)) {

7810 
°©us
 = 
WL_SCAN_RESULTS_ABORTED
;

7811 
	`WL_ERR
(("Abort iscan\n"));

7813 
	`muãx_u∆ock
(&
wl
->
u§_sync
);

7814 
isˇn
->
isˇn_h™dÀr
[
°©us
] (
wl
);

7816 i‡(
isˇn
->
timî_⁄
) {

7817 
	`dñ_timî_sync
(&
isˇn
->
timî
);

7818 
isˇn
->
timî_⁄
 = 0;

7820 
	`WL_DBG
(("%†wa†ãrmö©ed\n", 
__func__
));

7823 
	}
}

7825 
	$wl_sˇn_timeout
(
d©a
)

7827 
wl_¥iv
 *
wl
 = (wl_¥iv *)
d©a
;

7829 i‡(
wl
->
sˇn_ªque°
) {

7830 
	`WL_ERR
(("timerÉxpired\n"));

7831 i‡(
wl
->
esˇn_⁄
)

7832 
	`wl_nŸify_esˇn_com∂ëe
(
wl
, wl->
esˇn_öfo
.
ndev
, 
åue
,Årue);

7834 
	`wl_nŸify_isˇn_com∂ëe
(
	`wl_to_isˇn
(
wl
), 
åue
);

7836 
	}
}

7837 
	$wl_isˇn_timî
(
d©a
)

7839 
wl_isˇn_˘æ
 *
isˇn
 = (wl_isˇn_˘æ *)
d©a
;

7841 i‡(
isˇn
) {

7842 
isˇn
->
timî_⁄
 = 0;

7843 
	`WL_DBG
(("timerÉxpired\n"));

7844 
	`wl_wakeup_isˇn
(
isˇn
);

7846 
	}
}

7848 
s32
 
	$wl_övoke_isˇn
(
wl_¥iv
 *
wl
)

7850 
wl_isˇn_˘æ
 *
isˇn
 = 
	`wl_to_isˇn
(
wl
);

7851 
îr
 = 0;

7853 i‡(
wl
->
isˇn_⁄
 && !
isˇn
->
tsk
) {

7854 
isˇn
->
°©e
 = 
WL_ISCAN_STATE_IDLE
;

7855 
	`£ma_öô
(&
isˇn
->
sync
, 0);

7856 
isˇn
->
tsk
 = 
	`kthªad_run
(
wl_isˇn_thªad
, iscan, "wl_iscan");

7857 i‡(
	`IS_ERR
(
isˇn
->
tsk
)) {

7858 
	`WL_ERR
(("CouldÇot create iscanÅhread\n"));

7859 
isˇn
->
tsk
 = 
NULL
;

7860  -
ENOMEM
;

7864  
îr
;

7865 
	}
}

7867 
	$wl_öô_isˇn_h™dÀr
(
wl_isˇn_˘æ
 *
isˇn
)

7869 
	`mem£t
(
isˇn
->
isˇn_h™dÀr
, 0, (iscan->iscan_handler));

7870 
isˇn
->
isˇn_h™dÀr
[
WL_SCAN_RESULTS_SUCCESS
] = 
wl_isˇn_d⁄e
;

7871 
isˇn
->
isˇn_h™dÀr
[
WL_SCAN_RESULTS_PARTIAL
] = 
wl_isˇn_ö¥ogªss
;

7872 
isˇn
->
isˇn_h™dÀr
[
WL_SCAN_RESULTS_PENDING
] = 
wl_isˇn_≥ndög
;

7873 
isˇn
->
isˇn_h™dÀr
[
WL_SCAN_RESULTS_ABORTED
] = 
wl_isˇn_ab‹ãd
;

7874 
isˇn
->
isˇn_h™dÀr
[
WL_SCAN_RESULTS_NO_MEM
] = 
wl_isˇn_ab‹ãd
;

7875 
	}
}

7877 
s32


7878 
	$wl_cfg80211_√tdev_nŸifõr_ˇŒ
(
nŸifõr_block
 * 
nb
,

7879 
°©e
,

7880 *
ndev
)

7882 
√t_devi˚
 *
dev
 = 
ndev
;

7883 
wúñess_dev
 *
wdev
 = 
dev
->
õì80211_±r
;

7884 
wl_¥iv
 *
wl
 = 
wlcfg_drv_¥iv
;

7885 
ªf˙t
 = 0;

7887 
	`WL_DBG
(("Enter \n"));

7888 i‡(!
wdev
 || !
wl
 || 
dev
 =
	`wl_to_¥mry_ndev
(wl))

7889  
NOTIFY_DONE
;

7890 
°©e
) {

7891 
NETDEV_DOWN
:

7892 
	`w‹k_≥ndög
(&
wdev
->
˛ónup_w‹k
Ë&& 
ªf˙t
 < 100) {

7893 i‡(
ªf˙t
%5 == 0)

7894 
	`WL_ERR
(("%s : [NETDEV_DOWN] work_pending (%dÅh)\n",

7895 
__FUNCTION__
, 
ªf˙t
));

7896 
	`£t_cuºít_°©e
(
TASK_INTERRUPTIBLE
);

7897 
	`scheduÀ_timeout
(100);

7898 
	`£t_cuºít_°©e
(
TASK_RUNNING
);

7899 
ªf˙t
++;

7903 
NETDEV_UNREGISTER
:

7905 
	`wl_dóŒoc_√töfo
(
wl
, 
ndev
);

7907 
NETDEV_GOING_DOWN
:

7914 i‡(
	`wl_gë_drv_°©us
(
wl
, 
SCANNING
, 
dev
)) {

7915 i‡(
wl
->
esˇn_⁄
) {

7916 
	`wl_nŸify_esˇn_com∂ëe
(
wl
, 
dev
, 
åue
,Årue);

7921  
NOTIFY_DONE
;

7922 
	}
}

7923 
nŸifõr_block
 
	gwl_cfg80211_√tdev_nŸifõr
 = {

7924 .
nŸifõr_ˇŒ
 = 
wl_cfg80211_√tdev_nŸifõr_ˇŒ
,

7927 
s32
 
	$wl_nŸify_esˇn_com∂ëe
(
wl_¥iv
 *
wl
,

7928 
√t_devi˚
 *
ndev
,

7929 
boﬁ
 
ab‹ãd
, boﬁ 
fw_ab‹t
)

7931 
wl_sˇn_∑øms_t
 *
∑øms
 = 
NULL
;

7932 
s32
 
∑øms_size
 = 0;

7933 
s32
 
îr
 = 
BCME_OK
;

7934 
Êags
;

7935 
√t_devi˚
 *
dev
;

7937 
	`WL_DBG
(("Enter \n"));

7939 i‡(
wl
->
esˇn_öfo
.
ndev
 !=Çdev)

7941 
	`WL_ERR
(("ndev i†dif„ª¡ %∞%p\n", 
wl
->
esˇn_öfo
.
ndev
,Çdev));

7942  
îr
;

7945 i‡(
wl
->
sˇn_ªque°
) {

7946 i‡(
wl
->
sˇn_ªque°
->
dev
 =wl->
p2p_√t
)

7947 
dev
 = 
	`wl_to_¥mry_ndev
(
wl
);

7949 
dev
 = 
wl
->
sˇn_ªque°
->dev;

7952 
	`WL_DBG
(("wl->scan_request is NULL may be internal scan."

7954 
ndev
, 
	`wl_to_¥mry_ndev
(
wl
), wl->
p2p_√t
));

7955 
dev
 = 
ndev
;

7957 i‡(
fw_ab‹t
 && !
	`ö_©omic
()) {

7959 
∑øms
 = 
	`wl_cfg80211_sˇn_Æloc_∑øms
(-1, 0, &
∑øms_size
);

7960 i‡(
∑øms
 =
NULL
) {

7961 
	`WL_ERR
(("scanÖaramsállocation failed \n"));

7962 
îr
 = -
ENOMEM
;

7965 
îr
 = 
	`wldev_io˘l
(
dev
, 
WLC_SCAN
, 
∑øms
, 
∑øms_size
, 
åue
);

7966 i‡(
îr
 < 0) {

7967 
	`WL_ERR
(("scanábort failed \n"));

7971 i‡(
	`timî_≥ndög
(&
wl
->
sˇn_timeout
))

7972 
	`dñ_timî_sync
(&
wl
->
sˇn_timeout
);

7973 #i‡
	`deföed
(
ESCAN_RESULT_PATCH
)

7974 i‡(
	`likñy
(
wl
->
sˇn_ªque°
)) {

7975 
wl
->
bss_li°
 = (
wl_sˇn_ªsu…s_t
 *)wl->
esˇn_öfo
.
esˇn_buf
;

7976 
	`wl_öf‹m_bss
(
wl
);

7979 
	`•ö_lock_úqßve
(&
wl
->
cfgdrv_lock
, 
Êags
);

7980 #ifde‡
WL_SCHED_SCAN


7981 i‡(
wl
->
sched_sˇn_ªq
 && !wl->
sˇn_ªque°
) {

7982 
	`WL_PNO
((">>> REPORTING SCHED SCAN RESULTS \n"));

7983 i‡(
ab‹ãd
)

7984 
	`cfg80211_sched_sˇn_°›≥d
(
wl
->
sched_sˇn_ªq
->
wùhy
);

7986 
	`cfg80211_sched_sˇn_ªsu…s
(
wl
->
sched_sˇn_ªq
->
wùhy
);

7987 
wl
->
sched_sˇn_ru¬ög
 = 
FALSE
;

7988 
wl
->
sched_sˇn_ªq
 = 
NULL
;

7991 i‡(
	`likñy
(
wl
->
sˇn_ªque°
)) {

7992 
	`cfg80211_sˇn_d⁄e
(
wl
->
sˇn_ªque°
, 
ab‹ãd
);

7993 
wl
->
sˇn_ªque°
 = 
NULL
;

7995 i‡(
	`p2p_is_⁄
(
wl
))

7996 
	`wl_˛r_p2p_°©us
(
wl
, 
SCANNING
);

7997 
	`wl_˛r_drv_°©us
(
wl
, 
SCANNING
, 
dev
);

7998 
	`•ö_u∆ock_úqª°‹e
(&
wl
->
cfgdrv_lock
, 
Êags
);

7999 i‡(
∑øms
)

8000 
	`k‰ì
(
∑øms
);

8002  
îr
;

8003 
	}
}

8005 
s32
 
	$wl_esˇn_h™dÀr
(
wl_¥iv
 *
wl
,

8006 
√t_devi˚
 *
ndev
,

8007 c⁄° 
wl_evít_msg_t
 *
e
, *
d©a
)

8009 
s32
 
îr
 = 
BCME_OK
;

8010 
s32
 
°©us
 = 
	`¡oh32
(
e
->status);

8011 
wl_bss_öfo_t
 *
bi
;

8012 
wl_esˇn_ªsu…_t
 *
esˇn_ªsu…
;

8013 
wl_bss_öfo_t
 *
bss
 = 
NULL
;

8014 
wl_sˇn_ªsu…s_t
 *
li°
;

8015 
wifi_p2p_õ_t
 * 
p2p_õ
;

8016 
u32
 
bi_Àngth
;

8017 
u32
 
i
;

8018 
u8
 *
p2p_dev_addr
 = 
NULL
;

8020 
	`WL_DBG
(("ÉnterÉventÅype : %d, status : %d \n",

8021 
	`¡oh32
(
e
->
evít_ty≥
),Çtoh32”->
°©us
)));

8023 
	`muãx_lock
(&
wl
->
u§_sync
);

8025 i‡(
	`wl_gë_p2p_°©us
(
wl
, 
SCANNING
)) {

8026 i‡(
	`wl_gë_drv_°©us_Æl
(
wl
, 
SENDING_ACT_FRM
))

8027 
ndev
 = 
wl
->
afx_hdl
->
dev
;

8029 
ndev
 = 
wl
->
esˇn_öfo
.ndev;

8032 i‡(!
ndev
 || !
wl
->
esˇn_⁄
 ||

8033 (!
	`wl_gë_drv_°©us
(
wl
, 
SCANNING
, 
ndev
) &&

8034 !
wl
->
sched_sˇn_ru¬ög
)) {

8035 
	`WL_ERR
(("escan isÇotÑeadyÇdev %p wl->escan_on %d drv_status 0x%x\n",

8036 
ndev
, 
wl
->
esˇn_⁄
, 
	`wl_gë_drv_°©us
(wl, 
SCANNING
,Çdev)));

8037 
exô
;

8039 i‡(
°©us
 =
WLC_E_STATUS_PARTIAL
) {

8040 
	`WL_INFO
(("WLC_E_STATUS_PARTIAL \n"));

8041 
esˇn_ªsu…
 = (
wl_esˇn_ªsu…_t
 *Ë
d©a
;

8042 i‡(!
esˇn_ªsu…
) {

8043 
	`WL_ERR
(("InvalidÉscanÑesult (NULLÖointer)\n"));

8044 
exô
;

8046 i‡(
	`dtoh16
(
esˇn_ªsu…
->
bss_cou¡
) != 1) {

8047 
	`WL_ERR
(("InvÆid bss_cou¡ %d: ign‹ög\n", 
esˇn_ªsu…
->
bss_cou¡
));

8048 
exô
;

8050 
bi
 = 
esˇn_ªsu…
->
bss_öfo
;

8051 i‡(!
bi
) {

8052 
	`WL_ERR
(("InvalidÉscan bss info (NULLÖointer)\n"));

8053 
exô
;

8055 
bi_Àngth
 = 
	`dtoh32
(
bi
->
Àngth
);

8056 i‡(
bi_Àngth
 !(
	`dtoh32
(
esˇn_ªsu…
->
buÊí
Ë- 
WL_ESCAN_RESULTS_FIXED_SIZE
)) {

8057 
	`WL_ERR
(("InvÆid bss_öfÿÀngth %d: ign‹ög\n", 
bi_Àngth
));

8058 
exô
;

8061 i‡(!(
	`wl_to_wùhy
(
wl
)->
öãrÁ˚_modes
 & 
	`BIT
(
NL80211_IFTYPE_ADHOC
))) {

8062 i‡(
	`dtoh16
(
bi
->
ˇ∑bûôy
Ë& 
DOT11_CAP_IBSS
) {

8063 
	`WL_DBG
(("Ignoring IBSSÑesult\n"));

8064 
exô
;

8068 i‡(
	`wl_gë_drv_°©us_Æl
(
wl
, 
FINDING_COMMON_CHANNEL
)) {

8069 
p2p_dev_addr
 = 
	`wl_cfgp2p_ªåeive_p2p_dev_addr
(
bi
, 
bi_Àngth
);

8070 i‡(
p2p_dev_addr
 && !
	`memcmp
(p2p_dev_addr,

8071 
wl
->
afx_hdl
->
tx_d°_addr
.
o˘ë
, 
ETHER_ADDR_LEN
)) {

8072 
s32
 
ch™√l
 = 
	`CHSPEC_CHANNEL
(

8073 
	`wl_ch•ec_drivî_to_ho°
(
bi
->
ch™•ec
));

8074 
	`WL_DBG
(("ACTION FRAME SCAN : Pì∏" 
MACDBG
 " found, channel : %d\n",

8075 
	`MAC2STRDBG
(
wl
->
afx_hdl
->
tx_d°_addr
.
o˘ë
), 
ch™√l
));

8076 
	`wl_˛r_p2p_°©us
(
wl
, 
SCANNING
);

8077 
wl
->
afx_hdl
->
≥î_ch™
 = 
ch™√l
;

8078 
	`com∂ëe
(&
wl
->
a˘_‰m_sˇn
);

8079 
exô
;

8083 
cur_Àn
 = 0;

8084 
li°
 = (
wl_sˇn_ªsu…s_t
 *)
wl
->
esˇn_öfo
.
esˇn_buf
;

8085 #i‡
	`deföed
(
WLP2P
Ë&& deföed(
WL_ENABLE_P2P_IF
)

8086 i‡(
wl
->
p2p_√t
 && wl->
sˇn_ªque°
 &&

8087 
wl
->
sˇn_ªque°
->
dev
 =wl->
p2p_√t
)

8089 i‡(
	`p2p_is_⁄
(
wl
Ë&& 
	`p2p_sˇn
(wl))

8092 #ifde‡
WL_HOST_BAND_MGMT


8093 
s32
 
ch™√l
 = 0;

8094 
s32
 
ch™√l_b™d
 = 0;

8097 i‡(
bi
->
Êags
 & 
WL_BSS_FLAGS_FROM_BEACON
)

8098 
exô
;

8099 i‡((
p2p_õ
 = 
	`wl_cfgp2p_föd_p2põ
(((
u8
 *Ë
bi
Ë+ bi->
õ_off£t
,

8100 
bi
->
õ_Àngth
)Ë=
NULL
) {

8101 
	`WL_ERR
(("Couldn't find P2PIE inÖrobe"

8103 
exô
;

8105 #ifde‡
WL_HOST_BAND_MGMT


8106 
ch™√l
 = 
	`CHSPEC_CHANNEL
(
	`wl_ch•ec_drivî_to_ho°
(
bi
->
ch™•ec
));

8107 
ch™√l_b™d
 = (
ch™√l
 > 
CH_MAX_2G_CHANNEL
) ?

8108 
WLC_BAND_5G
 : 
WLC_BAND_2G
;

8111 i‡((
wl
->
cuº_b™d
 =
WLC_BAND_5G
) &&

8112 (
ch™√l_b™d
 =
WLC_BAND_2G
)) {

8114 i‡(
	`wl_cfgp2p_ªåeive_p2∑ârib
(
p2p_õ
,

8115 
P2P_SEID_GROUP_ID
Ë!
NULL
)

8116 
exô
;

8120 
i
 = 0; i < 
li°
->
cou¡
; i++) {

8121 
bss
 = bs†? (
wl_bss_öfo_t
 *)((
uöçå
)bs†+ 
	`dtoh32
(bss->
Àngth
))

8122 : 
li°
->
bss_öfo
;

8124 i‡(!
	`bcmp
(&
bi
->
BSSID
, &
bss
->BSSID, 
ETHER_ADDR_LEN
) &&

8125 (
	`CHSPEC_BAND
(
	`wl_ch•ec_drivî_to_ho°
(
bi
->
ch™•ec
))

8126 =
	`CHSPEC_BAND
(
	`wl_ch•ec_drivî_to_ho°
(
bss
->
ch™•ec
))) &&

8127 
bi
->
SSID_Àn
 =
bss
->SSID_len &&

8128 !
	`bcmp
(
bi
->
SSID
, 
bss
->SSID, bi->
SSID_Àn
)) {

8133 i‡(!(
bss
->
Êags
 & 
WL_BSS_FLAGS_FROM_BEACON
) &&

8134 (
bi
->
Êags
 & 
WL_BSS_FLAGS_FROM_BEACON
))

8135 
exô
;

8137 
	`WL_DBG
(("%s("
MACDBG
"), i=%dÖrev: RSSI %d"

8139 
bss
->
SSID
, 
	`MAC2STRDBG
(
bi
->
BSSID
.
o˘ë
), 
i
,

8140 
bss
->
RSSI
, bss->
Êags
, 
bi
->RSSI, bi->flags));

8142 i‡((
bss
->
Êags
 & 
WL_BSS_FLAGS_RSSI_ONCHANNEL
) ==

8143 (
bi
->
Êags
 & 
WL_BSS_FLAGS_RSSI_ONCHANNEL
)) {

8147 
	`WL_SCAN
(("%s("
MACDBG
"), same onchan"

8149 
bss
->
SSID
, 
	`MAC2STRDBG
(
bi
->
BSSID
.
o˘ë
),

8150 
bss
->
RSSI
, 
bi
->RSSI));

8151 
bi
->
RSSI
 = 
	`MAX
(
bss
->RSSI, bi->RSSI);

8152 } i‡((
bss
->
Êags
 & 
WL_BSS_FLAGS_RSSI_ONCHANNEL
) &&

8153 (
bi
->
Êags
 & 
WL_BSS_FLAGS_RSSI_ONCHANNEL
) == 0) {

8157 
	`WL_SCAN
(("%s("
MACDBG
"),Örev onchan"

8159 
bss
->
SSID
, 
	`MAC2STRDBG
(
bi
->
BSSID
.
o˘ë
),

8160 
bss
->
RSSI
, 
bi
->RSSI));

8161 
bi
->
RSSI
 = 
bss
->RSSI;

8162 
bi
->
Êags
 |
WL_BSS_FLAGS_RSSI_ONCHANNEL
;

8164 i‡(
	`dtoh32
(
bss
->
Àngth
Ë!
bi_Àngth
) {

8165 
u32
 
¥ev_Àn
 = 
	`dtoh32
(
bss
->
Àngth
);

8167 
	`WL_SCAN
(("bss infoÑeplacement"

8169 
bss
->
õ_Àngth
, 
bi
->ie_length));

8170 
	`WL_DBG
(("%s("
MACDBG
"),Ñeplacement!(%d -> %d)\n",

8171 
bss
->
SSID
, 
	`MAC2STRDBG
(
bi
->
BSSID
.
o˘ë
),

8172 
¥ev_Àn
, 
bi_Àngth
));

8174 i‡(
li°
->
buÊí
 - 
¥ev_Àn
 + 
bi_Àngth


8175 > 
ESCAN_BUF_SIZE
) {

8176 
	`WL_ERR
(("Buffer isÅoo small: keepÅhe"

8179 
bss
->
RSSI
 = 
bi
->RSSI;

8180 
bss
->
Êags
 |(
bi
->flags

8181 & 
WL_BSS_FLAGS_RSSI_ONCHANNEL
);

8182 
exô
;

8185 i‡(
i
 < 
li°
->
cou¡
 - 1) {

8187 
	`memmove
((
u8
 *)
bss
 + 
bi_Àngth
,

8188 (
u8
 *)
bss
 + 
¥ev_Àn
,

8189 
li°
->
buÊí
 - 
cur_Àn
 - 
¥ev_Àn
);

8191 
li°
->
buÊí
 -
¥ev_Àn
;

8192 
li°
->
buÊí
 +
bi_Àngth
;

8194 
li°
->
vîsi⁄
 = 
	`dtoh32
(
bi
->version);

8195 
	`mem˝y
((
u8
 *)
bss
, (u8 *)
bi
, 
bi_Àngth
);

8196 
exô
;

8198 
cur_Àn
 +
	`dtoh32
(
bss
->
Àngth
);

8200 i‡(
bi_Àngth
 > 
ESCAN_BUF_SIZE
 - 
li°
->
buÊí
) {

8201 
	`WL_ERR
(("Buffer isÅoo small: ignoring\n"));

8202 
exô
;

8204 i‡(
	`°æí
(
bi
->
SSID
) == 0) {

8205 
	`WL_SCAN
(("Skù hiddí SSID %pM\n", &
bi
->
BSSID
));

8206 
exô
;

8208 
	`mem˝y
(&(
wl
->
esˇn_öfo
.
esˇn_buf
[
li°
->
buÊí
]), 
bi
, 
bi_Àngth
);

8209 
li°
->
vîsi⁄
 = 
	`dtoh32
(
bi
->version);

8210 
li°
->
buÊí
 +
bi_Àngth
;

8211 
li°
->
cou¡
++;

8215 i‡(
°©us
 =
WLC_E_STATUS_SUCCESS
) {

8216 
wl
->
esˇn_öfo
.
esˇn_°©e
 = 
WL_ESCAN_STATE_IDLE
;

8217 i‡(
	`wl_gë_drv_°©us_Æl
(
wl
, 
FINDING_COMMON_CHANNEL
)) {

8218 
	`WL_INFO
(("ACTION FRAME SCAN DONE\n"));

8219 
	`wl_˛r_p2p_°©us
(
wl
, 
SCANNING
);

8220 
	`wl_˛r_drv_°©us
(
wl
, 
SCANNING
, wl->
afx_hdl
->
dev
);

8221 i‡(
wl
->
afx_hdl
->
≥î_ch™
 =
WL_INVALID
)

8222 
	`com∂ëe
(&
wl
->
a˘_‰m_sˇn
);

8223 } i‡((
	`likñy
(
wl
->
sˇn_ªque°
)Ë|| (wl->
sched_sˇn_ru¬ög
)) {

8224 
	`WL_INFO
(("ESCAN COMPLETED\n"));

8225 
wl
->
bss_li°
 = (
wl_sˇn_ªsu…s_t
 *)wl->
esˇn_öfo
.
esˇn_buf
;

8226 
	`wl_öf‹m_bss
(
wl
);

8227 
	`wl_nŸify_esˇn_com∂ëe
(
wl
, 
ndev
, 
Ál£
, false);

8230 i‡(
°©us
 =
WLC_E_STATUS_ABORT
) {

8231 
wl
->
esˇn_öfo
.
esˇn_°©e
 = 
WL_ESCAN_STATE_IDLE
;

8232 i‡(
	`wl_gë_drv_°©us_Æl
(
wl
, 
FINDING_COMMON_CHANNEL
)) {

8233 
	`WL_INFO
(("ACTION FRAME SCAN DONE\n"));

8234 
	`wl_˛r_drv_°©us
(
wl
, 
SCANNING
, wl->
afx_hdl
->
dev
);

8235 
	`wl_˛r_p2p_°©us
(
wl
, 
SCANNING
);

8236 i‡(
wl
->
afx_hdl
->
≥î_ch™
 =
WL_INVALID
)

8237 
	`com∂ëe
(&
wl
->
a˘_‰m_sˇn
);

8238 } i‡((
	`likñy
(
wl
->
sˇn_ªque°
)Ë|| (wl->
sched_sˇn_ru¬ög
)) {

8239 
	`WL_INFO
(("ESCAN ABORTED\n"));

8240 
wl
->
bss_li°
 = (
wl_sˇn_ªsu…s_t
 *)wl->
esˇn_öfo
.
esˇn_buf
;

8241 
	`wl_öf‹m_bss
(
wl
);

8242 
	`wl_nŸify_esˇn_com∂ëe
(
wl
, 
ndev
, 
åue
, 
Ál£
);

8245 i‡(
°©us
 =
WLC_E_STATUS_NEWSCAN
)

8247 
esˇn_ªsu…
 = (
wl_esˇn_ªsu…_t
 *Ë
d©a
;

8248 
	`WL_ERR
(("WLC_E_STATUS_NEWSCAN : sˇn_ªque°[%p]\n", 
wl
->
sˇn_ªque°
));

8249 
	`WL_ERR
(("sync_id[%d], bss_cou¡[%d]\n", 
esˇn_ªsu…
->
sync_id
,

8250 
esˇn_ªsu…
->
bss_cou¡
));

8252 
	`WL_ERR
(("u√x≥˘ed Esˇ¿Evíà%d :áb‹t\n", 
°©us
));

8253 
wl
->
esˇn_öfo
.
esˇn_°©e
 = 
WL_ESCAN_STATE_IDLE
;

8254 i‡(
	`wl_gë_drv_°©us_Æl
(
wl
, 
FINDING_COMMON_CHANNEL
)) {

8255 
	`WL_INFO
(("ACTION FRAME SCAN DONE\n"));

8256 
	`wl_˛r_p2p_°©us
(
wl
, 
SCANNING
);

8257 
	`wl_˛r_drv_°©us
(
wl
, 
SCANNING
, wl->
afx_hdl
->
dev
);

8258 i‡(
wl
->
afx_hdl
->
≥î_ch™
 =
WL_INVALID
)

8259 
	`com∂ëe
(&
wl
->
a˘_‰m_sˇn
);

8260 } i‡((
	`likñy
(
wl
->
sˇn_ªque°
)Ë|| (wl->
sched_sˇn_ru¬ög
)) {

8261 
wl
->
bss_li°
 = (
wl_sˇn_ªsu…s_t
 *)wl->
esˇn_öfo
.
esˇn_buf
;

8262 
	`wl_öf‹m_bss
(
wl
);

8263 
	`wl_nŸify_esˇn_com∂ëe
(
wl
, 
ndev
, 
åue
, 
Ál£
);

8266 
exô
:

8267 
	`muãx_u∆ock
(&
wl
->
u§_sync
);

8268  
îr
;

8269 
	}
}

8270 
	$wl_cfg80211_c⁄cuºít_rﬂm
(
wl_¥iv
 *
wl
, 
íabÀ
)

8272 
u32
 
c⁄√˘ed_˙t
 = 
	`wl_gë_drv_°©us_Æl
(
wl
, 
CONNECTED
);

8273 
√t_öfo
 *
ôî
, *
√xt
;

8274 
îr
;

8276 i‡(!
wl
->
rﬂmoff_⁄_c⁄cuºít
)

8278 i‡(
íabÀ
 && 
c⁄√˘ed_˙t
 > 1) {

8279 
	`f‹_óch_ndev
(
wl
, 
ôî
, 
√xt
) {

8281 i‡((
îr
 = 
	`wldev_iov¨_gëöt
(
ôî
->
ndev
, "roam_off",

8282 (
s32
 *)&
ôî
->
rﬂm_off
)Ë!
BCME_OK
) {

8283 
	`WL_ERR
(("%s:FailedÅo get currentÑoam settingÉrr %d\n",

8284 
ôî
->
ndev
->
«me
, 
îr
));

8287 i‡((
îr
 = 
	`wldev_iov¨_£töt
(
ôî
->
ndev
, "rﬂm_off", 1)Ë!
BCME_OK
) {

8288 
	`WL_ERR
((" %s:failedÅo setÑoam_off : %d\n",

8289 
ôî
->
ndev
->
«me
, 
îr
));

8293 i‡(!
íabÀ
) {

8294 
	`f‹_óch_ndev
(
wl
, 
ôî
, 
√xt
) {

8295 i‡(
ôî
->
rﬂm_off
 !
WL_INVALID
) {

8296 i‡((
îr
 = 
	`wldev_iov¨_£töt
(
ôî
->
ndev
, "roam_off",

8297 
ôî
->
rﬂm_off
)Ë=
BCME_OK
)

8298 
ôî
->
rﬂm_off
 = 
WL_INVALID
;

8300 
	`WL_ERR
((" %s:failedÅo setÑoam_off : %d\n",

8301 
ôî
->
ndev
->
«me
, 
îr
));

8307 
	}
}

8309 
	$wl_cfg80211_dëîmöe_vsdb_mode
(
wl_¥iv
 *
wl
)

8311 
√t_öfo
 *
ôî
, *
√xt
;

8312 
u32
 
ch™
 = 0;

8313 
u32
 
ch™•ec
 = 0;

8314 
u32
 
¥ev_ch™
 = 0;

8315 
u32
 
c⁄√˘ed_˙t
 = 
	`wl_gë_drv_°©us_Æl
(
wl
, 
CONNECTED
);

8316 
wl
->
vsdb_mode
 = 
Ál£
;

8318 i‡(
c⁄√˘ed_˙t
 <= 1) {

8321 
	`f‹_óch_ndev
(
wl
, 
ôî
, 
√xt
) {

8322 
ch™•ec
 = 0;

8323 
ch™
 = 0;

8324 i‡(
	`wl_gë_drv_°©us
(
wl
, 
CONNECTED
, 
ôî
->
ndev
)) {

8325 i‡(
	`wldev_iov¨_gëöt
(
ôî
->
ndev
, "chanspec",

8326 (
s32
 *)&
ch™•ec
Ë=
BCME_OK
) {

8327 
ch™
 = 
	`CHSPEC_CHANNEL
(
ch™•ec
);

8328 i‡(
	`CHSPEC_IS40
(
ch™•ec
)) {

8329 i‡(
	`CHSPEC_SB_UPPER
(
ch™•ec
))

8330 
ch™
 +
CH_10MHZ_APART
;

8332 
ch™
 -
CH_10MHZ_APART
;

8334 
	`wl_upd©e_¥of
(
wl
, 
ôî
->
ndev
, 
NULL
,

8335 &
ch™
, 
WL_PROF_CHAN
);

8337 i‡(!
¥ev_ch™
 && 
ch™
)

8338 
¥ev_ch™
 = 
ch™
;

8339 i‡(
¥ev_ch™
 && (¥ev_ch™ !
ch™
))

8340 
wl
->
vsdb_mode
 = 
åue
;

8344 
	}
}

8345 
s32
 
	$wl_nŸifõr_ch™ge_°©e
(
wl_¥iv
 *
wl
, 
√t_öfo
 *
_√t_öfo
,

8346 
wl_°©us
 
°©e
, 
boﬁ
 
£t
)

8348 
s32
 
pm
 = 
PM_FAST
;

8349 
s32
 
îr
 = 
BCME_OK
;

8350 
u32
 
ch™
 = 0;

8351 
√t_öfo
 *
ôî
, *
√xt
;

8352 
√t_devi˚
 *
¥im¨y_dev
 = 
	`wl_to_¥mry_ndev
(
wl
);

8353 
	`WL_DBG
(("Enter state %d set %d _net_info->pm_restore %d iface %s\n",

8354 
°©e
, 
£t
, 
_√t_öfo
->
pm_ª°‹e
, _√t_öfo->
ndev
->
«me
));

8356 i‡(
°©e
 !
WL_STATUS_CONNECTED
)

8359 i‡(
£t
) {

8360 
	`wl_cfg80211_c⁄cuºít_rﬂm
(
wl
, 1);

8362 i‡(
	`wl_gë_mode_by_√tdev
(
wl
, 
_√t_öfo
->
ndev
Ë=
WL_MODE_AP
) {

8363 
pm
 = 
PM_OFF
;

8364 
	`WL_DBG
(("%s:APÖowî savê%s\n", 
_√t_öfo
->
ndev
->
«me
,

8365 
pm
 ? "enabled" : "disabled"));

8366 i‡((
îr
 = 
	`wldev_io˘l
(
_√t_öfo
->
ndev
, 
WLC_SET_PM
,

8367 &
pm
, ’m), 
åue
)) != 0) {

8368 i‡(
îr
 =-
ENODEV
)

8369 
	`WL_DBG
(("%s:net_device isÇotÑeady\n",

8370 
_√t_öfo
->
ndev
->
«me
));

8372 
	`WL_ERR
(("%s:îr‹ (%d)\n", 
_√t_öfo
->
ndev
->
«me
, 
îr
));

8374 i‡(
	`wl_add_ªmove_evítmsg
(
¥im¨y_dev
, 
WLC_E_P2P_PROBREQ_MSG
, 
Ál£
))

8375 
	`WL_ERR
((" failedÅo unset WLC_E_P2P_PROPREQ_MSG\n"));

8378 
	`wl_cfg80211_dëîmöe_vsdb_mode
(
wl
);

8379 
pm
 = 
PM_OFF
;

8380 
	`f‹_óch_ndev
(
wl
, 
ôî
, 
√xt
) {

8381 i‡((!
wl
->
vsdb_mode
Ë&& (
ôî
->
ndev
 !
_√t_öfo
->ndev)) {

8388 
ôî
->
pm_ª°‹e
 = 
åue
;

8389 
îr
 = 
	`wldev_io˘l
(
ôî
->
ndev
, 
WLC_GET_PM
, &ôî->
pm
,

8390 (
ôî
->
pm
), 
Ál£
);

8391 
	`WL_DBG
(("%s:powî savê%s\n", 
ôî
->
ndev
->
«me
,

8392 
ôî
->
pm
 ? "enabled" : "disabled"));

8393 i‡((
îr
 = 
	`wldev_io˘l
(
ôî
->
ndev
, 
WLC_SET_PM
, &
pm
,

8394 (
pm
), 
åue
)) != 0) {

8395 i‡(
îr
 =-
ENODEV
)

8396 
	`WL_DBG
(("%s:√tdevÇŸÑódy\n", 
ôî
->
ndev
->
«me
));

8398 
	`WL_ERR
(("%s:îr‹ (%d)\n", 
ôî
->
ndev
->
«me
, 
îr
));

8399 
ôî
->
ndev
->
õì80211_±r
->
ps
 = 
pm
 ? 
åue
: 
Ál£
;

8404 
ch™
 = 0;

8406 
	`wl_upd©e_¥of
(
wl
, 
_√t_öfo
->
ndev
, 
NULL
, &
ch™
, 
WL_PROF_CHAN
);

8407 
	`wl_cfg80211_dëîmöe_vsdb_mode
(
wl
);

8408 
	`f‹_óch_ndev
(
wl
, 
ôî
, 
√xt
) {

8409 i‡(
ôî
->
pm_ª°‹e
) {

8410 
	`WL_DBG
(("%s:restoringÖower save %s\n",

8411 
ôî
->
ndev
->
«me
, (ôî->
pm
 ? "enabled" : "disabled")));

8412 
îr
 = 
	`wldev_io˘l
(
ôî
->
ndev
,

8413 
WLC_SET_PM
, &
ôî
->
pm
, (ôî->pm), 
åue
);

8414 i‡(
	`u∆ikñy
(
îr
)) {

8415 i‡(
îr
 =-
ENODEV
)

8416 
	`WL_DBG
(("%s:√tdevÇŸÑódy\n", 
ôî
->
ndev
->
«me
));

8418 
	`WL_ERR
(("%s:îr‹(%d)\n", 
ôî
->
ndev
->
«me
, 
îr
));

8421 
ôî
->
pm_ª°‹e
 = 0;

8424 
	`wl_cfg80211_c⁄cuºít_rﬂm
(
wl
, 0);

8426  
îr
;

8427 
	}
}

8429 
s32
 
	$wl_öô_sˇn
(
wl_¥iv
 *
wl
)

8431 
wl_isˇn_˘æ
 *
isˇn
 = 
	`wl_to_isˇn
(
wl
);

8432 
îr
 = 0;

8434 i‡(
wl
->
isˇn_⁄
) {

8435 
isˇn
->
dev
 = 
	`wl_to_¥mry_ndev
(
wl
);

8436 
isˇn
->
°©e
 = 
WL_ISCAN_STATE_IDLE
;

8437 
	`wl_öô_isˇn_h™dÀr
(
isˇn
);

8438 
isˇn
->
timî_ms
 = 
WL_ISCAN_TIMER_INTERVAL_MS
;

8439 
	`öô_timî
(&
isˇn
->
timî
);

8440 
isˇn
->
timî
.
d©a
 = () iscan;

8441 
isˇn
->
timî
.
fun˘i⁄
 = 
wl_isˇn_timî
;

8442 
	`£ma_öô
(&
isˇn
->
sync
, 0);

8443 
isˇn
->
tsk
 = 
	`kthªad_run
(
wl_isˇn_thªad
, iscan, "wl_iscan");

8444 i‡(
	`IS_ERR
(
isˇn
->
tsk
)) {

8445 
	`WL_ERR
(("CouldÇot create iscanÅhread\n"));

8446 
isˇn
->
tsk
 = 
NULL
;

8447  -
ENOMEM
;

8449 
isˇn
->
d©a
 = 
wl
;

8450 } i‡(
wl
->
esˇn_⁄
) {

8451 
wl
->
evt_h™dÀr
[
WLC_E_ESCAN_RESULT
] = 
wl_esˇn_h™dÀr
;

8452 
wl
->
esˇn_öfo
.
esˇn_°©e
 = 
WL_ESCAN_STATE_IDLE
;

8455 
	`öô_timî
(&
wl
->
sˇn_timeout
);

8456 
wl
->
sˇn_timeout
.
d©a
 = () wl;

8457 
wl
->
sˇn_timeout
.
fun˘i⁄
 = 
wl_sˇn_timeout
;

8459  
îr
;

8460 
	}
}

8462 
s32
 
	$wl_öô_¥iv
(
wl_¥iv
 *
wl
)

8464 
wùhy
 *wùhy = 
	`wl_to_wùhy
(
wl
);

8465 
√t_devi˚
 *
ndev
 = 
	`wl_to_¥mry_ndev
(
wl
);

8466 
s32
 
îr
 = 0;

8468 
wl
->
sˇn_ªque°
 = 
NULL
;

8469 
wl
->
pwr_ßve
 = !!(
wùhy
->
Êags
 & 
WIPHY_FLAG_PS_ON_BY_DEFAULT
);

8470 
wl
->
isˇn_⁄
 = 
Ál£
;

8471 
wl
->
esˇn_⁄
 = 
åue
;

8472 
wl
->
rﬂm_⁄
 = 
Ál£
;

8473 
wl
->
isˇn_kick°¨t
 = 
Ál£
;

8474 
wl
->
a˘ive_sˇn
 = 
åue
;

8475 
wl
->
rf_blocked
 = 
Ál£
;

8476 
wl
->
vsdb_mode
 = 
Ál£
;

8477 
wl
->
wlfc_⁄
 = 
Ál£
;

8478 
wl
->
rﬂmoff_⁄_c⁄cuºít
 = 
åue
;

8480 
	`£t_bô
(
WL_STATUS_CONNECTED
, &
wl
->
öãºe°ed_°©e
);

8481 
	`•ö_lock_öô
(&
wl
->
cfgdrv_lock
);

8482 
	`muãx_öô
(&
wl
->
io˘l_buf_sync
);

8483 
	`öô_waôqueue_hód
(&
wl
->
√tif_ch™ge_evít
);

8484 
	`öô_com∂ëi⁄
(&
wl
->
£nd_af_d⁄e
);

8485 
	`öô_com∂ëi⁄
(&
wl
->
iÁ˚_dißbÀ
);

8486 
	`wl_öô_eq
(
wl
);

8487 
îr
 = 
	`wl_öô_¥iv_mem
(
wl
);

8488 i‡(
îr
)

8489  
îr
;

8490 i‡(
	`wl_¸óã_evít_h™dÀr
(
wl
))

8491  -
ENOMEM
;

8492 
	`wl_öô_evít_h™dÀr
(
wl
);

8493 
	`muãx_öô
(&
wl
->
u§_sync
);

8494 
	`muãx_öô
(&
wl
->
evít_sync
);

8495 
îr
 = 
	`wl_öô_sˇn
(
wl
);

8496 i‡(
îr
)

8497  
îr
;

8498 
	`wl_öô_c⁄f
(
wl
->
c⁄f
);

8499 
	`wl_öô_¥of
(
wl
, 
ndev
);

8500 
	`wl_lök_down
(
wl
);

8501 
	`DNGL_FUNC
(
dhd_cfg80211_öô
, (
wl
));

8503  
îr
;

8504 
	}
}

8506 
	$wl_deöô_¥iv
(
wl_¥iv
 *
wl
)

8508 
	`DNGL_FUNC
(
dhd_cfg80211_deöô
, (
wl
));

8509 
	`wl_de°roy_evít_h™dÀr
(
wl
);

8510 
	`wl_Êush_eq
(
wl
);

8511 
	`wl_lök_down
(
wl
);

8512 
	`dñ_timî_sync
(&
wl
->
sˇn_timeout
);

8513 
	`wl_ãrm_isˇn
(
wl
);

8514 
	`wl_deöô_¥iv_mem
(
wl
);

8515 
	`uƒegi°î_√tdevi˚_nŸifõr
(&
wl_cfg80211_√tdev_nŸifõr
);

8516 
	}
}

8518 #i‡
deföed
(
WLP2P
Ë&& deföed(
WL_ENABLE_P2P_IF
)

8519 
s32
 
	$wl_cfg80211_©èch_p2p
()

8521 
wl_¥iv
 *
wl
 = 
wlcfg_drv_¥iv
;

8523 
	`WL_TRACE
(("Enter \n"));

8525 i‡(
	`wl_cfgp2p_ªgi°î_ndev
(
wl
) < 0) {

8526 
	`WL_ERR
(("%s: P2Páâach faûed. \n", 
__func__
));

8527  -
ENODEV
;

8531 
	}
}

8533 
s32
 
	$wl_cfg80211_dëach_p2p
()

8535 
wl_¥iv
 *
wl
 = 
wlcfg_drv_¥iv
;

8536 
wúñess_dev
 *
wdev
 = 
wl
->
p2p_wdev
;

8538 
	`WL_DBG
(("Enter \n"));

8539 i‡(!
wdev
 || !
wl
) {

8540 
	`WL_ERR
(("Invalid Ptr\n"));

8541  -
EINVAL
;

8544 
	`wl_cfgp2p_uƒegi°î_ndev
(
wl
);

8546 
wl
->
p2p_wdev
 = 
NULL
;

8547 
wl
->
p2p_√t
 = 
NULL
;

8548 
	`WL_DBG
(("Fªeög 0x%08x \n", ()
wdev
));

8549 
	`k‰ì
(
wdev
);

8552 
	}
}

8555 
s32
 
	$wl_cfg80211_©èch_po°
(
√t_devi˚
 *
ndev
)

8557 
wl_¥iv
 * 
wl
 = 
NULL
;

8558 
s32
 
îr
 = 0;

8559 
	`WL_TRACE
(("In\n"));

8560 i‡(
	`u∆ikñy
(!
ndev
)) {

8561 
	`WL_ERR
(("ndev is invaild\n"));

8562  -
ENODEV
;

8564 
wl
 = 
wlcfg_drv_¥iv
;

8565 i‡(
	`u∆ikñy
(!
wl
)) {

8566 
	`WL_ERR
(("wl is invaild\n"));

8567  -
EINVAL
;

8569 i‡(!
	`wl_gë_drv_°©us
(
wl
, 
READY
, 
ndev
)) {

8570 i‡(
wl
->
wdev
 &&

8571 
	`wl_cfgp2p_suµ‹ãd
(
wl
, 
ndev
)) {

8572 #i‡!
	`deföed
(
WL_ENABLE_P2P_IF
)

8573 
wl
->
wdev
->
wùhy
->
öãrÁ˚_modes
 |=

8574 (
	`BIT
(
NL80211_IFTYPE_P2P_CLIENT
)|

8575 
	`BIT
(
NL80211_IFTYPE_P2P_GO
));

8577 i‡((
îr
 = 
	`wl_cfgp2p_öô_¥iv
(
wl
)) != 0)

8578 
Áû
;

8580 #i‡
	`deföed
(
WLP2P
Ë&& deföed(
WL_ENABLE_P2P_IF
)

8581 i‡(
wl
->
p2p_√t
) {

8583 
	`mem˝y
(
wl
->
p2p_√t
->
dev_addr
, 
ndev
->dev_addr, 
ETH_ALEN
);

8584 
wl
->
p2p_√t
->
dev_addr
[0] |= 0x02;

8585 
	`WL_ERR
(("%s:Ö2p_dev_addr="
MACDBG
 "\n",

8586 
wl
->
p2p_√t
->
«me
,

8587 
	`MAC2STRDBG
(
wl
->
p2p_√t
->
dev_addr
)));

8589 
	`WL_ERR
(("p2p_netÇot yetÖopulated."

8591  -
ENODEV
;

8595 
wl
->
p2p_suµ‹ãd
 = 
åue
;

8598 
	`wl_£t_drv_°©us
(
wl
, 
READY
, 
ndev
);

8599 
Áû
:

8600  
îr
;

8601 
	}
}

8603 
s32
 
	$wl_cfg80211_©èch
(
√t_devi˚
 *
ndev
, *
d©a
)

8605 
wúñess_dev
 *
wdev
;

8606 
wl_¥iv
 *
wl
;

8607 
s32
 
îr
 = 0;

8608 
devi˚
 *
dev
;

8610 
	`WL_TRACE
(("In\n"));

8611 i‡(!
ndev
) {

8612 
	`WL_ERR
(("ndev is invaild\n"));

8613  -
ENODEV
;

8615 
	`WL_DBG
(("fun¯%p\n", 
	`wl_cfg80211_gë_∑ª¡_dev
()));

8616 
dev
 = 
	`wl_cfg80211_gë_∑ª¡_dev
();

8618 
wdev
 = 
	`kzÆloc
((*wdev), 
GFP_KERNEL
);

8619 i‡(
	`u∆ikñy
(!
wdev
)) {

8620 
	`WL_ERR
(("CouldÇotállocate wireless device\n"));

8621  -
ENOMEM
;

8623 
îr
 = 
	`wl_£tup_wùhy
(
wdev
, 
dev
);

8624 i‡(
	`u∆ikñy
(
îr
)) {

8625 
	`k‰ì
(
wdev
);

8626  -
ENOMEM
;

8628 
wdev
->
i·y≥
 = 
	`wl_mode_to_∆80211_i·y≥
(
WL_MODE_BSS
);

8629 
wl
 = (
wl_¥iv
 *)
	`wùhy_¥iv
(
wdev
->
wùhy
);

8630 
wl
->
wdev
 = wdev;

8631 
wl
->
pub
 = 
d©a
;

8632 
	`INIT_LIST_HEAD
(&
wl
->
√t_li°
);

8633 
ndev
->
õì80211_±r
 = 
wdev
;

8634 
	`SET_NETDEV_DEV
(
ndev
, 
	`wùhy_dev
(
wdev
->
wùhy
));

8635 
wdev
->
√tdev
 = 
ndev
;

8636 
wl
->
°©e_nŸifõr
 = 
wl_nŸifõr_ch™ge_°©e
;

8637 
îr
 = 
	`wl_Æloc_√töfo
(
wl
, 
ndev
, 
wdev
, 
WL_MODE_BSS
, 
PM_ENABLE
);

8638 i‡(
îr
) {

8639 
	`WL_ERR
(("FaûedÅÿÆlo¯√t_öfÿ(%d)\n", 
îr
));

8640 
cfg80211_©èch_out
;

8642 
îr
 = 
	`wl_öô_¥iv
(
wl
);

8643 i‡(
îr
) {

8644 
	`WL_ERR
(("FaûedÅÿöô iwm_¥iv (%d)\n", 
îr
));

8645 
cfg80211_©èch_out
;

8648 
îr
 = 
	`wl_£tup_rfkûl
(
wl
, 
TRUE
);

8649 i‡(
îr
) {

8650 
	`WL_ERR
(("FaûedÅÿ£tu∞rfkû»%d\n", 
îr
));

8651 
cfg80211_©èch_out
;

8653 
îr
 = 
	`ªgi°î_√tdevi˚_nŸifõr
(&
wl_cfg80211_√tdev_nŸifõr
);

8654 i‡(
îr
) {

8655 
	`WL_ERR
(("FaûedÅÿªgi°îÇŸifõæ %d\n", 
îr
));

8656 
cfg80211_©èch_out
;

8658 #i‡
	`deföed
(
COEX_DHCP
)

8659 i‡(
	`wl_cfg80211_btc€x_öô
(
wl
))

8660 
cfg80211_©èch_out
;

8662 #i‡
	`deföed
(
BSSCACHE
)

8663 
	`wl_öô_bss_ˇche_˘æ
(&
g_bss_ˇche_˘æ
);

8666 
wlcfg_drv_¥iv
 = 
wl
;

8668 #i‡
	`deföed
(
WLP2P
Ë&& deföed(
WL_ENABLE_P2P_IF
)

8669 
îr
 = 
	`wl_cfg80211_©èch_p2p
();

8670 i‡(
îr
)

8671 
cfg80211_©èch_out
;

8674  
îr
;

8676 
cfg80211_©èch_out
:

8677 
îr
 = 
	`wl_£tup_rfkûl
(
wl
, 
FALSE
);

8678 
	`wl_‰ì_wdev
(
wl
);

8679  
îr
;

8680 
	}
}

8682 
	$wl_cfg80211_dëach
(*
∑ø
)

8684 
wl_¥iv
 *
wl
;

8686 ()
∑ø
;

8687 
wl
 = 
wlcfg_drv_¥iv
;

8689 
	`WL_TRACE
(("In\n"));

8691 #i‡
	`deföed
(
COEX_DHCP
)

8692 
	`wl_cfg80211_btc€x_deöô
(
wl
);

8695 
	`wl_£tup_rfkûl
(
wl
, 
FALSE
);

8696 i‡(
wl
->
p2p_suµ‹ãd
) {

8697 i‡(
	`timî_≥ndög
(&
wl
->
p2p
->
li°í_timî
))

8698 
	`dñ_timî_sync
(&
wl
->
p2p
->
li°í_timî
);

8699 
	`wl_cfgp2p_deöô_¥iv
(
wl
);

8702 #i‡
	`deföed
(
WLP2P
Ë&& deföed(
WL_ENABLE_P2P_IF
)

8703 
	`wl_cfg80211_dëach_p2p
();

8705 
	`wl_deöô_¥iv
(
wl
);

8706 
wlcfg_drv_¥iv
 = 
NULL
;

8707 
	`wl_cfg80211_˛ór_∑ª¡_dev
();

8708 
	`wl_‰ì_wdev
(
wl
);

8709 #i‡
	`deföed
(
RSSIAVG
)

8710 
	`wl_‰ì_rssi_ˇche
(&
g_rssi_ˇche_˘æ
);

8712 #i‡
	`deföed
(
BSSCACHE
)

8713 
	`wl_ªÀa£_bss_ˇche_˘æ
(&
g_bss_ˇche_˘æ
);

8718 
	}
}

8720 
	$wl_wakeup_evít
(
wl_¥iv
 *
wl
)

8722 i‡(
wl
->
evít_tsk
.
thr_pid
 >= 0) {

8723 
	`DHD_OS_WAKE_LOCK
(
wl
->
pub
);

8724 
	`up
(&
wl
->
evít_tsk
.
£ma
);

8726 
	}
}

8728 
	$wl_is_p2p_evít
(
wl_evít_q
 *
e
)

8730 
e
->
ëy≥
) {

8735 
WLC_E_P2P_PROBREQ_MSG
:

8736 
WLC_E_P2P_DISC_LISTEN_COMPLETE
:

8737 
WLC_E_ACTION_FRAME_RX
:

8738 
WLC_E_ACTION_FRAME_OFF_CHAN_COMPLETE
:

8739 
WLC_E_ACTION_FRAME_COMPLETE
:

8741 i‡(
e
->
emsg
.
ifidx
 != 0) {

8742 
	`WL_TRACE
(("P2P Event on Virtual I/F (ifidx:%d) \n",

8743 
e
->
emsg
.
ifidx
));

8749  
FALSE
;

8751 
	`WL_TRACE
(("P2P Event on Primary I/F (ifidx:%d)."

8752 " SíàôÅÿp2p0 \n", 
e
->
emsg
.
ifidx
));

8753  
TRUE
;

8758 
	`WL_TRACE
(("NON-P2P Event %d on ifidx (ifidx:%d) \n",

8759 
e
->
ëy≥
,É->
emsg
.
ifidx
));

8760  
FALSE
;

8762 
	}
}

8764 
s32
 
	$wl_evít_h™dÀr
(*
d©a
)

8766 
√t_devi˚
 *
√tdev
;

8767 
wl_¥iv
 *
wl
 = 
NULL
;

8768 
wl_evít_q
 *
e
;

8769 
tsk_˘l_t
 *
tsk
 = (tsk_˘l_à*)
d©a
;

8771 
wl
 = (
wl_¥iv
 *)
tsk
->
∑ª¡
;

8772 #i‚de‡
USE_KTHREAD_API


8773 
	`DAEMONIZE
("dhd_cfg80211_event");

8774 
	`com∂ëe
(&
tsk
->
com∂ëed
);

8776 
	`WL_ERR
(("tsk E¡î,Åsk = 0x%08x\n", ()
tsk
));

8779 
	`down_öãºu±ibÀ
 (&
tsk
->
£ma
) == 0) {

8780 
	`SMP_RD_BARRIER_DEPENDS
();

8781 i‡(
tsk
->
ãrmö©ed
)

8783 (
e
 = 
	`wl_deq_evít
(
wl
))) {

8784 
	`WL_DBG
(("evíàty≥ (%d), i‡idx: %d\n", 
e
->
ëy≥
,É->
emsg
.
ifidx
));

8789 i‡((
	`wl_is_p2p_evít
(
e
Ë=
TRUE
Ë&& (
wl
->
p2p_√t
)) {

8790 
√tdev
 = 
wl
->
p2p_√t
;

8792 
√tdev
 = 
	`dhd_idx2√t
((
dhd_pub
 *)(
wl
->
pub
), 
e
->
emsg
.
ifidx
);

8794 i‡(!
√tdev
)

8795 
√tdev
 = 
	`wl_to_¥mry_ndev
(
wl
);

8796 i‡(
e
->
ëy≥
 < 
WLC_E_LAST
 && 
wl
->
evt_h™dÀr
[e->etype]) {

8797 
wl
->
evt_h™dÀr
[
e
->
ëy≥
] (wl, 
√tdev
, &e->
emsg
,É->
ed©a
);

8799 
	`WL_DBG
(("Unknow¿Evíà(%d): ign‹ög\n", 
e
->
ëy≥
));

8801 
	`wl_put_evít
(
e
);

8803 
	`DHD_OS_WAKE_UNLOCK
(
wl
->
pub
);

8805 
	`WL_ERR
(("%†wa†ãrmö©ed\n", 
__func__
));

8806 
	`com∂ëe_™d_exô
(&
tsk
->
com∂ëed
, 0);

8808 
	}
}

8811 
	$wl_cfg80211_evít
(
√t_devi˚
 *
ndev
, c⁄° 
wl_evít_msg_t
 * 
e
, *
d©a
)

8813 
u32
 
evít_ty≥
 = 
	`¡oh32
(
e
->event_type);

8814 
wl_¥iv
 *
wl
 = 
wlcfg_drv_¥iv
;

8816 #i‡(
WL_DBG_LEVEL
 > 0)

8817 
s8
 *
e°r
 = (
evít_ty≥
 <(
wl_dbg_e°r
Ë/ 
WL_DBG_ESTR_MAX
 - 1) ?

8818 
wl_dbg_e°r
[
evít_ty≥
] : (
s8
 *) "Unknown";

8819 
	`WL_DBG
(("evít_ty≥ (%d):" "WLC_E_" "%s\n", 
evít_ty≥
, 
e°r
));

8822 i‡(
evít_ty≥
 =
WLC_E_PFN_NET_FOUND
) {

8823 
	`WL_DBG
((" PNOEVENT: PNO_NET_FOUND\n"));

8825 i‡(
evít_ty≥
 =
WLC_E_PFN_NET_LOST
) {

8826 
	`WL_DBG
((" PNOEVENT: PNO_NET_LOST\n"));

8829 i‡(
	`likñy
(!
	`wl_íq_evít
(
wl
, 
ndev
, 
evít_ty≥
, 
e
, 
d©a
)))

8830 
	`wl_wakeup_evít
(
wl
);

8831 
	}
}

8833 
	$wl_öô_eq
(
wl_¥iv
 *
wl
)

8835 
	`wl_öô_eq_lock
(
wl
);

8836 
	`INIT_LIST_HEAD
(&
wl
->
eq_li°
);

8837 
	}
}

8839 
	$wl_Êush_eq
(
wl_¥iv
 *
wl
)

8841 
wl_evít_q
 *
e
;

8842 
Êags
;

8844 
Êags
 = 
	`wl_lock_eq
(
wl
);

8845 !
	`li°_em±y
(&
wl
->
eq_li°
)) {

8846 
e
 = 
	`li°_fú°_íåy
(&
wl
->
eq_li°
, 
wl_evít_q
,Éq_list);

8847 
	`li°_dñ
(&
e
->
eq_li°
);

8848 
	`k‰ì
(
e
);

8850 
	`wl_u∆ock_eq
(
wl
, 
Êags
);

8851 
	}
}

8857 
wl_evít_q
 *
	$wl_deq_evít
(
wl_¥iv
 *
wl
)

8859 
wl_evít_q
 *
e
 = 
NULL
;

8860 
Êags
;

8862 
Êags
 = 
	`wl_lock_eq
(
wl
);

8863 i‡(
	`likñy
(!
	`li°_em±y
(&
wl
->
eq_li°
))) {

8864 
e
 = 
	`li°_fú°_íåy
(&
wl
->
eq_li°
, 
wl_evít_q
,Éq_list);

8865 
	`li°_dñ
(&
e
->
eq_li°
);

8867 
	`wl_u∆ock_eq
(
wl
, 
Êags
);

8869  
e
;

8870 
	}
}

8876 
s32


8877 
	$wl_íq_evít
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
, 
u32
 
evít
, c⁄° 
wl_evít_msg_t
 *
msg
,

8878 *
d©a
)

8880 
wl_evít_q
 *
e
;

8881 
s32
 
îr
 = 0;

8882 
uöt32
 
evtq_size
;

8883 
uöt32
 
d©a_Àn
;

8884 
Êags
;

8885 
gÂ_t
 
aÊags
;

8887 
d©a_Àn
 = 0;

8888 i‡(
d©a
)

8889 
d©a_Àn
 = 
	`¡oh32
(
msg
->
d©Æí
);

8890 
evtq_size
 = (
wl_evít_q
Ë+ 
d©a_Àn
;

8891 
aÊags
 = (
	`ö_©omic
()Ë? 
GFP_ATOMIC
 : 
GFP_KERNEL
;

8892 
e
 = 
	`kzÆloc
(
evtq_size
, 
aÊags
);

8893 i‡(
	`u∆ikñy
(!
e
)) {

8894 
	`WL_ERR
(("eventálloc failed\n"));

8895  -
ENOMEM
;

8897 
e
->
ëy≥
 = 
evít
;

8898 
	`mem˝y
(&
e
->
emsg
, 
msg
, (
wl_evít_msg_t
));

8899 i‡(
d©a
)

8900 
	`mem˝y
(
e
->
ed©a
, 
d©a
, 
d©a_Àn
);

8901 
Êags
 = 
	`wl_lock_eq
(
wl
);

8902 
	`li°_add_èû
(&
e
->
eq_li°
, &
wl
->eq_list);

8903 
	`wl_u∆ock_eq
(
wl
, 
Êags
);

8905  
îr
;

8906 
	}
}

8908 
	$wl_put_evít
(
wl_evít_q
 *
e
)

8910 
	`k‰ì
(
e
);

8911 
	}
}

8913 
s32
 
	$wl_c⁄fig_ifmode
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
, 
s32
 
i·y≥
)

8915 
s32
 
ö‰a
 = 0;

8916 
s32
 
îr
 = 0;

8917 
s32
 
mode
 = 0;

8918 
i·y≥
) {

8919 
NL80211_IFTYPE_MONITOR
:

8920 
NL80211_IFTYPE_WDS
:

8921 
	`WL_ERR
(("type (%d) : currently we doÇot supportÅhis mode\n",

8922 
i·y≥
));

8923 
îr
 = -
EINVAL
;

8924  
îr
;

8925 
NL80211_IFTYPE_ADHOC
:

8926 
mode
 = 
WL_MODE_IBSS
;

8928 
NL80211_IFTYPE_STATION
:

8929 
NL80211_IFTYPE_P2P_CLIENT
:

8930 
mode
 = 
WL_MODE_BSS
;

8931 
ö‰a
 = 1;

8933 
NL80211_IFTYPE_AP
:

8934 
NL80211_IFTYPE_P2P_GO
:

8935 
mode
 = 
WL_MODE_AP
;

8936 
ö‰a
 = 1;

8939 
îr
 = -
EINVAL
;

8940 
	`WL_ERR
(("övÆidÅy≥ (%d)\n", 
i·y≥
));

8941  
îr
;

8943 
ö‰a
 = 
	`htod32
(infra);

8944 
îr
 = 
	`wldev_io˘l
(
ndev
, 
WLC_SET_INFRA
, &
ö‰a
, (ö‰a), 
åue
);

8945 i‡(
	`u∆ikñy
(
îr
)) {

8946 
	`WL_ERR
(("WLC_SET_INFRAÉº‹ (%d)\n", 
îr
));

8947  
îr
;

8950 
	`wl_£t_mode_by_√tdev
(
wl
, 
ndev
, 
mode
);

8953 
	}
}

8955 
	$wl_cfg80211_add_to_evítbuf„r
(
wl_evítmsg_buf
 *
ev
, 
u16
 
evít
, 
boﬁ
 
£t
)

8957 i‡(!
ev
 || (
evít
 > 
WLC_E_LAST
))

8960 i‡(
ev
->
num
 < 
MAX_EVENT_BUF_NUM
) {

8961 
ev
->
evít
[ev->
num
].
ty≥
 =Évent;

8962 
ev
->
evít
[ev->
num
].
£t
 = set;

8963 
ev
->
num
++;

8965 
	`WL_ERR
(("evenbuffer doesn't support > %uÉvents. Update"

8966 "ÅhêdeföêMAX_EVENT_BUF_NUM \n", 
MAX_EVENT_BUF_NUM
));

8967 
	`ASSERT
(0);

8969 
	}
}

8971 
s32
 
	$wl_cfg80211_≠∂y_evítbuf„r
(

8972 
√t_devi˚
 *
ndev
,

8973 
wl_¥iv
 *
wl
,

8974 
wl_evítmsg_buf_t
 *
ev
)

8976 
evítmask
[
WL_EVENTING_MASK_LEN
];

8977 
i
, 
ªt
 = 0;

8978 
s8
 
iovbuf
[
WL_EVENTING_MASK_LEN
 + 12];

8980 i‡(!
ev
 || (!ev->
num
))

8981  -
EINVAL
;

8983 
	`muãx_lock
(&
wl
->
evít_sync
);

8986 
	`bcm_mkiov¨
("evít_msgs", 
NULL
, 0, 
iovbuf
,

8987 (
iovbuf
));

8988 
ªt
 = 
	`wldev_io˘l
(
ndev
, 
WLC_GET_VAR
, 
iovbuf
, (iovbuf), 
Ál£
);

8989 i‡(
	`u∆ikñy
(
ªt
)) {

8990 
	`WL_ERR
(("GëÉvít_msg†îr‹ (%d)\n", 
ªt
));

8991 
exô
;

8993 
	`mem˝y
(
evítmask
, 
iovbuf
, 
WL_EVENTING_MASK_LEN
);

8996 
i
 = 0; i < 
ev
->
num
; i++) {

8997 i‡(
ev
->
evít
[
i
].
£t
)

8998 
	`£tbô
(
evítmask
, 
ev
->
evít
[
i
].
ty≥
);

9000 
	`˛rbô
(
evítmask
, 
ev
->
evít
[
i
].
ty≥
);

9004 
	`bcm_mkiov¨
("evít_msgs", 
evítmask
, 
WL_EVENTING_MASK_LEN
, 
iovbuf
,

9005 (
iovbuf
));

9006 
ªt
 = 
	`wldev_io˘l
(
ndev
, 
WLC_SET_VAR
, 
iovbuf
, (iovbuf), 
åue
);

9007 i‡(
	`u∆ikñy
(
ªt
)) {

9008 
	`WL_ERR
(("SëÉvít_msg†îr‹ (%d)\n", 
ªt
));

9011 
exô
:

9012 
	`muãx_u∆ock
(&
wl
->
evít_sync
);

9013  
ªt
;

9014 
	}
}

9016 
s32
 
	$wl_add_ªmove_evítmsg
(
√t_devi˚
 *
ndev
, 
u16
 
evít
, 
boﬁ
 
add
)

9018 
s8
 
iovbuf
[
WL_EVENTING_MASK_LEN
 + 12];

9019 
s8
 
evítmask
[
WL_EVENTING_MASK_LEN
];

9020 
s32
 
îr
 = 0;

9021 
wl_¥iv
 *
wl
 = 
wlcfg_drv_¥iv
;

9023 i‡(!
ndev
 || !
wl
)

9024  -
ENODEV
;

9026 
	`muãx_lock
(&
wl
->
evít_sync
);

9029 
	`bcm_mkiov¨
("evít_msgs", 
NULL
, 0, 
iovbuf
,

9030 (
iovbuf
));

9031 
îr
 = 
	`wldev_io˘l
(
ndev
, 
WLC_GET_VAR
, 
iovbuf
, (iovbuf), 
Ál£
);

9032 i‡(
	`u∆ikñy
(
îr
)) {

9033 
	`WL_ERR
(("GëÉvít_msg†îr‹ (%d)\n", 
îr
));

9034 
evítmsg_out
;

9036 
	`mem˝y
(
evítmask
, 
iovbuf
, 
WL_EVENTING_MASK_LEN
);

9037 i‡(
add
) {

9038 
	`£tbô
(
evítmask
, 
evít
);

9040 
	`˛rbô
(
evítmask
, 
evít
);

9042 
	`bcm_mkiov¨
("evít_msgs", 
evítmask
, 
WL_EVENTING_MASK_LEN
, 
iovbuf
,

9043 (
iovbuf
));

9044 
îr
 = 
	`wldev_io˘l
(
ndev
, 
WLC_SET_VAR
, 
iovbuf
, (iovbuf), 
åue
);

9045 i‡(
	`u∆ikñy
(
îr
)) {

9046 
	`WL_ERR
(("SëÉvít_msg†îr‹ (%d)\n", 
îr
));

9047 
evítmsg_out
;

9050 
evítmsg_out
:

9051 
	`muãx_u∆ock
(&
wl
->
evít_sync
);

9052  
îr
;

9053 
	}
}

9055 
	$wl_c⁄°ru˘_ªgöfo
(
wl_¥iv
 *
wl
, 
s32
 
bw_ˇp
)

9057 
√t_devi˚
 *
dev
 = 
	`wl_to_¥mry_ndev
(
wl
);

9058 
õì80211_ch™√l
 *
b™d_ch™_¨r
 = 
NULL
;

9059 
wl_uöt32_li°_t
 *
li°
;

9060 
u32
 
i
, 
j
, 
ödex
, 
n_2g
, 
n_5g
, 
b™d
, 
ch™√l
, 
¨øy_size
;

9061 
u32
 *
n_˙t
 = 
NULL
;

9062 
ch™•ec_t
 
c
 = 0;

9063 
s32
 
îr
 = 
BCME_OK
;

9064 
boﬁ
 
upd©e
;

9065 
boﬁ
 
ht40_Ælowed
;

9066 
u8
 *
pbuf
 = 
NULL
;

9068 
	#LOCAL_BUF_LEN
 1024

	)

9069 
pbuf
 = 
	`kzÆloc
(
LOCAL_BUF_LEN
, 
GFP_KERNEL
);

9071 i‡(
pbuf
 =
NULL
) {

9072 
	`WL_ERR
(("failedÅoállocateÜocal buf\n"));

9073  -
ENOMEM
;

9075 
li°
 = (
wl_uöt32_li°_t
 *)(*Ë
pbuf
;

9076 
li°
->
cou¡
 = 
	`htod32
(
WL_NUMCHANSPECS
);

9079 
îr
 = 
	`wldev_iov¨_gëbuf_bsscfg
(
dev
, "ch™•ecs", 
NULL
,

9080 0, 
pbuf
, 
LOCAL_BUF_LEN
, 0, &
wl
->
io˘l_buf_sync
);

9081 i‡(
îr
 != 0) {

9082 
	`WL_ERR
(("gë ch™•ec†Áûed wôh %d\n", 
îr
));

9083 
	`k‰ì
(
pbuf
);

9084  
îr
;

9086 #unde‡
LOCAL_BUF_LEN


9088 
li°
 = (
wl_uöt32_li°_t
 *)(*)
pbuf
;

9089 
b™d
 = 
¨øy_size
 = 
n_2g
 = 
n_5g
 = 0;

9090 
i
 = 0; i < 
	`dtoh32
(
li°
->
cou¡
); i++) {

9091 
ödex
 = 0;

9092 
upd©e
 = 
Ál£
;

9093 
ht40_Ælowed
 = 
Ál£
;

9094 
c
 = (
ch™•ec_t
)
	`dtoh32
(
li°
->
ñemít
[
i
]);

9095 
c
 = 
	`wl_ch•ec_drivî_to_ho°
(c);

9096 
ch™√l
 = 
	`CHSPEC_CHANNEL
(
c
);

9097 i‡(
	`CHSPEC_IS40
(
c
)) {

9098 i‡(
	`CHSPEC_SB_UPPER
(
c
))

9099 
ch™√l
 +
CH_10MHZ_APART
;

9101 
ch™√l
 -
CH_10MHZ_APART
;

9102 } i‡(
	`CHSPEC_IS80
(
c
)) {

9103 
	`WL_DBG
(("HT80 cíã∏ch™√»: %d\n", 
ch™√l
));

9106 i‡(
	`CHSPEC_IS2G
(
c
Ë&& (
ch™√l
 >
CH_MIN_2G_CHANNEL
) &&

9107 (
ch™√l
 <
CH_MAX_2G_CHANNEL
)) {

9108 
b™d_ch™_¨r
 = 
__wl_2ghz_ch™√ls
;

9109 
¨øy_size
 = 
	`ARRAYSIZE
(
__wl_2ghz_ch™√ls
);

9110 
n_˙t
 = &
n_2g
;

9111 
b™d
 = 
IEEE80211_BAND_2GHZ
;

9112 
ht40_Ælowed
 = (
bw_ˇp
 =
WLC_N_BW_40ALL
)? 
åue
 : 
Ál£
;

9113 } i‡(
	`CHSPEC_IS5G
(
c
Ë&& 
ch™√l
 >
CH_MIN_5G_CHANNEL
) {

9114 
b™d_ch™_¨r
 = 
__wl_5ghz_a_ch™√ls
;

9115 
¨øy_size
 = 
	`ARRAYSIZE
(
__wl_5ghz_a_ch™√ls
);

9116 
n_˙t
 = &
n_5g
;

9117 
b™d
 = 
IEEE80211_BAND_5GHZ
;

9118 
ht40_Ælowed
 = (
bw_ˇp
 =
WLC_N_BW_20ALL
)? 
Ál£
 : 
åue
;

9120 
	`WL_ERR
(("InvÆid ch™√»Sïc. 0x%x.\n", 
c
));

9123 i‡(!
ht40_Ælowed
 && 
	`CHSPEC_IS40
(
c
))

9125 
j
 = 0; (j < *
n_˙t
 && (*n_˙à< 
¨øy_size
)); j++) {

9126 i‡(
b™d_ch™_¨r
[
j
].
hw_vÆue
 =
ch™√l
) {

9127 
upd©e
 = 
åue
;

9131 i‡(
upd©e
)

9132 
ödex
 = 
j
;

9134 
ödex
 = *
n_˙t
;

9135 i‡(
ödex
 < 
¨øy_size
) {

9136 #i‡
LINUX_VERSION_CODE
 =
	`KERNEL_VERSION
(2, 6, 38Ë&& !
	`deföed
(
WL_COMPAT_WIRELESS
)

9137 
b™d_ch™_¨r
[
ödex
].
˚¡î_‰eq
 =

9138 
	`õì80211_ch™√l_to_‰equícy
(
ch™√l
);

9140 
b™d_ch™_¨r
[
ödex
].
˚¡î_‰eq
 =

9141 
	`õì80211_ch™√l_to_‰equícy
(
ch™√l
, 
b™d
);

9143 
b™d_ch™_¨r
[
ödex
].
hw_vÆue
 = 
ch™√l
;

9145 i‡(
	`CHSPEC_IS40
(
c
Ë&& 
ht40_Ælowed
) {

9149 
u32
 
ht40_Êag
 = 
b™d_ch™_¨r
[
ödex
].
Êags
 & 
IEEE80211_CHAN_NO_HT40
;

9150 i‡(
	`CHSPEC_SB_UPPER
(
c
)) {

9151 i‡(
ht40_Êag
 =
IEEE80211_CHAN_NO_HT40
)

9152 
b™d_ch™_¨r
[
ödex
].
Êags
 &=

9153 ~
IEEE80211_CHAN_NO_HT40
;

9154 
b™d_ch™_¨r
[
ödex
].
Êags
 |
IEEE80211_CHAN_NO_HT40PLUS
;

9159 
b™d_ch™_¨r
[
ödex
].
Êags
 &~
IEEE80211_CHAN_NO_HT40
;

9160 i‡(
ht40_Êag
 =
IEEE80211_CHAN_NO_HT40
)

9161 
b™d_ch™_¨r
[
ödex
].
Êags
 |=

9162 
IEEE80211_CHAN_NO_HT40MINUS
;

9165 
b™d_ch™_¨r
[
ödex
].
Êags
 = 
IEEE80211_CHAN_NO_HT40
;

9166 i‡(
b™d
 =
IEEE80211_BAND_2GHZ
)

9167 
ch™√l
 |
WL_CHANSPEC_BAND_2G
;

9169 
ch™√l
 |
WL_CHANSPEC_BAND_5G
;

9170 
ch™√l
 |
WL_CHANSPEC_BW_20
;

9171 
ch™√l
 = 
	`wl_ch•ec_ho°_to_drivî
(channel);

9172 
îr
 = 
	`wldev_iov¨_gëöt
(
dev
, "≥r_ch™_öfo", &
ch™√l
);

9173 i‡(!
îr
) {

9174 i‡(
ch™√l
 & 
WL_CHAN_RADAR
)

9175 
b™d_ch™_¨r
[
ödex
].
Êags
 |=

9176 (
IEEE80211_CHAN_RADAR
 |

9177 
IEEE80211_CHAN_NO_IBSS
);

9178 i‡(
ch™√l
 & 
WL_CHAN_PASSIVE
)

9179 
b™d_ch™_¨r
[
ödex
].
Êags
 |=

9180 
IEEE80211_CHAN_PASSIVE_SCAN
;

9183 i‡(!
upd©e
)

9184 (*
n_˙t
)++;

9188 
__wl_b™d_2ghz
.
n_ch™√ls
 = 
n_2g
;

9189 
__wl_b™d_5ghz_a
.
n_ch™√ls
 = 
n_5g
;

9190 
	`k‰ì
(
pbuf
);

9191  
îr
;

9192 
	}
}

9194 
s32
 
	$wl_upd©e_wùhyb™ds
(
wl_¥iv
 *
wl
, 
boﬁ
 
nŸify
)

9196 
wùhy
 *wiphy;

9197 
√t_devi˚
 *
dev
;

9198 
u32
 
b™dli°
[3];

9199 
u32
 
nb™d
 = 0;

9200 
u32
 
i
 = 0;

9201 
s32
 
îr
 = 0;

9202 
s32
 
ödex
 = 0;

9203 
s32
 
nmode
 = 0;

9204 
boﬁ
 
rﬁlback_lock
 = 
Ál£
;

9205 
s32
 
bw_ˇp
 = 0;

9206 
s32
 
cur_b™d
 = -1;

9207 
õì80211_suµ‹ãd_b™d
 *
b™ds
[
IEEE80211_NUM_BANDS
] = {
NULL
, };

9209 i‡(
wl
 =
NULL
) {

9210 
wl
 = 
wlcfg_drv_¥iv
;

9211 
	`muãx_lock
(&
wl
->
u§_sync
);

9212 
rﬁlback_lock
 = 
åue
;

9214 
dev
 = 
	`wl_to_¥mry_ndev
(
wl
);

9216 
	`mem£t
(
b™dli°
, 0, (bandlist));

9217 
îr
 = 
	`wldev_io˘l
(
dev
, 
WLC_GET_BANDLIST
, 
b™dli°
,

9218 (
b™dli°
), 
Ál£
);

9219 i‡(
	`u∆ikñy
(
îr
)) {

9220 
	`WL_ERR
(("îr‹Ñód b™dli° (%d)\n", 
îr
));

9221 
íd_b™ds
;

9224 
wùhy
 = 
	`wl_to_wùhy
(
wl
);

9226 
îr
 = 
	`wldev_io˘l
(
dev
, 
WLC_GET_BAND
, &
cur_b™d
,

9227 (
s32
), 
Ál£
);

9228 i‡(
	`u∆ikñy
(
îr
)) {

9229 
	`WL_ERR
(("îr‹ (%d)\n", 
îr
));

9230 
íd_b™ds
;

9233 
îr
 = 
	`wldev_iov¨_gëöt
(
dev
, "nmode", &
nmode
);

9234 i‡(
	`u∆ikñy
(
îr
)) {

9235 
	`WL_ERR
(("îr‹ÑódögÇmodê(%d)\n", 
îr
));

9238 
îr
 = 
	`wldev_iov¨_gëöt
(
dev
, "mimo_bw_ˇp", &
bw_ˇp
);

9239 i‡(
	`u∆ikñy
(
îr
)) {

9240 
	`WL_ERR
(("îr‹ gë mimo_bw_ˇ∞(%d)\n", 
îr
));

9244 
îr
 = 
	`wl_c⁄°ru˘_ªgöfo
(
wl
, 
bw_ˇp
);

9245 i‡(
îr
) {

9246 
	`WL_ERR
(("wl_c⁄°ru˘_ªgöfo(ËÁû†îr=%d\n", 
îr
));

9247 i‡(
îr
 !
BCME_UNSUPPORTED
)

9248 
íd_b™ds
;

9249 
îr
 = 0;

9252 
nb™d
 = 
b™dli°
[0];

9254 
i
 = 1; i <
nb™d
 && i < 
	`ARRAYSIZE
(
b™dli°
); i++) {

9255 
ödex
 = -1;

9256 i‡(
b™dli°
[
i
] =
WLC_BAND_5G
 && 
__wl_b™d_5ghz_a
.
n_ch™√ls
 > 0) {

9257 
b™ds
[
IEEE80211_BAND_5GHZ
] =

9258 &
__wl_b™d_5ghz_a
;

9259 
ödex
 = 
IEEE80211_BAND_5GHZ
;

9260 i‡(
bw_ˇp
 =
WLC_N_BW_40ALL
 || bw_ˇ∞=
WLC_N_BW_20IN2G_40IN5G
)

9261 
b™ds
[
ödex
]->
ht_ˇp
.
ˇp
 |
IEEE80211_HT_CAP_SGI_40
;

9263 i‡(
b™dli°
[
i
] =
WLC_BAND_2G
 && 
__wl_b™d_2ghz
.
n_ch™√ls
 > 0) {

9264 
b™ds
[
IEEE80211_BAND_2GHZ
] =

9265 &
__wl_b™d_2ghz
;

9266 
ödex
 = 
IEEE80211_BAND_2GHZ
;

9267 i‡(
bw_ˇp
 =
WLC_N_BW_40ALL
)

9268 
b™ds
[
ödex
]->
ht_ˇp
.
ˇp
 |
IEEE80211_HT_CAP_SGI_40
;

9271 i‡((
ödex
 >0Ë&& 
nmode
) {

9272 
b™ds
[
ödex
]->
ht_ˇp
.
ˇp
 |=

9273 (
IEEE80211_HT_CAP_SGI_20
 | 
IEEE80211_HT_CAP_DSSSCCK40
);

9274 
b™ds
[
ödex
]->
ht_ˇp
.
ht_suµ‹ãd
 = 
TRUE
;

9275 
b™ds
[
ödex
]->
ht_ˇp
.
ampdu_Á˘‹
 = 
IEEE80211_HT_MAX_AMPDU_64K
;

9276 
b™ds
[
ödex
]->
ht_ˇp
.
ampdu_dísôy
 = 
IEEE80211_HT_MPDU_DENSITY_16
;

9278 
b™ds
[
ödex
]->
ht_ˇp
.
mcs
.
rx_mask
[0] = 0xff;

9283 
wùhy
->
b™ds
[
IEEE80211_BAND_2GHZ
] = bands[IEEE80211_BAND_2GHZ];

9284 
wùhy
->
b™ds
[
IEEE80211_BAND_5GHZ
] = bands[IEEE80211_BAND_5GHZ];

9286 i‡(
nŸify
)

9287 
	`wùhy_≠∂y_cu°om_ªguœt‹y
(
wùhy
, &
brcm_ªgdom
);

9289 
íd_b™ds
:

9290 i‡(
rﬁlback_lock
)

9291 
	`muãx_u∆ock
(&
wl
->
u§_sync
);

9292  
îr
;

9293 
	}
}

9295 
s32
 
	$__wl_cfg80211_up
(
wl_¥iv
 *
wl
)

9297 
s32
 
îr
 = 0;

9298 
√t_devi˚
 *
ndev
 = 
	`wl_to_¥mry_ndev
(
wl
);

9299 
wúñess_dev
 *
wdev
 = 
ndev
->
õì80211_±r
;

9301 
	`WL_DBG
(("In\n"));

9303 
îr
 = 
	`dhd_c⁄fig_d⁄gÀ
(
wl
, 
Ál£
);

9304 i‡(
	`u∆ikñy
(
îr
))

9305  
îr
;

9307 
îr
 = 
	`wl_c⁄fig_ifmode
(
wl
, 
ndev
, 
wdev
->
i·y≥
);

9308 i‡(
	`u∆ikñy
(
îr
 &&Éº !-
EINPROGRESS
)) {

9309 
	`WL_ERR
(("wl_config_ifmode failed\n"));

9311 
îr
 = 
	`wl_upd©e_wùhyb™ds
(
wl
, 
åue
);

9312 i‡(
	`u∆ikñy
(
îr
)) {

9313 
	`WL_ERR
(("wl_update_wiphybands failed\n"));

9316 
îr
 = 
	`dhd_m⁄ô‹_öô
(
wl
->
pub
);

9317 
îr
 = 
	`wl_övoke_isˇn
(
wl
);

9319 #ifde‡
WL_HOST_BAND_MGMT


9321 i‡(
	`wl_cfg80211_£t_b™d
(
ndev
, 
WLC_BAND_AUTO
) < 0) {

9322 
	`WL_ERR
(("roam_band set failed\n"));

9323 
îr
 = -1;

9327 #i‡
	`deföed
(
DHCP_SCAN_SUPPRESS
)

9329 
	`öô_timî
(&
wl
->
sˇn_suµ_timî
);

9330 
wl
->
sˇn_suµ_timî
.
d©a
 = (
ul⁄g
)wl;

9331 
wl
->
sˇn_suµ_timî
.
fun˘i⁄
 = 
wl_cfg80211_sˇn_suµ_timîfunc
;

9332 
	`INIT_WORK
(&
wl
->
wœn_w‹k
, 
wl_cfg80211_w‹k_h™dÀr
);

9335 
	`wl_£t_drv_°©us
(
wl
, 
READY
, 
ndev
);

9336  
îr
;

9337 
	}
}

9339 
s32
 
	$__wl_cfg80211_down
(
wl_¥iv
 *
wl
)

9341 
s32
 
îr
 = 0;

9342 
Êags
;

9343 
√t_öfo
 *
ôî
, *
√xt
;

9344 
√t_devi˚
 *
ndev
 = 
	`wl_to_¥mry_ndev
(
wl
);

9345 
√t_devi˚
 *
p2p_√t
 = 
wl
->p2p_net;

9346 
u32
 
bssidx
 = 
	`wl_cfgp2p_föd_idx
(
wl
, 
ndev
);

9347 
	`WL_DBG
(("In\n"));

9349 #i‡
	`deföed
(
DHCP_SCAN_SUPPRESS
)

9351 i‡(
wl
->
sˇn_suµªs£d
)

9352 
	`wl_cfg80211_sˇn_suµªss
(
ndev
, 0);

9353 i‡(
	`timî_≥ndög
(&
wl
->
sˇn_suµ_timî
))

9354 
	`dñ_timî_sync
(&
wl
->
sˇn_suµ_timî
);

9355 
	`ˇn˚l_w‹k_sync
(&
wl
->
wœn_w‹k
);

9359 i‡(
	`wl_cfgp2p_bss_isup
(
ndev
, 
bssidx
)) {

9360 i‡(
	`wl_cfgp2p_bss
(
wl
, 
ndev
, 
bssidx
, 0) < 0)

9361 
	`WL_ERR
(("BSS down failed \n"));

9365 i‡(!
	`wl_gë_drv_°©us
(
wl
, 
READY
, 
ndev
))

9366  
îr
;

9368 
	`f‹_óch_ndev
(
wl
, 
ôî
, 
√xt
)

9369 
	`wl_£t_drv_°©us
(
wl
, 
SCAN_ABORTING
, 
ôî
->
ndev
);

9371 
	`wl_ãrm_isˇn
(
wl
);

9372 
	`•ö_lock_úqßve
(&
wl
->
cfgdrv_lock
, 
Êags
);

9373 i‡(
wl
->
sˇn_ªque°
) {

9374 
	`cfg80211_sˇn_d⁄e
(
wl
->
sˇn_ªque°
, 
åue
);

9375 
wl
->
sˇn_ªque°
 = 
NULL
;

9377 
	`•ö_u∆ock_úqª°‹e
(&
wl
->
cfgdrv_lock
, 
Êags
);

9379 
	`f‹_óch_ndev
(
wl
, 
ôî
, 
√xt
) {

9380 
	`wl_˛r_drv_°©us
(
wl
, 
READY
, 
ôî
->
ndev
);

9381 
	`wl_˛r_drv_°©us
(
wl
, 
SCANNING
, 
ôî
->
ndev
);

9382 
	`wl_˛r_drv_°©us
(
wl
, 
SCAN_ABORTING
, 
ôî
->
ndev
);

9383 
	`wl_˛r_drv_°©us
(
wl
, 
CONNECTING
, 
ôî
->
ndev
);

9384 
	`wl_˛r_drv_°©us
(
wl
, 
CONNECTED
, 
ôî
->
ndev
);

9385 
	`wl_˛r_drv_°©us
(
wl
, 
DISCONNECTING
, 
ôî
->
ndev
);

9386 
	`wl_˛r_drv_°©us
(
wl
, 
AP_CREATED
, 
ôî
->
ndev
);

9387 
	`wl_˛r_drv_°©us
(
wl
, 
AP_CREATING
, 
ôî
->
ndev
);

9389 
	`wl_to_¥mry_ndev
(
wl
)->
õì80211_±r
->
i·y≥
 =

9390 
NL80211_IFTYPE_STATION
;

9391 i‡(
p2p_√t
)

9392 
	`dev_˛o£
(
p2p_√t
);

9393 
	`DNGL_FUNC
(
dhd_cfg80211_down
, (
wl
));

9394 
	`wl_Êush_eq
(
wl
);

9395 
	`wl_lök_down
(
wl
);

9396 i‡(
wl
->
p2p_suµ‹ãd
)

9397 
	`wl_cfgp2p_down
(
wl
);

9398 
	`dhd_m⁄ô‹_unöô
();

9400  
îr
;

9401 
	}
}

9403 
s32
 
	$wl_cfg80211_up
(*
∑ø
)

9405 
wl_¥iv
 *
wl
;

9406 
s32
 
îr
 = 0;

9407 
vÆ
 = 1;

9408 
dhd_pub_t
 *
dhd
;

9410 ()
∑ø
;

9411 
	`WL_DBG
(("In\n"));

9412 
wl
 = 
wlcfg_drv_¥iv
;

9414 i‡((
îr
 = 
	`wldev_io˘l
(
	`wl_to_¥mry_ndev
(
wl
), 
WLC_GET_VERSION
, &
vÆ
,

9415 (), 
Ál£
) < 0)) {

9416 
	`WL_ERR
(("WLC_GET_VERSION faûed,Éº=%d\n", 
îr
));

9417  
îr
;

9419 
vÆ
 = 
	`dtoh32
(val);

9420 i‡(
vÆ
 !
WLC_IOCTL_VERSION
 && val != 1) {

9421 
	`WL_ERR
(("Version mismatch,Ölease upgrade. Got %d,Éxpected %d or 1\n",

9422 
vÆ
, 
WLC_IOCTL_VERSION
));

9423  
BCME_VERSION
;

9425 
io˘l_vîsi⁄
 = 
vÆ
;

9426 
	`WL_TRACE
(("WLC_GET_VERSION=%d\n", 
io˘l_vîsi⁄
));

9428 
	`muãx_lock
(&
wl
->
u§_sync
);

9429 
dhd
 = (
dhd_pub_t
 *)(
wl
->
pub
);

9430 i‡(!(
dhd
->
›_mode
 & 
DHD_FLAG_HOSTAP_MODE
)) {

9431 
îr
 = 
	`wl_cfg80211_©èch_po°
(
	`wl_to_¥mry_ndev
(
wl
));

9432 i‡(
	`u∆ikñy
(
îr
))

9433  
îr
;

9435 
îr
 = 
	`__wl_cfg80211_up
(
wl
);

9436 i‡(
	`u∆ikñy
(
îr
))

9437 
	`WL_ERR
(("__wl_cfg80211_up failed\n"));

9438 
	`muãx_u∆ock
(&
wl
->
u§_sync
);

9439  
îr
;

9440 
	}
}

9443 
	$wl_cfg80211_h™g
(
√t_devi˚
 *
dev
, 
u16
 
ªas⁄
)

9445 
wl_¥iv
 *
wl
;

9446 
wl
 = 
wlcfg_drv_¥iv
;

9448 
	`WL_ERR
(("In : chip crashÉventing\n"));

9449 
	`cfg80211_disc⁄√˘ed
(
dev
, 
ªas⁄
, 
NULL
, 0, 
GFP_KERNEL
);

9450 #i‡
	`deföed
(
RSSIAVG
)

9451 
	`wl_‰ì_rssi_ˇche
(&
g_rssi_ˇche_˘æ
);

9453 #i‡
	`deföed
(
BSSCACHE
)

9454 
	`wl_‰ì_bss_ˇche
(&
g_bss_ˇche_˘æ
);

9455 
	`wl_run_bss_ˇche_timî
(&
g_bss_ˇche_˘æ
, 0);

9457 i‡(
wl
 !
NULL
) {

9458 
	`wl_lök_down
(
wl
);

9461 
	}
}

9463 
s32
 
	$wl_cfg80211_down
(*
∑ø
)

9465 
wl_¥iv
 *
wl
;

9466 
s32
 
îr
 = 0;

9468 ()
∑ø
;

9469 
	`WL_DBG
(("In\n"));

9470 
wl
 = 
wlcfg_drv_¥iv
;

9471 
	`muãx_lock
(&
wl
->
u§_sync
);

9472 #i‡
	`deföed
(
RSSIAVG
)

9473 
	`wl_‰ì_rssi_ˇche
(&
g_rssi_ˇche_˘æ
);

9475 #i‡
	`deföed
(
BSSCACHE
)

9476 
	`wl_‰ì_bss_ˇche
(&
g_bss_ˇche_˘æ
);

9477 
	`wl_run_bss_ˇche_timî
(&
g_bss_ˇche_˘æ
, 0);

9479 
îr
 = 
	`__wl_cfg80211_down
(
wl
);

9480 
	`muãx_u∆ock
(&
wl
->
u§_sync
);

9482  
îr
;

9483 
	}
}

9485 *
	$wl_ªad_¥of
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
, 
s32
 
ôem
)

9487 
Êags
;

9488 *
Ωå
 = 
NULL
;

9489 
wl_¥ofûe
 *
¥ofûe
 = 
	`wl_gë_¥ofûe_by_√tdev
(
wl
, 
ndev
);

9491 i‡(!
¥ofûe
)

9492  
NULL
;

9493 
	`•ö_lock_úqßve
(&
wl
->
cfgdrv_lock
, 
Êags
);

9494 
ôem
) {

9495 
WL_PROF_SEC
:

9496 
Ωå
 = &
¥ofûe
->
£c
;

9498 
WL_PROF_ACT
:

9499 
Ωå
 = &
¥ofûe
->
a˘ive
;

9501 
WL_PROF_BSSID
:

9502 
Ωå
 = 
¥ofûe
->
bssid
;

9504 
WL_PROF_SSID
:

9505 
Ωå
 = &
¥ofûe
->
ssid
;

9507 
WL_PROF_CHAN
:

9508 
Ωå
 = &
¥ofûe
->
ch™√l
;

9511 
	`•ö_u∆ock_úqª°‹e
(&
wl
->
cfgdrv_lock
, 
Êags
);

9512 i‡(!
Ωå
)

9513 
	`WL_ERR
(("övÆid iãm (%d)\n", 
ôem
));

9514  
Ωå
;

9515 
	}
}

9517 
s32


9518 
	$wl_upd©e_¥of
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
,

9519 c⁄° 
wl_evít_msg_t
 *
e
, *
d©a
, 
s32
 
ôem
)

9521 
s32
 
îr
 = 0;

9522 
wlc_ssid
 *
ssid
;

9523 
Êags
;

9524 
wl_¥ofûe
 *
¥ofûe
 = 
	`wl_gë_¥ofûe_by_√tdev
(
wl
, 
ndev
);

9526 i‡(!
¥ofûe
)

9527  
WL_INVALID
;

9528 
	`•ö_lock_úqßve
(&
wl
->
cfgdrv_lock
, 
Êags
);

9529 
ôem
) {

9530 
WL_PROF_SSID
:

9531 
ssid
 = (
wlc_ssid_t
 *Ë
d©a
;

9532 
	`mem£t
(
¥ofûe
->
ssid
.
SSID
, 0,

9533 (
¥ofûe
->
ssid
.
SSID
));

9534 
	`mem˝y
(
¥ofûe
->
ssid
.
SSID
, ssid->SSID, ssid->
SSID_Àn
);

9535 
¥ofûe
->
ssid
.
SSID_Àn
 = ssid->SSID_len;

9537 
WL_PROF_BSSID
:

9538 i‡(
d©a
)

9539 
	`mem˝y
(
¥ofûe
->
bssid
, 
d©a
, 
ETHER_ADDR_LEN
);

9541 
	`mem£t
(
¥ofûe
->
bssid
, 0, 
ETHER_ADDR_LEN
);

9543 
WL_PROF_SEC
:

9544 
	`mem˝y
(&
¥ofûe
->
£c
, 
d©a
, (profile->sec));

9546 
WL_PROF_ACT
:

9547 
¥ofûe
->
a˘ive
 = *(
boﬁ
 *)
d©a
;

9549 
WL_PROF_BEACONINT
:

9550 
¥ofûe
->
bóc⁄_öãrvÆ
 = *(
u16
 *)
d©a
;

9552 
WL_PROF_DTIMPERIOD
:

9553 
¥ofûe
->
dtim_≥riod
 = *(
u8
 *)
d©a
;

9555 
WL_PROF_CHAN
:

9556 
¥ofûe
->
ch™√l
 = *(
u32
*)
d©a
;

9558 
îr
 = -
EOPNOTSUPP
;

9561 
	`•ö_u∆ock_úqª°‹e
(&
wl
->
cfgdrv_lock
, 
Êags
);

9563 i‡(
îr
 =
EOPNOTSUPP
)

9564 
	`WL_ERR
(("unsuµ‹ãd iãm (%d)\n", 
ôem
));

9566  
îr
;

9567 
	}
}

9569 
	$wl_cfg80211_dbg_Àvñ
(
u32
 
Àvñ
)

9578 
	}
}

9580 
boﬁ
 
	$wl_is_ibssmode
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
)

9582  
	`wl_gë_mode_by_√tdev
(
wl
, 
ndev
Ë=
WL_MODE_IBSS
;

9583 
	}
}

9585 
__u£d
 
boﬁ
 
	$wl_is_ibss°¨ãr
(
wl_¥iv
 *
wl
)

9587  
wl
->
ibss_°¨ãr
;

9588 
	}
}

9590 
	$wl_r°_õ
(
wl_¥iv
 *
wl
)

9592 
wl_õ
 *
õ
 = 
	`wl_to_õ
(
wl
);

9594 
õ
->
off£t
 = 0;

9595 
	}
}

9597 
__u£d
 
s32
 
	$wl_add_õ
(
wl_¥iv
 *
wl
, 
u8
 
t
, u8 
l
, u8 *
v
)

9599 
wl_õ
 *
õ
 = 
	`wl_to_õ
(
wl
);

9600 
s32
 
îr
 = 0;

9602 i‡(
	`u∆ikñy
(
õ
->
off£t
 + 
l
 + 2 > 
WL_TLV_INFO_MAX
)) {

9603 
	`WL_ERR
(("ei crosses buffer boundary\n"));

9604  -
ENOSPC
;

9606 
õ
->
buf
[õ->
off£t
] = 
t
;

9607 
õ
->
buf
[õ->
off£t
 + 1] = 
l
;

9608 
	`mem˝y
(&
õ
->
buf
[õ->
off£t
 + 2], 
v
, 
l
);

9609 
õ
->
off£t
 +
l
 + 2;

9611  
îr
;

9612 
	}
}

9614 
s32
 
	$wl_mrg_õ
(
wl_¥iv
 *
wl
, 
u8
 *
õ_°ªam
, 
u16
 
õ_size
)

9616 
wl_õ
 *
õ
 = 
	`wl_to_õ
(
wl
);

9617 
s32
 
îr
 = 0;

9619 i‡(
	`u∆ikñy
(
õ
->
off£t
 + 
õ_size
 > 
WL_TLV_INFO_MAX
)) {

9620 
	`WL_ERR
(("ei_stream crosses buffer boundary\n"));

9621  -
ENOSPC
;

9623 
	`mem˝y
(&
õ
->
buf
[õ->
off£t
], 
õ_°ªam
, 
õ_size
);

9624 
õ
->
off£t
 +
õ_size
;

9626  
îr
;

9627 
	}
}

9629 
s32
 
	$wl_˝_õ
(
wl_¥iv
 *
wl
, 
u8
 *
d°
, 
u16
 
d°_size
)

9631 
wl_õ
 *
õ
 = 
	`wl_to_õ
(
wl
);

9632 
s32
 
îr
 = 0;

9634 i‡(
	`u∆ikñy
(
õ
->
off£t
 > 
d°_size
)) {

9635 
	`WL_ERR
(("dst_size isÇotÉnough\n"));

9636  -
ENOSPC
;

9638 
	`mem˝y
(
d°
, &
õ
->
buf
[0], ie->
off£t
);

9640  
îr
;

9641 
	}
}

9643 
u32
 
	$wl_gë_õÀn
(
wl_¥iv
 *
wl
)

9645 
wl_õ
 *
õ
 = 
	`wl_to_õ
(
wl
);

9647  
õ
->
off£t
;

9648 
	}
}

9650 
	$wl_lök_up
(
wl_¥iv
 *
wl
)

9652 
wl
->
lök_up
 = 
åue
;

9653 
	}
}

9655 
	$wl_lök_down
(
wl_¥iv
 *
wl
)

9657 
wl_c⁄√˘_öfo
 *
c⁄n_öfo
 = 
	`wl_to_c⁄n
(
wl
);

9659 
	`WL_DBG
(("In\n"));

9660 
wl
->
lök_up
 = 
Ál£
;

9661 
c⁄n_öfo
->
ªq_õ_Àn
 = 0;

9662 
c⁄n_öfo
->
ª•_õ_Àn
 = 0;

9663 
	}
}

9665 
	$wl_lock_eq
(
wl_¥iv
 *
wl
)

9667 
Êags
;

9669 
	`•ö_lock_úqßve
(&
wl
->
eq_lock
, 
Êags
);

9670  
Êags
;

9671 
	}
}

9673 
	$wl_u∆ock_eq
(
wl_¥iv
 *
wl
, 
Êags
)

9675 
	`•ö_u∆ock_úqª°‹e
(&
wl
->
eq_lock
, 
Êags
);

9676 
	}
}

9678 
	$wl_öô_eq_lock
(
wl_¥iv
 *
wl
)

9680 
	`•ö_lock_öô
(&
wl
->
eq_lock
);

9681 
	}
}

9683 
	$wl_dñay
(
u32
 
ms
)

9685 i‡(
	`ö_©omic
(Ë|| (
ms
 < 
	`jiffõs_to_m£cs
(1))) {

9686 
	`mdñay
(
ms
);

9688 
	`m¶ìp
(
ms
);

9690 
	}
}

9692 
s32
 
	$wl_cfg80211_gë_p2p_dev_addr
(
√t_devi˚
 *
√t
, 
ëhî_addr
 *
p2pdev_addr
)

9694 
wl_¥iv
 *
wl
 = 
wlcfg_drv_¥iv
;

9695 
ëhî_addr
 
p2pif_addr
;

9696 
ëhî_addr
 
¥im¨y_mac
;

9697 i‡(!
wl
->
p2p
)

9699 i‡(!
	`p2p_is_⁄
(
wl
)) {

9700 
	`gë_¥im¨y_mac
(
wl
, &
¥im¨y_mac
);

9701 
	`wl_cfgp2p_gíî©e_bss_mac
(&
¥im¨y_mac
, 
p2pdev_addr
, &
p2pif_addr
);

9703 
	`mem˝y
(
p2pdev_addr
->
o˘ë
,

9704 
wl
->
p2p
->
dev_addr
.
o˘ë
, 
ETHER_ADDR_LEN
);

9709 
	}
}

9710 
s32
 
	$wl_cfg80211_£t_p2p_nﬂ
(
√t_devi˚
 *
√t
, * 
buf
, 
Àn
)

9712 
wl_¥iv
 *
wl
;

9714 
wl
 = 
wlcfg_drv_¥iv
;

9716  
	`wl_cfgp2p_£t_p2p_nﬂ
(
wl
, 
√t
, 
buf
, 
Àn
);

9717 
	}
}

9719 
s32
 
	$wl_cfg80211_gë_p2p_nﬂ
(
√t_devi˚
 *
√t
, * 
buf
, 
Àn
)

9721 
wl_¥iv
 *
wl
;

9722 
wl
 = 
wlcfg_drv_¥iv
;

9724  
	`wl_cfgp2p_gë_p2p_nﬂ
(
wl
, 
√t
, 
buf
, 
Àn
);

9725 
	}
}

9727 
s32
 
	$wl_cfg80211_£t_p2p_ps
(
√t_devi˚
 *
√t
, * 
buf
, 
Àn
)

9729 
wl_¥iv
 *
wl
;

9730 
wl
 = 
wlcfg_drv_¥iv
;

9732  
	`wl_cfgp2p_£t_p2p_ps
(
wl
, 
√t
, 
buf
, 
Àn
);

9733 
	}
}

9735 
s32
 
	$wl_cfg80211_ch™√l_to_‰eq
(
u32
 
ch™√l
)

9737 
‰eq
 = 0;

9739 #i‡
LINUX_VERSION_CODE
 =
	`KERNEL_VERSION
(2, 6, 38Ë&& !
	`deföed
(
WL_COMPAT_WIRELESS
)

9740 
‰eq
 = 
	`õì80211_ch™√l_to_‰equícy
(
ch™√l
);

9743 
u16
 
b™d
 = 0;

9744 i‡(
ch™√l
 <
CH_MAX_2G_CHANNEL
)

9745 
b™d
 = 
IEEE80211_BAND_2GHZ
;

9747 
b™d
 = 
IEEE80211_BAND_5GHZ
;

9748 
‰eq
 = 
	`õì80211_ch™√l_to_‰equícy
(
ch™√l
, 
b™d
);

9751  
‰eq
;

9752 
	}
}

9754 
s32
 
	$wl_cfg80211_£t_wps_p2p_õ
(
√t_devi˚
 *
√t
, *
buf
, 
Àn
,

9755 
wl_m™agemít_ty≥
 
ty≥
)

9757 
wl_¥iv
 *
wl
;

9758 
√t_devi˚
 *
ndev
 = 
NULL
;

9759 
ëhî_addr
 
¥im¨y_mac
;

9760 
s32
 
ªt
 = 0;

9761 
s32
 
bssidx
 = 0;

9762 
s32
 
pktÊag
 = 0;

9763 
wl
 = 
wlcfg_drv_¥iv
;

9765 i‡(
	`wl_gë_drv_°©us
(
wl
, 
AP_CREATING
, 
√t
) ||

9766 
	`wl_gë_drv_°©us
(
wl
, 
AP_CREATED
, 
√t
)) {

9767 
ndev
 = 
√t
;

9768 
bssidx
 = 0;

9769 } i‡(
wl
->
p2p
) {

9770 i‡(
√t
 =
wl
->
p2p_√t
) {

9771 
√t
 = 
	`wl_to_¥mry_ndev
(
wl
);

9773 i‡(!
wl
->
p2p
->
⁄
) {

9774 
	`gë_¥im¨y_mac
(
wl
, &
¥im¨y_mac
);

9775 
	`wl_cfgp2p_gíî©e_bss_mac
(&
¥im¨y_mac
, &
wl
->
p2p
->
dev_addr
,

9776 &
wl
->
p2p
->
öt_addr
);

9781 
	`p2p_⁄
(
wl
Ë
åue
;

9782 
ªt
 = 
	`wl_cfgp2p_íabÀ_discovîy
(
wl
, 
√t
, 
NULL
, 0);

9784 i‡(
	`u∆ikñy
(
ªt
)) {

9785 
exô
;

9788 i‡(
√t
 !
	`wl_to_¥mry_ndev
(
wl
)) {

9789 i‡(
	`wl_gë_mode_by_√tdev
(
wl
, 
√t
Ë=
WL_MODE_AP
) {

9790 
ndev
 = 
	`wl_to_p2p_bss_ndev
(
wl
, 
P2PAPI_BSSCFG_CONNECTION
);

9791 
bssidx
 = 
	`wl_to_p2p_bss_bssidx
(
wl
, 
P2PAPI_BSSCFG_CONNECTION
);

9794 
ndev
 = 
	`wl_to_p2p_bss_ndev
(
wl
, 
P2PAPI_BSSCFG_PRIMARY
);

9795 
bssidx
 = 
	`wl_to_p2p_bss_bssidx
(
wl
, 
P2PAPI_BSSCFG_DEVICE
);

9798 i‡(
ndev
 !
NULL
) {

9799 
ty≥
) {

9800 
WL_BEACON
:

9801 
pktÊag
 = 
VNDR_IE_BEACON_FLAG
;

9803 
WL_PROBE_RESP
:

9804 
pktÊag
 = 
VNDR_IE_PRBRSP_FLAG
;

9806 
WL_ASSOC_RESP
:

9807 
pktÊag
 = 
VNDR_IE_ASSOCRSP_FLAG
;

9810 i‡(
pktÊag
)

9811 
ªt
 = 
	`wl_cfgp2p_£t_m™agemít_õ
(
wl
, 
ndev
, 
bssidx
, 
pktÊag
, 
buf
, 
Àn
);

9813 
exô
:

9814  
ªt
;

9815 
	}
}

9817 c⁄° 
rfkûl_›s
 
	gwl_rfkûl_›s
 = {

9818 .
£t_block
 = 
wl_rfkûl_£t


9821 
	$wl_rfkûl_£t
(*
d©a
, 
boﬁ
 
blocked
)

9823 
wl_¥iv
 *
wl
 = (wl_¥iv *)
d©a
;

9825 
	`WL_DBG
(("Enter \n"));

9826 
	`WL_DBG
(("RF %s\n", 
blocked
 ? "blocked" : "unblocked"));

9828 i‡(!
wl
)

9829  -
EINVAL
;

9831 
wl
->
rf_blocked
 = 
blocked
;

9834 
	}
}

9836 
	$wl_£tup_rfkûl
(
wl_¥iv
 *
wl
, 
boﬁ
 
£tup
)

9838 
s32
 
îr
 = 0;

9840 
	`WL_DBG
(("Enter \n"));

9841 i‡(!
wl
)

9842  -
EINVAL
;

9843 i‡(
£tup
) {

9844 
wl
->
rfkûl
 = 
	`rfkûl_Æloc
("brcmfmac-wifi",

9845 
	`wl_cfg80211_gë_∑ª¡_dev
(),

9846 
RFKILL_TYPE_WLAN
, &
wl_rfkûl_›s
, (*)
wl
);

9848 i‡(!
wl
->
rfkûl
) {

9849 
îr
 = -
ENOMEM
;

9850 
îr_out
;

9853 
îr
 = 
	`rfkûl_ªgi°î
(
wl
->
rfkûl
);

9855 i‡(
îr
)

9856 
	`rfkûl_de°roy
(
wl
->
rfkûl
);

9858 i‡(!
wl
->
rfkûl
) {

9859 
îr
 = -
ENOMEM
;

9860 
îr_out
;

9863 
	`rfkûl_uƒegi°î
(
wl
->
rfkûl
);

9864 
	`rfkûl_de°roy
(
wl
->
rfkûl
);

9867 
îr_out
:

9868  
îr
;

9869 
	}
}

9871 
devi˚
 *
	$wl_cfg80211_gë_∑ª¡_dev
()

9873  
cfg80211_∑ª¡_dev
;

9874 
	}
}

9876 
	$wl_cfg80211_£t_∑ª¡_dev
(*
dev
)

9878 
cfg80211_∑ª¡_dev
 = 
dev
;

9879 
	}
}

9881 
	$wl_cfg80211_˛ór_∑ª¡_dev
()

9883 
cfg80211_∑ª¡_dev
 = 
NULL
;

9884 
	}
}

9886 
	$gë_¥im¨y_mac
(
wl_¥iv
 *
wl
, 
ëhî_addr
 *
mac
)

9888 
	`wldev_iov¨_gëbuf_bsscfg
(
	`wl_to_¥mry_ndev
(
wl
), "cur_ëhîaddr", 
NULL
,

9889 0, 
wl
->
io˘l_buf
, 
WLC_IOCTL_SMLEN
, 0, &wl->
io˘l_buf_sync
);

9890 
	`mem˝y
(
mac
->
o˘ë
, 
wl
->
io˘l_buf
, 
ETHER_ADDR_LEN
);

9891 
	}
}

9893 
	$wl_cfg80211_do_drivî_öô
(
√t_devi˚
 *
√t
)

9895 
wl_¥iv
 *
wl
 = *(wl_¥iv **)
	`√tdev_¥iv
(
√t
);

9897 i‡(!
wl
 || !wl->
wdev
)

9898  -
EINVAL
;

9900 i‡(
	`dhd_do_drivî_öô
(
wl
->
wdev
->
√tdev
) < 0)

9904 
	}
}

9906 
	$wl_cfg80211_íabÀ_åa˚
(
u32
 
Àvñ
)

9908 
wl_dbg_Àvñ
 = 
Àvñ
;

9909 
	`¥ötk
("%s: wl_dbg_Àvñ = 0x%x\n", 
__FUNCTION__
, 
wl_dbg_Àvñ
);

9910 
	}
}

9912 #i‡
deföed
(
WL_SUPPORT_BACKPORTED_KPATCHES
Ë|| (
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(3, \

9914 
s32


9915 
	$wl_cfg80211_mgmt_tx_ˇn˚l_waô
(
wùhy
 *wiphy,

9916 
√t_devi˚
 *
dev
, 
u64
 
cookõ
)

9925 
	}
}

9928 #ifde‡
WL11U


9929 
bcm_év_t
 *

9930 
	$wl_cfg80211_föd_öãrw‹kög_õ
(
u8
 *
∑r£
, 
u32
 
Àn
)

9932 
bcm_év_t
 *
õ
;

9934 (
õ
 = 
	`bcm_∑r£_évs
(
∑r£
, (
u32
)
Àn
, 
DOT11_MNG_INTERWORKING_ID
))) {

9935  (
bcm_év_t
 *)
õ
;

9937  
NULL
;

9938 
	}
}

9940 
s32


9941 
	$wl_cfg80211_add_iw_õ
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
, 
s32
 
bssidx
, s32 
pktÊag
,

9942 
uöt8
 
õ_id
, uöt8 *
d©a
, uöt8 
d©a_Àn
)

9944 
s32
 
îr
 = 
BCME_OK
;

9945 
s32
 
buf_Àn
;

9946 
s32
 
õcou¡
;

9947 
õ_£tbuf_t
 *
õ_£tbuf
;

9949 i‡(
õ_id
 !
DOT11_MNG_INTERWORKING_ID
)

9950  
BCME_UNSUPPORTED
;

9953 i‡((
pktÊag
 & ~(
VNDR_IE_BEACON_FLAG
 | 
VNDR_IE_PRBRSP_FLAG
 |

9954 
VNDR_IE_ASSOCRSP_FLAG
 | 
VNDR_IE_AUTHRSP_FLAG
 |

9955 
VNDR_IE_PRBREQ_FLAG
 | 
VNDR_IE_ASSOCREQ_FLAG
|

9956 
VNDR_IE_CUSTOM_FLAG
))) {

9957 
	`WL_ERR
(("cfg80211 Add IE: InvÆidÖackë fœg 0x%x\n", 
pktÊag
));

9962 
pktÊag
 = 
	`htod32
(pktflag);

9964 
buf_Àn
 = (
õ_£tbuf_t
Ë+ 
d©a_Àn
 - 1;

9965 
õ_£tbuf
 = (
õ_£tbuf_t
 *Ë
	`kzÆloc
(
buf_Àn
, 
GFP_KERNEL
);

9967 i‡(!
õ_£tbuf
) {

9968 
	`WL_ERR
(("Errorállocating buffer for IE\n"));

9969  -
ENOMEM
;

9972 i‡(
wl
->
iw_õ_Àn
 =
d©a_Àn
 && !
	`memcmp
(wl->
iw_õ
, 
d©a
, data_len)) {

9973 
	`WL_ERR
(("Previous IW IE isÉqualsÅo current IE\n"));

9974  
îr
;

9977 
	`°∫˝y
(
õ_£tbuf
->
cmd
, "add", 
VNDR_IE_CMD_LEN
 - 1);

9978 
õ_£tbuf
->
cmd
[
VNDR_IE_CMD_LEN
 - 1] = '\0';

9981 
õcou¡
 = 
	`htod32
(1);

9982 
	`mem˝y
((*)&
õ_£tbuf
->
õ_buf„r
.
õcou¡
, &iecount, ());

9983 
	`mem˝y
((*)&
õ_£tbuf
->
õ_buf„r
.
õ_li°
[0].
pktÊag
, &pktÊag, (
uöt32
));

9986 
õ_£tbuf
->
õ_buf„r
.
õ_li°
[0].
õ_d©a
.
id
 = 
õ_id
;

9989 i‡(
wl
->
iw_õ_Àn
 != 0) {

9990 
	`WL_DBG
(("Different IW_IE wasálready set. clear first\n"));

9992 
õ_£tbuf
->
õ_buf„r
.
õ_li°
[0].
õ_d©a
.
Àn
 = 0;

9994 
îr
 = 
	`wldev_iov¨_£tbuf_bsscfg
(
ndev
, "õ", 
õ_£tbuf
, 
buf_Àn
,

9995 
wl
->
io˘l_buf
, 
WLC_IOCTL_MAXLEN
, 
bssidx
, &wl->
io˘l_buf_sync
);

9997 i‡(
îr
 !
BCME_OK
)

9998  
îr
;

10001 
õ_£tbuf
->
õ_buf„r
.
õ_li°
[0].
õ_d©a
.
Àn
 = 
d©a_Àn
;

10002 
	`mem˝y
((
uch¨
 *)&
õ_£tbuf
->
õ_buf„r
.
õ_li°
[0].
õ_d©a
.
d©a
[0], d©a, 
d©a_Àn
);

10004 
îr
 = 
	`wldev_iov¨_£tbuf_bsscfg
(
ndev
, "õ", 
õ_£tbuf
, 
buf_Àn
,

10005 
wl
->
io˘l_buf
, 
WLC_IOCTL_MAXLEN
, 
bssidx
, &wl->
io˘l_buf_sync
);

10007 i‡(
îr
 =
BCME_OK
) {

10008 
	`mem˝y
(
wl
->
iw_õ
, 
d©a
, 
d©a_Àn
);

10009 
wl
->
iw_õ_Àn
 = 
d©a_Àn
;

10010 
wl
->
wl11u
 = 
TRUE
;

10012 
îr
 = 
	`wldev_iov¨_£töt_bsscfg
(
ndev
, "gøt_¨p", 1, 
bssidx
);

10015 
	`k‰ì
(
õ_£tbuf
);

10016  
îr
;

10017 
	}
}

10020 #ifde‡
WL_HOST_BAND_MGMT


10021 
s32


10022 
	$wl_cfg80211_£t_b™d
(
√t_devi˚
 *
ndev
, 
b™d
)

10024 
wl_¥iv
 *
wl
 = 
wlcfg_drv_¥iv
;

10025 
ªt
 = 0;

10026 
io˘l_buf
[50];

10028 i‡((
b™d
 < 
WLC_BAND_AUTO
Ë|| (b™d > 
WLC_BAND_2G
)) {

10029 
	`WL_ERR
(("Invalid band\n"));

10030  -
EINVAL
;

10033 i‡((
ªt
 = 
	`wldev_iov¨_£tbuf
(
ndev
, "rﬂm_b™d", &
b™d
,

10034 (), 
io˘l_buf
, (io˘l_buf), 
NULL
)) < 0) {

10035 
	`WL_ERR
(("£tögÑﬂm_b™d faûed code=%d\n", 
ªt
));

10036  
ªt
;

10039 
	`WL_DBG
(("Sëtög b™dÅÿ%d\n", 
b™d
));

10040 
wl
->
cuº_b™d
 = 
b™d
;

10043 
	}
}

10046 #i‡
deföed
(
DHCP_SCAN_SUPPRESS
)

10047 
	$wl_cfg80211_sˇn_suµ_timîfunc
(
ul⁄g
 
d©a
)

10049 
wl_¥iv
 *
wl
 = (wl_¥iv *)
d©a
;

10051 
	`WL_DBG
(("Enter \n"));

10052 
	`scheduÀ_w‹k
(&
wl
->
wœn_w‹k
);

10053 
	}
}

10055 
	$wl_cfg80211_w‹k_h™dÀr
(
w‹k_°ru˘
 *
w‹k
)

10057 
wl_¥iv
 *
wl
 = 
wlcfg_drv_¥iv
;

10059 
wl
 = 
	`c⁄èöî_of
(
w‹k
, 
wl_¥iv
, 
wœn_w‹k
);

10061 i‡(!
wl
) {

10062 
	`WL_ERR
(("wl_privÖtr NULL\n"));

10066 i‡(
wl
->
sˇn_suµªs£d
) {

10068 
	`WL_ERR
(("CÀ™ u∞‰omÅimîá·î %d m£c\n", 
WL_SCAN_SUPPRESS_TIMEOUT
));

10069 
	`wl_cfg80211_sˇn_suµªss
(
	`wl_to_¥mry_ndev
(
wl
), 0);

10071 
	}
}

10073 
	$wl_cfg80211_sˇn_suµªss
(
√t_devi˚
 *
dev
, 
suµªss
)

10075 
wl_¥iv
 *
wl
 = 
wlcfg_drv_¥iv
;

10076 
ªt
 = 0;

10078 i‡(!
dev
 || !
wl
 || ((
suµªss
 != 0) && (suppress != 1)))

10079  -
EINVAL
;

10081 i‡(
suµªss
 =
wl
->
sˇn_suµªs£d
) {

10082 
	`WL_DBG
(("No change in scan_suppress state. Ignoring cmd..\n"));

10086 i‡(
	`timî_≥ndög
(&
wl
->
sˇn_suµ_timî
))

10087 
	`dñ_timî_sync
(&
wl
->
sˇn_suµ_timî
);

10089 i‡((
ªt
 = 
	`wldev_io˘l
(
dev
, 
WLC_SET_SCANSUPPRESS
,

10090 &
suµªss
, (), 
åue
)) < 0) {

10091 
	`WL_ERR
(("Sˇ¿suµªs†£âög faûedÑë:%d \n", 
ªt
));

10093 
	`WL_DBG
(("Sˇ¿suµªs†%†\n", 
suµªss
 ? "Enabled" : "Disabled"));

10094 
wl
->
sˇn_suµªs£d
 = 
suµªss
;

10098 i‡(
wl
->
sˇn_suµªs£d
) {

10099 i‡(
ªt
) {

10100 
	`WL_ERR
(("Retry scan_suppressÑesetátáÜaterÅime \n"));

10101 
	`mod_timî
(&
wl
->
sˇn_suµ_timî
,

10102 
jiffõs
 + 
	`m£cs_to_jiffõs
(
WL_SCAN_SUPPRESS_RETRY
));

10104 
	`WL_DBG
(("Start wlan_timerÅo clear of scan_suppress \n"));

10105 
	`mod_timî
(&
wl
->
sˇn_suµ_timî
,

10106 
jiffõs
 + 
	`m£cs_to_jiffõs
(
WL_SCAN_SUPPRESS_TIMEOUT
));

10110  
ªt
;

10111 
	}
}

	@wl_cfgp2p.c

27 
	~<ty≥defs.h
>

28 
	~<löuxvî.h
>

29 
	~<o¶.h
>

30 
	~<löux/kî√l.h
>

31 
	~<löux/kthªad.h
>

32 
	~<löux/√tdevi˚.h
>

33 
	~<löux/ëhîdevi˚.h
>

34 
	~<löux/ty≥s.h
>

35 
	~<löux/°rög.h
>

36 
	~<löux/timî.h
>

37 
	~<löux/if_¨p.h
>

38 
	~<asm/uac˚ss.h
>

40 
	~<bcmutûs.h
>

41 
	~<bcmídün.h
>

42 
	~<¥Ÿo/ëhî√t.h
>

43 
	~<¥Ÿo/802.11.h
>

45 
	~<wl_cfg80211.h
>

46 
	~<wl_cfgp2p.h
>

47 
	~<wldev_comm⁄.h
>

48 
	~<wl_™droid.h
>

50 
s8
 
	gsˇ≈¨ambuf
[
WLC_IOCTL_SMLEN
];

51 
s8
 
	gg_mgmt_õ_buf
[2048];

52 
boﬁ


53 
wl_cfgp2p_has_õ
(
u8
 *
õ
, u8 **
évs
, 
u32
 *
évs_Àn
, c⁄° u8 *
oui
, u32 
oui_Àn
, u8 
ty≥
);

55 
u32


56 
wl_cfgp2p_vndr_õ
(
wl_¥iv
 *
wl
, 
u8
 *
õbuf
, 
s32
 
bssidx
, s32 
pktÊag
,

57 
s8
 *
oui
, 
s32
 
õ_id
, s8 *
d©a
, s32 
d©Æí
, c⁄° s8* 
add_dñ_cmd
);

59 
wl_cfgp2p_°¨t_xmô
(
sk_buff
 *
skb
, 
√t_devi˚
 *
ndev
);

60 
wl_cfgp2p_do_io˘l
(
√t_devi˚
 *
√t
, 
i‰eq
 *
i‰
, 
cmd
);

61 
wl_cfgp2p_if_›í
(
√t_devi˚
 *
√t
);

62 
wl_cfgp2p_if_°›
(
√t_devi˚
 *
√t
);

63 
s32
 
wl_cfgp2p_ˇn˚l_li°í
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
,

64 
boﬁ
 
nŸify
);

66 c⁄° 
√t_devi˚_›s
 
	gwl_cfgp2p_if_›s
 = {

67 .
ndo_›í
 = 
wl_cfgp2p_if_›í
,

68 .
	gndo_°›
 = 
wl_cfgp2p_if_°›
,

69 .
	gndo_do_io˘l
 = 
wl_cfgp2p_do_io˘l
,

70 .
	gndo_°¨t_xmô
 = 
wl_cfgp2p_°¨t_xmô
,

73 
boﬁ
 
	$wl_cfgp2p_is_pub_a˘i⁄
(*
‰ame
, 
u32
 
‰ame_Àn
)

75 
wifi_p2p_pub_a˘_‰ame_t
 *
∑˘_‰m
;

77 i‡(
‰ame
 =
NULL
)

78  
Ál£
;

79 
∑˘_‰m
 = (
wifi_p2p_pub_a˘_‰ame_t
 *)
‰ame
;

80 i‡(
‰ame_Àn
 < (
wifi_p2p_pub_a˘_‰ame_t
) -1)

81  
Ál£
;

83 i‡(
∑˘_‰m
->
ˇãg‹y
 =
P2P_PUB_AF_CATEGORY
 &&

84 
∑˘_‰m
->
a˘i⁄
 =
P2P_PUB_AF_ACTION
 &&

85 
∑˘_‰m
->
oui_ty≥
 =
P2P_VER
 &&

86 
	`memcmp
(
∑˘_‰m
->
oui
, 
P2P_OUI
, (pact_frm->oui)) == 0) {

87  
åue
;

90  
Ál£
;

91 
	}
}

93 
boﬁ
 
	$wl_cfgp2p_is_p2p_a˘i⁄
(*
‰ame
, 
u32
 
‰ame_Àn
)

95 
wifi_p2p_a˘i⁄_‰ame_t
 *
a˘_‰m
;

97 i‡(
‰ame
 =
NULL
)

98  
Ál£
;

99 
a˘_‰m
 = (
wifi_p2p_a˘i⁄_‰ame_t
 *)
‰ame
;

100 i‡(
‰ame_Àn
 < (
wifi_p2p_a˘i⁄_‰ame_t
) -1)

101  
Ál£
;

103 i‡(
a˘_‰m
->
ˇãg‹y
 =
P2P_AF_CATEGORY
 &&

104 
a˘_‰m
->
ty≥
 =
P2P_VER
 &&

105 
	`memcmp
(
a˘_‰m
->
OUI
, 
P2P_OUI
, 
DOT11_OUI_LEN
) == 0) {

106  
åue
;

109  
Ál£
;

110 
	}
}

117 #ifde‡
WL11U


118 
	#GAS_RESP_LEN
 2

	)

119 
	#DOUBLE_TLV_BODY_OFF
 4

	)

120 
	#GAS_RESP_OFFSET
 4

	)

121 
	#GAS_CRESP_OFFSET
 5

	)

123 
boﬁ
 
	$wl_cfgp2p_föd_gas_subty≥
(
u8
 
subty≥
, u8* 
d©a
, 
u32
 
Àn
)

125 
bcm_év_t
 *
õ
 = (bcm_év_à*)
d©a
;

126 
u8
 *
‰ame
 = 
NULL
;

127 
u16
 
id
, 
Êí
;

130 
õ
 = 
	`bcm_∑r£_évs
(õ, ()
Àn
, 
DOT11_MNG_ADVERTISEMENT_ID
);

132 i‡(
õ
 =
NULL
)

133  
Ál£
;

135 
‰ame
 = (
uöt8
 *)
õ
 + ie->
Àn
 + 
TLV_HDR_LEN
 + 
GAS_RESP_LEN
;

136 
id
 = ((
u16
Ë(((
‰ame
)[1] << 8) | (frame)[0]));

137 
Êí
 = ((
u16
Ë(((
‰ame
)[3] << 8) | (frame)[2]));

140 i‡(
Êí
 >
WFA_OUI_LEN
 + 1 &&

141 
id
 =
P2PSD_GAS_NQP_INFOID
 &&

142 !
	`bcmp
(&
‰ame
[
DOUBLE_TLV_BODY_OFF
], (c⁄° 
uöt8
*)
WFA_OUI
, 
WFA_OUI_LEN
) &&

143 
subty≥
 =
‰ame
[
DOUBLE_TLV_BODY_OFF
+
WFA_OUI_LEN
]) {

144  
åue
;

147  
Ál£
;

148 
	}
}

151 
boﬁ
 
	$wl_cfgp2p_is_gas_a˘i⁄
(*
‰ame
, 
u32
 
‰ame_Àn
)

154 
wifi_p2psd_gas_pub_a˘_‰ame_t
 *
sd_a˘_‰m
;

156 i‡(
‰ame
 =
NULL
)

157  
Ál£
;

159 
sd_a˘_‰m
 = (
wifi_p2psd_gas_pub_a˘_‰ame_t
 *)
‰ame
;

160 i‡(
‰ame_Àn
 < (
wifi_p2psd_gas_pub_a˘_‰ame_t
) - 1)

161  
Ál£
;

162 i‡(
sd_a˘_‰m
->
ˇãg‹y
 !
P2PSD_ACTION_CATEGORY
)

163  
Ál£
;

165 #ifde‡
WL11U


166 i‡(
sd_a˘_‰m
->
a˘i⁄
 =
P2PSD_ACTION_ID_GAS_IRESP
)

167  
	`wl_cfgp2p_föd_gas_subty≥
(
P2PSD_GAS_OUI_SUBTYPE
,

168 (
u8
 *)
sd_a˘_‰m
->
quîy_d©a
 + 
GAS_RESP_OFFSET
,

169 
‰ame_Àn
);

171 i‡(
sd_a˘_‰m
->
a˘i⁄
 =
P2PSD_ACTION_ID_GAS_CRESP
)

172  
	`wl_cfgp2p_föd_gas_subty≥
(
P2PSD_GAS_OUI_SUBTYPE
,

173 (
u8
 *)
sd_a˘_‰m
->
quîy_d©a
 + 
GAS_CRESP_OFFSET
,

174 
‰ame_Àn
);

175 i‡(
sd_a˘_‰m
->
a˘i⁄
 =
P2PSD_ACTION_ID_GAS_IREQ
 ||

176 
sd_a˘_‰m
->
a˘i⁄
 =
P2PSD_ACTION_ID_GAS_CREQ
)

177  
åue
;

179  
Ál£
;

181 i‡(
sd_a˘_‰m
->
a˘i⁄
 =
P2PSD_ACTION_ID_GAS_IREQ
 ||

182 
sd_a˘_‰m
->
a˘i⁄
 =
P2PSD_ACTION_ID_GAS_IRESP
 ||

183 
sd_a˘_‰m
->
a˘i⁄
 =
P2PSD_ACTION_ID_GAS_CREQ
 ||

184 
sd_a˘_‰m
->
a˘i⁄
 =
P2PSD_ACTION_ID_GAS_CRESP
)

185  
åue
;

187  
Ál£
;

189 
	}
}

190 
	$wl_cfgp2p_¥öt_a˘‰ame
(
boﬁ
 
tx
, *
‰ame
, 
u32
 
‰ame_Àn
)

192 
wifi_p2p_pub_a˘_‰ame_t
 *
∑˘_‰m
;

193 
wifi_p2p_a˘i⁄_‰ame_t
 *
a˘_‰m
;

194 
wifi_p2psd_gas_pub_a˘_‰ame_t
 *
sd_a˘_‰m
;

195 i‡(!
‰ame
 || 
‰ame_Àn
 <= 2)

198 i‡(
	`wl_cfgp2p_is_pub_a˘i⁄
(
‰ame
, 
‰ame_Àn
)) {

199 
∑˘_‰m
 = (
wifi_p2p_pub_a˘_‰ame_t
 *)
‰ame
;

200 
∑˘_‰m
->
subty≥
) {

201 
P2P_PAF_GON_REQ
:

202 
	`CFGP2P_ACTION
(("%s P2P Group Owner Negotiation Req Frame\n",

203 (
tx
)? "TX": "RX"));

205 
P2P_PAF_GON_RSP
:

206 
	`CFGP2P_ACTION
(("%s P2P Group Owner Negotiation Rsp Frame\n",

207 (
tx
)? "TX": "RX"));

209 
P2P_PAF_GON_CONF
:

210 
	`CFGP2P_ACTION
(("%s P2P Group Owner Negotiation Confirm Frame\n",

211 (
tx
)? "TX": "RX"));

213 
P2P_PAF_INVITE_REQ
:

214 
	`CFGP2P_ACTION
(("%s P2P Invitation Request Frame\n",

215 (
tx
)? "TX": "RX"));

217 
P2P_PAF_INVITE_RSP
:

218 
	`CFGP2P_ACTION
(("%s P2P Invitation Response Frame\n",

219 (
tx
)? "TX": "RX"));

221 
P2P_PAF_DEVDIS_REQ
:

222 
	`CFGP2P_ACTION
(("%s P2P Device Discoverability Request Frame\n",

223 (
tx
)? "TX": "RX"));

225 
P2P_PAF_DEVDIS_RSP
:

226 
	`CFGP2P_ACTION
(("%s P2P Device Discoverability Response Frame\n",

227 (
tx
)? "TX": "RX"));

229 
P2P_PAF_PROVDIS_REQ
:

230 
	`CFGP2P_ACTION
(("%s P2P Provision Discovery Request Frame\n",

231 (
tx
)? "TX": "RX"));

233 
P2P_PAF_PROVDIS_RSP
:

234 
	`CFGP2P_ACTION
(("%s P2P Provision Discovery Response Frame\n",

235 (
tx
)? "TX": "RX"));

238 
	`CFGP2P_ACTION
(("%s Unknown P2P Public Action Frame\n",

239 (
tx
)? "TX": "RX"));

243 } i‡(
	`wl_cfgp2p_is_p2p_a˘i⁄
(
‰ame
, 
‰ame_Àn
)) {

244 
a˘_‰m
 = (
wifi_p2p_a˘i⁄_‰ame_t
 *)
‰ame
;

245 
a˘_‰m
->
subty≥
) {

246 
P2P_AF_NOTICE_OF_ABSENCE
:

247 
	`CFGP2P_ACTION
(("%s P2P Notice of Absence Frame\n",

248 (
tx
)? "TX": "RX"));

250 
P2P_AF_PRESENCE_REQ
:

251 
	`CFGP2P_ACTION
(("%s P2P Presence Request Frame\n",

252 (
tx
)? "TX": "RX"));

254 
P2P_AF_PRESENCE_RSP
:

255 
	`CFGP2P_ACTION
(("%s P2P Presence Response Frame\n",

256 (
tx
)? "TX": "RX"));

258 
P2P_AF_GO_DISC_REQ
:

259 
	`CFGP2P_ACTION
(("%s P2P Discoverability Request Frame\n",

260 (
tx
)? "TX": "RX"));

263 
	`CFGP2P_ACTION
(("%s Unknown P2P Action Frame\n",

264 (
tx
)? "TX": "RX"));

267 } i‡(
	`wl_cfgp2p_is_gas_a˘i⁄
(
‰ame
, 
‰ame_Àn
)) {

268 
sd_a˘_‰m
 = (
wifi_p2psd_gas_pub_a˘_‰ame_t
 *)
‰ame
;

269 
sd_a˘_‰m
->
a˘i⁄
) {

270 
P2PSD_ACTION_ID_GAS_IREQ
:

271 
	`CFGP2P_ACTION
(("%s P2P GAS Initial Request\n",

272 (
tx
)? "TX" : "RX"));

274 
P2PSD_ACTION_ID_GAS_IRESP
:

275 
	`CFGP2P_ACTION
(("%s P2P GAS Initial Response\n",

276 (
tx
)? "TX" : "RX"));

278 
P2PSD_ACTION_ID_GAS_CREQ
:

279 
	`CFGP2P_ACTION
(("%s P2P GAS Comback Request\n",

280 (
tx
)? "TX" : "RX"));

282 
P2PSD_ACTION_ID_GAS_CRESP
:

283 
	`CFGP2P_ACTION
(("%s P2P GAS Comback Response\n",

284 (
tx
)? "TX" : "RX"));

287 
	`CFGP2P_ACTION
(("%s Unknown P2P GAS Frame\n",

288 (
tx
)? "TX" : "RX"));

293 
	}
}

299 
s32


300 
	$wl_cfgp2p_öô_¥iv
(
wl_¥iv
 *
wl
)

302 i‡(!(
wl
->
p2p
 = 
	`kzÆloc
((
p2p_öfo
), 
GFP_KERNEL
))) {

303 
	`CFGP2P_ERR
(("structÖ2p_infoállocation failed\n"));

304  -
ENOMEM
;

306 
	#INIT_IE
(
IE_TYPE
, 
BSS_TYPE
) \

308 
	`mem£t
(
	`wl_to_p2p_bss_ßved_õ
(
wl
, 
BSS_TYPE
).
p2p_
 ## 
IE_TYPE
 ## 
_õ
, 0, \

309 (
	`wl_to_p2p_bss_ßved_õ
(
wl
, 
BSS_TYPE
).
p2p_
 ## 
IE_TYPE
 ## 
_õ
)); \

310 
	`wl_to_p2p_bss_ßved_õ
(
wl
, 
BSS_TYPE
).
p2p_
 ## 
IE_TYPE
 ## 
_õ_Àn
 = 0; \

311 } 0);

	)

313 
	`INIT_IE
(
¥obe_ªq
, 
P2PAPI_BSSCFG_PRIMARY
);

314 
	`INIT_IE
(
¥obe_ªs
, 
P2PAPI_BSSCFG_PRIMARY
);

315 
	`INIT_IE
(
assoc_ªq
, 
P2PAPI_BSSCFG_PRIMARY
);

316 
	`INIT_IE
(
assoc_ªs
, 
P2PAPI_BSSCFG_PRIMARY
);

317 
	`INIT_IE
(
bóc⁄
, 
P2PAPI_BSSCFG_PRIMARY
);

318 
	`INIT_IE
(
¥obe_ªq
, 
P2PAPI_BSSCFG_DEVICE
);

319 
	`INIT_IE
(
¥obe_ªs
, 
P2PAPI_BSSCFG_DEVICE
);

320 
	`INIT_IE
(
assoc_ªq
, 
P2PAPI_BSSCFG_DEVICE
);

321 
	`INIT_IE
(
assoc_ªs
, 
P2PAPI_BSSCFG_DEVICE
);

322 
	`INIT_IE
(
bóc⁄
, 
P2PAPI_BSSCFG_DEVICE
);

323 
	`INIT_IE
(
¥obe_ªq
, 
P2PAPI_BSSCFG_CONNECTION
);

324 
	`INIT_IE
(
¥obe_ªs
, 
P2PAPI_BSSCFG_CONNECTION
);

325 
	`INIT_IE
(
assoc_ªq
, 
P2PAPI_BSSCFG_CONNECTION
);

326 
	`INIT_IE
(
assoc_ªs
, 
P2PAPI_BSSCFG_CONNECTION
);

327 
	`INIT_IE
(
bóc⁄
, 
P2PAPI_BSSCFG_CONNECTION
);

328 #unde‡
INIT_IE


329 
	`wl_to_p2p_bss_ndev
(
wl
, 
P2PAPI_BSSCFG_PRIMARY
Ë
	`wl_to_¥mry_ndev
(wl);

330 
	`wl_to_p2p_bss_bssidx
(
wl
, 
P2PAPI_BSSCFG_PRIMARY
) = 0;

331 
	`wl_to_p2p_bss_ndev
(
wl
, 
P2PAPI_BSSCFG_DEVICE
Ë
NULL
;

332 
	`wl_to_p2p_bss_bssidx
(
wl
, 
P2PAPI_BSSCFG_DEVICE
) = 0;

333 
	`wl_to_p2p_bss_ndev
(
wl
, 
P2PAPI_BSSCFG_CONNECTION
Ë
NULL
;

334 
	`wl_to_p2p_bss_bssidx
(
wl
, 
P2PAPI_BSSCFG_CONNECTION
) = 0;

335  
BCME_OK
;

337 
	}
}

343 
	$wl_cfgp2p_deöô_¥iv
(
wl_¥iv
 *
wl
)

345 
	`CFGP2P_DBG
(("In\n"));

346 i‡(
wl
->
p2p
) {

347 
	`k‰ì
(
wl
->
p2p
);

348 
wl
->
p2p
 = 
NULL
;

350 
wl
->
p2p_suµ‹ãd
 = 0;

351 
	}
}

355 
s32


356 
	$wl_cfgp2p_£t_fúm_p2p
(
wl_¥iv
 *
wl
)

358 
√t_devi˚
 *
ndev
 = 
	`wl_to_¥mry_ndev
(
wl
);

359 
ëhî_addr
 
nuŒ_ëh_addr
 = { { 0, 0, 0, 0, 0, 0 } };

360 
s32
 
ªt
 = 
BCME_OK
;

361 
s32
 
vÆ
 = 0;

363 
	`wldev_iov¨_gëöt
(
ndev
, "≠°a", &
vÆ
);

364 i‡(
vÆ
 == 0) {

365 
vÆ
 = 1;

366 
ªt
 = 
	`wldev_io˘l
(
ndev
, 
WLC_DOWN
, &
vÆ
, (
s32
), 
åue
);

367 i‡(
ªt
 < 0) {

368 
	`CFGP2P_ERR
(("WLC_DOWNÉº‹ %d\n", 
ªt
));

369  
ªt
;

371 
	`wldev_iov¨_£töt
(
ndev
, "≠°a", 
vÆ
);

372 
ªt
 = 
	`wldev_io˘l
(
ndev
, 
WLC_UP
, &
vÆ
, (
s32
), 
åue
);

373 i‡(
ªt
 < 0) {

374 
	`CFGP2P_ERR
(("WLC_UPÉº‹ %d\n", 
ªt
));

375  
ªt
;

383 
ªt
 = 
	`wldev_iov¨_£tbuf_bsscfg
(
ndev
, "p2p_da_ovîride", &
nuŒ_ëh_addr
,

384 (
nuŒ_ëh_addr
), 
wl
->
io˘l_buf
, 
WLC_IOCTL_MAXLEN
, 0, &wl->
io˘l_buf_sync
);

385 i‡(
ªt
 &&Ñë !
BCME_UNSUPPORTED
) {

386 
	`CFGP2P_ERR
(("ÁûedÅÿupd©êdevi˚áddªs†ªà%d\n", 
ªt
));

388  
ªt
;

389 
	}
}

398 
s32


399 
	$wl_cfgp2p_iÁdd
(
wl_¥iv
 *
wl
, 
ëhî_addr
 *
mac
, 
u8
 
if_ty≥
,

400 
ch™•ec_t
 
ch•ec
)

402 
wl_p2p_if_t
 
i‰eq
;

403 
s32
 
îr
;

404 
u32
 
scb_timeout
 = 
WL_SCB_TIMEOUT
;

405 
√t_devi˚
 *
ndev
 = 
	`wl_to_¥mry_ndev
(
wl
);

407 
i‰eq
.
ty≥
 = 
if_ty≥
;

408 
i‰eq
.
ch•ec
 = chspec;

409 
	`mem˝y
(
i‰eq
.
addr
.
o˘ë
, 
mac
->octet, (ifreq.addr.octet));

411 
	`CFGP2P_DBG
(("---w»p2p_iÁdd "
MACDBG
" %s %u\n",

412 
	`MAC2STRDBG
(
i‰eq
.
addr
.
o˘ë
),

413 (
if_ty≥
 =
WL_P2P_IF_GO
) ? "go" : "client",

414 (
ch•ec
 & 
WL_CHANSPEC_CHAN_MASK
Ë>> 
WL_CHANSPEC_CHAN_SHIFT
));

416 
îr
 = 
	`wldev_iov¨_£tbuf
(
ndev
, "p2p_iÁdd", &
i‰eq
, (ifreq),

417 
wl
->
io˘l_buf
, 
WLC_IOCTL_MAXLEN
, &wl->
io˘l_buf_sync
);

419 i‡(
	`u∆ikñy
(
îr
 < 0))

420 
	`¥ötk
("'w»p2p_iÁdd'Éº‹ %d\n", 
îr
);

421 i‡(
if_ty≥
 =
WL_P2P_IF_GO
) {

422 
îr
 = 
	`wldev_io˘l
(
ndev
, 
WLC_SET_SCB_TIMEOUT
, &
scb_timeout
, (
u32
), 
åue
);

423 i‡(
	`u∆ikñy
(
îr
 < 0))

424 
	`¥ötk
("'w»scb_timeout'Éº‹ %d\n", 
îr
);

426  
îr
;

427 
	}
}

434 
s32


435 
	$wl_cfgp2p_ifdißbÀ
(
wl_¥iv
 *
wl
, 
ëhî_addr
 *
mac
)

437 
s32
 
ªt
;

438 
√t_devi˚
 *
√tdev
 = 
	`wl_to_¥mry_ndev
(
wl
);

440 
	`CFGP2P_INFO
(("------¥im¨y idx %d : w»p2p_ifdi†"
MACDBG
"\n",

441 
√tdev
->
ifödex
, 
	`MAC2STRDBG
(
mac
->
o˘ë
)));

442 
ªt
 = 
	`wldev_iov¨_£tbuf
(
√tdev
, "p2p_ifdis", 
mac
, (*mac),

443 
wl
->
io˘l_buf
, 
WLC_IOCTL_MAXLEN
, &wl->
io˘l_buf_sync
);

444 i‡(
	`u∆ikñy
(
ªt
 < 0)) {

445 
	`¥ötk
("'w»p2p_ifdis'Éº‹ %d\n", 
ªt
);

447  
ªt
;

448 
	}
}

455 
s32


456 
	$wl_cfgp2p_ifdñ
(
wl_¥iv
 *
wl
, 
ëhî_addr
 *
mac
)

458 
s32
 
ªt
;

459 
√t_devi˚
 *
√tdev
 = 
	`wl_to_¥mry_ndev
(
wl
);

461 
	`CFGP2P_INFO
(("------¥im¨y idx %d : w»p2p_ifdñ "
MACDBG
"\n",

462 
√tdev
->
ifödex
, 
	`MAC2STRDBG
(
mac
->
o˘ë
)));

463 
ªt
 = 
	`wldev_iov¨_£tbuf
(
√tdev
, "p2p_ifdñ", 
mac
, (*mac),

464 
wl
->
io˘l_buf
, 
WLC_IOCTL_MAXLEN
, &wl->
io˘l_buf_sync
);

465 i‡(
	`u∆ikñy
(
ªt
 < 0)) {

466 
	`¥ötk
("'w»p2p_ifdñ'Éº‹ %d\n", 
ªt
);

468  
ªt
;

469 
	}
}

476 
s32


477 
	$wl_cfgp2p_ifch™ge
(
wl_¥iv
 *
wl
, 
ëhî_addr
 *
mac
, 
u8
 
if_ty≥
,

478 
ch™•ec_t
 
ch•ec
)

480 
wl_p2p_if_t
 
i‰eq
;

481 
s32
 
îr
;

482 
u32
 
scb_timeout
 = 
WL_SCB_TIMEOUT
;

484 
√t_devi˚
 *
√tdev
 = 
	`wl_to_p2p_bss_ndev
(
wl
, 
P2PAPI_BSSCFG_CONNECTION
);

486 
i‰eq
.
ty≥
 = 
if_ty≥
;

487 
i‰eq
.
ch•ec
 = chspec;

488 
	`mem˝y
(
i‰eq
.
addr
.
o˘ë
, 
mac
->octet, (ifreq.addr.octet));

490 
	`CFGP2P_INFO
(("---w»p2p_ifch™gê"
MACDBG
" %s %u"

491 " ch™•e¯0x%04x\n", 
	`MAC2STRDBG
(
i‰eq
.
addr
.
o˘ë
),

492 (
if_ty≥
 =
WL_P2P_IF_GO
) ? "go" : "client",

493 (
ch•ec
 & 
WL_CHANSPEC_CHAN_MASK
Ë>> 
WL_CHANSPEC_CHAN_SHIFT
,

494 
i‰eq
.
ch•ec
));

496 
îr
 = 
	`wldev_iov¨_£tbuf
(
√tdev
, "p2p_ifupd", &
i‰eq
, (ifreq),

497 
wl
->
io˘l_buf
, 
WLC_IOCTL_MAXLEN
, &wl->
io˘l_buf_sync
);

499 i‡(
	`u∆ikñy
(
îr
 < 0)) {

500 
	`¥ötk
("'w»p2p_ifupd'Éº‹ %d\n", 
îr
);

501 } i‡(
if_ty≥
 =
WL_P2P_IF_GO
) {

502 
îr
 = 
	`wldev_io˘l
(
√tdev
, 
WLC_SET_SCB_TIMEOUT
, &
scb_timeout
, (
u32
), 
åue
);

503 i‡(
	`u∆ikñy
(
îr
 < 0))

504 
	`¥ötk
("'w»scb_timeout'Éº‹ %d\n", 
îr
);

506  
îr
;

507 
	}
}

516 
s32


517 
	$wl_cfgp2p_ifidx
(
wl_¥iv
 *
wl
, 
ëhî_addr
 *
mac
, 
s32
 *
ödex
)

519 
s32
 
ªt
;

520 
u8
 
gëbuf
[64];

521 
√t_devi˚
 *
dev
 = 
	`wl_to_¥mry_ndev
(
wl
);

523 
	`CFGP2P_INFO
(("---w»p2p_i‡"
MACDBG
"\n", 
	`MAC2STRDBG
(
mac
->
o˘ë
)));

525 
ªt
 = 
	`wldev_iov¨_gëbuf_bsscfg
(
dev
, "p2p_if", 
mac
, (*mac), 
gëbuf
,

526 (
gëbuf
), 
	`wl_to_p2p_bss_bssidx
(
wl
, 
P2PAPI_BSSCFG_PRIMARY
), 
NULL
);

528 i‡(
ªt
 == 0) {

529 
	`mem˝y
(
ödex
, 
gëbuf
, (
s32
));

530 
	`CFGP2P_INFO
(("---w»p2p_i‡ ==> %d\n", *
ödex
));

533  
ªt
;

534 
	}
}

536 
s32


537 
	$wl_cfgp2p_£t_discovîy
(
wl_¥iv
 *
wl
, 
s32
 
⁄
)

539 
s32
 
ªt
 = 
BCME_OK
;

540 
√t_devi˚
 *
ndev
 = 
	`wl_to_¥mry_ndev
(
wl
);

541 
	`CFGP2P_DBG
(("enter\n"));

543 
ªt
 = 
	`wldev_iov¨_£töt
(
ndev
, "p2p_disc", 
⁄
);

545 i‡(
	`u∆ikñy
(
ªt
 < 0)) {

546 
	`CFGP2P_ERR
(("p2p_dis¯%dÉº‹ %d\n", 
⁄
, 
ªt
));

549  
ªt
;

550 
	}
}

561 
s32


562 
	$wl_cfgp2p_£t_p2p_mode
(
wl_¥iv
 *
wl
, 
u8
 
mode
, 
u32
 
ch™√l
, 
u16
 
li°í_ms
, 
bssidx
)

564 
wl_p2p_disc_°_t
 
discovîy_mode
;

565 
s32
 
ªt
;

566 
√t_devi˚
 *
dev
;

567 
	`CFGP2P_DBG
(("enter\n"));

569 i‡(
	`u∆ikñy
(
bssidx
 =
WL_INVALID
 || bssidx >
P2PAPI_BSSCFG_MAX
)) {

570 
	`CFGP2P_ERR
((" %d index ouào‡ønge\n", 
bssidx
));

574 
dev
 = 
	`wl_to_p2p_bss_ndev
(
wl
, 
bssidx
);

575 i‡(
	`u∆ikñy
(
dev
 =
NULL
)) {

576 
	`CFGP2P_ERR
(("bssidx %d i†nŸássig√d\n", 
bssidx
));

577  
BCME_NOTFOUND
;

581 
discovîy_mode
.
°©e
 = 
mode
;

582 
discovîy_mode
.
ch•ec
 = 
	`wl_ch_ho°_to_drivî
(
ch™√l
);

583 
discovîy_mode
.
dwñl
 = 
li°í_ms
;

584 
ªt
 = 
	`wldev_iov¨_£tbuf_bsscfg
(
dev
, "p2p_°©e", &
discovîy_mode
,

585 (
discovîy_mode
), 
wl
->
io˘l_buf
, 
WLC_IOCTL_MAXLEN
,

586 
bssidx
, &
wl
->
io˘l_buf_sync
);

588  
ªt
;

589 
	}
}

592 
s32


593 
	$wl_cfgp2p_gë_disc_idx
(
wl_¥iv
 *
wl
, 
s32
 *
ödex
)

595 
s32
 
ªt
;

596 
√t_devi˚
 *
dev
 = 
	`wl_to_p2p_bss_ndev
(
wl
, 
P2PAPI_BSSCFG_PRIMARY
);

598 
ªt
 = 
	`wldev_iov¨_gëöt
(
dev
, "p2p_dev", 
ödex
);

599 
	`CFGP2P_INFO
(("p2p_dev bsscfg_idx=%dÑë=%d\n", *
ödex
, 
ªt
));

601 i‡(
	`u∆ikñy
(
ªt
 < 0)) {

602 
	`CFGP2P_ERR
(("'p2p_dev'Éº‹ %d\n", 
ªt
));

603  
ªt
;

605  
ªt
;

606 
	}
}

608 
s32


609 
	$wl_cfgp2p_öô_discovîy
(
wl_¥iv
 *
wl
)

612 
s32
 
ödex
 = 0;

613 
s32
 
ªt
 = 
BCME_OK
;

615 
	`CFGP2P_DBG
(("enter\n"));

617 i‡(
	`wl_to_p2p_bss_bssidx
(
wl
, 
P2PAPI_BSSCFG_DEVICE
) != 0) {

618 
	`CFGP2P_ERR
(("doÇothing,álready initialized\n"));

619  
ªt
;

622 
ªt
 = 
	`wl_cfgp2p_£t_discovîy
(
wl
, 1);

623 i‡(
ªt
 < 0) {

624 
	`CFGP2P_ERR
(("set discoverÉrror\n"));

625  
ªt
;

628 
ªt
 = 
	`wl_cfgp2p_gë_disc_idx
(
wl
, &
ödex
);

630 i‡(
ªt
 < 0) {

631  
ªt
;

633 
	`wl_to_p2p_bss_ndev
(
wl
, 
P2PAPI_BSSCFG_DEVICE
) =

634 
	`wl_to_p2p_bss_ndev
(
wl
, 
P2PAPI_BSSCFG_PRIMARY
);

635 
	`wl_to_p2p_bss_bssidx
(
wl
, 
P2PAPI_BSSCFG_DEVICE
Ë
ödex
;

638 
ªt
 = 
	`wl_cfgp2p_£t_p2p_mode
(
wl
, 
WL_P2P_DISC_ST_SCAN
, 0, 0,

639 
	`wl_to_p2p_bss_bssidx
(
wl
, 
P2PAPI_BSSCFG_DEVICE
));

641 i‡(
	`u∆ikñy
(
ªt
 != 0)) {

642 
	`CFGP2P_ERR
(("unableÅo set WL_P2P_DISC_ST_SCAN\n"));

643 
	`wl_cfgp2p_£t_discovîy
(
wl
, 0);

644 
	`wl_to_p2p_bss_bssidx
(
wl
, 
P2PAPI_BSSCFG_DEVICE
) = 0;

645 
	`wl_to_p2p_bss_ndev
(
wl
, 
P2PAPI_BSSCFG_DEVICE
Ë
NULL
;

648  
ªt
;

649 
	}
}

656 
s32


657 
	$wl_cfgp2p_deöô_discovîy
(
wl_¥iv
 *
wl
)

659 
s32
 
ªt
 = 
BCME_OK
;

660 
	`CFGP2P_DBG
(("enter\n"));

662 i‡(
	`wl_to_p2p_bss_bssidx
(
wl
, 
P2PAPI_BSSCFG_DEVICE
) == 0) {

663 
	`CFGP2P_ERR
(("doÇothing,Çot initialized\n"));

667 
ªt
 = 
	`wl_cfgp2p_£t_p2p_mode
(
wl
, 
WL_P2P_DISC_ST_SCAN
, 0, 0,

668 
	`wl_to_p2p_bss_bssidx
(
wl
, 
P2PAPI_BSSCFG_DEVICE
));

670 
ªt
 = 
	`wl_cfgp2p_£t_discovîy
(
wl
, 0);

680 
	`wl_to_p2p_bss_bssidx
(
wl
, 
P2PAPI_BSSCFG_DEVICE
Ë
WL_INVALID
;

681 
	`wl_to_p2p_bss_ndev
(
wl
, 
P2PAPI_BSSCFG_DEVICE
Ë
NULL
;

683  
ªt
;

685 
	}
}

693 
s32


694 
	$wl_cfgp2p_íabÀ_discovîy
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
dev
,

695 c⁄° 
u8
 *
õ
, 
u32
 
õ_Àn
)

697 
s32
 
ªt
 = 
BCME_OK
;

698 
s32
 
bssidx
 = (
	`wl_to_¥mry_ndev
(
wl
Ë=
dev
) ?

699 
	`wl_to_p2p_bss_bssidx
(
wl
, 
P2PAPI_BSSCFG_DEVICE
Ë: 
	`wl_cfgp2p_föd_idx
(wl, 
dev
);

700 i‡(
	`wl_gë_p2p_°©us
(
wl
, 
DISCOVERY_ON
)) {

701 
	`CFGP2P_INFO
((" DISCOVERY isálready initialized, we haveÇothingÅo do\n"));

702 
£t_õ
;

705 
	`wl_£t_p2p_°©us
(
wl
, 
DISCOVERY_ON
);

707 
	`CFGP2P_DBG
(("enter\n"));

709 
ªt
 = 
	`wl_cfgp2p_öô_discovîy
(
wl
);

710 i‡(
	`u∆ikñy
(
ªt
 < 0)) {

711 
	`CFGP2P_ERR
((" inô discovîyÉº‹ %d\n", 
ªt
));

712 
exô
;

718 
ªt
 = 
	`wldev_iov¨_£töt_bsscfg
(
	`wl_to_p2p_bss_ndev
(
wl
, 
P2PAPI_BSSCFG_DEVICE
),

719 "w£c", 
AES_ENABLED
, 
	`wl_to_p2p_bss_bssidx
(
wl
, 
P2PAPI_BSSCFG_DEVICE
));

720 i‡(
	`u∆ikñy
(
ªt
 < 0)) {

721 
	`CFGP2P_ERR
((" w£¯îr‹ %d\n", 
ªt
));

723 
£t_õ
:

724 i‡(
õ_Àn
) {

725 
ªt
 = 
	`wl_cfgp2p_£t_m™agemít_õ
(
wl
, 
dev
,

726 
bssidx
,

727 
VNDR_IE_PRBREQ_FLAG
, 
õ
, 
õ_Àn
);

729 i‡(
	`u∆ikñy
(
ªt
 < 0)) {

730 
	`CFGP2P_ERR
(("£à¥obªq iêoccur†îr‹ %d\n", 
ªt
));

731 
exô
;

734 
exô
:

735  
ªt
;

736 
	}
}

743 
s32


744 
	$wl_cfgp2p_dißbÀ_discovîy
(
wl_¥iv
 *
wl
)

746 
s32
 
ªt
 = 
BCME_OK
;

747 
	`CFGP2P_DBG
(("Énter\n"));

748 
	`wl_˛r_p2p_°©us
(
wl
, 
DISCOVERY_ON
);

750 i‡(
	`wl_to_p2p_bss_bssidx
(
wl
, 
P2PAPI_BSSCFG_DEVICE
) == 0) {

751 
	`CFGP2P_ERR
((" doÇothing,Çot initialized\n"));

752 
exô
;

755 
ªt
 = 
	`wl_cfgp2p_£t_p2p_mode
(
wl
, 
WL_P2P_DISC_ST_SCAN
, 0, 0,

756 
	`wl_to_p2p_bss_bssidx
(
wl
, 
P2PAPI_BSSCFG_DEVICE
));

758 i‡(
	`u∆ikñy
(
ªt
 < 0)) {

760 
	`CFGP2P_ERR
(("unableÅo set WL_P2P_DISC_ST_SCAN\n"));

765 
	`wl_˛r_p2p_°©us
(
wl
, 
DISCOVERY_ON
);

766 
ªt
 = 
	`wl_cfgp2p_deöô_discovîy
(
wl
);

768 
exô
:

769  
ªt
;

770 
	}
}

772 
s32


773 
	$wl_cfgp2p_esˇn
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
dev
, 
u16
 
a˘ive
,

774 
u32
 
num_ch™s
, 
u16
 *
ch™√ls
,

775 
s32
 
£¨ch_°©e
, 
u16
 
a˘i⁄
, 
u32
 
bssidx
)

777 
s32
 
ªt
 = 
BCME_OK
;

778 
s32
 
memsize
;

779 
s32
 
ï¨ams_size
;

780 
u32
 
i
;

781 
s8
 *
memblk
;

782 
wl_p2p_sˇn_t
 *
p2p_∑øms
;

783 
wl_esˇn_∑øms_t
 *
ï¨ams
;

784 
wlc_ssid_t
 
ssid
;

786 
	#P2PAPI_SCAN_NPROBES
 1

	)

787 
	#P2PAPI_SCAN_DWELL_TIME_MS
 80

	)

788 
	#P2PAPI_SCAN_SOCIAL_DWELL_TIME_MS
 40

	)

789 
	#P2PAPI_SCAN_HOME_TIME_MS
 60

	)

790 
	#P2PAPI_SCAN_NPROBS_TIME_MS
 30

	)

791 
	#P2PAPI_SCAN_AF_SEARCH_DWELL_TIME_MS
 100

	)

793 
√t_devi˚
 *
¥i_dev
 = 
	`wl_to_p2p_bss_ndev
(
wl
, 
P2PAPI_BSSCFG_PRIMARY
);

795 
ï¨ams_size
 = (
WL_SCAN_PARAMS_FIXED_SIZE
 +

796 
	`OFFSETOF
(
wl_esˇn_∑øms_t
, 
∑øms
)) +

797 
num_ch™s
 * (
ï¨ams
->
∑øms
.
ch™√l_li°
[0]);

799 
memsize
 = (
wl_p2p_sˇn_t
Ë+ 
ï¨ams_size
;

800 
memblk
 = 
sˇ≈¨ambuf
;

801 i‡(
memsize
 > (
sˇ≈¨ambuf
)) {

802 
	`CFGP2P_ERR
((" scanpar bufÅoo small (%u > %u)\n",

803 
memsize
, (
sˇ≈¨ambuf
)));

806 
	`mem£t
(
memblk
, 0, 
memsize
);

807 
	`mem£t
(
wl
->
io˘l_buf
, 0, 
WLC_IOCTL_MAXLEN
);

808 i‡(
£¨ch_°©e
 =
WL_P2P_DISC_ST_SEARCH
) {

813 
	`wl_cfgp2p_£t_p2p_mode
(
wl
, 
WL_P2P_DISC_ST_SEARCH
, 0, 0, 
bssidx
);

814 
ssid
.
SSID_Àn
 = 
	`htod32
(0);

816 } i‡(
£¨ch_°©e
 =
WL_P2P_DISC_ST_SCAN
) {

823 
	`°∫˝y
(
ssid
.
SSID
, 
WL_P2P_WILDCARD_SSID
, (ssid.SSID) - 1);

824 
ssid
.
SSID
[(ssid.SSID) - 1] = 0;

825 
ssid
.
SSID_Àn
 = 
	`htod32
(
WL_P2P_WILDCARD_SSID_LEN
);

826 
	`wl_cfgp2p_£t_p2p_mode
(
wl
, 
WL_P2P_DISC_ST_SCAN
, 0, 0, 
bssidx
);

829 
	`CFGP2P_ERR
((" invÆid sórch sèã %d\n", 
£¨ch_°©e
));

835 
p2p_∑øms
 = (
wl_p2p_sˇn_t
*Ë
memblk
;

836 
p2p_∑øms
->
ty≥
 = 'E';

838 
ï¨ams
 = (
wl_esˇn_∑øms_t
*Ë(
p2p_∑øms
 + 1);

839 
ï¨ams
->
∑øms
.
bss_ty≥
 = 
DOT11_BSSTYPE_ANY
;

840 i‡(
a˘ive
)

841 
ï¨ams
->
∑øms
.
sˇn_ty≥
 = 
DOT11_SCANTYPE_ACTIVE
;

843 
ï¨ams
->
∑øms
.
sˇn_ty≥
 = 
DOT11_SCANTYPE_PASSIVE
;

845 
	`mem˝y
(&
ï¨ams
->
∑øms
.
bssid
, &
ëhî_bˇ°
, 
ETHER_ADDR_LEN
);

846 i‡(
ssid
.
SSID_Àn
)

847 
	`mem˝y
(&
ï¨ams
->
∑øms
.
ssid
, &ssid, (
wlc_ssid_t
));

849 
ï¨ams
->
∑øms
.
home_time
 = 
	`htod32
(
P2PAPI_SCAN_HOME_TIME_MS
);

854 i‡((
num_ch™s
 =
SOCIAL_CHAN_CNT
) || (num_chans == SOCIAL_CHAN_CNT + 1))

855 
ï¨ams
->
∑øms
.
a˘ive_time
 = 
	`htod32
(
P2PAPI_SCAN_SOCIAL_DWELL_TIME_MS
);

856 i‡(
num_ch™s
 =
AF_PEER_SEARCH_CNT
)

857 
ï¨ams
->
∑øms
.
a˘ive_time
 = 
	`htod32
(
P2PAPI_SCAN_AF_SEARCH_DWELL_TIME_MS
);

858 i‡(
	`wl_gë_drv_°©us_Æl
(
wl
, 
CONNECTED
))

859 
ï¨ams
->
∑øms
.
a˘ive_time
 = -1;

861 
ï¨ams
->
∑øms
.
a˘ive_time
 = 
	`htod32
(
P2PAPI_SCAN_DWELL_TIME_MS
);

862 
ï¨ams
->
∑øms
.
≈robes
 = 
	`htod32
(”∑øms->∑øms.
a˘ive_time
 /

863 
P2PAPI_SCAN_NPROBS_TIME_MS
));

866 i‡(
num_ch™s
 == 1) {

867 
ï¨ams
->
∑øms
.
a˘ive_time
 = 
	`htod32
(
WL_SCAN_CONNECT_DWELL_TIME_MS
);

868 
ï¨ams
->
∑øms
.
≈robes
 = 
	`htod32
”∑øms->∑øms.
a˘ive_time
 /

869 
WL_SCAN_JOIN_PROBE_INTERVAL_MS
);

872 i‡(
ï¨ams
->
∑øms
.
≈robes
 <= 0)

873 
ï¨ams
->
∑øms
.
≈robes
 = 1;

874 
	`CFGP2P_DBG
(("nprobes # %d,áctive_time %d\n",

875 
ï¨ams
->
∑øms
.
≈robes
,É∑øms->∑øms.
a˘ive_time
));

876 
ï¨ams
->
∑øms
.
∑ssive_time
 = 
	`htod32
(-1);

877 
ï¨ams
->
∑øms
.
ch™√l_num
 = 
	`htod32
((0 << 
WL_SCAN_PARAMS_NSSID_SHIFT
) |

878 (
num_ch™s
 & 
WL_SCAN_PARAMS_COUNT_MASK
));

880 
i
 = 0; i < 
num_ch™s
; i++) {

881 
ï¨ams
->
∑øms
.
ch™√l_li°
[
i
] = 
	`wl_ch_ho°_to_drivî
(
ch™√ls
[i]);

883 
ï¨ams
->
vîsi⁄
 = 
	`htod32
(
ESCAN_REQ_VERSION
);

884 
ï¨ams
->
a˘i⁄
 = 
	`htod16
(action);

885 
ï¨ams
->
sync_id
 = 
	`htod16
(0x1234);

886 
	`CFGP2P_INFO
(("SCAN CHANNELS : "));

888 
i
 = 0; i < 
num_ch™s
; i++) {

889 i‡(
i
 =0Ë
	`CFGP2P_INFO
(("%d", 
ch™√ls
[i]));

890 
	`CFGP2P_INFO
((",%d", 
ch™√ls
[
i
]));

893 
	`CFGP2P_INFO
(("\n"));

895 
ªt
 = 
	`wldev_iov¨_£tbuf_bsscfg
(
¥i_dev
, "p2p_scan",

896 
memblk
, 
memsize
, 
wl
->
io˘l_buf
, 
WLC_IOCTL_MAXLEN
, 
bssidx
, &wl->
io˘l_buf_sync
);

897 i‡(
ªt
 =
BCME_OK
)

898 
	`wl_£t_p2p_°©us
(
wl
, 
SCANNING
);

899  
ªt
;

900 
	}
}

909 
s32


910 
	$wl_cfgp2p_a˘_‰m_£¨ch
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
,

911 
s32
 
bssidx
, s32 
ch™√l
)

913 
s32
 
ªt
 = 0;

914 
u32
 
ch™_˙t
 = 0;

915 
u16
 *
deÁu…_ch™_li°
 = 
NULL
;

916 i‡(!
	`p2p_is_⁄
(
wl
Ë|| 
ndev
 =
NULL
 || 
bssidx
 =
WL_INVALID
)

917  -
BCME_ERROR
;

918 
	`CFGP2P_ERR
((" Enter\n"));

919 i‡(
bssidx
 =
P2PAPI_BSSCFG_PRIMARY
)

920 
bssidx
 = 
	`wl_to_p2p_bss_bssidx
(
wl
, 
P2PAPI_BSSCFG_DEVICE
);

921 i‡(
ch™√l
)

922 
ch™_˙t
 = 
AF_PEER_SEARCH_CNT
;

924 
ch™_˙t
 = 
SOCIAL_CHAN_CNT
;

925 
deÁu…_ch™_li°
 = 
	`kzÆloc
(
ch™_˙t
 * (*deÁu…_ch™_li°), 
GFP_KERNEL
);

926 i‡(
deÁu…_ch™_li°
 =
NULL
) {

927 
	`CFGP2P_ERR
(("channelÜistállocation failed \n"));

928 
ªt
 = -
ENOMEM
;

929 
exô
;

931 i‡(
ch™√l
) {

932 
u32
 
i
;

934 
i
 = 0; i < 
ch™_˙t
; i++) {

935 
deÁu…_ch™_li°
[
i
] = 
ch™√l
;

938 
deÁu…_ch™_li°
[0] = 
SOCIAL_CHAN_1
;

939 
deÁu…_ch™_li°
[1] = 
SOCIAL_CHAN_2
;

940 
deÁu…_ch™_li°
[2] = 
SOCIAL_CHAN_3
;

942 
ªt
 = 
	`wl_cfgp2p_esˇn
(
wl
, 
ndev
, 
åue
, 
ch™_˙t
,

943 
deÁu…_ch™_li°
, 
WL_P2P_DISC_ST_SEARCH
,

944 
WL_SCAN_ACTION_START
, 
bssidx
);

945 
	`k‰ì
(
deÁu…_ch™_li°
);

946 
exô
:

947  
ªt
;

948 
	}
}

951 
	#wl_cfgp2p_is_w∑_õ
(
õ
, 
évs
, 
Àn
Ë
	`wl_cfgp2p_has_õ
(ie,Ålvs,Üen, \

952 (c⁄° 
uöt8
 *)
WPS_OUI
, 
WPS_OUI_LEN
, 
WPA_OUI_TYPE
)

	)

954 
	#wl_cfgp2p_is_wps_õ
(
õ
, 
évs
, 
Àn
Ë
	`wl_cfgp2p_has_õ
(ie,Ålvs,Üen, \

955 (c⁄° 
uöt8
 *)
WPS_OUI
, 
WPS_OUI_LEN
, 
WPS_OUI_TYPE
)

	)

957 
	#wl_cfgp2p_is_p2p_õ
(
õ
, 
évs
, 
Àn
Ë
	`wl_cfgp2p_has_õ
(ie,Ålvs,Üen, \

958 (c⁄° 
uöt8
 *)
WFA_OUI
, 
WFA_OUI_LEN
, 
WFA_OUI_TYPE_P2P
)

	)

960 
	#WFA_OUI_TYPE_WFD
 0x0®

	)

961 
	#wl_cfgp2p_is_wfd_õ
(
õ
, 
évs
, 
Àn
Ë
	`wl_cfgp2p_has_õ
(ie,Ålvs,Üen, \

962 (c⁄° 
uöt8
 *)
WFA_OUI
, 
WFA_OUI_LEN
, 
WFA_OUI_TYPE_WFD
)

	)

964 
s32


965 
	$wl_cfgp2p_∑r£_vndr_õs
(
u8
 *
∑r£
, 
u32
 
Àn
,

966 
∑r£d_vndr_õs
 *
vndr_õs
)

968 
s32
 
îr
 = 
BCME_OK
;

969 
vndr_õ_t
 *
vndrõ
;

970 
bcm_év_t
 *
õ
;

971 
∑r£d_vndr_õ_öfo
 *
∑r£d_öfo
;

972 
u32
 
cou¡
 = 0;

973 
s32
 
ªmaöed_Àn
;

975 
ªmaöed_Àn
 = (
s32
)
Àn
;

976 
	`mem£t
(
vndr_õs
, 0, (*vndr_ies));

978 
	`WL_INFO
(("--->Üí %d\n", 
Àn
));

979 
õ
 = (
bcm_év_t
 *Ë
∑r£
;

980 i‡(!
	`bcm_vÆid_év
(
õ
, 
ªmaöed_Àn
))

981 
õ
 = 
NULL
;

982 
õ
) {

983 i‡(
cou¡
 >
MAX_VNDR_IE_NUMBER
)

985 i‡(
õ
->
id
 =
DOT11_MNG_VS_ID
) {

986 
vndrõ
 = (
vndr_õ_t
 *Ë
õ
;

988 i‡(
vndrõ
->
Àn
 < (
VNDR_IE_MIN_LEN
 + 1)) {

989 
	`CFGP2P_ERR
(("%s: invalid vndr ie.Üength isÅoo small %d\n",

990 
__FUNCTION__
, 
vndrõ
->
Àn
));

991 
íd
;

994 i‡(!
	`bcmp
(
vndrõ
->
oui
, (
u8
*)
WPA_OUI
, 
WPA_OUI_LEN
) &&

995 ((
vndrõ
->
d©a
[0] =
WPA_OUI_TYPE
) ||

996 (
vndrõ
->
d©a
[0] =
WME_OUI_TYPE
))) {

997 
	`CFGP2P_DBG
(("Found WPA/WME oui. DoÇotádd it\n"));

998 
íd
;

1001 
∑r£d_öfo
 = &
vndr_õs
->
õ_öfo
[
cou¡
++];

1004 
∑r£d_öfo
->
õ_±r
 = (*)
vndrõ
;

1005 
∑r£d_öfo
->
õ_Àn
 = (
vndrõ
->
Àn
 + 
TLV_HDR_LEN
);

1006 
	`mem˝y
(&
∑r£d_öfo
->
vndrõ
, vndrõ, (
vndr_õ_t
));

1008 
vndr_õs
->
cou¡
 = count;

1010 
	`CFGP2P_DBG
(("\t ** OUI %02x %02x %02x,Åype 0x%02x \n",

1011 
∑r£d_öfo
->
vndrõ
.
oui
[0],Öarsed_info->vndrie.oui[1],

1012 
∑r£d_öfo
->
vndrõ
.
oui
[2],Ö¨£d_öfo->vndrõ.
d©a
[0]));

1014 
íd
:

1015 
õ
 = 
	`bcm_√xt_év
(õ, &
ªmaöed_Àn
);

1017  
îr
;

1018 
	}
}

1033 
s32


1034 
	$wl_cfgp2p_£t_m™agemít_õ
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
, 
s32
 
bssidx
,

1035 
s32
 
pktÊag
, c⁄° 
u8
 *
vndr_õ
, 
u32
 
vndr_õ_Àn
)

1037 
s32
 
ªt
 = 
BCME_OK
;

1038 
u8
 *
cuº_õ_buf
 = 
NULL
;

1039 
u8
 *
mgmt_õ_buf
 = 
NULL
;

1040 
u32
 
mgmt_õ_buf_Àn
 = 0;

1041 
u32
 *
mgmt_õ_Àn
 = 0;

1042 
u32
 
dñ_add_õ_buf_Àn
 = 0;

1043 
u32
 
tŸÆ_õ_buf_Àn
 = 0;

1044 
u32
 
∑r£d_õ_buf_Àn
 = 0;

1045 
∑r£d_vndr_õs
 
ﬁd_vndr_õs
;

1046 
∑r£d_vndr_õs
 
√w_vndr_õs
;

1047 
s32
 
i
;

1048 
u8
 *
±r
;

1049 
s32
 
ªmaöed_buf_Àn
;

1051 
	#IE_TYPE
(
ty≥
, 
bs°y≥
Ë(
	`wl_to_p2p_bss_ßved_õ
(
wl
, bs°y≥).
p2p_
 ##Åy≥ ## 
_õ
)

	)

1052 
	#IE_TYPE_LEN
(
ty≥
, 
bs°y≥
Ë(
	`wl_to_p2p_bss_ßved_õ
(
wl
, bs°y≥).
p2p_
 ##Åy≥ ## 
_õ_Àn
)

	)

1053 
	`mem£t
(
g_mgmt_õ_buf
, 0, (g_mgmt_ie_buf));

1054 
cuº_õ_buf
 = 
g_mgmt_õ_buf
;

1055 
	`CFGP2P_DBG
((" bssidx %d,ÖktÊag : 0x%02X\n", 
bssidx
, 
pktÊag
));

1056 i‡(
wl
->
p2p
 !
NULL
) {

1057 
pktÊag
) {

1058 
VNDR_IE_PRBREQ_FLAG
 :

1059 
mgmt_õ_buf
 = 
	`IE_TYPE
(
¥obe_ªq
, 
bssidx
);

1060 
mgmt_õ_Àn
 = &
	`IE_TYPE_LEN
(
¥obe_ªq
, 
bssidx
);

1061 
mgmt_õ_buf_Àn
 = (
	`IE_TYPE
(
¥obe_ªq
, 
bssidx
));

1063 
VNDR_IE_PRBRSP_FLAG
 :

1064 
mgmt_õ_buf
 = 
	`IE_TYPE
(
¥obe_ªs
, 
bssidx
);

1065 
mgmt_õ_Àn
 = &
	`IE_TYPE_LEN
(
¥obe_ªs
, 
bssidx
);

1066 
mgmt_õ_buf_Àn
 = (
	`IE_TYPE
(
¥obe_ªs
, 
bssidx
));

1068 
VNDR_IE_ASSOCREQ_FLAG
 :

1069 
mgmt_õ_buf
 = 
	`IE_TYPE
(
assoc_ªq
, 
bssidx
);

1070 
mgmt_õ_Àn
 = &
	`IE_TYPE_LEN
(
assoc_ªq
, 
bssidx
);

1071 
mgmt_õ_buf_Àn
 = (
	`IE_TYPE
(
assoc_ªq
, 
bssidx
));

1073 
VNDR_IE_ASSOCRSP_FLAG
 :

1074 
mgmt_õ_buf
 = 
	`IE_TYPE
(
assoc_ªs
, 
bssidx
);

1075 
mgmt_õ_Àn
 = &
	`IE_TYPE_LEN
(
assoc_ªs
, 
bssidx
);

1076 
mgmt_õ_buf_Àn
 = (
	`IE_TYPE
(
assoc_ªs
, 
bssidx
));

1078 
VNDR_IE_BEACON_FLAG
 :

1079 
mgmt_õ_buf
 = 
	`IE_TYPE
(
bóc⁄
, 
bssidx
);

1080 
mgmt_õ_Àn
 = &
	`IE_TYPE_LEN
(
bóc⁄
, 
bssidx
);

1081 
mgmt_õ_buf_Àn
 = (
	`IE_TYPE
(
bóc⁄
, 
bssidx
));

1084 
mgmt_õ_buf
 = 
NULL
;

1085 
mgmt_õ_Àn
 = 
NULL
;

1086 
	`CFGP2P_ERR
(("not suitableÅype\n"));

1089 } i‡(
	`wl_gë_mode_by_√tdev
(
wl
, 
ndev
Ë=
WL_MODE_AP
) {

1090 
pktÊag
) {

1091 
VNDR_IE_PRBRSP_FLAG
 :

1092 
mgmt_õ_buf
 = 
wl
->
≠_öfo
->
¥obe_ªs_õ
;

1093 
mgmt_õ_Àn
 = &
wl
->
≠_öfo
->
¥obe_ªs_õ_Àn
;

1094 
mgmt_õ_buf_Àn
 = (
wl
->
≠_öfo
->
¥obe_ªs_õ
);

1096 
VNDR_IE_BEACON_FLAG
 :

1097 
mgmt_õ_buf
 = 
wl
->
≠_öfo
->
bóc⁄_õ
;

1098 
mgmt_õ_Àn
 = &
wl
->
≠_öfo
->
bóc⁄_õ_Àn
;

1099 
mgmt_õ_buf_Àn
 = (
wl
->
≠_öfo
->
bóc⁄_õ
);

1102 
mgmt_õ_buf
 = 
NULL
;

1103 
mgmt_õ_Àn
 = 
NULL
;

1104 
	`CFGP2P_ERR
(("not suitableÅype\n"));

1107 
bssidx
 = 0;

1108 } i‡(
	`wl_gë_mode_by_√tdev
(
wl
, 
ndev
Ë=
WL_MODE_BSS
) {

1109 
pktÊag
) {

1110 
VNDR_IE_PRBREQ_FLAG
 :

1111 
mgmt_õ_buf
 = 
wl
->
°a_öfo
->
¥obe_ªq_õ
;

1112 
mgmt_õ_Àn
 = &
wl
->
°a_öfo
->
¥obe_ªq_õ_Àn
;

1113 
mgmt_õ_buf_Àn
 = (
wl
->
°a_öfo
->
¥obe_ªq_õ
);

1115 
VNDR_IE_ASSOCREQ_FLAG
 :

1116 
mgmt_õ_buf
 = 
wl
->
°a_öfo
->
assoc_ªq_õ
;

1117 
mgmt_õ_Àn
 = &
wl
->
°a_öfo
->
assoc_ªq_õ_Àn
;

1118 
mgmt_õ_buf_Àn
 = (
wl
->
°a_öfo
->
assoc_ªq_õ
);

1121 
mgmt_õ_buf
 = 
NULL
;

1122 
mgmt_õ_Àn
 = 
NULL
;

1123 
	`CFGP2P_ERR
(("not suitableÅype\n"));

1126 
bssidx
 = 0;

1128 
	`CFGP2P_ERR
(("not suitableÅype\n"));

1132 i‡(
vndr_õ_Àn
 > 
mgmt_õ_buf_Àn
) {

1133 
	`CFGP2P_ERR
(("extra IE sizeÅoo big\n"));

1134 
ªt
 = -
ENOMEM
;

1137 i‡(
vndr_õ
 && 
vndr_õ_Àn
 && 
cuº_õ_buf
) {

1138 
±r
 = 
cuº_õ_buf
;

1140 
	`wl_cfgp2p_∑r£_vndr_õs
((
u8
*)
vndr_õ
,

1141 
vndr_õ_Àn
, &
√w_vndr_õs
);

1143 
i
 = 0; i < 
√w_vndr_õs
.
cou¡
; i++) {

1144 
∑r£d_vndr_õ_öfo
 *
vndrõ_öfo
 =

1145 &
√w_vndr_õs
.
õ_öfo
[
i
];

1147 
	`mem˝y
(
±r
 + 
∑r£d_õ_buf_Àn
, 
vndrõ_öfo
->
õ_±r
,

1148 
vndrõ_öfo
->
õ_Àn
);

1149 
∑r£d_õ_buf_Àn
 +
vndrõ_öfo
->
õ_Àn
;

1153 i‡(
mgmt_õ_buf
 !
NULL
) {

1154 i‡(
∑r£d_õ_buf_Àn
 && (∑r£d_õ_buf_À¿=*
mgmt_õ_Àn
) &&

1155 (
	`memcmp
(
mgmt_õ_buf
, 
cuº_õ_buf
, 
∑r£d_õ_buf_Àn
) == 0)) {

1156 
	`CFGP2P_INFO
(("Previous mgmt IE isÉqualsÅo current IE"));

1157 
exô
;

1161 
	`wl_cfgp2p_∑r£_vndr_õs
(
mgmt_õ_buf
, *
mgmt_õ_Àn
,

1162 &
ﬁd_vndr_õs
);

1165 
i
 = 0; i < 
ﬁd_vndr_õs
.
cou¡
; i++) {

1166 
∑r£d_vndr_õ_öfo
 *
vndrõ_öfo
 =

1167 &
ﬁd_vndr_õs
.
õ_öfo
[
i
];

1169 
	`CFGP2P_INFO
(("DELETED ID : %d, Len: %d , OUI:%02x:%02x:%02x\n",

1170 
vndrõ_öfo
->
vndrõ
.
id
, vndrõ_öfo->vndrõ.
Àn
,

1171 
vndrõ_öfo
->
vndrõ
.
oui
[0], vndrie_info->vndrie.oui[1],

1172 
vndrõ_öfo
->
vndrõ
.
oui
[2]));

1174 
dñ_add_õ_buf_Àn
 = 
	`wl_cfgp2p_vndr_õ
(
wl
, 
cuº_õ_buf
,

1175 
bssidx
, 
pktÊag
, 
vndrõ_öfo
->
vndrõ
.
oui
,

1176 
vndrõ_öfo
->
vndrõ
.
id
,

1177 
vndrõ_öfo
->
õ_±r
 + 
VNDR_IE_FIXED_LEN
,

1178 
vndrõ_öfo
->
õ_Àn
 - 
VNDR_IE_FIXED_LEN
,

1181 
cuº_õ_buf
 +
dñ_add_õ_buf_Àn
;

1182 
tŸÆ_õ_buf_Àn
 +
dñ_add_õ_buf_Àn
;

1186 *
mgmt_õ_Àn
 = 0;

1188 i‡(
mgmt_õ_buf
 && 
∑r£d_õ_buf_Àn
) {

1189 
±r
 = 
mgmt_õ_buf
;

1191 
ªmaöed_buf_Àn
 = 
mgmt_õ_buf_Àn
;

1194 
i
 = 0; i < 
√w_vndr_õs
.
cou¡
; i++) {

1195 
∑r£d_vndr_õ_öfo
 *
vndrõ_öfo
 =

1196 &
√w_vndr_õs
.
õ_öfo
[
i
];

1198 
	`CFGP2P_INFO
(("ADDED ID : %d, Len: %d(%d), OUI:%02x:%02x:%02x\n",

1199 
vndrõ_öfo
->
vndrõ
.
id
, vndrõ_öfo->vndrõ.
Àn
,

1200 
vndrõ_öfo
->
õ_Àn
 - 2,

1201 
vndrõ_öfo
->
vndrõ
.
oui
[0], vndrie_info->vndrie.oui[1],

1202 
vndrõ_öfo
->
vndrõ
.
oui
[2]));

1204 
dñ_add_õ_buf_Àn
 = 
	`wl_cfgp2p_vndr_õ
(
wl
, 
cuº_õ_buf
,

1205 
bssidx
, 
pktÊag
, 
vndrõ_öfo
->
vndrõ
.
oui
,

1206 
vndrõ_öfo
->
vndrõ
.
id
,

1207 
vndrõ_öfo
->
õ_±r
 + 
VNDR_IE_FIXED_LEN
,

1208 
vndrõ_öfo
->
õ_Àn
 - 
VNDR_IE_FIXED_LEN
,

1212 i‡(
ªmaöed_buf_Àn
 >
vndrõ_öfo
->
õ_Àn
) {

1213 
ªmaöed_buf_Àn
 -
vndrõ_öfo
->
õ_Àn
;

1215 
	`CFGP2P_ERR
(("no space in mgmt_ie_buf:Öktflag = %d, "

1218 
pktÊag
, 
√w_vndr_õs
.
cou¡
, 
i
, 
ªmaöed_buf_Àn
,

1219 *
mgmt_õ_Àn
, 
vndrõ_öfo
->
õ_Àn
));

1224 
	`mem˝y
(
±r
 + (*
mgmt_õ_Àn
), 
vndrõ_öfo
->
õ_±r
,

1225 
vndrõ_öfo
->
õ_Àn
);

1226 *
mgmt_õ_Àn
 +
vndrõ_öfo
->
õ_Àn
;

1228 
cuº_õ_buf
 +
dñ_add_õ_buf_Àn
;

1229 
tŸÆ_õ_buf_Àn
 +
dñ_add_õ_buf_Àn
;

1232 i‡(
tŸÆ_õ_buf_Àn
) {

1233 
ªt
 = 
	`wldev_iov¨_£tbuf_bsscfg
(
ndev
, "vndr_õ", 
g_mgmt_õ_buf
,

1234 
tŸÆ_õ_buf_Àn
, 
wl
->
io˘l_buf
, 
WLC_IOCTL_MAXLEN
,

1235 
bssidx
, &
wl
->
io˘l_buf_sync
);

1236 i‡(
ªt
)

1237 
	`CFGP2P_ERR
(("vnd∏õ sëÉº‹ : %d\n", 
ªt
));

1240 #unde‡
IE_TYPE


1241 #unde‡
IE_TYPE_LEN


1242 
exô
:

1243  
ªt
;

1244 
	}
}

1253 
s32


1254 
	$wl_cfgp2p_˛ór_m™agemít_õ
(
wl_¥iv
 *
wl
, 
s32
 
bssidx
)

1256 
s32
 
vndrõ_Êag
[] = {
VNDR_IE_BEACON_FLAG
, 
VNDR_IE_PRBRSP_FLAG
, 
VNDR_IE_ASSOCRSP_FLAG
,

1257 
VNDR_IE_PRBREQ_FLAG
, 
VNDR_IE_ASSOCREQ_FLAG
};

1258 
s32
 
ödex
 = -1;

1259 
√t_devi˚
 *
ndev
 = 
	`wl_cfgp2p_föd_ndev
(
wl
, 
bssidx
);

1260 
	#INIT_IE
(
IE_TYPE
, 
BSS_TYPE
) \

1262 
	`mem£t
(
	`wl_to_p2p_bss_ßved_õ
(
wl
, 
BSS_TYPE
).
p2p_
 ## 
IE_TYPE
 ## 
_õ
, 0, \

1263 (
	`wl_to_p2p_bss_ßved_õ
(
wl
, 
BSS_TYPE
).
p2p_
 ## 
IE_TYPE
 ## 
_õ
)); \

1264 
	`wl_to_p2p_bss_ßved_õ
(
wl
, 
BSS_TYPE
).
p2p_
 ## 
IE_TYPE
 ## 
_õ_Àn
 = 0; \

1265 } 0);

	)

1267 i‡(
bssidx
 < 0 || 
ndev
 =
NULL
) {

1268 
	`CFGP2P_ERR
(("övÆid %s\n", (
bssidx
 < 0) ? "bssidx" : "ndev"));

1269  
BCME_BADARG
;

1271 
ödex
 = 0; index < 
	`ARRAYSIZE
(
vndrõ_Êag
); index++) {

1273 
	`wl_cfgp2p_£t_m™agemít_õ
(
wl
, 
ndev
, 
bssidx
, 
vndrõ_Êag
[
ödex
], 
NULL
, 0);

1275 
	`INIT_IE
(
¥obe_ªq
, 
bssidx
);

1276 
	`INIT_IE
(
¥obe_ªs
, 
bssidx
);

1277 
	`INIT_IE
(
assoc_ªq
, 
bssidx
);

1278 
	`INIT_IE
(
assoc_ªs
, 
bssidx
);

1279 
	`INIT_IE
(
bóc⁄
, 
bssidx
);

1280  
BCME_OK
;

1281 
	}
}

1287 
boﬁ


1288 
	$wl_cfgp2p_has_õ
(
u8
 *
õ
, u8 **
évs
, 
u32
 *
évs_Àn
, c⁄° u8 *
oui
, u32 
oui_Àn
, u8 
ty≥
)

1291 i‡(
õ
[
TLV_LEN_OFF
] >
oui_Àn
 + 1 &&

1292 !
	`bcmp
(&
õ
[
TLV_BODY_OFF
], 
oui
, 
oui_Àn
) &&

1293 
ty≥
 =
õ
[
TLV_BODY_OFF
 + 
oui_Àn
]) {

1294  
TRUE
;

1297 i‡(
évs
 =
NULL
)

1298  
FALSE
;

1300 
õ
 +õ[
TLV_LEN_OFF
] + 
TLV_HDR_LEN
;

1302 *
évs_Àn
 -()(
õ
 - *
évs
);

1304 *
évs
 = 
õ
;

1306  
FALSE
;

1307 
	}
}

1309 
w∑_õ_fixed_t
 *

1310 
	$wl_cfgp2p_föd_w∑õ
(
u8
 *
∑r£
, 
u32
 
Àn
)

1312 
bcm_év_t
 *
õ
;

1314 (
õ
 = 
	`bcm_∑r£_évs
(
∑r£
, (
u32
)
Àn
, 
DOT11_MNG_VS_ID
))) {

1315 i‡(
	`wl_cfgp2p_is_w∑_õ
((
u8
*)
õ
, &
∑r£
, &
Àn
)) {

1316  (
w∑_õ_fixed_t
 *)
õ
;

1319  
NULL
;

1320 
	}
}

1322 
w∑_õ_fixed_t
 *

1323 
	$wl_cfgp2p_föd_wpsõ
(
u8
 *
∑r£
, 
u32
 
Àn
)

1325 
bcm_év_t
 *
õ
;

1327 (
õ
 = 
	`bcm_∑r£_évs
(
∑r£
, (
u32
)
Àn
, 
DOT11_MNG_VS_ID
))) {

1328 i‡(
	`wl_cfgp2p_is_wps_õ
((
u8
*)
õ
, &
∑r£
, &
Àn
)) {

1329  (
w∑_õ_fixed_t
 *)
õ
;

1332  
NULL
;

1333 
	}
}

1335 
wifi_p2p_õ_t
 *

1336 
	$wl_cfgp2p_föd_p2põ
(
u8
 *
∑r£
, 
u32
 
Àn
)

1338 
bcm_év_t
 *
õ
;

1340 (
õ
 = 
	`bcm_∑r£_évs
(
∑r£
, ()
Àn
, 
DOT11_MNG_VS_ID
))) {

1341 i‡(
	`wl_cfgp2p_is_p2p_õ
((
uöt8
*)
õ
, &
∑r£
, &
Àn
)) {

1342  (
wifi_p2p_õ_t
 *)
õ
;

1345  
NULL
;

1346 
	}
}

1348 
wifi_wfd_õ_t
 *

1349 
	$wl_cfgp2p_föd_wfdõ
(
u8
 *
∑r£
, 
u32
 
Àn
)

1351 
bcm_év_t
 *
õ
;

1353 (
õ
 = 
	`bcm_∑r£_évs
(
∑r£
, ()
Àn
, 
DOT11_MNG_VS_ID
))) {

1354 i‡(
	`wl_cfgp2p_is_wfd_õ
((
uöt8
*)
õ
, &
∑r£
, &
Àn
)) {

1355  (
wifi_wfd_õ_t
 *)
õ
;

1358  
NULL
;

1359 
	}
}

1360 
u32


1361 
	$wl_cfgp2p_vndr_õ
(
wl_¥iv
 *
wl
, 
u8
 *
õbuf
, 
s32
 
bssidx
, s32 
pktÊag
,

1362 
s8
 *
oui
, 
s32
 
õ_id
, s8 *
d©a
, s32 
d©Æí
, c⁄° s8* 
add_dñ_cmd
)

1364 
vndr_õ_£tbuf_t
 
hdr
;

1365 
s32
 
õcou¡
;

1366 
u32
 
d©a_off£t
;

1369 i‡((
pktÊag
 & ~(
VNDR_IE_BEACON_FLAG
 | 
VNDR_IE_PRBRSP_FLAG
 |

1370 
VNDR_IE_ASSOCRSP_FLAG
 | 
VNDR_IE_AUTHRSP_FLAG
 |

1371 
VNDR_IE_PRBREQ_FLAG
 | 
VNDR_IE_ASSOCREQ_FLAG
))) {

1372 
	`CFGP2P_ERR
(("p2pwl_vndr_õ: InvÆidÖackë fœg 0x%x\n", 
pktÊag
));

1377 
	`°∫˝y
(
hdr
.
cmd
, 
add_dñ_cmd
, 
VNDR_IE_CMD_LEN
 - 1);

1378 
hdr
.
cmd
[
VNDR_IE_CMD_LEN
 - 1] = '\0';

1381 
õcou¡
 = 
	`htod32
(1);

1382 
	`mem˝y
((*)&
hdr
.
vndr_õ_buf„r
.
õcou¡
, &õcou¡, (
s32
));

1385 
pktÊag
 = 
	`htod32
(pktflag);

1386 
	`mem˝y
((*)&
hdr
.
vndr_õ_buf„r
.
vndr_õ_li°
[0].
pktÊag
, &pktflag,

1387 (
u32
));

1390 
hdr
.
vndr_õ_buf„r
.
vndr_õ_li°
[0].
vndr_õ_d©a
.
id
 = 
õ_id
;

1393 
hdr
.
vndr_õ_buf„r
.
vndr_õ_li°
[0].
vndr_õ_d©a
.
Àn
 =

1394 (
uöt8
Ë
VNDR_IE_MIN_LEN
 + 
d©Æí
;

1397 
hdr
.
vndr_õ_buf„r
.
vndr_õ_li°
[0].
vndr_õ_d©a
.
oui
[0] = oui[0];

1398 
hdr
.
vndr_õ_buf„r
.
vndr_õ_li°
[0].
vndr_õ_d©a
.
oui
[1] = oui[1];

1399 
hdr
.
vndr_õ_buf„r
.
vndr_õ_li°
[0].
vndr_õ_d©a
.
oui
[2] = oui[2];

1402 
	`mem˝y
(
õbuf
, &
hdr
, (hdr) - 1);

1405 
d©a_off£t
 =

1406 (
u8
*)&
hdr
.
vndr_õ_buf„r
.
vndr_õ_li°
[0].
vndr_õ_d©a
.
d©a
[0] -

1407 (
u8
*)&
hdr
;

1408 
	`mem˝y
(
õbuf
 + 
d©a_off£t
, 
d©a
, 
d©Æí
);

1409  
d©a_off£t
 + 
d©Æí
;

1411 
	}
}

1420 
s32


1421 
	$wl_cfgp2p_föd_idx
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
)

1423 
u32
 
i
;

1424 
s32
 
ödex
 = -1;

1426 i‡(
ndev
 =
NULL
) {

1427 
	`CFGP2P_ERR
(("Çdev is NULL\n"));

1428 
exô
;

1430 i‡(!
wl
->
p2p_suµ‹ãd
) {

1431  
P2PAPI_BSSCFG_PRIMARY
;

1433 
i
 = 0; i < 
P2PAPI_BSSCFG_MAX
; i++) {

1434 i‡(
ndev
 =
	`wl_to_p2p_bss_ndev
(
wl
, 
i
)) {

1435 
ödex
 = 
	`wl_to_p2p_bss_bssidx
(
wl
, 
i
);

1439 i‡(
ödex
 == -1)

1440  
P2PAPI_BSSCFG_PRIMARY
;

1441 
exô
:

1442  
ödex
;

1443 
	}
}

1445 
√t_devi˚
 *

1446 
	$wl_cfgp2p_föd_ndev
(
wl_¥iv
 *
wl
, 
s32
 
bssidx
)

1448 
u32
 
i
;

1449 
√t_devi˚
 *
ndev
 = 
NULL
;

1450 i‡(
bssidx
 < 0) {

1451 
	`CFGP2P_ERR
((" bsscfg idx is invalid\n"));

1452 
exô
;

1455 
i
 = 0; i < 
P2PAPI_BSSCFG_MAX
; i++) {

1456 i‡(
bssidx
 =
	`wl_to_p2p_bss_bssidx
(
wl
, 
i
)) {

1457 
ndev
 = 
	`wl_to_p2p_bss_ndev
(
wl
, 
i
);

1462 
exô
:

1463  
ndev
;

1464 
	}
}

1469 
s32


1470 
	$wl_cfgp2p_li°í_com∂ëe
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
,

1471 c⁄° 
wl_evít_msg_t
 *
e
, *
d©a
)

1473 
s32
 
ªt
 = 
BCME_OK
;

1474 
√t_devi˚
 *
√tdev
;

1475 i‡(!
wl
 || !wl->
p2p
)

1476  
BCME_ERROR
;

1477 i‡(
wl
->
p2p_√t
 =
ndev
) {

1478 
√tdev
 = 
	`wl_to_¥mry_ndev
(
wl
);

1480 
√tdev
 = 
ndev
;

1482 
	`CFGP2P_DBG
((" Enter\n"));

1483 i‡(
	`wl_gë_p2p_°©us
(
wl
, 
LISTEN_EXPIRED
) == 0) {

1484 
	`wl_£t_p2p_°©us
(
wl
, 
LISTEN_EXPIRED
);

1485 i‡(
	`timî_≥ndög
(&
wl
->
p2p
->
li°í_timî
)) {

1486 
	`dñ_timî_sync
(&
wl
->
p2p
->
li°í_timî
);

1489 i‡(
wl
->
afx_hdl
->
is_li°í
 =
TRUE
 &&

1490 
	`wl_gë_drv_°©us_Æl
(
wl
, 
FINDING_COMMON_CHANNEL
)) {

1491 
	`WL_DBG
(("Listen DONE foráction frame\n"));

1492 
	`com∂ëe
(&
wl
->
a˘_‰m_sˇn
);

1494 #ifde‡
WL_CFG80211_SYNC_GON


1495 i‡(
	`wl_gë_drv_°©us_Æl
(
wl
, 
WAITING_NEXT_ACT_FRM_LISTEN
)) {

1496 
	`wl_˛r_drv_°©us
(
wl
, 
WAITING_NEXT_ACT_FRM_LISTEN
, 
√tdev
);

1497 
	`WL_DBG
(("Listen DONEánd wake up wait_next_af !!(%d)\n",

1498 
	`jiffõs_to_m£cs
(
jiffõs
 - 
wl
->
af_tx_£¡_jiffõs
)));

1500 i‡(
	`wl_gë_drv_°©us_Æl
(
wl
, 
WAITING_NEXT_ACT_FRM
))

1501 
	`wl_˛r_drv_°©us
(
wl
, 
WAITING_NEXT_ACT_FRM
, 
√tdev
);

1503 
	`com∂ëe
(&
wl
->
waô_√xt_af
);

1507 #i‚de‡
WL_CFG80211_VSDB_PRIORITIZE_SCAN_REQUEST


1508 i‡(
	`wl_gë_drv_°©us_Æl
(
wl
, 
REMAINING_ON_CHANNEL
)) {

1510 i‡(
	`wl_gë_drv_°©us_Æl
(
wl
, 
REMAINING_ON_CHANNEL
) ||

1511 
	`wl_gë_drv_°©us_Æl
(
wl
, 
FAKE_REMAINING_ON_CHANNEL
)) {

1513 
	`WL_DBG
(("Listen DONE forÑamain on channelÉxpired\n"));

1514 
	`wl_˛r_drv_°©us
(
wl
, 
REMAINING_ON_CHANNEL
, 
√tdev
);

1515 #ifde‡
WL_CFG80211_VSDB_PRIORITIZE_SCAN_REQUEST


1516 
	`wl_˛r_drv_°©us
(
wl
, 
FAKE_REMAINING_ON_CHANNEL
, 
√tdev
);

1518 i‡(
ndev
 && (ndev->
õì80211_±r
 !
NULL
)) {

1519 
	`cfg80211_ªmaö_⁄_ch™√l_expúed
(
ndev
, 
wl
->
œ°_roc_id
,

1520 &
wl
->
ªmaö_⁄_ch™
, wl->
ªmaö_⁄_ch™_ty≥
, 
GFP_KERNEL
);

1523 i‡(
	`wl_add_ªmove_evítmsg
(
	`wl_to_¥mry_ndev
(
wl
),

1524 
WLC_E_P2P_PROBREQ_MSG
, 
Ál£
Ë!
BCME_OK
) {

1525 
	`CFGP2P_ERR
((" failedÅo unset WLC_E_P2P_PROPREQ_MSG\n"));

1528 
	`wl_˛r_p2p_°©us
(
wl
, 
LISTEN_EXPIRED
);

1530  
ªt
;

1532 
	}
}

1540 
	$wl_cfgp2p_li°í_expúed
(
d©a
)

1542 
wl_evít_msg_t
 
msg
;

1543 
wl_¥iv
 *
wl
 = (wl_¥iv *Ë
d©a
;

1544 
	`CFGP2P_DBG
((" Enter\n"));

1545 
	`bzîo
(&
msg
, (
wl_evít_msg_t
));

1546 
msg
.
evít_ty≥
 = 
	`ht⁄32
(
WLC_E_P2P_DISC_LISTEN_COMPLETE
);

1547 
	`wl_cfg80211_evít
(
wl
->
p2p_√t
 ? wl->p2p_net :

1548 
	`wl_to_p2p_bss_ndev
(
wl
, 
P2PAPI_BSSCFG_DEVICE
), &
msg
, 
NULL
);

1549 
	}
}

1553 
s32


1554 
	$wl_cfgp2p_ˇn˚l_li°í
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
,

1555 
boﬁ
 
nŸify
)

1557 
	`WL_DBG
(("Enter \n"));

1561 i‡(
	`timî_≥ndög
(&
wl
->
p2p
->
li°í_timî
)) {

1562 
	`dñ_timî_sync
(&
wl
->
p2p
->
li°í_timî
);

1563 i‡(
nŸify
)

1564 i‡(
ndev
 &&Çdev->
õì80211_±r
) {

1565 
	`cfg80211_ªmaö_⁄_ch™√l_expúed
(
ndev
, 
wl
->
œ°_roc_id
,

1566 &
wl
->
ªmaö_⁄_ch™
, wl->
ªmaö_⁄_ch™_ty≥
,

1567 
GFP_KERNEL
);

1571 
	}
}

1583 
s32


1584 
	$wl_cfgp2p_discovî_li°í
(
wl_¥iv
 *
wl
, 
s32
 
ch™√l
, 
u32
 
duøti⁄_ms
)

1586 
	#EXTRA_DELAY_TIME
 100

	)

1587 
s32
 
ªt
 = 
BCME_OK
;

1588 
timî_li°
 *
_timî
;

1589 
s32
 
exåa_dñay
;

1590 
√t_devi˚
 *
√tdev
 = 
	`wl_to_¥mry_ndev
(
wl
);

1592 
	`CFGP2P_DBG
((" E¡î Li°í Ch™√»: %d, Duøti⁄ : %d\n", 
ch™√l
, 
duøti⁄_ms
));

1593 i‡(
	`u∆ikñy
(
	`wl_gë_p2p_°©us
(
wl
, 
DISCOVERY_ON
) == 0)) {

1595 
	`CFGP2P_ERR
((" Discovery isÇot set, so we haveÇotingÅo do\n"));

1597 
ªt
 = 
BCME_NOTREADY
;

1598 
exô
;

1600 i‡(
	`timî_≥ndög
(&
wl
->
p2p
->
li°í_timî
)) {

1601 
	`CFGP2P_DBG
(("previous LISTEN isÇot completed yet\n"));

1602 
exô
;

1605 #i‚de‡
WL_CFG80211_VSDB_PRIORITIZE_SCAN_REQUEST


1607 
	`wl_˛r_p2p_°©us
(
wl
, 
LISTEN_EXPIRED
);

1609 i‡(
	`wl_add_ªmove_evítmsg
(
√tdev
, 
WLC_E_P2P_PROBREQ_MSG
, 
åue
Ë!
BCME_OK
) {

1610 
	`CFGP2P_ERR
((" failedÅo set WLC_E_P2P_PROPREQ_MSG\n"));

1613 
ªt
 = 
	`wl_cfgp2p_£t_p2p_mode
(
wl
, 
WL_P2P_DISC_ST_LISTEN
, 
ch™√l
, (
u16
Ë
duøti⁄_ms
,

1614 
	`wl_to_p2p_bss_bssidx
(
wl
, 
P2PAPI_BSSCFG_DEVICE
));

1615 
_timî
 = &
wl
->
p2p
->
li°í_timî
;

1620 i‡(
ªt
 =
BCME_OK
) {

1621 
exåa_dñay
 = 
EXTRA_DELAY_TIME
 + (
duøti⁄_ms
 / 10);

1624 
duøti⁄_ms
 = 100 + duration_ms / 20;

1625 
exåa_dñay
 = 0;

1628 
	`INIT_TIMER
(
_timî
, 
wl_cfgp2p_li°í_expúed
, 
duøti⁄_ms
, 
exåa_dñay
);

1629 #ifde‡
WL_CFG80211_VSDB_PRIORITIZE_SCAN_REQUEST


1630 
	`wl_˛r_p2p_°©us
(
wl
, 
LISTEN_EXPIRED
);

1633 #unde‡
EXTRA_DELAY_TIME


1634 
exô
:

1635  
ªt
;

1636 
	}
}

1639 
s32


1640 
	$wl_cfgp2p_discovî_íabÀ_£¨ch
(
wl_¥iv
 *
wl
, 
u8
 
íabÀ
)

1642 
s32
 
ªt
 = 
BCME_OK
;

1643 
	`CFGP2P_DBG
((" Enter\n"));

1644 i‡(!
	`wl_gë_p2p_°©us
(
wl
, 
DISCOVERY_ON
)) {

1646 
	`CFGP2P_DBG
((" doÇothing, discovery is off\n"));

1647  
ªt
;

1649 i‡(
	`wl_gë_p2p_°©us
(
wl
, 
SEARCH_ENABLED
Ë=
íabÀ
) {

1650 
	`CFGP2P_DBG
(("Æªady : %d\n", 
íabÀ
));

1651  
ªt
;

1654 
	`wl_chg_p2p_°©us
(
wl
, 
SEARCH_ENABLED
);

1658 i‡(!
íabÀ
) {

1659 
	`wl_˛r_p2p_°©us
(
wl
, 
SCANNING
);

1660 
ªt
 = 
	`wl_cfgp2p_£t_p2p_mode
(
wl
, 
WL_P2P_DISC_ST_SCAN
, 0, 0,

1661 
	`wl_to_p2p_bss_bssidx
(
wl
, 
P2PAPI_BSSCFG_DEVICE
));

1664  
ªt
;

1665 
	}
}

1670 
s32


1671 
	$wl_cfgp2p_a˘i⁄_tx_com∂ëe
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
,

1672 c⁄° 
wl_evít_msg_t
 *
e
, *
d©a
)

1674 
s32
 
ªt
 = 
BCME_OK
;

1675 
u32
 
evít_ty≥
 = 
	`¡oh32
(
e
->event_type);

1676 
u32
 
°©us
 = 
	`¡oh32
(
e
->status);

1677 
	`CFGP2P_DBG
((" Enter\n"));

1678 i‡(
evít_ty≥
 =
WLC_E_ACTION_FRAME_COMPLETE
) {

1680 
	`CFGP2P_INFO
((" WLC_E_ACTION_FRAME_COMPLETE i†ª˚ived : %d\n", 
°©us
));

1681 i‡(
°©us
 =
WLC_E_STATUS_SUCCESS
) {

1682 
	`wl_£t_p2p_°©us
(
wl
, 
ACTION_TX_COMPLETED
);

1683 
	`CFGP2P_DBG
(("WLC_E_ACTION_FRAME_COMPLETE : ACK\n"));

1686 
	`wl_£t_p2p_°©us
(
wl
, 
ACTION_TX_NOACK
);

1687 
	`CFGP2P_INFO
(("WLC_E_ACTION_FRAME_COMPLETE : NO ACK\n"));

1688 
	`wl_°›_waô_√xt_a˘i⁄_‰ame
(
wl
, 
ndev
);

1691 
	`CFGP2P_INFO
((" WLC_E_ACTION_FRAME_OFFCHAN_COMPLETE isÑeceived,"

1692 "°©u†: %d\n", 
°©us
));

1694 i‡(
	`wl_gë_drv_°©us_Æl
(
wl
, 
SENDING_ACT_FRM
))

1695 
	`com∂ëe
(&
wl
->
£nd_af_d⁄e
);

1697  
ªt
;

1698 
	}
}

1707 
s32


1708 
	$wl_cfgp2p_tx_a˘i⁄_‰ame
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
dev
,

1709 
wl_af_∑øms_t
 *
af_∑øms
, 
s32
 
bssidx
)

1711 
s32
 
ªt
 = 
BCME_OK
;

1712 
s32
 
timeout
 = 0;

1713 
wl_evítmsg_buf_t
 
buf
;

1716 
	`CFGP2P_INFO
(("\n"));

1717 
	`CFGP2P_INFO
(("channel : %u , dwellÅime : %u\n",

1718 
af_∑øms
->
ch™√l
,áf_∑øms->
dwñl_time
));

1720 
	`wl_˛r_p2p_°©us
(
wl
, 
ACTION_TX_COMPLETED
);

1721 
	`wl_˛r_p2p_°©us
(
wl
, 
ACTION_TX_NOACK
);

1723 
	`bzîo
(&
buf
, (
wl_evítmsg_buf_t
));

1724 
	`wl_cfg80211_add_to_evítbuf„r
(&
buf
, 
WLC_E_ACTION_FRAME_OFF_CHAN_COMPLETE
, 
åue
);

1725 
	`wl_cfg80211_add_to_evítbuf„r
(&
buf
, 
WLC_E_ACTION_FRAME_COMPLETE
, 
åue
);

1726 i‡((
ªt
 = 
	`wl_cfg80211_≠∂y_evítbuf„r
(
	`wl_to_¥mry_ndev
(
wl
), wl, &
buf
)) < 0)

1727  
ªt
;

1729 
	#MAX_WAIT_TIME
 2000

	)

1730 i‡(
bssidx
 =
P2PAPI_BSSCFG_PRIMARY
)

1731 
bssidx
 = 
	`wl_to_p2p_bss_bssidx
(
wl
, 
P2PAPI_BSSCFG_DEVICE
);

1733 
wl
->
af_£¡_ch™√l
 = 
af_∑øms
->
ch™√l
;

1734 #ifde‡
WL_CFG80211_SYNC_GON


1735 
wl
->
af_tx_£¡_jiffõs
 = 
jiffõs
;

1738 
ªt
 = 
	`wldev_iov¨_£tbuf_bsscfg
(
dev
, "a˘‰ame", 
af_∑øms
, (*af_params),

1739 
wl
->
io˘l_buf
, 
WLC_IOCTL_MAXLEN
, 
bssidx
, &wl->
io˘l_buf_sync
);

1741 i‡(
ªt
 < 0) {

1742 
	`CFGP2P_ERR
((" sendingáction frame is failed\n"));

1743 
exô
;

1746 
timeout
 = 
	`waô_f‹_com∂ëi⁄_timeout
(&
wl
->
£nd_af_d⁄e
, 
	`m£cs_to_jiffõs
(
MAX_WAIT_TIME
));

1748 i‡(
timeout
 > 0 && 
	`wl_gë_p2p_°©us
(
wl
, 
ACTION_TX_COMPLETED
)) {

1749 
	`CFGP2P_INFO
(("txáction frame operation is completed\n"));

1750 
ªt
 = 
BCME_OK
;

1752 
ªt
 = 
BCME_ERROR
;

1753 
	`CFGP2P_INFO
(("txáction frame operation is failed\n"));

1756 
	`wl_˛r_p2p_°©us
(
wl
, 
ACTION_TX_COMPLETED
);

1757 
	`wl_˛r_p2p_°©us
(
wl
, 
ACTION_TX_NOACK
);

1759 
exô
:

1760 
	`CFGP2P_INFO
((" vüá˘ fømêiov¨ : sètu†%d\n", 
ªt
));

1762 
	`bzîo
(&
buf
, (
wl_evítmsg_buf_t
));

1763 
	`wl_cfg80211_add_to_evítbuf„r
(&
buf
, 
WLC_E_ACTION_FRAME_OFF_CHAN_COMPLETE
, 
Ál£
);

1764 
	`wl_cfg80211_add_to_evítbuf„r
(&
buf
, 
WLC_E_ACTION_FRAME_COMPLETE
, 
Ál£
);

1765 i‡((
ªt
 = 
	`wl_cfg80211_≠∂y_evítbuf„r
(
	`wl_to_¥mry_ndev
(
wl
), wl, &
buf
)) < 0)

1766 
	`WL_ERR
(("TX frameÉventsÑevert back failed \n"));

1768 #unde‡
MAX_WAIT_TIME


1769  
ªt
;

1770 
	}
}

1776 
	$wl_cfgp2p_gíî©e_bss_mac
(
ëhî_addr
 *
¥im¨y_addr
,

1777 
ëhî_addr
 *
out_dev_addr
, ëhî_add∏*
out_öt_addr
)

1779 
	`mem£t
(
out_dev_addr
, 0, (*out_dev_addr));

1780 
	`mem£t
(
out_öt_addr
, 0, (*out_int_addr));

1785 
	`mem˝y
(
out_dev_addr
, 
¥im¨y_addr
, (*out_dev_addr));

1786 
out_dev_addr
->
o˘ë
[0] |= 0x02;

1792 
	`mem˝y
(
out_öt_addr
, 
out_dev_addr
, (*out_int_addr));

1793 
out_öt_addr
->
o˘ë
[4] ^= 0x80;

1795 
	}
}

1799 
	$wl_cfg80211_ch™ge_iÁddr
(
u8
* 
buf
, 
ëhî_addr
 *
p2p_öt_addr
, u8 
ñemít_id
)

1801 
wifi_p2p_õ_t
 *
õ
 = (wifi_p2p_õ_t*Ë
buf
;

1802 
u16
 
Àn
 = 
õ
->len;

1803 
u8
 *
subñ
;

1804 
u8
 
subñt_id
;

1805 
u16
 
subñt_Àn
;

1806 
	`CFGP2P_DBG
((" Enter\n"));

1811 
subñ
 = 
õ
->
subñts
;

1812 
Àn
 -= 4;

1814 
Àn
 >= 3) {

1816 
subñt_id
 = *
subñ
;

1817 
subñ
 += 1;

1818 
Àn
 -= 1;

1821 
subñt_Àn
 = *
subñ
++;

1822 
subñt_Àn
 |*
subñ
++ << 8;

1824 
Àn
 -= 2;

1825 
Àn
 -
subñt_Àn
;

1827 i‡(
subñt_id
 =
ñemít_id
) {

1828 i‡(
subñt_id
 =
P2P_SEID_INTINTADDR
) {

1829 
	`mem˝y
(
subñ
, 
p2p_öt_addr
->
o˘ë
, 
ETHER_ADDR_LEN
);

1830 
	`CFGP2P_INFO
(("Intended P2P Interface Address ATTR FOUND\n"));

1831 } i‡(
subñt_id
 =
P2P_SEID_DEV_ID
) {

1832 
	`mem˝y
(
subñ
, 
p2p_öt_addr
->
o˘ë
, 
ETHER_ADDR_LEN
);

1833 
	`CFGP2P_INFO
(("Device ID ATTR FOUND\n"));

1834 } i‡(
subñt_id
 =
P2P_SEID_DEV_INFO
) {

1835 
	`mem˝y
(
subñ
, 
p2p_öt_addr
->
o˘ë
, 
ETHER_ADDR_LEN
);

1836 
	`CFGP2P_INFO
(("Device INFO ATTR FOUND\n"));

1837 } i‡(
subñt_id
 =
P2P_SEID_GROUP_ID
) {

1838 
	`mem˝y
(
subñ
, 
p2p_öt_addr
->
o˘ë
, 
ETHER_ADDR_LEN
);

1839 
	`CFGP2P_INFO
(("GROUP ID ATTR FOUND\n"));

1842 
	`CFGP2P_DBG
(("OTHER id : %d\n", 
subñt_id
));

1844 
subñ
 +
subñt_Àn
;

1846 
	}
}

1854 
boﬁ


1855 
	$wl_cfgp2p_bss_isup
(
√t_devi˚
 *
ndev
, 
bsscfg_idx
)

1857 
s32
 
ªsu…
, 
vÆ
;

1858 
boﬁ
 
isup
 = 
Ál£
;

1859 
s8
 
gëbuf
[64];

1862 *(*)
gëbuf
 = -1;

1863 
ªsu…
 = 
	`wldev_iov¨_gëbuf_bsscfg
(
ndev
, "bss", &
bsscfg_idx
,

1864 (
bsscfg_idx
), 
gëbuf
, (gëbuf), 0, 
NULL
);

1865 i‡(
ªsu…
 != 0) {

1866 
	`CFGP2P_ERR
(("'w»bs†-C %d' faûed: %d\n", 
bsscfg_idx
, 
ªsu…
));

1867 
	`CFGP2P_ERR
(("NOTE:Åhis ioctlÉrror isÇormal "

1870 
vÆ
 = *(*)
gëbuf
;

1871 
vÆ
 = 
	`dtoh32
(val);

1872 
	`CFGP2P_INFO
(("---w»bs†-C %d ==> %d\n", 
bsscfg_idx
, 
vÆ
));

1873 
isup
 = (
vÆ
 ? 
TRUE
 : 
FALSE
);

1875  
isup
;

1876 
	}
}

1880 
s32


1881 
	$wl_cfgp2p_bss
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
, 
s32
 
bsscfg_idx
, s32 
up
)

1883 
s32
 
ªt
 = 
BCME_OK
;

1884 
s32
 
vÆ
 = 
up
 ? 1 : 0;

1887 
s32
 
cfg
;

1888 
s32
 
vÆ
;

1889 } 
bss_£tbuf
;

1891 
bss_£tbuf
.
cfg
 = 
	`htod32
(
bsscfg_idx
);

1892 
bss_£tbuf
.
vÆ
 = 
	`htod32
(val);

1893 
	`CFGP2P_INFO
(("---w»bs†-C %d %s\n", 
bsscfg_idx
, 
up
 ? "up" : "down"));

1894 
ªt
 = 
	`wldev_iov¨_£tbuf
(
ndev
, "bss", &
bss_£tbuf
, (bss_setbuf),

1895 
wl
->
io˘l_buf
, 
WLC_IOCTL_MAXLEN
, &wl->
io˘l_buf_sync
);

1897 i‡(
ªt
 != 0) {

1898 
	`CFGP2P_ERR
(("'bs†%d' faûed wôh %d\n", 
up
, 
ªt
));

1901  
ªt
;

1902 
	}
}

1905 
s32


1906 
	$wl_cfgp2p_suµ‹ãd
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
)

1908 
s32
 
ªt
 = 
BCME_OK
;

1909 
s32
 
p2p_suµ‹ãd
 = 0;

1910 
ªt
 = 
	`wldev_iov¨_gëöt
(
ndev
, "p2p",

1911 &
p2p_suµ‹ãd
);

1912 i‡(
ªt
 < 0) {

1913 
	`CFGP2P_ERR
(("w»p2∞îr‹ %d\n", 
ªt
));

1916 i‡(
p2p_suµ‹ãd
 == 1) {

1917 
	`CFGP2P_INFO
(("p2p is supported\n"));

1919 
	`CFGP2P_INFO
(("p2p is unsupported\n"));

1920 
p2p_suµ‹ãd
 = 0;

1922  
p2p_suµ‹ãd
;

1923 
	}
}

1926 
s32


1927 
	$wl_cfgp2p_down
(
wl_¥iv
 *
wl
)

1929 
s32
 
i
 = 0, 
ödex
 = -1;

1930 
	`wl_cfgp2p_ˇn˚l_li°í
(
wl
,

1931 
wl
->
p2p_√t
 ? wl->p2p_√à: 
	`wl_to_¥mry_ndev
(wl), 
TRUE
);

1932 
i
 = 0; i < 
P2PAPI_BSSCFG_MAX
; i++) {

1933 
ödex
 = 
	`wl_to_p2p_bss_bssidx
(
wl
, 
i
);

1934 i‡(
ödex
 !
WL_INVALID
)

1935 
	`wl_cfgp2p_˛ór_m™agemít_õ
(
wl
, 
ödex
);

1937 
	`wl_cfgp2p_deöô_¥iv
(
wl
);

1939 
	}
}

1941 
s32


1942 
	$wl_cfgp2p_£t_p2p_nﬂ
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
, * 
buf
, 
Àn
)

1944 
s32
 
ªt
 = -1;

1945 
cou¡
, 
°¨t
, 
duøti⁄
;

1946 
wl_p2p_sched_t
 
d⁄gÀ_nﬂ
;

1948 
	`CFGP2P_DBG
((" Enter\n"));

1950 
	`mem£t
(&
d⁄gÀ_nﬂ
, 0, (dongle_noa));

1952 i‡(
wl
->
p2p
 && wl->p2p->
vif_¸óãd
) {

1954 
wl
->
p2p
->
nﬂ
.
desc
[0].
°¨t
 = 0;

1956 
	`ssˇnf
(
buf
, "%10d %10d %10d", &
cou¡
, &
°¨t
, &
duøti⁄
);

1957 
	`CFGP2P_DBG
(("set_p2p_noa count %d start %d duration %d\n",

1958 
cou¡
, 
°¨t
, 
duøti⁄
));

1959 i‡(
cou¡
 != -1)

1960 
wl
->
p2p
->
nﬂ
.
desc
[0].
cou¡
 = count;

1963 i‡(
°¨t
 != -1)

1964 
wl
->
p2p
->
nﬂ
.
desc
[0].
öãrvÆ
 = 
°¨t
;

1966 i‡(
duøti⁄
 != -1)

1967 
wl
->
p2p
->
nﬂ
.
desc
[0].
duøti⁄
 = duration;

1969 i‡(
wl
->
p2p
->
nﬂ
.
desc
[0].
cou¡
 != 255) {

1970 
wl
->
p2p
->
nﬂ
.
desc
[0].
°¨t
 = 200;

1971 
d⁄gÀ_nﬂ
.
ty≥
 = 
WL_P2P_SCHED_TYPE_REQ_ABS
;

1972 
d⁄gÀ_nﬂ
.
a˘i⁄
 = 
WL_P2P_SCHED_ACTION_GOOFF
;

1973 
d⁄gÀ_nﬂ
.
›ti⁄
 = 
WL_P2P_SCHED_OPTION_TSFOFS
;

1977 
d⁄gÀ_nﬂ
.
a˘i⁄
 = 
WL_P2P_SCHED_ACTION_NONE
;

1978 
d⁄gÀ_nﬂ
.
ty≥
 = 
WL_P2P_SCHED_TYPE_ABS
;

1979 i‡((
wl
->
p2p
->
nﬂ
.
desc
[0].
öãrvÆ
 == 102) ||

1980 (
wl
->
p2p
->
nﬂ
.
desc
[0].
öãrvÆ
 == 100)) {

1981 
wl
->
p2p
->
nﬂ
.
desc
[0].
°¨t
 = 100 -

1982 
wl
->
p2p
->
nﬂ
.
desc
[0].
duøti⁄
;

1983 
d⁄gÀ_nﬂ
.
›ti⁄
 = 
WL_P2P_SCHED_OPTION_BCNPCT
;

1986 
d⁄gÀ_nﬂ
.
›ti⁄
 = 
WL_P2P_SCHED_OPTION_NORMAL
;

1990 
d⁄gÀ_nﬂ
.
desc
[0].
cou¡
 = 
	`htod32
(
wl
->
p2p
->
nﬂ
.desc[0].count);

1991 i‡(
d⁄gÀ_nﬂ
.
›ti⁄
 =
WL_P2P_SCHED_OPTION_BCNPCT
) {

1992 
d⁄gÀ_nﬂ
.
desc
[0].
°¨t
 = 
	`htod32
(
wl
->
p2p
->
nﬂ
.desc[0].start);

1993 
d⁄gÀ_nﬂ
.
desc
[0].
duøti⁄
 = 
	`htod32
(
wl
->
p2p
->
nﬂ
.desc[0].duration);

1996 
d⁄gÀ_nﬂ
.
desc
[0].
°¨t
 = 
	`htod32
(
wl
->
p2p
->
nﬂ
.desc[0].start*1000);

1997 
d⁄gÀ_nﬂ
.
desc
[0].
duøti⁄
 = 
	`htod32
(
wl
->
p2p
->
nﬂ
.desc[0].duration*1000);

1999 
d⁄gÀ_nﬂ
.
desc
[0].
öãrvÆ
 = 
	`htod32
(
wl
->
p2p
->
nﬂ
.desc[0].interval*1000);

2001 
ªt
 = 
	`wldev_iov¨_£tbuf
(
	`wl_to_p2p_bss_ndev
(
wl
, 
P2PAPI_BSSCFG_CONNECTION
),

2002 "p2p_nﬂ", &
d⁄gÀ_nﬂ
, (d⁄gÀ_nﬂ), 
wl
->
io˘l_buf
, 
WLC_IOCTL_MAXLEN
,

2003 &
wl
->
io˘l_buf_sync
);

2005 i‡(
ªt
 < 0) {

2006 
	`CFGP2P_ERR
(("fw sëÖ2p_nﬂ faûed %d\n", 
ªt
));

2010 
	`CFGP2P_ERR
(("ERROR: set_noa inÇon-p2p mode\n"));

2012  
ªt
;

2013 
	}
}

2014 
s32


2015 
	$wl_cfgp2p_gë_p2p_nﬂ
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
, * 
buf
, 
buf_Àn
)

2018 
wifi_p2p_nﬂ_desc_t
 *
nﬂ_desc
;

2019 
Àn
 = 0, 
i
;

2020 
_buf
[200];

2022 
	`CFGP2P_DBG
((" Enter\n"));

2023 
buf
[0] = '\0';

2024 i‡(
wl
->
p2p
 && wl->p2p->
vif_¸óãd
) {

2025 i‡(
wl
->
p2p
->
nﬂ
.
desc
[0].
cou¡
 || wl->p2p->
›s
.ops) {

2026 
_buf
[0] = 1;

2027 
_buf
[1] = (
wl
->
p2p
->
›s
.ops ? 0x80: 0) |

2028 (
wl
->
p2p
->
›s
.
˘w
 & 0x7f);

2029 
Àn
 += 2;

2030 i‡(
wl
->
p2p
->
nﬂ
.
desc
[0].
cou¡
) {

2031 
nﬂ_desc
 = (
wifi_p2p_nﬂ_desc_t
*)&
_buf
[
Àn
];

2032 
nﬂ_desc
->
˙t_ty≥
 = 
wl
->
p2p
->
nﬂ
.
desc
[0].
cou¡
;

2033 
nﬂ_desc
->
duøti⁄
 = 
wl
->
p2p
->
nﬂ
.
desc
[0].duration;

2034 
nﬂ_desc
->
öãrvÆ
 = 
wl
->
p2p
->
nﬂ
.
desc
[0].interval;

2035 
nﬂ_desc
->
°¨t
 = 
wl
->
p2p
->
nﬂ
.
desc
[0].start;

2036 
Àn
 +(
wifi_p2p_nﬂ_desc_t
);

2038 i‡(
buf_Àn
 <
Àn
 * 2) {

2039 
	`CFGP2P_ERR
(("ERROR: buf_len %d inÇotÉnough for"

2040 "ªtu∫ögÇﬂ i¿°rög f‹m©\n", 
buf_Àn
));

2044 
i
 = 0; i < 
Àn
; i++) {

2045 
	`¢¥ötf
(
buf
, 3, "%02x", 
_buf
[
i
]);

2046 
buf
 += 2;

2048 
buf
[
i
*2] = '\0';

2052 
	`CFGP2P_ERR
(("ERROR: get_noa inÇon-p2p mode\n"));

2055  
Àn
 * 2;

2056 
	}
}

2057 
s32


2058 
	$wl_cfgp2p_£t_p2p_ps
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
, * 
buf
, 
Àn
)

2060 
ps
, 
˘w
;

2061 
ªt
 = -1;

2062 
s32
 
Àgacy_ps
;

2064 
	`CFGP2P_DBG
((" Enter\n"));

2065 i‡(
wl
->
p2p
 && wl->p2p->
vif_¸óãd
) {

2066 
	`ssˇnf
(
buf
, "%10d %10d %10d", &
Àgacy_ps
, &
ps
, &
˘w
);

2067 
	`CFGP2P_DBG
((" E¡îÜegacy_p†%dÖ†%d ctw %d\n", 
Àgacy_ps
, 
ps
, 
˘w
));

2068 i‡(
˘w
 != -1) {

2069 
wl
->
p2p
->
›s
.
˘w
 = ctw;

2070 
ªt
 = 0;

2072 i‡(
ps
 != -1) {

2073 
wl
->
p2p
->
›s
.›†
ps
;

2074 
ªt
 = 
	`wldev_iov¨_£tbuf
(
	`wl_to_p2p_bss_ndev
(
wl
, 
P2PAPI_BSSCFG_CONNECTION
),

2075 "p2p_›s", &
wl
->
p2p
->
›s
, (wl->p2p->ops),

2076 
wl
->
io˘l_buf
, 
WLC_IOCTL_MAXLEN
, &wl->
io˘l_buf_sync
);

2077 i‡(
ªt
 < 0) {

2078 
	`CFGP2P_ERR
(("fw sëÖ2p_›†Áûed %d\n", 
ªt
));

2082 i‡((
Àgacy_ps
 !-1Ë&& (÷egacy_p†=
PM_MAX
Ë|| (Àgacy_p†=
PM_OFF
))) {

2083 #i‡!
	`deföed
(
SUPPORT_PM2_ONLY
)

2084 i‡(
Àgacy_ps
 =
PM_MAX
)

2085 
Àgacy_ps
 = 
PM_FAST
;

2088 
ªt
 = 
	`wldev_io˘l
(
	`wl_to_p2p_bss_ndev
(
wl
, 
P2PAPI_BSSCFG_CONNECTION
),

2089 
WLC_SET_PM
, &
Àgacy_ps
, ÷egacy_ps), 
åue
);

2090 i‡(
	`u∆ikñy
(
ªt
)) {

2091 
	`CFGP2P_ERR
(("îr‹ (%d)\n", 
ªt
));

2093 
	`wl_cfg80211_upd©e_powî_mode
(
ndev
);

2097 
	`CFGP2P_ERR
(("ilegal setting\n"));

2100 
	`CFGP2P_ERR
(("ERROR: set_p2p_ps inÇon-p2p mode\n"));

2101 
ªt
 = -1;

2103  
ªt
;

2104 
	}
}

2106 
u8
 *

2107 
	$wl_cfgp2p_ªåeive_p2∑ârib
(*
buf
, 
u8
 
ñemít_id
)

2109 
wifi_p2p_õ_t
 *
õ
 = 
NULL
;

2110 
u16
 
Àn
 = 0;

2111 
u8
 *
subñ
;

2112 
u8
 
subñt_id
;

2113 
u16
 
subñt_Àn
;

2115 i‡(!
buf
) {

2116 
	`WL_ERR
(("P2P IEÇotÖresent"));

2120 
õ
 = (
wifi_p2p_õ_t
*Ë
buf
;

2121 
Àn
 = 
õ
->len;

2126 
subñ
 = 
õ
->
subñts
;

2127 
Àn
 -= 4;

2129 
Àn
 >= 3) {

2131 
subñt_id
 = *
subñ
;

2132 
subñ
 += 1;

2133 
Àn
 -= 1;

2136 
subñt_Àn
 = *
subñ
++;

2137 
subñt_Àn
 |*
subñ
++ << 8;

2139 
Àn
 -= 2;

2140 
Àn
 -
subñt_Àn
;

2142 i‡(
subñt_id
 =
ñemít_id
) {

2146  
subñ
;

2150 
subñ
 +
subñt_Àn
;

2154  
NULL
;

2155 
	}
}

2157 
	#P2P_GROUP_CAPAB_GO_BIT
 0x01

	)

2158 
u8
 *

2159 
	$wl_cfgp2p_ªåeive_p2p_dev_addr
(
wl_bss_öfo_t
 *
bi
, 
u32
 
bi_Àngth
)

2161 
wifi_p2p_õ_t
 * 
p2p_õ
 = 
NULL
;

2162 
u8
 *
ˇ∑bûôy
 = 
NULL
;

2163 
boﬁ
 
p2p_go
 = 0;

2164 
u8
 *
±r
 = 
NULL
;

2166 i‡(!(
p2p_õ
 = 
	`wl_cfgp2p_föd_p2põ
(((
u8
 *Ë
bi
Ë+ bi->
õ_off£t
, bi->
õ_Àngth
))) {

2167 
	`WL_ERR
(("P2P IEÇot found"));

2168  
NULL
;

2171 i‡(!(
ˇ∑bûôy
 = 
	`wl_cfgp2p_ªåeive_p2∑ârib
(
p2p_õ
, 
P2P_SEID_P2P_INFO
))) {

2172 
	`WL_ERR
(("P2P CapabilityáttributeÇot found"));

2173  
NULL
;

2177 
p2p_go
 = 
ˇ∑bûôy
[1] & 
P2P_GROUP_CAPAB_GO_BIT
;

2178 i‡(!
p2p_go
) {

2179  
bi
->
BSSID
.
o˘ë
;

2183 i‡(!(
±r
 = 
	`wl_cfgp2p_ªåeive_p2∑ârib
(
p2p_õ
, 
P2P_SEID_DEV_INFO
))) {

2187 
±r
 = 
	`wl_cfgp2p_ªåeive_p2∑ârib
(
p2p_õ
, 
P2P_SEID_DEV_ID
);

2190 i‡(!
±r
)

2191 
	`WL_ERR
((" Both DEVICE_ID & DEVICE_INFOáttributeÇotÖresent in P2P IE "));

2193  
±r
;

2194 
	}
}

2196 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2, 6, 24)

2198 
	$wl_cfgp2p_ëhtoﬁ_gë_drvöfo
(
√t_devi˚
 *
√t
, 
ëhtoﬁ_drvöfo
 *
öfo
)

2200 
	`¢¥ötf
(
öfo
->
drivî
, (info->driver), "p2p");

2201 
	`¢¥ötf
(
öfo
->
vîsi⁄
, (info->version), "%lu", ()(0));

2202 
	}
}

2204 
ëhtoﬁ_›s
 
	gcfgp2p_ëhtoﬁ_›s
 = {

2205 .
gë_drvöfo
 = 
wl_cfgp2p_ëhtoﬁ_gë_drvöfo


2209 
s32


2210 
	$wl_cfgp2p_ªgi°î_ndev
(
wl_¥iv
 *
wl
)

2212 
ªt
 = 0;

2213 
√t_devi˚
* 
√t
 = 
NULL
;

2214 
wúñess_dev
 *
wdev
 = 
NULL
;

2215 
uöt8
 
ãmp_addr
[
ETHER_ADDR_LEN
] = { 0x00, 0x90, 0x4c, 0x33, 0x22, 0x11 };

2217 i‡(
wl
->
p2p_√t
) {

2218 
	`CFGP2P_ERR
(("p2p_net definedálready.\n"));

2219  -
EINVAL
;

2223 i‡(!(
√t
 = 
	`Æloc_ëhîdev
((
wl_¥iv
 *)))) {

2224 
	`CFGP2P_ERR
(("%s: OOM -áŒoc_ëhîdev\n", 
__FUNCTION__
));

2225  -
ENODEV
;

2228 
wdev
 = 
	`kzÆloc
((*wdev), 
GFP_KERNEL
);

2229 i‡(
	`u∆ikñy
(!
wdev
)) {

2230 
	`WL_ERR
(("CouldÇotállocate wireless device\n"));

2231 
	`‰ì_√tdev
(
√t
);

2232  -
ENOMEM
;

2235 
	`°∫˝y
(
√t
->
«me
, "p2p%d", (net->name) - 1);

2236 
√t
->
«me
[
IFNAMSIZ
 - 1] = '\0';

2239 
	`mem˝y
((*)
	`√tdev_¥iv
(
√t
), &
wl
, (
wl_¥iv
 *));

2241 #i‡(
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2, 6, 31))

2242 
	`ASSERT
(!
√t
->
›í
);

2243 
√t
->
do_io˘l
 = 
wl_cfgp2p_do_io˘l
;

2244 
√t
->
h¨d_°¨t_xmô
 = 
wl_cfgp2p_°¨t_xmô
;

2245 
√t
->
›í
 = 
wl_cfgp2p_if_›í
;

2246 
√t
->
°›
 = 
wl_cfgp2p_if_°›
;

2248 
	`ASSERT
(!
√t
->
√tdev_›s
);

2249 
√t
->
√tdev_›s
 = &
wl_cfgp2p_if_›s
;

2253 
	`mem˝y
(
√t
->
dev_addr
, 
ãmp_addr
, 
ETHER_ADDR_LEN
);

2255 
wdev
->
wùhy
 = 
wl
->wdev->wiphy;

2257 
wdev
->
i·y≥
 = 
	`wl_mode_to_∆80211_i·y≥
(
WL_MODE_BSS
);

2259 
√t
->
õì80211_±r
 = 
wdev
;

2261 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 24)

2262 
√t
->
ëhtoﬁ_›s
 = &
cfgp2p_ëhtoﬁ_›s
;

2265 
	`SET_NETDEV_DEV
(
√t
, 
	`wùhy_dev
(
wdev
->
wùhy
));

2268 
wdev
->
√tdev
 = 
√t
;

2270 
ªt
 = 
	`ªgi°î_√tdev
(
√t
);

2271 i‡(
ªt
) {

2272 
	`CFGP2P_ERR
(("Ñegi°î_√tdevi˚ faûed (%d)\n", 
ªt
));

2273 
	`‰ì_√tdev
(
√t
);

2274 
	`k‰ì
(
wdev
);

2275  -
ENODEV
;

2281 
wl
->
p2p_wdev
 = 
wdev
;

2282 
wl
->
p2p_√t
 = 
√t
;

2284 
	`¥ötk
("%s: P2P I¡îÁ˚ Regi°îed\n", 
√t
->
«me
);

2286  
ªt
;

2287 
	}
}

2289 
s32


2290 
	$wl_cfgp2p_uƒegi°î_ndev
(
wl_¥iv
 *
wl
)

2293 i‡(!
wl
 || !wl->
p2p_√t
) {

2294 
	`CFGP2P_ERR
(("Invalid Ptr\n"));

2295  -
EINVAL
;

2298 
	`uƒegi°î_√tdev
(
wl
->
p2p_√t
);

2299 
	`‰ì_√tdev
(
wl
->
p2p_√t
);

2302 
	}
}

2303 
	$wl_cfgp2p_°¨t_xmô
(
sk_buff
 *
skb
, 
√t_devi˚
 *
ndev
)

2305 i‡(
skb
)

2307 
	`CFGP2P_DBG
(("(%s) isÇot used for data operations.DropingÅheÖacket.\n",

2308 
ndev
->
«me
));

2309 
	`dev_k‰ì_skb_™y
(
skb
);

2313 
	}
}

2315 
	$wl_cfgp2p_do_io˘l
(
√t_devi˚
 *
√t
, 
i‰eq
 *
i‰
, 
cmd
)

2317 
ªt
 = 0;

2318 
wl_¥iv
 *
wl
 = *(wl_¥iv **)
	`√tdev_¥iv
(
√t
);

2319 
√t_devi˚
 *
ndev
 = 
	`wl_to_¥mry_ndev
(
wl
);

2325 i‡(
cmd
 =
SIOCDEVPRIVATE
+1) {

2326 
ªt
 = 
	`wl_™droid_¥iv_cmd
(
ndev
, 
i‰
, 
cmd
);

2329 
	`CFGP2P_ERR
(("%s: IOCTLÑeq 0x%x onÖ2p0 I/F. Ignoring. \n",

2330 
__FUNCTION__
, 
cmd
));

2334  
ªt
;

2335 
	}
}

2337 
	$wl_cfgp2p_if_›í
(
√t_devi˚
 *
√t
)

2339 
wl_¥iv
 *
wlcfg_drv_¥iv
;

2340 
wúñess_dev
 *
wdev
 = 
√t
->
õì80211_±r
;

2341 
wl_¥iv
 *
wl
 = 
NULL
;

2342 
wl
 = 
wlcfg_drv_¥iv
;

2343 i‡(!
wdev
 || !
wl
 || !wl->
p2p
)

2344  -
EINVAL
;

2345 
	`WL_TRACE
(("Enter\n"));

2352 
wdev
->
wùhy
->
öãrÁ˚_modes
 |(
	`BIT
(
NL80211_IFTYPE_P2P_CLIENT
)

2353 | 
	`BIT
(
NL80211_IFTYPE_P2P_GO
));

2354 
	`wl_cfg80211_do_drivî_öô
(
√t
);

2357 
	}
}

2359 
	$wl_cfgp2p_if_°›
(
√t_devi˚
 *
√t
)

2361 
wl_¥iv
 *
wlcfg_drv_¥iv
;

2362 
wl_¥iv
 *
wl
 = 
NULL
;

2363 
Êags
;

2364 
wúñess_dev
 *
wdev
 = 
√t
->
õì80211_±r
;

2365 
˛ór_Êag
 = 0;

2366 i‡(!
wdev
)

2367  -
EINVAL
;

2369 
	`WL_TRACE
(("Enter\n"));

2370 
wl
 = 
wlcfg_drv_¥iv
;

2371 i‡(!
wl
)

2372  -
EINVAL
;

2373 
	`•ö_lock_úqßve
(&
wl
->
cfgdrv_lock
, 
Êags
);

2374 i‡(
wl
->
sˇn_ªque°
 && wl->sˇn_ªque°->
dev
 =
√t
) {

2375 
	`cfg80211_sˇn_d⁄e
(
wl
->
sˇn_ªque°
, 
åue
);

2376 
wl
->
sˇn_ªque°
 = 
NULL
;

2377 
˛ór_Êag
 = 1;

2379 
	`•ö_u∆ock_úqª°‹e
(&
wl
->
cfgdrv_lock
, 
Êags
);

2380 i‡(
˛ór_Êag
)

2381 
	`wl_˛r_drv_°©us
(
wl
, 
SCANNING
, 
√t
);

2382 
wdev
->
wùhy
->
öãrÁ˚_modes
 = (wdev->wiphy->interface_modes)

2383 & (~(
	`BIT
(
NL80211_IFTYPE_P2P_CLIENT
)|

2384 
	`BIT
(
NL80211_IFTYPE_P2P_GO
)));

2386 
	}
}

2388 
boﬁ
 
	$wl_cfgp2p_is_if›s
(c⁄° 
√t_devi˚_›s
 *
if_›s
)

2390  (
if_›s
 =&
wl_cfgp2p_if_›s
);

2391 
	}
}

	@wl_iw.c

27 #i‡
deföed
(
USE_IW
)

28 
	#LINUX_PORT


	)

30 
	~<ty≥defs.h
>

31 
	~<löuxvî.h
>

32 
	~<o¶.h
>

34 
	~<bcmutûs.h
>

35 
	~<bcmídün.h
>

36 
	~<¥Ÿo/ëhî√t.h
>

38 
	~<löux/if_¨p.h
>

39 
	~<asm/uac˚ss.h
>

42 c⁄° 
	tsi_pub
 
	tsi_t
;

43 
	~<wlio˘l.h
>

46 
	~<wl_dbg.h
>

47 
	~<wl_iw.h
>

50 #i‡(
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2, 6, 27))

51 
	~<löux/π√éök.h
>

53 #i‡
deföed
(
SOFTAP
)

54 
√t_devi˚
 *
	g≠_√t_dev
 = 
NULL
;

55 
tsk_˘l_t
 
	g≠_ëh_˘l
;

58 
boﬁ
 
wl_iw_c⁄n_°©us_°r
(
uöt32
 
evít_ty≥
, uöt32 
°©us
,

59 
uöt32
 
ªas⁄
, * 
°rögBuf
, 
uöt
 
buÊí
);

61 
uöt
 
	giw_msg_Àvñ
 = 
WL_ERROR_VAL
;

63 
	#MAX_WLIW_IOCTL_LEN
 1024

	)

66 
	#htod32
(
i
Ë
	)
i

67 
	#htod16
(
i
Ë
	)
i

68 
	#dtoh32
(
i
Ë
	)
i

69 
	#dtoh16
(
i
Ë
	)
i

70 
	#htodch™•ec
(
i
Ë
	)
i

71 
	#dtohch™•ec
(
i
Ë
	)
i

73 
iw_°©i°ics
 *
dhd_gë_wúñess_°©s
(
√t_devi˚
 *
dev
);

74 
dhd_waô_≥nd8021x
(
√t_devi˚
 *
dev
);

76 #i‡
WIRELESS_EXT
 < 19

77 
	#IW_IOCTL_IDX
(
cmd
Ë((cmdË- 
SIOCIWFIRST
)

	)

78 
	#IW_EVENT_IDX
(
cmd
Ë((cmdË- 
IWEVFIRST
)

	)

82 #i‡(
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2, 6, 0))

83 
	#DAEMONIZE
(
a
Ë
	`d´m⁄ize
(a); \

84 
	`Ælow_sig«l
(
SIGKILL
); \

85 
	`Ælow_sig«l
(
SIGTERM
);

	)

87 
	#RAISE_RX_SOFTIRQ
() \

88 
	`˝u_øi£_so·úq
(
	`smp_¥o˚ss‹_id
(), 
NET_RX_SOFTIRQ
)

	)

89 
	#DAEMONIZE
(
a
Ë
	`d´m⁄ize
(); \

90 dÿ{ i‡(
a
) \

91 
	`°∫˝y
(
cuºít
->
comm
, 
a
, 
	`MIN
((cuºít->comm), (
	`°æí
(a) + 1))); \

92 } 0);

	)

95 
	#ISCAN_STATE_IDLE
 0

	)

96 
	#ISCAN_STATE_SCANING
 1

	)

99 
	#WLC_IW_ISCAN_MAXLEN
 2048

	)

100 
	sisˇn_buf
 {

101 
isˇn_buf
 * 
	m√xt
;

102 
	misˇn_buf
[
WLC_IW_ISCAN_MAXLEN
];

103 } 
	tisˇn_buf_t
;

105 
	sisˇn_öfo
 {

106 
√t_devi˚
 *
	mdev
;

107 
timî_li°
 
	mtimî
;

108 
uöt32
 
	mtimî_ms
;

109 
uöt32
 
	mtimî_⁄
;

110 
	misˇn_°©e
;

111 
isˇn_buf_t
 * 
	mli°_hdr
;

112 
isˇn_buf_t
 * 
	mli°_cur
;

115 
	msysioc_pid
;

116 
£m≠h‹e
 
	msysioc_£m
;

117 
com∂ëi⁄
 
	msysioc_exôed
;

120 
	mio˘lbuf
[
WLC_IOCTL_SMLEN
];

121 } 
	tisˇn_öfo_t
;

122 
isˇn_öfo_t
 *
	gg_isˇn
 = 
NULL
;

123 
wl_iw_timîfunc
(
ul⁄g
 
d©a
);

124 
wl_iw_£t_evít_mask
(
√t_devi˚
 *
dev
);

125 
wl_iw_isˇn
(
isˇn_öfo_t
 *
isˇn
, 
wlc_ssid_t
 *
ssid
, 
uöt16
 
a˘i⁄
);

128 
	s¥iv_lök
 {

129 
wl_iw_t
 *
	mwliw
;

130 } 
	t¥iv_lök_t
;

133 #i‡(
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2, 6, 24))

134 
	#WL_DEV_LINK
(
dev
Ë(
¥iv_lök_t
*)(dev->
¥iv
)

	)

136 
	#WL_DEV_LINK
(
dev
Ë(
¥iv_lök_t
*)
	`√tdev_¥iv
(dev)

	)

140 
	#IW_DEV_IF
(
dev
Ë((
wl_iw_t
*)(
	`WL_DEV_LINK
(dev))->
wliw
)

	)

142 
	$sw≠_key_‰om_BE
(

143 
wl_w£c_key_t
 *
key


146 
key
->
ödex
 = 
	`htod32
(key->index);

147 
key
->
Àn
 = 
	`htod32
(key->len);

148 
key
->
Ægo
 = 
	`htod32
(key->algo);

149 
key
->
Êags
 = 
	`htod32
(key->flags);

150 
key
->
rxiv
.
hi
 = 
	`htod32
(key->rxiv.hi);

151 
key
->
rxiv
.
lo
 = 
	`htod16
(key->rxiv.lo);

152 
key
->
iv_öôülized
 = 
	`htod32
(key->iv_initialized);

153 
	}
}

155 
	$sw≠_key_to_BE
(

156 
wl_w£c_key_t
 *
key


159 
key
->
ödex
 = 
	`dtoh32
(key->index);

160 
key
->
Àn
 = 
	`dtoh32
(key->len);

161 
key
->
Ægo
 = 
	`dtoh32
(key->algo);

162 
key
->
Êags
 = 
	`dtoh32
(key->flags);

163 
key
->
rxiv
.
hi
 = 
	`dtoh32
(key->rxiv.hi);

164 
key
->
rxiv
.
lo
 = 
	`dtoh16
(key->rxiv.lo);

165 
key
->
iv_öôülized
 = 
	`dtoh32
(key->iv_initialized);

166 
	}
}

169 
	$dev_wlc_io˘l
(

170 
√t_devi˚
 *
dev
,

171 
cmd
,

172 *
¨g
,

173 
Àn


176 
i‰eq
 
i‰
;

177 
wl_io˘l_t
 
ioc
;

178 
mm_£gmít_t
 
fs
;

179 
ªt
;

181 
	`mem£t
(&
ioc
, 0, (ioc));

182 
ioc
.
cmd
 = cmd;

183 
ioc
.
buf
 = 
¨g
;

184 
ioc
.
Àn
 =Üen;

186 
	`°r˝y
(
i‰
.
i‰_«me
, 
dev
->
«me
);

187 
i‰
.
i‰_d©a
 = (
ˇddr_t
Ë&
ioc
;

189 #i‚de‡
LINUX_HYBRID


193 
	`dev_›í
(
dev
);

196 
fs
 = 
	`gë_fs
();

197 
	`£t_fs
(
	`gë_ds
());

198 #i‡
	`deföed
(
WL_USE_NETDEV_OPS
)

199 
ªt
 = 
dev
->
√tdev_›s
->
	`ndo_do_io˘l
(dev, &
i‰
, 
SIOCDEVPRIVATE
);

201 
ªt
 = 
dev
->
	`do_io˘l
(dev, &
i‰
, 
SIOCDEVPRIVATE
);

203 
	`£t_fs
(
fs
);

205  
ªt
;

206 
	}
}

214 
	$dev_wlc_ötv¨_£t
(

215 
√t_devi˚
 *
dev
,

216 *
«me
,

217 
vÆ
)

219 
buf
[
WLC_IOCTL_SMLEN
];

220 
uöt
 
Àn
;

222 
vÆ
 = 
	`htod32
(val);

223 
Àn
 = 
	`bcm_mkiov¨
(
«me
, (*)(&
vÆ
), (vÆ), 
buf
, (buf));

224 
	`ASSERT
(
Àn
);

226  (
	`dev_wlc_io˘l
(
dev
, 
WLC_SET_VAR
, 
buf
, 
Àn
));

227 
	}
}

230 
	$dev_iw_iov¨_£tbuf
(

231 
√t_devi˚
 *
dev
,

232 *
iov¨
,

233 *
∑øm
,

234 
∑ømÀn
,

235 *
buÂå
,

236 
buÊí
)

238 
iﬁí
;

240 
iﬁí
 = 
	`bcm_mkiov¨
(
iov¨
, 
∑øm
, 
∑ømÀn
, 
buÂå
, 
buÊí
);

241 
	`ASSERT
(
iﬁí
);

242 
	`BCM_REFERENCE
(
iﬁí
);

244  (
	`dev_wlc_io˘l
(
dev
, 
WLC_SET_VAR
, 
buÂå
, 
iﬁí
));

245 
	}
}

248 
	$dev_iw_iov¨_gëbuf
(

249 
√t_devi˚
 *
dev
,

250 *
iov¨
,

251 *
∑øm
,

252 
∑ømÀn
,

253 *
buÂå
,

254 
buÊí
)

256 
iﬁí
;

258 
iﬁí
 = 
	`bcm_mkiov¨
(
iov¨
, 
∑øm
, 
∑ømÀn
, 
buÂå
, 
buÊí
);

259 
	`ASSERT
(
iﬁí
);

260 
	`BCM_REFERENCE
(
iﬁí
);

262  (
	`dev_wlc_io˘l
(
dev
, 
WLC_GET_VAR
, 
buÂå
, 
buÊí
));

263 
	}
}

265 #i‡
WIRELESS_EXT
 > 17

267 
	$dev_wlc_bufv¨_£t
(

268 
√t_devi˚
 *
dev
,

269 *
«me
,

270 *
buf
, 
Àn
)

272 *
io˘lbuf
;

273 
uöt
 
buÊí
;

274 
îr‹
;

276 
io˘lbuf
 = 
	`kmÆloc
(
MAX_WLIW_IOCTL_LEN
, 
GFP_KERNEL
);

277 i‡(!
io˘lbuf
)

278  -
ENOMEM
;

280 
buÊí
 = 
	`bcm_mkiov¨
(
«me
, 
buf
, 
Àn
, 
io˘lbuf
, 
MAX_WLIW_IOCTL_LEN
);

281 
	`ASSERT
(
buÊí
);

282 
îr‹
 = 
	`dev_wlc_io˘l
(
dev
, 
WLC_SET_VAR
, 
io˘lbuf
, 
buÊí
);

284 
	`k‰ì
(
io˘lbuf
);

285  
îr‹
;

286 
	}
}

295 
	$dev_wlc_bufv¨_gë
(

296 
√t_devi˚
 *
dev
,

297 *
«me
,

298 *
buf
, 
buÊí
)

300 *
io˘lbuf
;

301 
îr‹
;

303 
uöt
 
Àn
;

305 
io˘lbuf
 = 
	`kmÆloc
(
MAX_WLIW_IOCTL_LEN
, 
GFP_KERNEL
);

306 i‡(!
io˘lbuf
)

307  -
ENOMEM
;

308 
Àn
 = 
	`bcm_mkiov¨
(
«me
, 
NULL
, 0, 
io˘lbuf
, 
MAX_WLIW_IOCTL_LEN
);

309 
	`ASSERT
(
Àn
);

310 
	`BCM_REFERENCE
(
Àn
);

311 
îr‹
 = 
	`dev_wlc_io˘l
(
dev
, 
WLC_GET_VAR
, (*)
io˘lbuf
, 
MAX_WLIW_IOCTL_LEN
);

312 i‡(!
îr‹
)

313 
	`bc›y
(
io˘lbuf
, 
buf
, 
buÊí
);

315 
	`k‰ì
(
io˘lbuf
);

316  (
îr‹
);

317 
	}
}

325 
	$dev_wlc_ötv¨_gë
(

326 
√t_devi˚
 *
dev
,

327 *
«me
,

328 *
ªtvÆ
)

331 
buf
[
WLC_IOCTL_SMLEN
];

332 
vÆ
;

333 } 
v¨
;

334 
îr‹
;

336 
uöt
 
Àn
;

337 
uöt
 
d©a_nuŒ
;

339 
Àn
 = 
	`bcm_mkiov¨
(
«me
, (*)(&
d©a_nuŒ
), 0, (*)(&
v¨
), (v¨.
buf
));

340 
	`ASSERT
(
Àn
);

341 
îr‹
 = 
	`dev_wlc_io˘l
(
dev
, 
WLC_GET_VAR
, (*)&
v¨
, 
Àn
);

343 *
ªtvÆ
 = 
	`dtoh32
(
v¨
.
vÆ
);

345  (
îr‹
);

346 
	}
}

349 #i‡
WIRELESS_EXT
 < 13

350 
	siw_ªque°_öfo


352 
__u16
 
	mcmd
;

353 
__u16
 
	mÊags
;

356 (*
	tiw_h™dÀr
)(
	t√t_devi˚
 *
	tdev
, 
	tiw_ªque°_öfo
 *
	töfo
,

357 *
	twrqu
, *
	texåa
);

360 #i‡
WIRELESS_EXT
 > 12

362 
	$wl_iw_£t_Àddc
(

363 
√t_devi˚
 *
dev
,

364 
iw_ªque°_öfo
 *
öfo
,

365 
iwªq_d©a
 *
wrqu
,

366 *
exåa


369 
dc
 = *(*)
exåa
;

370 
îr‹
;

372 
îr‹
 = 
	`dev_wlc_ötv¨_£t
(
dev
, "Àddc", 
dc
);

373  
îr‹
;

374 
	}
}

377 
	$wl_iw_£t_vœnmode
(

378 
√t_devi˚
 *
dev
,

379 
iw_ªque°_öfo
 *
öfo
,

380 
iwªq_d©a
 *
wrqu
,

381 *
exåa


384 
mode
 = *(*)
exåa
;

385 
îr‹
;

387 
mode
 = 
	`htod32
(mode);

388 
îr‹
 = 
	`dev_wlc_ötv¨_£t
(
dev
, "vœn_mode", 
mode
);

389  
îr‹
;

390 
	}
}

393 
	$wl_iw_£t_pm
(

394 
√t_devi˚
 *
dev
,

395 
iw_ªque°_öfo
 *
öfo
,

396 
iwªq_d©a
 *
wrqu
,

397 *
exåa


400 
pm
 = *(*)
exåa
;

401 
îr‹
;

403 
pm
 = 
	`htod32
(pm);

404 
îr‹
 = 
	`dev_wlc_io˘l
(
dev
, 
WLC_SET_PM
, &
pm
, (pm));

405  
îr‹
;

406 
	}
}

410 
	$wl_iw_£nd_¥iv_evít
(

411 
√t_devi˚
 *
dev
,

412 *
Êag


415 
iwªq_d©a
 
wrqu
;

416 
exåa
[
IW_CUSTOM_MAX
 + 1];

417 
cmd
;

419 
cmd
 = 
IWEVCUSTOM
;

420 
	`mem£t
(&
wrqu
, 0, (wrqu));

421 i‡(
	`°æí
(
Êag
Ë> (
exåa
))

424 
	`°r˝y
(
exåa
, 
Êag
);

425 
wrqu
.
d©a
.
Àngth
 = 
	`°æí
(
exåa
);

426 
	`wúñess_£nd_evít
(
dev
, 
cmd
, &
wrqu
, 
exåa
);

427 
	`WL_TRACE
(("Síd IWEVCUSTOM Evíàa†%s\n", 
exåa
));

430 
	}
}

433 
	$wl_iw_c⁄fig_commô
(

434 
√t_devi˚
 *
dev
,

435 
iw_ªque°_öfo
 *
öfo
,

436 *
zwrq
,

437 *
exåa


440 
wlc_ssid_t
 
ssid
;

441 
îr‹
;

442 
sockaddr
 
bssid
;

444 
	`WL_TRACE
(("%s: SIOCSIWCOMMIT\n", 
dev
->
«me
));

446 i‡((
îr‹
 = 
	`dev_wlc_io˘l
(
dev
, 
WLC_GET_SSID
, &
ssid
, (ssid))))

447  
îr‹
;

449 
ssid
.
SSID_Àn
 = 
	`dtoh32
(ssid.SSID_len);

451 i‡(!
ssid
.
SSID_Àn
)

454 
	`bzîo
(&
bssid
, (
sockaddr
));

455 i‡((
îr‹
 = 
	`dev_wlc_io˘l
(
dev
, 
WLC_REASSOC
, &
bssid
, 
ETHER_ADDR_LEN
))) {

456 
	`WL_ERROR
(("%s: WLC_REASSOC faûed (%d)\n", 
__FUNCTION__
, 
îr‹
));

457  
îr‹
;

461 
	}
}

464 
	$wl_iw_gë_«me
(

465 
√t_devi˚
 *
dev
,

466 
iw_ªque°_öfo
 *
öfo
,

467 
iwªq_d©a
 *
cwrq
,

468 *
exåa


471 
phyty≥
, 
îr
;

472 
uöt
 
b™d
[3];

473 
ˇp
[5];

475 
	`WL_TRACE
(("%s: SIOCGIWNAME\n", 
dev
->
«me
));

477 
ˇp
[0] = 0;

478 i‡((
îr
 = 
	`dev_wlc_io˘l
(
dev
, 
WLC_GET_PHYTYPE
, &
phyty≥
, (phytype))) < 0)

479 
d⁄e
;

480 i‡((
îr
 = 
	`dev_wlc_io˘l
(
dev
, 
WLC_GET_BANDLIST
, 
b™d
, (band))) < 0)

481 
d⁄e
;

483 
b™d
[0] = 
	`dtoh32
(band[0]);

484 
phyty≥
) {

485 
WLC_PHY_TYPE_A
:

486 
	`°r˝y
(
ˇp
, "a");

488 
WLC_PHY_TYPE_B
:

489 
	`°r˝y
(
ˇp
, "b");

491 
WLC_PHY_TYPE_LP
:

492 
WLC_PHY_TYPE_G
:

493 i‡(
b™d
[0] >= 2)

494 
	`°r˝y
(
ˇp
, "abg");

496 
	`°r˝y
(
ˇp
, "bg");

498 
WLC_PHY_TYPE_N
:

499 i‡(
b™d
[0] >= 2)

500 
	`°r˝y
(
ˇp
, "abgn");

502 
	`°r˝y
(
ˇp
, "bgn");

505 
d⁄e
:

506 
	`¢¥ötf
(
cwrq
->
«me
, 
IFNAMSIZ
, "IEEE 802.11%s", 
ˇp
);

508 
	}
}

511 
	$wl_iw_£t_‰eq
(

512 
√t_devi˚
 *
dev
,

513 
iw_ªque°_öfo
 *
öfo
,

514 
iw_‰eq
 *
fwrq
,

515 *
exåa


518 
îr‹
, 
ch™
;

519 
uöt
 
sf
 = 0;

521 
	`WL_TRACE
(("%s: SIOCSIWFREQ\n", 
dev
->
«me
));

524 i‡(
fwrq
->
e
 =0 && fwrq->
m
 < 
MAXCHANNEL
) {

525 
ch™
 = 
fwrq
->
m
;

531 i‡(
fwrq
->
e
 >= 6) {

532 
fwrq
->
e
 -= 6;

533 
fwrq
->
e
--)

534 
fwrq
->
m
 *= 10;

535 } i‡(
fwrq
->
e
 < 6) {

536 
fwrq
->
e
++ < 6)

537 
fwrq
->
m
 /= 10;

540 i‡(
fwrq
->
m
 > 4000 && fwrq->m < 5000)

541 
sf
 = 
WF_CHAN_FACTOR_4_G
;

543 
ch™
 = 
	`wf_mhz2ch™√l
(
fwrq
->
m
, 
sf
);

545 
ch™
 = 
	`htod32
(chan);

546 i‡((
îr‹
 = 
	`dev_wlc_io˘l
(
dev
, 
WLC_SET_CHANNEL
, &
ch™
, (chan))))

547  
îr‹
;

550  -
EINPROGRESS
;

551 
	}
}

554 
	$wl_iw_gë_‰eq
(

555 
√t_devi˚
 *
dev
,

556 
iw_ªque°_öfo
 *
öfo
,

557 
iw_‰eq
 *
fwrq
,

558 *
exåa


561 
ch™√l_öfo_t
 
ci
;

562 
îr‹
;

564 
	`WL_TRACE
(("%s: SIOCGIWFREQ\n", 
dev
->
«me
));

566 i‡((
îr‹
 = 
	`dev_wlc_io˘l
(
dev
, 
WLC_GET_CHANNEL
, &
ci
, (ci))))

567  
îr‹
;

570 
fwrq
->
m
 = 
	`dtoh32
(
ci
.
hw_ch™√l
);

571 
fwrq
->
e
 = 
	`dtoh32
(0);

573 
	}
}

576 
	$wl_iw_£t_mode
(

577 
√t_devi˚
 *
dev
,

578 
iw_ªque°_öfo
 *
öfo
,

579 
__u32
 *
uwrq
,

580 *
exåa


583 
ö‰a
 = 0, 
≠
 = 0, 
îr‹
 = 0;

585 
	`WL_TRACE
(("%s: SIOCSIWMODE\n", 
dev
->
«me
));

587 *
uwrq
) {

588 
IW_MODE_MASTER
:

589 
ö‰a
 = 
≠
 = 1;

591 
IW_MODE_ADHOC
:

592 
IW_MODE_AUTO
:

594 
IW_MODE_INFRA
:

595 
ö‰a
 = 1;

598  -
EINVAL
;

600 
ö‰a
 = 
	`htod32
(infra);

601 
≠
 = 
	`htod32
(ap);

603 i‡((
îr‹
 = 
	`dev_wlc_io˘l
(
dev
, 
WLC_SET_INFRA
, &
ö‰a
, (infra))) ||

604 (
îr‹
 = 
	`dev_wlc_io˘l
(
dev
, 
WLC_SET_AP
, &
≠
, (ap))))

605  
îr‹
;

608  -
EINPROGRESS
;

609 
	}
}

612 
	$wl_iw_gë_mode
(

613 
√t_devi˚
 *
dev
,

614 
iw_ªque°_öfo
 *
öfo
,

615 
__u32
 *
uwrq
,

616 *
exåa


619 
îr‹
, 
ö‰a
 = 0, 
≠
 = 0;

621 
	`WL_TRACE
(("%s: SIOCGIWMODE\n", 
dev
->
«me
));

623 i‡((
îr‹
 = 
	`dev_wlc_io˘l
(
dev
, 
WLC_GET_INFRA
, &
ö‰a
, (infra))) ||

624 (
îr‹
 = 
	`dev_wlc_io˘l
(
dev
, 
WLC_GET_AP
, &
≠
, (ap))))

625  
îr‹
;

627 
ö‰a
 = 
	`dtoh32
(infra);

628 
≠
 = 
	`dtoh32
(ap);

629 *
uwrq
 = 
ö‰a
 ? 
≠
 ? 
IW_MODE_MASTER
 : 
IW_MODE_INFRA
 : 
IW_MODE_ADHOC
;

632 
	}
}

635 
	$wl_iw_gë_ønge
(

636 
√t_devi˚
 *
dev
,

637 
iw_ªque°_öfo
 *
öfo
,

638 
iw_poöt
 *
dwrq
,

639 *
exåa


642 
iw_ønge
 *
ønge
 = (iw_øngê*Ë
exåa
;

643 
ch™√ls
[
MAXCHANNEL
+1];

644 
wl_uöt32_li°_t
 *
li°
 = (wl_uöt32_li°_à*Ë
ch™√ls
;

645 
wl_øã£t_t
 
øã£t
;

646 
îr‹
, 
i
, 
k
;

647 
uöt
 
sf
, 
ch
;

649 
phyty≥
;

650 
bw_ˇp
 = 0, 
sgi_tx
 = 0, 
nmode
 = 0;

651 
ch™√l_öfo_t
 
ci
;

652 
uöt8
 
ƒ©e_li°2c›y
 = 0;

653 
uöt16
 
ƒ©e_li°
[4][8] = { {13, 26, 39, 52, 78, 104, 117, 130},

658 
	`WL_TRACE
(("%s: SIOCGIWRANGE\n", 
dev
->
«me
));

660 i‡(!
exåa
)

661  -
EINVAL
;

663 
dwrq
->
Àngth
 = (
iw_ønge
);

664 
	`mem£t
(
ønge
, 0, (*range));

667 
ønge
->
mö_nwid
 =Ñ™ge->
max_nwid
 = 0;

670 
li°
->
cou¡
 = 
	`htod32
(
MAXCHANNEL
);

671 i‡((
îr‹
 = 
	`dev_wlc_io˘l
(
dev
, 
WLC_GET_VALID_CHANNELS
, 
ch™√ls
, (channels))))

672  
îr‹
;

673 
i
 = 0; i < 
	`dtoh32
(
li°
->
cou¡
Ë&& i < 
IW_MAX_FREQUENCIES
; i++) {

674 
ønge
->
‰eq
[
i
].ò
	`dtoh32
(
li°
->
ñemít
[i]);

676 
ch
 = 
	`dtoh32
(
li°
->
ñemít
[
i
]);

677 i‡(
ch
 <
CH_MAX_2G_CHANNEL
)

678 
sf
 = 
WF_CHAN_FACTOR_2_4_G
;

680 
sf
 = 
WF_CHAN_FACTOR_5_G
;

682 
ønge
->
‰eq
[
i
].
m
 = 
	`wf_ch™√l2mhz
(
ch
, 
sf
);

683 
ønge
->
‰eq
[
i
].
e
 = 6;

685 
ønge
->
num_‰equícy
 =Ñ™ge->
num_ch™√ls
 = 
i
;

688 
ønge
->
max_quÆ
.
quÆ
 = 5;

690 
ønge
->
max_quÆ
.
Àvñ
 = 0x100 - 200;

692 
ønge
->
max_quÆ
.
noi£
 = 0x100 - 200;

694 
ønge
->
£nsôivôy
 = 65535;

696 #i‡
WIRELESS_EXT
 > 11

698 
ønge
->
avg_quÆ
.
quÆ
 = 3;

700 
ønge
->
avg_quÆ
.
Àvñ
 = 0x100 + 
WL_IW_RSSI_GOOD
;

702 
ønge
->
avg_quÆ
.
noi£
 = 0x100 - 75;

706 i‡((
îr‹
 = 
	`dev_wlc_io˘l
(
dev
, 
WLC_GET_CURR_RATESET
, &
øã£t
, (rateset))))

707  
îr‹
;

708 
øã£t
.
cou¡
 = 
	`dtoh32
(rateset.count);

709 
ønge
->
num_bôøãs
 = 
øã£t
.
cou¡
;

710 
i
 = 0; i < 
øã£t
.
cou¡
 && i < 
IW_MAX_BITRATES
; i++)

711 
ønge
->
bôøã
[
i
] = (
øã£t
.
øãs
[i] & 0x7f) * 500000;

712 
	`dev_wlc_ötv¨_gë
(
dev
, "nmode", &
nmode
);

713 i‡((
îr‹
 = 
	`dev_wlc_io˘l
(
dev
, 
WLC_GET_PHYTYPE
, &
phyty≥
, (phytype))))

714  
îr‹
;

716 i‡(
nmode
 =1 && ((
phyty≥
 =
WLC_PHY_TYPE_SSN
Ë|| (phyty≥ =
WLC_PHY_TYPE_LCN
) ||

717 (
phyty≥
 =
WLC_PHY_TYPE_LCN40
))) {

718 
	`dev_wlc_ötv¨_gë
(
dev
, "mimo_bw_ˇp", &
bw_ˇp
);

719 
	`dev_wlc_ötv¨_gë
(
dev
, "sgi_tx", &
sgi_tx
);

720 
	`dev_wlc_io˘l
(
dev
, 
WLC_GET_CHANNEL
, &
ci
, (
ch™√l_öfo_t
));

721 
ci
.
hw_ch™√l
 = 
	`dtoh32
(ci.hw_channel);

723 i‡(
bw_ˇp
 == 0 ||

724 (
bw_ˇp
 =2 && 
ci
.
hw_ch™√l
 <= 14)) {

725 i‡(
sgi_tx
 == 0)

726 
ƒ©e_li°2c›y
 = 0;

728 
ƒ©e_li°2c›y
 = 1;

730 i‡(
bw_ˇp
 == 1 ||

731 (
bw_ˇp
 =2 && 
ci
.
hw_ch™√l
 >= 36)) {

732 i‡(
sgi_tx
 == 0)

733 
ƒ©e_li°2c›y
 = 2;

735 
ƒ©e_li°2c›y
 = 3;

737 
ønge
->
num_bôøãs
 += 8;

738 
k
 = 0; 
i
 < 
ønge
->
num_bôøãs
; k++, i++) {

740 
ønge
->
bôøã
[
i
] = (
ƒ©e_li°
[
ƒ©e_li°2c›y
][
k
]) * 500000;

748 i‡((
îr‹
 = 
	`dev_wlc_io˘l
(
dev
, 
WLC_GET_PHYTYPE
, &
i
, (i))))

749  
îr‹
;

750 
i
 = 
	`dtoh32
(i);

751 i‡(
i
 =
WLC_PHY_TYPE_A
)

752 
ønge
->
throughput
 = 24000000;

754 
ønge
->
throughput
 = 1500000;

757 
ønge
->
mö_πs
 = 0;

758 
ønge
->
max_πs
 = 2347;

759 
ønge
->
mö_‰ag
 = 256;

760 
ønge
->
max_‰ag
 = 2346;

762 
ønge
->
max_ícodög_tokís
 = 
DOT11_MAX_DEFAULT_KEYS
;

763 
ønge
->
num_ícodög_sizes
 = 4;

764 
ønge
->
ícodög_size
[0] = 
WEP1_KEY_SIZE
;

765 
ønge
->
ícodög_size
[1] = 
WEP128_KEY_SIZE
;

766 #i‡
WIRELESS_EXT
 > 17

767 
ønge
->
ícodög_size
[2] = 
TKIP_KEY_SIZE
;

769 
ønge
->
ícodög_size
[2] = 0;

771 
ønge
->
ícodög_size
[3] = 
AES_KEY_SIZE
;

774 
ønge
->
mö_pmp
 = 0;

775 
ønge
->
max_pmp
 = 0;

776 
ønge
->
mö_pmt
 = 0;

777 
ønge
->
max_pmt
 = 0;

778 
ønge
->
pmp_Êags
 = 0;

779 
ønge
->
pm_ˇ∑
 = 0;

782 
ønge
->
num_txpowî
 = 2;

783 
ønge
->
txpowî
[0] = 1;

784 
ønge
->
txpowî
[1] = 255;

785 
ønge
->
txpowî_ˇ∑
 = 
IW_TXPOW_MWATT
;

787 #i‡
WIRELESS_EXT
 > 10

788 
ønge
->
we_vîsi⁄_compûed
 = 
WIRELESS_EXT
;

789 
ønge
->
we_vîsi⁄_sour˚
 = 19;

792 
ønge
->
ªåy_ˇ∑
 = 
IW_RETRY_LIMIT
;

793 
ønge
->
ªåy_Êags
 = 
IW_RETRY_LIMIT
;

794 
ønge
->
r_time_Êags
 = 0;

796 
ønge
->
mö_ªåy
 = 1;

797 
ønge
->
max_ªåy
 = 255;

799 
ønge
->
mö_r_time
 = 0;

800 
ønge
->
max_r_time
 = 0;

803 #i‡
WIRELESS_EXT
 > 17

804 
ønge
->
íc_ˇ∑
 = 
IW_ENC_CAPA_WPA
;

805 
ønge
->
íc_ˇ∑
 |
IW_ENC_CAPA_CIPHER_TKIP
;

806 
ønge
->
íc_ˇ∑
 |
IW_ENC_CAPA_CIPHER_CCMP
;

807 
ønge
->
íc_ˇ∑
 |
IW_ENC_CAPA_WPA2
;

808 #i‡(
	`deföed
(
BCMSUP_PSK
Ë&& deföed(
WLFBT
))

810 
ønge
->
íc_ˇ∑
 |
IW_ENC_CAPA_4WAY_HANDSHAKE
;

814 
	`IW_EVENT_CAPA_SET_KERNEL
(
ønge
->
evít_ˇ∑
);

816 
	`IW_EVENT_CAPA_SET
(
ønge
->
evít_ˇ∑
, 
SIOCGIWAP
);

817 
	`IW_EVENT_CAPA_SET
(
ønge
->
evít_ˇ∑
, 
SIOCGIWSCAN
);

818 
	`IW_EVENT_CAPA_SET
(
ønge
->
evít_ˇ∑
, 
IWEVTXDROP
);

819 
	`IW_EVENT_CAPA_SET
(
ønge
->
evít_ˇ∑
, 
IWEVMICHAELMICFAILURE
);

820 
	`IW_EVENT_CAPA_SET
(
ønge
->
evít_ˇ∑
, 
IWEVASSOCREQIE
);

821 
	`IW_EVENT_CAPA_SET
(
ønge
->
evít_ˇ∑
, 
IWEVASSOCRESPIE
);

822 
	`IW_EVENT_CAPA_SET
(
ønge
->
evít_ˇ∑
, 
IWEVPMKIDCAND
);

824 #i‡
WIRELESS_EXT
 >22 && 
	`deföed
(
IW_SCAN_CAPA_ESSID
)

826 
ønge
->
sˇn_ˇ∑
 = 
IW_SCAN_CAPA_ESSID
;

831 
	}
}

834 
	$rssi_to_quÆ
(
rssi
)

836 i‡(
rssi
 <
WL_IW_RSSI_NO_SIGNAL
)

838 i‡(
rssi
 <
WL_IW_RSSI_VERY_LOW
)

840 i‡(
rssi
 <
WL_IW_RSSI_LOW
)

842 i‡(
rssi
 <
WL_IW_RSSI_GOOD
)

844 i‡(
rssi
 <
WL_IW_RSSI_VERY_GOOD
)

848 
	}
}

851 
	$wl_iw_£t_•y
(

852 
√t_devi˚
 *
dev
,

853 
iw_ªque°_öfo
 *
öfo
,

854 
iw_poöt
 *
dwrq
,

855 *
exåa


858 
wl_iw_t
 *
iw
 = 
	`IW_DEV_IF
(
dev
);

859 
sockaddr
 *
addr
 = (sockadd∏*Ë
exåa
;

860 
i
;

862 
	`WL_TRACE
(("%s: SIOCSIWSPY\n", 
dev
->
«me
));

864 i‡(!
exåa
)

865  -
EINVAL
;

867 
iw
->
•y_num
 = 
	`MIN
(
	`ARRAYSIZE
(iw->
•y_addr
), 
dwrq
->
Àngth
);

868 
i
 = 0; i < 
iw
->
•y_num
; i++)

869 
	`mem˝y
(&
iw
->
•y_addr
[
i
], 
addr
[i].
ß_d©a
, 
ETHER_ADDR_LEN
);

870 
	`mem£t
(
iw
->
•y_quÆ
, 0, (iw->spy_qual));

873 
	}
}

876 
	$wl_iw_gë_•y
(

877 
√t_devi˚
 *
dev
,

878 
iw_ªque°_öfo
 *
öfo
,

879 
iw_poöt
 *
dwrq
,

880 *
exåa


883 
wl_iw_t
 *
iw
 = 
	`IW_DEV_IF
(
dev
);

884 
sockaddr
 *
addr
 = (sockadd∏*Ë
exåa
;

885 
iw_quÆôy
 *
quÆ
 = (iw_quÆôy *Ë&
addr
[
iw
->
•y_num
];

886 
i
;

888 
	`WL_TRACE
(("%s: SIOCGIWSPY\n", 
dev
->
«me
));

890 i‡(!
exåa
)

891  -
EINVAL
;

893 
dwrq
->
Àngth
 = 
iw
->
•y_num
;

894 
i
 = 0; i < 
iw
->
•y_num
; i++) {

895 
	`mem˝y
(
addr
[
i
].
ß_d©a
, &
iw
->
•y_addr
[i], 
ETHER_ADDR_LEN
);

896 
addr
[
i
].
ß_Ámûy
 = 
AF_UNIX
;

897 
	`mem˝y
(&
quÆ
[
i
], &
iw
->
•y_quÆ
[i], (
iw_quÆôy
));

898 
iw
->
•y_quÆ
[
i
].
upd©ed
 = 0;

902 
	}
}

905 
	$wl_iw_£t_w≠
(

906 
√t_devi˚
 *
dev
,

907 
iw_ªque°_öfo
 *
öfo
,

908 
sockaddr
 *
awrq
,

909 *
exåa


912 
îr‹
 = -
EINVAL
;

914 
	`WL_TRACE
(("%s: SIOCSIWAP\n", 
dev
->
«me
));

916 i‡(
awrq
->
ß_Ámûy
 !
ARPHRD_ETHER
) {

917 
	`WL_ERROR
(("%s: InvÆid Hódî...ß_Ámûy\n", 
__FUNCTION__
));

918  -
EINVAL
;

922 i‡(
	`ETHER_ISBCAST
(
awrq
->
ß_d©a
Ë|| 
	`ETHER_ISNULLADDR
(awrq->sa_data)) {

923 
scb_vÆ_t
 
scbvÆ
;

924 
	`bzîo
(&
scbvÆ
, (
scb_vÆ_t
));

925 i‡((
îr‹
 = 
	`dev_wlc_io˘l
(
dev
, 
WLC_DISASSOC
, &
scbvÆ
, (
scb_vÆ_t
)))) {

926 
	`WL_ERROR
(("%s: WLC_DISASSOC faûed (%d).\n", 
__FUNCTION__
, 
îr‹
));

934 i‡((
îr‹
 = 
	`dev_wlc_io˘l
(
dev
, 
WLC_REASSOC
, 
awrq
->
ß_d©a
, 
ETHER_ADDR_LEN
))) {

935 
	`WL_ERROR
(("%s: WLC_REASSOC faûed (%d).\n", 
__FUNCTION__
, 
îr‹
));

936  
îr‹
;

940 
	}
}

943 
	$wl_iw_gë_w≠
(

944 
√t_devi˚
 *
dev
,

945 
iw_ªque°_öfo
 *
öfo
,

946 
sockaddr
 *
awrq
,

947 *
exåa


950 
	`WL_TRACE
(("%s: SIOCGIWAP\n", 
dev
->
«me
));

952 
awrq
->
ß_Ámûy
 = 
ARPHRD_ETHER
;

953 
	`mem£t
(
awrq
->
ß_d©a
, 0, 
ETHER_ADDR_LEN
);

956 (Ë
	`dev_wlc_io˘l
(
dev
, 
WLC_GET_BSSID
, 
awrq
->
ß_d©a
, 
ETHER_ADDR_LEN
);

959 
	}
}

961 #i‡
WIRELESS_EXT
 > 17

963 
	$wl_iw_mlme
(

964 
√t_devi˚
 *
dev
,

965 
iw_ªque°_öfo
 *
öfo
,

966 
sockaddr
 *
awrq
,

967 *
exåa


970 
iw_mlme
 *
mlme
;

971 
scb_vÆ_t
 
scbvÆ
;

972 
îr‹
 = -
EINVAL
;

974 
	`WL_TRACE
(("%s: SIOCSIWMLME\n", 
dev
->
«me
));

976 
mlme
 = (
iw_mlme
 *)
exåa
;

977 i‡(
mlme
 =
NULL
) {

978 
	`WL_ERROR
(("Invalid ioctl data.\n"));

979  
îr‹
;

982 
scbvÆ
.
vÆ
 = 
mlme
->
ªas⁄_code
;

983 
	`bc›y
(&
mlme
->
addr
.
ß_d©a
, &
scbvÆ
.
ó
, 
ETHER_ADDR_LEN
);

985 i‡(
mlme
->
cmd
 =
IW_MLME_DISASSOC
) {

986 
scbvÆ
.
vÆ
 = 
	`htod32
(scbval.val);

987 
îr‹
 = 
	`dev_wlc_io˘l
(
dev
, 
WLC_DISASSOC
, &
scbvÆ
, (
scb_vÆ_t
));

989 i‡(
mlme
->
cmd
 =
IW_MLME_DEAUTH
) {

990 
scbvÆ
.
vÆ
 = 
	`htod32
(scbval.val);

991 
îr‹
 = 
	`dev_wlc_io˘l
(
dev
, 
WLC_SCB_DEAUTHENTICATE_FOR_REASON
, &
scbvÆ
,

992 (
scb_vÆ_t
));

995 
	`WL_ERROR
(("%s: InvÆid io˘»d©a.\n", 
__FUNCTION__
));

996  
îr‹
;

999  
îr‹
;

1000 
	}
}

1004 
	$wl_iw_gë_≠li°
(

1005 
√t_devi˚
 *
dev
,

1006 
iw_ªque°_öfo
 *
öfo
,

1007 
iw_poöt
 *
dwrq
,

1008 *
exåa


1011 
wl_sˇn_ªsu…s_t
 *
li°
;

1012 
sockaddr
 *
addr
 = (sockadd∏*Ë
exåa
;

1013 
iw_quÆôy
 
quÆ
[
IW_MAX_AP
];

1014 
wl_bss_öfo_t
 *
bi
 = 
NULL
;

1015 
îr‹
, 
i
;

1016 
uöt
 
buÊí
 = 
dwrq
->
Àngth
;

1018 
	`WL_TRACE
(("%s: SIOCGIWAPLIST\n", 
dev
->
«me
));

1020 i‡(!
exåa
)

1021  -
EINVAL
;

1024 
li°
 = 
	`kmÆloc
(
buÊí
, 
GFP_KERNEL
);

1025 i‡(!
li°
)

1026  -
ENOMEM
;

1027 
	`mem£t
(
li°
, 0, 
buÊí
);

1028 
li°
->
buÊí
 = 
	`htod32
(buflen);

1029 i‡((
îr‹
 = 
	`dev_wlc_io˘l
(
dev
, 
WLC_SCAN_RESULTS
, 
li°
, 
buÊí
))) {

1030 
	`WL_ERROR
(("%d: Sˇ¿ªsu…†îr‹ %d\n", 
__LINE__
, 
îr‹
));

1031 
	`k‰ì
(
li°
);

1032  
îr‹
;

1034 
li°
->
buÊí
 = 
	`dtoh32
(list->buflen);

1035 
li°
->
vîsi⁄
 = 
	`dtoh32
(list->version);

1036 
li°
->
cou¡
 = 
	`dtoh32
(list->count);

1037 
	`ASSERT
(
li°
->
vîsi⁄
 =
WL_BSS_INFO_VERSION
);

1039 
i
 = 0, 
dwrq
->
Àngth
 = 0; i < 
li°
->
cou¡
 && dwrq->Àngth < 
IW_MAX_AP
; i++) {

1040 
bi
 = bò? (
wl_bss_öfo_t
 *)((
uöçå
)bò+ 
	`dtoh32
(bi->
Àngth
)Ë: 
li°
->
bss_öfo
;

1041 
	`ASSERT
(((
uöçå
)
bi
 + 
	`dtoh32
(bi->
Àngth
)Ë<((uöçå)
li°
 +

1042 
buÊí
));

1045 i‡(!(
	`dtoh16
(
bi
->
ˇ∑bûôy
Ë& 
DOT11_CAP_ESS
))

1049 
	`mem˝y
(
addr
[
dwrq
->
Àngth
].
ß_d©a
, &
bi
->
BSSID
, 
ETHER_ADDR_LEN
);

1050 
addr
[
dwrq
->
Àngth
].
ß_Ámûy
 = 
ARPHRD_ETHER
;

1051 
quÆ
[
dwrq
->
Àngth
].quÆ = 
	`rssi_to_quÆ
(
	`dtoh16
(
bi
->
RSSI
));

1052 
quÆ
[
dwrq
->
Àngth
].
Àvñ
 = 0x100 + 
	`dtoh16
(
bi
->
RSSI
);

1053 
quÆ
[
dwrq
->
Àngth
].
noi£
 = 0x100 + 
bi
->
phy_noi£
;

1056 #i‡
WIRELESS_EXT
 > 18

1057 
quÆ
[
dwrq
->
Àngth
].
upd©ed
 = 
IW_QUAL_ALL_UPDATED
 | 
IW_QUAL_DBM
;

1059 
quÆ
[
dwrq
->
Àngth
].
upd©ed
 = 7;

1062 
dwrq
->
Àngth
++;

1065 
	`k‰ì
(
li°
);

1067 i‡(
dwrq
->
Àngth
) {

1068 
	`mem˝y
(&
addr
[
dwrq
->
Àngth
], 
quÆ
, (
iw_quÆôy
) * dwrq->length);

1070 
dwrq
->
Êags
 = 1;

1074 
	}
}

1077 
	$wl_iw_isˇn_gë_≠li°
(

1078 
√t_devi˚
 *
dev
,

1079 
iw_ªque°_öfo
 *
öfo
,

1080 
iw_poöt
 *
dwrq
,

1081 *
exåa


1084 
wl_sˇn_ªsu…s_t
 *
li°
;

1085 
isˇn_buf_t
 * 
buf
;

1086 
isˇn_öfo_t
 *
isˇn
 = 
g_isˇn
;

1088 
sockaddr
 *
addr
 = (sockadd∏*Ë
exåa
;

1089 
iw_quÆôy
 
quÆ
[
IW_MAX_AP
];

1090 
wl_bss_öfo_t
 *
bi
 = 
NULL
;

1091 
i
;

1093 
	`WL_TRACE
(("%s: SIOCGIWAPLIST\n", 
dev
->
«me
));

1095 i‡(!
exåa
)

1096  -
EINVAL
;

1098 i‡((!
isˇn
Ë|| (isˇn->
sysioc_pid
 < 0)) {

1099  
	`wl_iw_gë_≠li°
(
dev
, 
öfo
, 
dwrq
, 
exåa
);

1102 
buf
 = 
isˇn
->
li°_hdr
;

1104 
buf
) {

1105 
li°
 = &((
wl_isˇn_ªsu…s_t
*)
buf
->
isˇn_buf
)->
ªsu…s
;

1106 
	`ASSERT
(
li°
->
vîsi⁄
 =
WL_BSS_INFO_VERSION
);

1108 
bi
 = 
NULL
;

1109 
i
 = 0, 
dwrq
->
Àngth
 = 0; i < 
li°
->
cou¡
 && dwrq->Àngth < 
IW_MAX_AP
; i++) {

1110 
bi
 = bò? (
wl_bss_öfo_t
 *)((
uöçå
)bò+ 
	`dtoh32
(bi->
Àngth
)Ë: 
li°
->
bss_öfo
;

1111 
	`ASSERT
(((
uöçå
)
bi
 + 
	`dtoh32
(bi->
Àngth
)Ë<((uöçå)
li°
 +

1112 
WLC_IW_ISCAN_MAXLEN
));

1115 i‡(!(
	`dtoh16
(
bi
->
ˇ∑bûôy
Ë& 
DOT11_CAP_ESS
))

1119 
	`mem˝y
(
addr
[
dwrq
->
Àngth
].
ß_d©a
, &
bi
->
BSSID
, 
ETHER_ADDR_LEN
);

1120 
addr
[
dwrq
->
Àngth
].
ß_Ámûy
 = 
ARPHRD_ETHER
;

1121 
quÆ
[
dwrq
->
Àngth
].quÆ = 
	`rssi_to_quÆ
(
	`dtoh16
(
bi
->
RSSI
));

1122 
quÆ
[
dwrq
->
Àngth
].
Àvñ
 = 0x100 + 
	`dtoh16
(
bi
->
RSSI
);

1123 
quÆ
[
dwrq
->
Àngth
].
noi£
 = 0x100 + 
bi
->
phy_noi£
;

1126 #i‡
WIRELESS_EXT
 > 18

1127 
quÆ
[
dwrq
->
Àngth
].
upd©ed
 = 
IW_QUAL_ALL_UPDATED
 | 
IW_QUAL_DBM
;

1129 
quÆ
[
dwrq
->
Àngth
].
upd©ed
 = 7;

1132 
dwrq
->
Àngth
++;

1134 
buf
 = buf->
√xt
;

1136 i‡(
dwrq
->
Àngth
) {

1137 
	`mem˝y
(&
addr
[
dwrq
->
Àngth
], 
quÆ
, (
iw_quÆôy
) * dwrq->length);

1139 
dwrq
->
Êags
 = 1;

1143 
	}
}

1145 #i‡
WIRELESS_EXT
 > 13

1147 
	$wl_iw_£t_sˇn
(

1148 
√t_devi˚
 *
dev
,

1149 
iw_ªque°_öfo
 *
öfo
,

1150 
iwªq_d©a
 *
wrqu
,

1151 *
exåa


1154 
wlc_ssid_t
 
ssid
;

1156 
	`WL_TRACE
(("%s: SIOCSIWSCAN\n", 
dev
->
«me
));

1159 
	`mem£t
(&
ssid
, 0, (ssid));

1161 #i‡
WIRELESS_EXT
 > 17

1163 i‡(
wrqu
->
d©a
.
Àngth
 =(
iw_sˇn_ªq
)) {

1164 i‡(
wrqu
->
d©a
.
Êags
 & 
IW_SCAN_THIS_ESSID
) {

1165 
iw_sˇn_ªq
 *
ªq
 = (iw_sˇn_ªq *)
exåa
;

1166 
ssid
.
SSID_Àn
 = 
	`MIN
((ssid.
SSID
), 
ªq
->
essid_Àn
);

1167 
	`mem˝y
(
ssid
.
SSID
, 
ªq
->
essid
, ssid.
SSID_Àn
);

1168 
ssid
.
SSID_Àn
 = 
	`htod32
(ssid.SSID_len);

1173 (Ë
	`dev_wlc_io˘l
(
dev
, 
WLC_SCAN
, &
ssid
, (ssid));

1176 
	}
}

1179 
	$wl_iw_isˇn_£t_sˇn
(

1180 
√t_devi˚
 *
dev
,

1181 
iw_ªque°_öfo
 *
öfo
,

1182 
iwªq_d©a
 *
wrqu
,

1183 *
exåa


1186 
wlc_ssid_t
 
ssid
;

1187 
isˇn_öfo_t
 *
isˇn
 = 
g_isˇn
;

1189 
	`WL_TRACE
(("%s: SIOCSIWSCAN\n", 
dev
->
«me
));

1192 i‡((!
isˇn
Ë|| (isˇn->
sysioc_pid
 < 0)) {

1193  
	`wl_iw_£t_sˇn
(
dev
, 
öfo
, 
wrqu
, 
exåa
);

1195 i‡(
isˇn
->
isˇn_°©e
 =
ISCAN_STATE_SCANING
) {

1200 
	`mem£t
(&
ssid
, 0, (ssid));

1202 #i‡
WIRELESS_EXT
 > 17

1204 i‡(
wrqu
->
d©a
.
Àngth
 =(
iw_sˇn_ªq
)) {

1205 i‡(
wrqu
->
d©a
.
Êags
 & 
IW_SCAN_THIS_ESSID
) {

1206 
iw_sˇn_ªq
 *
ªq
 = (iw_sˇn_ªq *)
exåa
;

1207 
ssid
.
SSID_Àn
 = 
	`MIN
((ssid.
SSID
), 
ªq
->
essid_Àn
);

1208 
	`mem˝y
(
ssid
.
SSID
, 
ªq
->
essid
, ssid.
SSID_Àn
);

1209 
ssid
.
SSID_Àn
 = 
	`htod32
(ssid.SSID_len);

1214 
isˇn
->
li°_cur
 = isˇn->
li°_hdr
;

1215 
isˇn
->
isˇn_°©e
 = 
ISCAN_STATE_SCANING
;

1218 
	`wl_iw_£t_evít_mask
(
dev
);

1219 
	`wl_iw_isˇn
(
isˇn
, &
ssid
, 
WL_SCAN_ACTION_START
);

1221 
isˇn
->
timî
.
expúes
 = 
jiffõs
 + 
	`m£cs_to_jiffõs
(isˇn->
timî_ms
);

1222 
	`add_timî
(&
isˇn
->
timî
);

1223 
isˇn
->
timî_⁄
 = 1;

1226 
	}
}

1228 #i‡
WIRELESS_EXT
 > 17

1229 
boﬁ


1230 
	$õ_is_w∑_õ
(
uöt8
 **
w∑õ
, uöt8 **
évs
, *
évs_Àn
)

1234 
uöt8
 *
õ
 = *
w∑õ
;

1237 i‡((
õ
[1] >= 6) &&

1238 !
	`bcmp
((c⁄° *)&
õ
[2], (c⁄° *)(
WPA_OUI
 "\x01"), 4)) {

1239  
TRUE
;

1243 
õ
 += ie[1] + 2;

1245 *
évs_Àn
 -()(
õ
 - *
évs
);

1247 *
évs
 = 
õ
;

1248  
FALSE
;

1249 
	}
}

1251 
boﬁ


1252 
	$õ_is_wps_õ
(
uöt8
 **
wpsõ
, uöt8 **
évs
, *
évs_Àn
)

1256 
uöt8
 *
õ
 = *
wpsõ
;

1259 i‡((
õ
[1] >= 4) &&

1260 !
	`bcmp
((c⁄° *)&
õ
[2], (c⁄° *)(
WPA_OUI
 "\x04"), 4)) {

1261  
TRUE
;

1265 
õ
 += ie[1] + 2;

1267 *
évs_Àn
 -()(
õ
 - *
évs
);

1269 *
évs
 = 
õ
;

1270  
FALSE
;

1271 
	}
}

1276 
	$wl_iw_h™dÀ_sˇƒesu…s_õs
(**
evít_p
, *
íd
,

1277 
iw_ªque°_öfo
 *
öfo
, 
wl_bss_öfo_t
 *
bi
)

1279 #i‡
WIRELESS_EXT
 > 17

1280 
iw_evít
 
iwe
;

1281 *
evít
;

1283 
evít
 = *
evít_p
;

1284 i‡(
bi
->
õ_Àngth
) {

1286 
bcm_év_t
 *
õ
;

1287 
uöt8
 *
±r
 = ((uöt8 *)
bi
Ë+ (
wl_bss_öfo_t
);

1288 
±r_Àn
 = 
bi
->
õ_Àngth
;

1290 i‡((
õ
 = 
	`bcm_∑r£_évs
(
±r
, 
±r_Àn
, 
DOT11_MNG_RSN_ID
))) {

1291 
iwe
.
cmd
 = 
IWEVGENIE
;

1292 
iwe
.
u
.
d©a
.
Àngth
 = 
õ
->
Àn
 + 2;

1293 
evít
 = 
	`IWE_STREAM_ADD_POINT
(
öfo
,Évít, 
íd
, &
iwe
, (*)
õ
);

1295 
±r
 = ((
uöt8
 *)
bi
Ë+ (
wl_bss_öfo_t
);

1297 #i‡
	`deföed
(
WLFBT
)

1298 i‡((
õ
 = 
	`bcm_∑r£_évs
(
±r
, 
±r_Àn
, 
DOT11_MNG_MDIE_ID
))) {

1299 
iwe
.
cmd
 = 
IWEVGENIE
;

1300 
iwe
.
u
.
d©a
.
Àngth
 = 
õ
->
Àn
 + 2;

1301 
evít
 = 
	`IWE_STREAM_ADD_POINT
(
öfo
,Évít, 
íd
, &
iwe
, (*)
õ
);

1303 
±r
 = ((
uöt8
 *)
bi
Ë+ (
wl_bss_öfo_t
);

1306 (
õ
 = 
	`bcm_∑r£_évs
(
±r
, 
±r_Àn
, 
DOT11_MNG_WPA_ID
))) {

1308 i‡(
	`õ_is_wps_õ
(((
uöt8
 **)&
õ
), &
±r
, &
±r_Àn
)) {

1309 
iwe
.
cmd
 = 
IWEVGENIE
;

1310 
iwe
.
u
.
d©a
.
Àngth
 = 
õ
->
Àn
 + 2;

1311 
evít
 = 
	`IWE_STREAM_ADD_POINT
(
öfo
,Évít, 
íd
, &
iwe
, (*)
õ
);

1316 
±r
 = ((
uöt8
 *)
bi
Ë+ (
wl_bss_öfo_t
);

1317 
±r_Àn
 = 
bi
->
õ_Àngth
;

1318 (
õ
 = 
	`bcm_∑r£_évs
(
±r
, 
±r_Àn
, 
DOT11_MNG_WPA_ID
))) {

1319 i‡(
	`õ_is_w∑_õ
(((
uöt8
 **)&
õ
), &
±r
, &
±r_Àn
)) {

1320 
iwe
.
cmd
 = 
IWEVGENIE
;

1321 
iwe
.
u
.
d©a
.
Àngth
 = 
õ
->
Àn
 + 2;

1322 
evít
 = 
	`IWE_STREAM_ADD_POINT
(
öfo
,Évít, 
íd
, &
iwe
, (*)
õ
);

1327 *
evít_p
 = 
evít
;

1332 
	}
}

1334 
	$wl_iw_gë_sˇn
(

1335 
√t_devi˚
 *
dev
,

1336 
iw_ªque°_öfo
 *
öfo
,

1337 
iw_poöt
 *
dwrq
,

1338 *
exåa


1341 
ch™√l_öfo_t
 
ci
;

1342 
wl_sˇn_ªsu…s_t
 *
li°
;

1343 
iw_evít
 
iwe
;

1344 
wl_bss_öfo_t
 *
bi
 = 
NULL
;

1345 
îr‹
, 
i
, 
j
;

1346 *
evít
 = 
exåa
, *
íd
 =Éxå®+ 
dwrq
->
Àngth
, *
vÆue
;

1347 
uöt
 
buÊí
 = 
dwrq
->
Àngth
;

1349 
	`WL_TRACE
(("%s: SIOCGIWSCAN\n", 
dev
->
«me
));

1351 i‡(!
exåa
)

1352  -
EINVAL
;

1355 i‡((
îr‹
 = 
	`dev_wlc_io˘l
(
dev
, 
WLC_GET_CHANNEL
, &
ci
, (ci))))

1356  
îr‹
;

1357 
ci
.
sˇn_ch™√l
 = 
	`dtoh32
(ci.scan_channel);

1358 i‡(
ci
.
sˇn_ch™√l
)

1359  -
EAGAIN
;

1362 
li°
 = 
	`kmÆloc
(
buÊí
, 
GFP_KERNEL
);

1363 i‡(!
li°
)

1364  -
ENOMEM
;

1365 
	`mem£t
(
li°
, 0, 
buÊí
);

1366 
li°
->
buÊí
 = 
	`htod32
(buflen);

1367 i‡((
îr‹
 = 
	`dev_wlc_io˘l
(
dev
, 
WLC_SCAN_RESULTS
, 
li°
, 
buÊí
))) {

1368 
	`k‰ì
(
li°
);

1369  
îr‹
;

1371 
li°
->
buÊí
 = 
	`dtoh32
(list->buflen);

1372 
li°
->
vîsi⁄
 = 
	`dtoh32
(list->version);

1373 
li°
->
cou¡
 = 
	`dtoh32
(list->count);

1375 
	`ASSERT
(
li°
->
vîsi⁄
 =
WL_BSS_INFO_VERSION
);

1377 
i
 = 0; i < 
li°
->
cou¡
 && i < 
IW_MAX_AP
; i++) {

1378 
bi
 = bò? (
wl_bss_öfo_t
 *)((
uöçå
)bò+ 
	`dtoh32
(bi->
Àngth
)Ë: 
li°
->
bss_öfo
;

1379 
	`ASSERT
(((
uöçå
)
bi
 + 
	`dtoh32
(bi->
Àngth
)Ë<((uöçå)
li°
 +

1380 
buÊí
));

1383 
iwe
.
cmd
 = 
SIOCGIWAP
;

1384 
iwe
.
u
.
≠_addr
.
ß_Ámûy
 = 
ARPHRD_ETHER
;

1385 
	`mem˝y
(
iwe
.
u
.
≠_addr
.
ß_d©a
, &
bi
->
BSSID
, 
ETHER_ADDR_LEN
);

1386 
evít
 = 
	`IWE_STREAM_ADD_EVENT
(
öfo
,Évít, 
íd
, &
iwe
, 
IW_EV_ADDR_LEN
);

1389 
iwe
.
u
.
d©a
.
Àngth
 = 
	`dtoh32
(
bi
->
SSID_Àn
);

1390 
iwe
.
cmd
 = 
SIOCGIWESSID
;

1391 
iwe
.
u
.
d©a
.
Êags
 = 1;

1392 
evít
 = 
	`IWE_STREAM_ADD_POINT
(
öfo
,Évít, 
íd
, &
iwe
, 
bi
->
SSID
);

1395 i‡(
	`dtoh16
(
bi
->
ˇ∑bûôy
Ë& (
DOT11_CAP_ESS
 | 
DOT11_CAP_IBSS
)) {

1396 
iwe
.
cmd
 = 
SIOCGIWMODE
;

1397 i‡(
	`dtoh16
(
bi
->
ˇ∑bûôy
Ë& 
DOT11_CAP_ESS
)

1398 
iwe
.
u
.
mode
 = 
IW_MODE_INFRA
;

1400 
iwe
.
u
.
mode
 = 
IW_MODE_ADHOC
;

1401 
evít
 = 
	`IWE_STREAM_ADD_EVENT
(
öfo
,Évít, 
íd
, &
iwe
, 
IW_EV_UINT_LEN
);

1405 
iwe
.
cmd
 = 
SIOCGIWFREQ
;

1406 
iwe
.
u
.
‰eq
.
m
 = 
	`wf_ch™√l2mhz
(
	`CHSPEC_CHANNEL
(
bi
->
ch™•ec
),

1407 
	`CHSPEC_CHANNEL
(
bi
->
ch™•ec
Ë<
CH_MAX_2G_CHANNEL
 ?

1408 
WF_CHAN_FACTOR_2_4_G
 : 
WF_CHAN_FACTOR_5_G
);

1409 
iwe
.
u
.
‰eq
.
e
 = 6;

1410 
evít
 = 
	`IWE_STREAM_ADD_EVENT
(
öfo
,Évít, 
íd
, &
iwe
, 
IW_EV_FREQ_LEN
);

1413 
iwe
.
cmd
 = 
IWEVQUAL
;

1414 
iwe
.
u
.
quÆ
.quÆ = 
	`rssi_to_quÆ
(
	`dtoh16
(
bi
->
RSSI
));

1415 
iwe
.
u
.
quÆ
.
Àvñ
 = 0x100 + 
	`dtoh16
(
bi
->
RSSI
);

1416 
iwe
.
u
.
quÆ
.
noi£
 = 0x100 + 
bi
->
phy_noi£
;

1417 
evít
 = 
	`IWE_STREAM_ADD_EVENT
(
öfo
,Évít, 
íd
, &
iwe
, 
IW_EV_QUAL_LEN
);

1420 
	`wl_iw_h™dÀ_sˇƒesu…s_õs
(&
evít
, 
íd
, 
öfo
, 
bi
);

1423 
iwe
.
cmd
 = 
SIOCGIWENCODE
;

1424 i‡(
	`dtoh16
(
bi
->
ˇ∑bûôy
Ë& 
DOT11_CAP_PRIVACY
)

1425 
iwe
.
u
.
d©a
.
Êags
 = 
IW_ENCODE_ENABLED
 | 
IW_ENCODE_NOKEY
;

1427 
iwe
.
u
.
d©a
.
Êags
 = 
IW_ENCODE_DISABLED
;

1428 
iwe
.
u
.
d©a
.
Àngth
 = 0;

1429 
evít
 = 
	`IWE_STREAM_ADD_POINT
(
öfo
,Évít, 
íd
, &
iwe
, (*)event);

1432 i‡(
bi
->
øã£t
.
cou¡
) {

1433 
vÆue
 = 
evít
 + 
IW_EV_LCP_LEN
;

1434 
iwe
.
cmd
 = 
SIOCGIWRATE
;

1436 
iwe
.
u
.
bôøã
.
fixed
 = iwe.u.bôøã.
dißbÀd
 = 0;

1437 
j
 = 0; j < 
bi
->
øã£t
.
cou¡
 && j < 
IW_MAX_BITRATES
; j++) {

1438 
iwe
.
u
.
bôøã
.
vÆue
 = (
bi
->
øã£t
.
øãs
[
j
] & 0x7f) * 500000;

1439 
vÆue
 = 
	`IWE_STREAM_ADD_VALUE
(
öfo
, 
evít
, vÆue, 
íd
, &
iwe
,

1440 
IW_EV_PARAM_LEN
);

1442 
evít
 = 
vÆue
;

1446 
	`k‰ì
(
li°
);

1448 
dwrq
->
Àngth
 = 
evít
 - 
exåa
;

1449 
dwrq
->
Êags
 = 0;

1452 
	}
}

1455 
	$wl_iw_isˇn_gë_sˇn
(

1456 
√t_devi˚
 *
dev
,

1457 
iw_ªque°_öfo
 *
öfo
,

1458 
iw_poöt
 *
dwrq
,

1459 *
exåa


1462 
wl_sˇn_ªsu…s_t
 *
li°
;

1463 
iw_evít
 
iwe
;

1464 
wl_bss_öfo_t
 *
bi
 = 
NULL
;

1465 
ii
, 
j
;

1466 
≠˙t
;

1467 *
evít
 = 
exåa
, *
íd
 =Éxå®+ 
dwrq
->
Àngth
, *
vÆue
;

1468 
isˇn_öfo_t
 *
isˇn
 = 
g_isˇn
;

1469 
isˇn_buf_t
 * 
p_buf
;

1471 
	`WL_TRACE
(("%s: SIOCGIWSCAN\n", 
dev
->
«me
));

1473 i‡(!
exåa
)

1474  -
EINVAL
;

1477 i‡((!
isˇn
Ë|| (isˇn->
sysioc_pid
 < 0)) {

1478  
	`wl_iw_gë_sˇn
(
dev
, 
öfo
, 
dwrq
, 
exåa
);

1482 i‡(
isˇn
->
isˇn_°©e
 =
ISCAN_STATE_SCANING
)

1483  -
EAGAIN
;

1485 
≠˙t
 = 0;

1486 
p_buf
 = 
isˇn
->
li°_hdr
;

1488 
p_buf
 !
isˇn
->
li°_cur
) {

1489 
li°
 = &((
wl_isˇn_ªsu…s_t
*)
p_buf
->
isˇn_buf
)->
ªsu…s
;

1491 i‡(
li°
->
vîsi⁄
 !
WL_BSS_INFO_VERSION
) {

1492 
	`WL_ERROR
(("li°->vîsi⁄ %d !WL_BSS_INFO_VERSION\n", 
li°
->
vîsi⁄
));

1495 
bi
 = 
NULL
;

1496 
ii
 = 0; iò< 
li°
->
cou¡
 && 
≠˙t
 < 
IW_MAX_AP
;ápcnt++, ii++) {

1497 
bi
 = bò? (
wl_bss_öfo_t
 *)((
uöçå
)bò+ 
	`dtoh32
(bi->
Àngth
)Ë: 
li°
->
bss_öfo
;

1498 
	`ASSERT
(((
uöçå
)
bi
 + 
	`dtoh32
(bi->
Àngth
)Ë<((uöçå)
li°
 +

1499 
WLC_IW_ISCAN_MAXLEN
));

1502 i‡(
evít
 + 
ETHER_ADDR_LEN
 + 
bi
->
SSID_Àn
 + 
IW_EV_UINT_LEN
 + 
IW_EV_FREQ_LEN
 +

1503 
IW_EV_QUAL_LEN
 >
íd
)

1504  -
E2BIG
;

1506 
iwe
.
cmd
 = 
SIOCGIWAP
;

1507 
iwe
.
u
.
≠_addr
.
ß_Ámûy
 = 
ARPHRD_ETHER
;

1508 
	`mem˝y
(
iwe
.
u
.
≠_addr
.
ß_d©a
, &
bi
->
BSSID
, 
ETHER_ADDR_LEN
);

1509 
evít
 = 
	`IWE_STREAM_ADD_EVENT
(
öfo
,Évít, 
íd
, &
iwe
, 
IW_EV_ADDR_LEN
);

1512 
iwe
.
u
.
d©a
.
Àngth
 = 
	`dtoh32
(
bi
->
SSID_Àn
);

1513 
iwe
.
cmd
 = 
SIOCGIWESSID
;

1514 
iwe
.
u
.
d©a
.
Êags
 = 1;

1515 
evít
 = 
	`IWE_STREAM_ADD_POINT
(
öfo
,Évít, 
íd
, &
iwe
, 
bi
->
SSID
);

1518 i‡(
	`dtoh16
(
bi
->
ˇ∑bûôy
Ë& (
DOT11_CAP_ESS
 | 
DOT11_CAP_IBSS
)) {

1519 
iwe
.
cmd
 = 
SIOCGIWMODE
;

1520 i‡(
	`dtoh16
(
bi
->
ˇ∑bûôy
Ë& 
DOT11_CAP_ESS
)

1521 
iwe
.
u
.
mode
 = 
IW_MODE_INFRA
;

1523 
iwe
.
u
.
mode
 = 
IW_MODE_ADHOC
;

1524 
evít
 = 
	`IWE_STREAM_ADD_EVENT
(
öfo
,Évít, 
íd
, &
iwe
, 
IW_EV_UINT_LEN
);

1528 
iwe
.
cmd
 = 
SIOCGIWFREQ
;

1529 
iwe
.
u
.
‰eq
.
m
 = 
	`wf_ch™√l2mhz
(
	`CHSPEC_CHANNEL
(
bi
->
ch™•ec
),

1530 
	`CHSPEC_CHANNEL
(
bi
->
ch™•ec
Ë<
CH_MAX_2G_CHANNEL
 ?

1531 
WF_CHAN_FACTOR_2_4_G
 : 
WF_CHAN_FACTOR_5_G
);

1532 
iwe
.
u
.
‰eq
.
e
 = 6;

1533 
evít
 = 
	`IWE_STREAM_ADD_EVENT
(
öfo
,Évít, 
íd
, &
iwe
, 
IW_EV_FREQ_LEN
);

1536 
iwe
.
cmd
 = 
IWEVQUAL
;

1537 
iwe
.
u
.
quÆ
.quÆ = 
	`rssi_to_quÆ
(
	`dtoh16
(
bi
->
RSSI
));

1538 
iwe
.
u
.
quÆ
.
Àvñ
 = 0x100 + 
	`dtoh16
(
bi
->
RSSI
);

1539 
iwe
.
u
.
quÆ
.
noi£
 = 0x100 + 
bi
->
phy_noi£
;

1540 
evít
 = 
	`IWE_STREAM_ADD_EVENT
(
öfo
,Évít, 
íd
, &
iwe
, 
IW_EV_QUAL_LEN
);

1543 
	`wl_iw_h™dÀ_sˇƒesu…s_õs
(&
evít
, 
íd
, 
öfo
, 
bi
);

1546 
iwe
.
cmd
 = 
SIOCGIWENCODE
;

1547 i‡(
	`dtoh16
(
bi
->
ˇ∑bûôy
Ë& 
DOT11_CAP_PRIVACY
)

1548 
iwe
.
u
.
d©a
.
Êags
 = 
IW_ENCODE_ENABLED
 | 
IW_ENCODE_NOKEY
;

1550 
iwe
.
u
.
d©a
.
Êags
 = 
IW_ENCODE_DISABLED
;

1551 
iwe
.
u
.
d©a
.
Àngth
 = 0;

1552 
evít
 = 
	`IWE_STREAM_ADD_POINT
(
öfo
,Évít, 
íd
, &
iwe
, (*)event);

1555 i‡(
bi
->
øã£t
.
cou¡
 <(bi->øã£t.
øãs
)) {

1556 i‡(
evít
 + 
IW_MAX_BITRATES
*
IW_EV_PARAM_LEN
 >
íd
)

1557  -
E2BIG
;

1559 
vÆue
 = 
evít
 + 
IW_EV_LCP_LEN
;

1560 
iwe
.
cmd
 = 
SIOCGIWRATE
;

1562 
iwe
.
u
.
bôøã
.
fixed
 = iwe.u.bôøã.
dißbÀd
 = 0;

1563 
j
 = 0; j < 
bi
->
øã£t
.
cou¡
 && j < 
IW_MAX_BITRATES
; j++) {

1564 
iwe
.
u
.
bôøã
.
vÆue
 = (
bi
->
øã£t
.
øãs
[
j
] & 0x7f) * 500000;

1565 
vÆue
 = 
	`IWE_STREAM_ADD_VALUE
(
öfo
, 
evít
, vÆue, 
íd
, &
iwe
,

1566 
IW_EV_PARAM_LEN
);

1568 
evít
 = 
vÆue
;

1571 
p_buf
 =Ö_buf->
√xt
;

1574 
dwrq
->
Àngth
 = 
evít
 - 
exåa
;

1575 
dwrq
->
Êags
 = 0;

1578 
	}
}

1584 
	$wl_iw_£t_essid
(

1585 
√t_devi˚
 *
dev
,

1586 
iw_ªque°_öfo
 *
öfo
,

1587 
iw_poöt
 *
dwrq
,

1588 *
exåa


1591 
wlc_ssid_t
 
ssid
;

1592 
îr‹
;

1594 
	`WL_TRACE
(("%s: SIOCSIWESSID\n", 
dev
->
«me
));

1597 
	`mem£t
(&
ssid
, 0, (ssid));

1598 i‡(
dwrq
->
Àngth
 && 
exåa
) {

1599 #i‡
WIRELESS_EXT
 > 20

1600 
ssid
.
SSID_Àn
 = 
	`MIN
((ssid.
SSID
), 
dwrq
->
Àngth
);

1602 
ssid
.
SSID_Àn
 = 
	`MIN
((ssid.
SSID
), 
dwrq
->
Àngth
-1);

1604 
	`mem˝y
(
ssid
.
SSID
, 
exåa
, ssid.
SSID_Àn
);

1605 
ssid
.
SSID_Àn
 = 
	`htod32
(ssid.SSID_len);

1607 i‡((
îr‹
 = 
	`dev_wlc_io˘l
(
dev
, 
WLC_SET_SSID
, &
ssid
, (ssid))))

1608  
îr‹
;

1612 
scb_vÆ_t
 
scbvÆ
;

1613 
	`bzîo
(&
scbvÆ
, (
scb_vÆ_t
));

1614 i‡((
îr‹
 = 
	`dev_wlc_io˘l
(
dev
, 
WLC_DISASSOC
, &
scbvÆ
, (
scb_vÆ_t
))))

1615  
îr‹
;

1618 
	}
}

1621 
	$wl_iw_gë_essid
(

1622 
√t_devi˚
 *
dev
,

1623 
iw_ªque°_öfo
 *
öfo
,

1624 
iw_poöt
 *
dwrq
,

1625 *
exåa


1628 
wlc_ssid_t
 
ssid
;

1629 
îr‹
;

1631 
	`WL_TRACE
(("%s: SIOCGIWESSID\n", 
dev
->
«me
));

1633 i‡(!
exåa
)

1634  -
EINVAL
;

1636 i‡((
îr‹
 = 
	`dev_wlc_io˘l
(
dev
, 
WLC_GET_SSID
, &
ssid
, (ssid)))) {

1637 
	`WL_ERROR
(("Error gettingÅhe SSID\n"));

1638  
îr‹
;

1641 
ssid
.
SSID_Àn
 = 
	`dtoh32
(ssid.SSID_len);

1644 
	`mem˝y
(
exåa
, 
ssid
.
SSID
, ssid.
SSID_Àn
);

1646 
dwrq
->
Àngth
 = 
ssid
.
SSID_Àn
;

1648 
dwrq
->
Êags
 = 1;

1651 
	}
}

1654 
	$wl_iw_£t_nick
(

1655 
√t_devi˚
 *
dev
,

1656 
iw_ªque°_öfo
 *
öfo
,

1657 
iw_poöt
 *
dwrq
,

1658 *
exåa


1661 
wl_iw_t
 *
iw
 = 
	`IW_DEV_IF
(
dev
);

1662 
	`WL_TRACE
(("%s: SIOCSIWNICKN\n", 
dev
->
«me
));

1664 i‡(!
exåa
)

1665  -
EINVAL
;

1668 i‡(
dwrq
->
Àngth
 > (
iw
->
nick«me
))

1669  -
E2BIG
;

1671 
	`mem˝y
(
iw
->
nick«me
, 
exåa
, 
dwrq
->
Àngth
);

1672 
iw
->
nick«me
[
dwrq
->
Àngth
 - 1] = '\0';

1675 
	}
}

1678 
	$wl_iw_gë_nick
(

1679 
√t_devi˚
 *
dev
,

1680 
iw_ªque°_öfo
 *
öfo
,

1681 
iw_poöt
 *
dwrq
,

1682 *
exåa


1685 
wl_iw_t
 *
iw
 = 
	`IW_DEV_IF
(
dev
);

1686 
	`WL_TRACE
(("%s: SIOCGIWNICKN\n", 
dev
->
«me
));

1688 i‡(!
exåa
)

1689  -
EINVAL
;

1691 
	`°r˝y
(
exåa
, 
iw
->
nick«me
);

1692 
dwrq
->
Àngth
 = 
	`°æí
(
exåa
) + 1;

1695 
	}
}

1697 
	$wl_iw_£t_øã
(

1698 
√t_devi˚
 *
dev
,

1699 
iw_ªque°_öfo
 *
öfo
,

1700 
iw_∑øm
 *
vwrq
,

1701 *
exåa


1704 
wl_øã£t_t
 
øã£t
;

1705 
îr‹
, 
øã
, 
i
, 
îr‹_bg
, 
îr‹_a
;

1707 
	`WL_TRACE
(("%s: SIOCSIWRATE\n", 
dev
->
«me
));

1710 i‡((
îr‹
 = 
	`dev_wlc_io˘l
(
dev
, 
WLC_GET_CURR_RATESET
, &
øã£t
, (rateset))))

1711  
îr‹
;

1713 
øã£t
.
cou¡
 = 
	`dtoh32
(rateset.count);

1715 i‡(
vwrq
->
vÆue
 < 0) {

1717 
øã
 = 
øã£t
.
øãs
[øã£t.
cou¡
 - 1] & 0x7f;

1718 } i‡(
vwrq
->
vÆue
 < 
øã£t
.
cou¡
) {

1720 
øã
 = 
øã£t
.
øãs
[
vwrq
->
vÆue
] & 0x7f;

1723 
øã
 = 
vwrq
->
vÆue
 / 500000;

1726 i‡(
vwrq
->
fixed
) {

1731 
îr‹_bg
 = 
	`dev_wlc_ötv¨_£t
(
dev
, "bg_øã", 
øã
);

1732 
îr‹_a
 = 
	`dev_wlc_ötv¨_£t
(
dev
, "a_øã", 
øã
);

1734 i‡(
îr‹_bg
 && 
îr‹_a
)

1735  (
îr‹_bg
 | 
îr‹_a
);

1742 
îr‹_bg
 = 
	`dev_wlc_ötv¨_£t
(
dev
, "bg_rate", 0);

1744 
îr‹_a
 = 
	`dev_wlc_ötv¨_£t
(
dev
, "a_rate", 0);

1746 i‡(
îr‹_bg
 && 
îr‹_a
)

1747  (
îr‹_bg
 | 
îr‹_a
);

1750 
i
 = 0; i < 
øã£t
.
cou¡
; i++)

1751 i‡((
øã£t
.
øãs
[
i
] & 0x7fË> 
øã
)

1753 
øã£t
.
cou¡
 = 
	`htod32
(
i
);

1756 i‡((
îr‹
 = 
	`dev_wlc_io˘l
(
dev
, 
WLC_SET_RATESET
, &
øã£t
, (rateset))))

1757  
îr‹
;

1761 
	}
}

1763 
	$wl_iw_gë_øã
(

1764 
√t_devi˚
 *
dev
,

1765 
iw_ªque°_öfo
 *
öfo
,

1766 
iw_∑øm
 *
vwrq
,

1767 *
exåa


1770 
îr‹
, 
øã
;

1772 
	`WL_TRACE
(("%s: SIOCGIWRATE\n", 
dev
->
«me
));

1775 i‡((
îr‹
 = 
	`dev_wlc_io˘l
(
dev
, 
WLC_GET_RATE
, &
øã
, (rate))))

1776  
îr‹
;

1777 
øã
 = 
	`dtoh32
(rate);

1778 
vwrq
->
vÆue
 = 
øã
 * 500000;

1781 
	}
}

1784 
	$wl_iw_£t_πs
(

1785 
√t_devi˚
 *
dev
,

1786 
iw_ªque°_öfo
 *
öfo
,

1787 
iw_∑øm
 *
vwrq
,

1788 *
exåa


1791 
îr‹
, 
πs
;

1793 
	`WL_TRACE
(("%s: SIOCSIWRTS\n", 
dev
->
«me
));

1795 i‡(
vwrq
->
dißbÀd
)

1796 
πs
 = 
DOT11_DEFAULT_RTS_LEN
;

1797 i‡(
vwrq
->
vÆue
 < 0 || vwrq->vÆuê> 
DOT11_DEFAULT_RTS_LEN
)

1798  -
EINVAL
;

1800 
πs
 = 
vwrq
->
vÆue
;

1802 i‡((
îr‹
 = 
	`dev_wlc_ötv¨_£t
(
dev
, "π°hªsh", 
πs
)))

1803  
îr‹
;

1806 
	}
}

1809 
	$wl_iw_gë_πs
(

1810 
√t_devi˚
 *
dev
,

1811 
iw_ªque°_öfo
 *
öfo
,

1812 
iw_∑øm
 *
vwrq
,

1813 *
exåa


1816 
îr‹
, 
πs
;

1818 
	`WL_TRACE
(("%s: SIOCGIWRTS\n", 
dev
->
«me
));

1820 i‡((
îr‹
 = 
	`dev_wlc_ötv¨_gë
(
dev
, "π°hªsh", &
πs
)))

1821  
îr‹
;

1823 
vwrq
->
vÆue
 = 
πs
;

1824 
vwrq
->
dißbÀd
 = (
πs
 >
DOT11_DEFAULT_RTS_LEN
);

1825 
vwrq
->
fixed
 = 1;

1828 
	}
}

1831 
	$wl_iw_£t_‰ag
(

1832 
√t_devi˚
 *
dev
,

1833 
iw_ªque°_öfo
 *
öfo
,

1834 
iw_∑øm
 *
vwrq
,

1835 *
exåa


1838 
îr‹
, 
‰ag
;

1840 
	`WL_TRACE
(("%s: SIOCSIWFRAG\n", 
dev
->
«me
));

1842 i‡(
vwrq
->
dißbÀd
)

1843 
‰ag
 = 
DOT11_DEFAULT_FRAG_LEN
;

1844 i‡(
vwrq
->
vÆue
 < 0 || vwrq->vÆuê> 
DOT11_DEFAULT_FRAG_LEN
)

1845  -
EINVAL
;

1847 
‰ag
 = 
vwrq
->
vÆue
;

1849 i‡((
îr‹
 = 
	`dev_wlc_ötv¨_£t
(
dev
, "‰agthªsh", 
‰ag
)))

1850  
îr‹
;

1853 
	}
}

1856 
	$wl_iw_gë_‰ag
(

1857 
√t_devi˚
 *
dev
,

1858 
iw_ªque°_öfo
 *
öfo
,

1859 
iw_∑øm
 *
vwrq
,

1860 *
exåa


1863 
îr‹
, 
‰agthªshﬁd
;

1865 
	`WL_TRACE
(("%s: SIOCGIWFRAG\n", 
dev
->
«me
));

1867 i‡((
îr‹
 = 
	`dev_wlc_ötv¨_gë
(
dev
, "‰agthªsh", &
‰agthªshﬁd
)))

1868  
îr‹
;

1870 
vwrq
->
vÆue
 = 
‰agthªshﬁd
;

1871 
vwrq
->
dißbÀd
 = (
‰agthªshﬁd
 >
DOT11_DEFAULT_FRAG_LEN
);

1872 
vwrq
->
fixed
 = 1;

1875 
	}
}

1878 
	$wl_iw_£t_txpow
(

1879 
√t_devi˚
 *
dev
,

1880 
iw_ªque°_öfo
 *
öfo
,

1881 
iw_∑øm
 *
vwrq
,

1882 *
exåa


1885 
îr‹
, 
dißbÀ
;

1886 
uöt16
 
txpwrmw
;

1887 
	`WL_TRACE
(("%s: SIOCSIWTXPOW\n", 
dev
->
«me
));

1890 
dißbÀ
 = 
vwrq
->
dißbÀd
 ? 
WL_RADIO_SW_DISABLE
 : 0;

1891 
dißbÀ
 +
WL_RADIO_SW_DISABLE
 << 16;

1893 
dißbÀ
 = 
	`htod32
(disable);

1894 i‡((
îr‹
 = 
	`dev_wlc_io˘l
(
dev
, 
WLC_SET_RADIO
, &
dißbÀ
, (disable))))

1895  
îr‹
;

1898 i‡(
dißbÀ
 & 
WL_RADIO_SW_DISABLE
)

1902 i‡(!(
vwrq
->
Êags
 & 
IW_TXPOW_MWATT
))

1903  -
EINVAL
;

1906 i‡(
vwrq
->
vÆue
 < 0)

1909 i‡(
vwrq
->
vÆue
 > 0xffffË
txpwrmw
 = 0xffff;

1910 
txpwrmw
 = (
uöt16
)
vwrq
->
vÆue
;

1913 
îr‹
 = 
	`dev_wlc_ötv¨_£t
(
dev
, "qtxpowî", ()(
	`bcm_mw_to_qdbm
(
txpwrmw
)));

1914  
îr‹
;

1915 
	}
}

1918 
	$wl_iw_gë_txpow
(

1919 
√t_devi˚
 *
dev
,

1920 
iw_ªque°_öfo
 *
öfo
,

1921 
iw_∑øm
 *
vwrq
,

1922 *
exåa


1925 
îr‹
, 
dißbÀ
, 
txpwrdbm
;

1926 
uöt8
 
ªsu…
;

1928 
	`WL_TRACE
(("%s: SIOCGIWTXPOW\n", 
dev
->
«me
));

1930 i‡((
îr‹
 = 
	`dev_wlc_io˘l
(
dev
, 
WLC_GET_RADIO
, &
dißbÀ
, (disable))) ||

1931 (
îr‹
 = 
	`dev_wlc_ötv¨_gë
(
dev
, "qtxpowî", &
txpwrdbm
)))

1932  
îr‹
;

1934 
dißbÀ
 = 
	`dtoh32
(disable);

1935 
ªsu…
 = (
uöt8
)(
txpwrdbm
 & ~
WL_TXPWR_OVERRIDE
);

1936 
vwrq
->
vÆue
 = (
öt32
)
	`bcm_qdbm_to_mw
(
ªsu…
);

1937 
vwrq
->
fixed
 = 0;

1938 
vwrq
->
dißbÀd
 = (
dißbÀ
 & (
WL_RADIO_SW_DISABLE
 | 
WL_RADIO_HW_DISABLE
)) ? 1 : 0;

1939 
vwrq
->
Êags
 = 
IW_TXPOW_MWATT
;

1942 
	}
}

1944 #i‡
WIRELESS_EXT
 > 10

1946 
	$wl_iw_£t_ªåy
(

1947 
√t_devi˚
 *
dev
,

1948 
iw_ªque°_öfo
 *
öfo
,

1949 
iw_∑øm
 *
vwrq
,

1950 *
exåa


1953 
îr‹
, 
Ãl
, 
§l
;

1955 
	`WL_TRACE
(("%s: SIOCSIWRETRY\n", 
dev
->
«me
));

1958 i‡(
vwrq
->
dißbÀd
 || (vwrq->
Êags
 & 
IW_RETRY_LIFETIME
))

1959  -
EINVAL
;

1962 i‡(
vwrq
->
Êags
 & 
IW_RETRY_LIMIT
) {

1964 #i‡
WIRELESS_EXT
 > 20

1965 i‡((
vwrq
->
Êags
 & 
IW_RETRY_LONG
Ë||(vwrq->Êag†& 
IW_RETRY_MAX
) ||

1966 !((
vwrq
->
Êags
 & 
IW_RETRY_SHORT
Ë|| (vwrq->Êag†& 
IW_RETRY_MIN
))) {

1968 i‡((
vwrq
->
Êags
 & 
IW_RETRY_MAX
Ë|| !(vwrq->Êag†& 
IW_RETRY_MIN
)) {

1971 
Ãl
 = 
	`htod32
(
vwrq
->
vÆue
);

1972 i‡((
îr‹
 = 
	`dev_wlc_io˘l
(
dev
, 
WLC_SET_LRL
, &
Ãl
, (lrl))))

1973  
îr‹
;

1976 #i‡
WIRELESS_EXT
 > 20

1977 i‡((
vwrq
->
Êags
 & 
IW_RETRY_SHORT
Ë||(vwrq->Êag†& 
IW_RETRY_MIN
) ||

1978 !((
vwrq
->
Êags
 & 
IW_RETRY_LONG
Ë|| (vwrq->Êag†& 
IW_RETRY_MAX
))) {

1980 i‡((
vwrq
->
Êags
 & 
IW_RETRY_MIN
Ë|| !(vwrq->Êag†& 
IW_RETRY_MAX
)) {

1983 
§l
 = 
	`htod32
(
vwrq
->
vÆue
);

1984 i‡((
îr‹
 = 
	`dev_wlc_io˘l
(
dev
, 
WLC_SET_SRL
, &
§l
, (srl))))

1985  
îr‹
;

1990 
	}
}

1993 
	$wl_iw_gë_ªåy
(

1994 
√t_devi˚
 *
dev
,

1995 
iw_ªque°_öfo
 *
öfo
,

1996 
iw_∑øm
 *
vwrq
,

1997 *
exåa


2000 
îr‹
, 
Ãl
, 
§l
;

2002 
	`WL_TRACE
(("%s: SIOCGIWRETRY\n", 
dev
->
«me
));

2004 
vwrq
->
dißbÀd
 = 0;

2007 i‡((
vwrq
->
Êags
 & 
IW_RETRY_TYPE
Ë=
IW_RETRY_LIFETIME
)

2008  -
EINVAL
;

2011 i‡((
îr‹
 = 
	`dev_wlc_io˘l
(
dev
, 
WLC_GET_LRL
, &
Ãl
, (lrl))) ||

2012 (
îr‹
 = 
	`dev_wlc_io˘l
(
dev
, 
WLC_GET_SRL
, &
§l
, (srl))))

2013  
îr‹
;

2015 
Ãl
 = 
	`dtoh32
(lrl);

2016 
§l
 = 
	`dtoh32
(srl);

2019 i‡(
vwrq
->
Êags
 & 
IW_RETRY_MAX
) {

2020 
vwrq
->
Êags
 = 
IW_RETRY_LIMIT
 | 
IW_RETRY_MAX
;

2021 
vwrq
->
vÆue
 = 
Ãl
;

2023 
vwrq
->
Êags
 = 
IW_RETRY_LIMIT
;

2024 
vwrq
->
vÆue
 = 
§l
;

2025 i‡(
§l
 !
Ãl
)

2026 
vwrq
->
Êags
 |
IW_RETRY_MIN
;

2030 
	}
}

2034 
	$wl_iw_£t_ícode
(

2035 
√t_devi˚
 *
dev
,

2036 
iw_ªque°_öfo
 *
öfo
,

2037 
iw_poöt
 *
dwrq
,

2038 *
exåa


2041 
wl_w£c_key_t
 
key
;

2042 
îr‹
, 
vÆ
, 
w£c
;

2044 
	`WL_TRACE
(("%s: SIOCSIWENCODE\n", 
dev
->
«me
));

2046 
	`mem£t
(&
key
, 0, (key));

2048 i‡((
dwrq
->
Êags
 & 
IW_ENCODE_INDEX
) == 0) {

2050 
key
.
ödex
 = 0; key.ödex < 
DOT11_MAX_DEFAULT_KEYS
; key.index++) {

2051 
vÆ
 = 
	`htod32
(
key
.
ödex
);

2052 i‡((
îr‹
 = 
	`dev_wlc_io˘l
(
dev
, 
WLC_GET_KEY_PRIMARY
, &
vÆ
, (val))))

2053  
îr‹
;

2054 
vÆ
 = 
	`dtoh32
(val);

2055 i‡(
vÆ
)

2059 i‡(
key
.
ödex
 =
DOT11_MAX_DEFAULT_KEYS
)

2060 
key
.
ödex
 = 0;

2062 
key
.
ödex
 = (
dwrq
->
Êags
 & 
IW_ENCODE_INDEX
) - 1;

2063 i‡(
key
.
ödex
 >
DOT11_MAX_DEFAULT_KEYS
)

2064  -
EINVAL
;

2068 
w£c
 = (
dwrq
->
Êags
 & 
IW_ENCODE_DISABLED
Ë? 0 : 
WEP_ENABLED
;

2070 i‡((
îr‹
 = 
	`dev_wlc_ötv¨_£t
(
dev
, "w£c", 
w£c
)))

2071  
îr‹
;

2074 i‡(!
exåa
 || !
dwrq
->
Àngth
 || (dwrq->
Êags
 & 
IW_ENCODE_NOKEY
)) {

2076 
vÆ
 = 
	`htod32
(
key
.
ödex
);

2077 i‡((
îr‹
 = 
	`dev_wlc_io˘l
(
dev
, 
WLC_SET_KEY_PRIMARY
, &
vÆ
, (val))))

2078  
îr‹
;

2080 
key
.
Àn
 = 
dwrq
->
Àngth
;

2082 i‡(
dwrq
->
Àngth
 > (
key
.
d©a
))

2083  -
EINVAL
;

2085 
	`mem˝y
(
key
.
d©a
, 
exåa
, 
dwrq
->
Àngth
);

2087 
key
.
Êags
 = 
WL_PRIMARY_KEY
;

2088 
key
.
Àn
) {

2089 
WEP1_KEY_SIZE
:

2090 
key
.
Ægo
 = 
CRYPTO_ALGO_WEP1
;

2092 
WEP128_KEY_SIZE
:

2093 
key
.
Ægo
 = 
CRYPTO_ALGO_WEP128
;

2095 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 14)

2096 
TKIP_KEY_SIZE
:

2097 
key
.
Ægo
 = 
CRYPTO_ALGO_TKIP
;

2100 
AES_KEY_SIZE
:

2101 
key
.
Ægo
 = 
CRYPTO_ALGO_AES_CCM
;

2104  -
EINVAL
;

2108 
	`sw≠_key_‰om_BE
(&
key
);

2109 i‡((
îr‹
 = 
	`dev_wlc_io˘l
(
dev
, 
WLC_SET_KEY
, &
key
, (key))))

2110  
îr‹
;

2114 
vÆ
 = (
dwrq
->
Êags
 & 
IW_ENCODE_RESTRICTED
) ? 1 : 0;

2115 
vÆ
 = 
	`htod32
(val);

2116 i‡((
îr‹
 = 
	`dev_wlc_io˘l
(
dev
, 
WLC_SET_AUTH
, &
vÆ
, (val))))

2117  
îr‹
;

2120 
	}
}

2123 
	$wl_iw_gë_ícode
(

2124 
√t_devi˚
 *
dev
,

2125 
iw_ªque°_öfo
 *
öfo
,

2126 
iw_poöt
 *
dwrq
,

2127 *
exåa


2130 
wl_w£c_key_t
 
key
;

2131 
îr‹
, 
vÆ
, 
w£c
, 
auth
;

2133 
	`WL_TRACE
(("%s: SIOCGIWENCODE\n", 
dev
->
«me
));

2136 
	`bzîo
(&
key
, (
wl_w£c_key_t
));

2138 i‡((
dwrq
->
Êags
 & 
IW_ENCODE_INDEX
) == 0) {

2140 
key
.
ödex
 = 0; key.ödex < 
DOT11_MAX_DEFAULT_KEYS
; key.index++) {

2141 
vÆ
 = 
key
.
ödex
;

2142 i‡((
îr‹
 = 
	`dev_wlc_io˘l
(
dev
, 
WLC_GET_KEY_PRIMARY
, &
vÆ
, (val))))

2143  
îr‹
;

2144 
vÆ
 = 
	`dtoh32
(val);

2145 i‡(
vÆ
)

2149 
key
.
ödex
 = (
dwrq
->
Êags
 & 
IW_ENCODE_INDEX
) - 1;

2151 i‡(
key
.
ödex
 >
DOT11_MAX_DEFAULT_KEYS
)

2152 
key
.
ödex
 = 0;

2156 i‡((
îr‹
 = 
	`dev_wlc_io˘l
(
dev
, 
WLC_GET_WSEC
, &
w£c
, (wsec))) ||

2157 (
îr‹
 = 
	`dev_wlc_io˘l
(
dev
, 
WLC_GET_AUTH
, &
auth
, (auth))))

2158  
îr‹
;

2160 
	`sw≠_key_to_BE
(&
key
);

2162 
w£c
 = 
	`dtoh32
(wsec);

2163 
auth
 = 
	`dtoh32
(auth);

2165 
dwrq
->
Àngth
 = 
	`MIN
(
IW_ENCODING_TOKEN_MAX
, 
key
.
Àn
);

2168 
dwrq
->
Êags
 = 
key
.
ödex
 + 1;

2169 i‡(!(
w£c
 & (
WEP_ENABLED
 | 
TKIP_ENABLED
 | 
AES_ENABLED
))) {

2171 
dwrq
->
Êags
 |
IW_ENCODE_DISABLED
;

2173 i‡(
auth
) {

2175 
dwrq
->
Êags
 |
IW_ENCODE_RESTRICTED
;

2179 i‡(
dwrq
->
Àngth
 && 
exåa
)

2180 
	`mem˝y
(
exåa
, 
key
.
d©a
, 
dwrq
->
Àngth
);

2183 
	}
}

2186 
	$wl_iw_£t_powî
(

2187 
√t_devi˚
 *
dev
,

2188 
iw_ªque°_öfo
 *
öfo
,

2189 
iw_∑øm
 *
vwrq
,

2190 *
exåa


2193 
îr‹
, 
pm
;

2195 
	`WL_TRACE
(("%s: SIOCSIWPOWER\n", 
dev
->
«me
));

2197 
pm
 = 
vwrq
->
dißbÀd
 ? 
PM_OFF
 : 
PM_MAX
;

2199 
pm
 = 
	`htod32
(pm);

2200 i‡((
îr‹
 = 
	`dev_wlc_io˘l
(
dev
, 
WLC_SET_PM
, &
pm
, (pm))))

2201  
îr‹
;

2204 
	}
}

2207 
	$wl_iw_gë_powî
(

2208 
√t_devi˚
 *
dev
,

2209 
iw_ªque°_öfo
 *
öfo
,

2210 
iw_∑øm
 *
vwrq
,

2211 *
exåa


2214 
îr‹
, 
pm
;

2216 
	`WL_TRACE
(("%s: SIOCGIWPOWER\n", 
dev
->
«me
));

2218 i‡((
îr‹
 = 
	`dev_wlc_io˘l
(
dev
, 
WLC_GET_PM
, &
pm
, (pm))))

2219  
îr‹
;

2221 
pm
 = 
	`dtoh32
(pm);

2222 
vwrq
->
dißbÀd
 = 
pm
 ? 0 : 1;

2223 
vwrq
->
Êags
 = 
IW_POWER_ALL_R
;

2226 
	}
}

2228 #i‡
WIRELESS_EXT
 > 17

2230 
	$wl_iw_£t_w∑õ
(

2231 
√t_devi˚
 *
dev
,

2232 
iw_ªque°_öfo
 *
öfo
,

2233 
iw_poöt
 *
iwp
,

2234 *
exåa


2237 
	`dev_wlc_bufv¨_£t
(
dev
, "w∑õ", 
exåa
, 
iwp
->
Àngth
);

2240 
	}
}

2243 
	$wl_iw_gë_w∑õ
(

2244 
√t_devi˚
 *
dev
,

2245 
iw_ªque°_öfo
 *
öfo
,

2246 
iw_poöt
 *
iwp
,

2247 *
exåa


2250 
	`WL_TRACE
(("%s: SIOCGIWGENIE\n", 
dev
->
«me
));

2251 
iwp
->
Àngth
 = 64;

2252 
	`dev_wlc_bufv¨_gë
(
dev
, "w∑õ", 
exåa
, 
iwp
->
Àngth
);

2254 
	}
}

2257 
	$wl_iw_£t_ícodìxt
(

2258 
√t_devi˚
 *
dev
,

2259 
iw_ªque°_öfo
 *
öfo
,

2260 
iw_poöt
 *
dwrq
,

2261 *
exåa


2264 
wl_w£c_key_t
 
key
;

2265 
îr‹
;

2266 
iw_ícode_ext
 *
iwe
;

2268 
	`WL_TRACE
(("%s: SIOCSIWENCODEEXT\n", 
dev
->
«me
));

2270 
	`mem£t
(&
key
, 0, (key));

2271 
iwe
 = (
iw_ícode_ext
 *)
exåa
;

2274 i‡(
dwrq
->
Êags
 & 
IW_ENCODE_DISABLED
) {

2279 
key
.
ödex
 = 0;

2280 i‡(
dwrq
->
Êags
 & 
IW_ENCODE_INDEX
)

2281 
key
.
ödex
 = (
dwrq
->
Êags
 & 
IW_ENCODE_INDEX
) - 1;

2283 
key
.
Àn
 = 
iwe
->
key_Àn
;

2286 i‡(!
	`ETHER_ISMULTI
(
iwe
->
addr
.
ß_d©a
))

2287 
	`bc›y
((*)&
iwe
->
addr
.
ß_d©a
, (*)&
key
.
ó
, 
ETHER_ADDR_LEN
);

2290 i‡(
key
.
Àn
 == 0) {

2291 i‡(
iwe
->
ext_Êags
 & 
IW_ENCODE_EXT_SET_TX_KEY
) {

2292 
	`WL_WSEC
(("Ch™gögÅhêthê¥im¨y KeyÅÿ%d\n", 
key
.
ödex
));

2294 
key
.
ödex
 = 
	`htod32
(key.index);

2295 
îr‹
 = 
	`dev_wlc_io˘l
(
dev
, 
WLC_SET_KEY_PRIMARY
,

2296 &
key
.
ödex
, (key.index));

2297 i‡(
îr‹
)

2298  
îr‹
;

2302 
	`sw≠_key_‰om_BE
(&
key
);

2303 
îr‹
 = 
	`dev_wlc_io˘l
(
dev
, 
WLC_SET_KEY
, &
key
, (key));

2304 i‡(
îr‹
)

2305  
îr‹
;

2308 #i‡(
	`deföed
(
BCMSUP_PSK
Ë&& deföed(
WLFBT
))

2313 i‡(
iwe
->
Æg
 =
IW_ENCODE_ALG_PMK
) {

2314 
j
;

2315 
w£c_pmk_t
 
pmk
;

2316 
key°rög
[
WSEC_MAX_PSK_LEN
 + 1];

2317 * 
ch¨±r
 = 
key°rög
;

2318 
uöt
 
Àn
;

2321 
j
 = 0; j < (
WSEC_MAX_PSK_LEN
 / 2); j++) {

2322 
	`•rötf
(
ch¨±r
, "%02x", 
iwe
->
key
[
j
]);

2323 
ch¨±r
 += 2;

2325 
Àn
 = 
	`°æí
(
key°rög
);

2326 
pmk
.
key_Àn
 = 
	`htod16
(
Àn
);

2327 
	`bc›y
(
key°rög
, 
pmk
.
key
, 
Àn
);

2328 
pmk
.
Êags
 = 
	`htod16
(
WSEC_PASSPHRASE
);

2330 
îr‹
 = 
	`dev_wlc_io˘l
(
dev
, 
WLC_SET_WSEC_PMK
, &
pmk
, (pmk));

2331 i‡(
îr‹
)

2332  
îr‹
;

2337 i‡(
iwe
->
key_Àn
 > (
key
.
d©a
))

2338  -
EINVAL
;

2340 
	`WL_WSEC
(("SëtögÅhêkey index %d\n", 
key
.
ödex
));

2341 i‡(
iwe
->
ext_Êags
 & 
IW_ENCODE_EXT_SET_TX_KEY
) {

2342 
	`WL_WSEC
(("key isá Primary Key\n"));

2343 
key
.
Êags
 = 
WL_PRIMARY_KEY
;

2346 
	`bc›y
((*)
iwe
->
key
, key.
d©a
, iwe->
key_Àn
);

2348 i‡(
iwe
->
Æg
 =
IW_ENCODE_ALG_TKIP
) {

2349 
uöt8
 
keybuf
[8];

2350 
	`bc›y
(&
key
.
d©a
[24], 
keybuf
, (keybuf));

2351 
	`bc›y
(&
key
.
d©a
[16], &key.d©a[24], (
keybuf
));

2352 
	`bc›y
(
keybuf
, &
key
.
d©a
[16], (keybuf));

2356 i‡(
iwe
->
ext_Êags
 & 
IW_ENCODE_EXT_RX_SEQ_VALID
) {

2357 
uch¨
 *
iv±r
;

2358 
iv±r
 = (
uch¨
 *)
iwe
->
rx_£q
;

2359 
key
.
rxiv
.
hi
 = (
iv±r
[5] << 24) | (ivptr[4] << 16) |

2360 (
iv±r
[3] << 8) | ivptr[2];

2361 
key
.
rxiv
.
lo
 = (
iv±r
[1] << 8) | ivptr[0];

2362 
key
.
iv_öôülized
 = 
TRUE
;

2365 
iwe
->
Æg
) {

2366 
IW_ENCODE_ALG_NONE
:

2367 
key
.
Ægo
 = 
CRYPTO_ALGO_OFF
;

2369 
IW_ENCODE_ALG_WEP
:

2370 i‡(
iwe
->
key_Àn
 =
WEP1_KEY_SIZE
)

2371 
key
.
Ægo
 = 
CRYPTO_ALGO_WEP1
;

2373 
key
.
Ægo
 = 
CRYPTO_ALGO_WEP128
;

2375 
IW_ENCODE_ALG_TKIP
:

2376 
key
.
Ægo
 = 
CRYPTO_ALGO_TKIP
;

2378 
IW_ENCODE_ALG_CCMP
:

2379 
key
.
Ægo
 = 
CRYPTO_ALGO_AES_CCM
;

2384 
	`sw≠_key_‰om_BE
(&
key
);

2386 
	`dhd_waô_≥nd8021x
(
dev
);

2388 
îr‹
 = 
	`dev_wlc_io˘l
(
dev
, 
WLC_SET_KEY
, &
key
, (key));

2389 i‡(
îr‹
)

2390  
îr‹
;

2393 
	}
}

2396 #i‡
WIRELESS_EXT
 > 17

2398 
pmkid_li°_t
 
	mpmkids
;

2399 
pmkid_t
 
	mfoo
[
MAXPMKID
-1];

2400 } 
	gpmkid_li°
;

2402 
	$wl_iw_£t_pmkß
(

2403 
√t_devi˚
 *
dev
,

2404 
iw_ªque°_öfo
 *
öfo
,

2405 
iw_∑øm
 *
vwrq
,

2406 *
exåa


2409 
iw_pmkß
 *
iwpmkß
;

2410 
uöt
 
i
;

2411 
óbuf
[
ETHER_ADDR_STR_LEN
];

2412 
pmkid_t
 * 
pmkid_¨øy
 = 
pmkid_li°
.
pmkids
.
pmkid
;

2414 
	`WL_TRACE
(("%s: SIOCSIWPMKSA\n", 
dev
->
«me
));

2415 
iwpmkß
 = (
iw_pmkß
 *)
exåa
;

2416 
	`bzîo
((*)
óbuf
, 
ETHER_ADDR_STR_LEN
);

2417 i‡(
iwpmkß
->
cmd
 =
IW_PMKSA_FLUSH
) {

2418 
	`WL_TRACE
(("wl_iw_set_pmksa - IW_PMKSA_FLUSH\n"));

2419 
	`bzîo
((*)&
pmkid_li°
, (pmkid_list));

2421 i‡(
iwpmkß
->
cmd
 =
IW_PMKSA_REMOVE
) {

2422 
pmkid_li°_t
 
pmkid
, *
pmkid±r
;

2423 
pmkid±r
 = &
pmkid
;

2424 
	`bc›y
(&
iwpmkß
->
bssid
.
ß_d©a
[0], &
pmkid±r
->
pmkid
[0].
BSSID
, 
ETHER_ADDR_LEN
);

2425 
	`bc›y
(&
iwpmkß
->
pmkid
[0], &
pmkid±r
->pmkid[0].
PMKID
, 
WPA2_PMKID_LEN
);

2427 
uöt
 
j
;

2428 
	`WL_TRACE
(("wl_iw_set_pmksa,IW_PMKSA_REMOVE - PMKID: %s = ",

2429 
	`bcm_ëhî_¡ﬂ
(&
pmkid±r
->
pmkid
[0].
BSSID
,

2430 
óbuf
)));

2431 
j
 = 0; j < 
WPA2_PMKID_LEN
; j++)

2432 
	`WL_TRACE
(("%02x ", 
pmkid±r
->
pmkid
[0].
PMKID
[
j
]));

2433 
	`WL_TRACE
(("\n"));

2435 
i
 = 0; i < 
pmkid_li°
.
pmkids
.
≈mkid
; i++)

2436 i‡(!
	`bcmp
(&
iwpmkß
->
bssid
.
ß_d©a
[0], &
pmkid_¨øy
[
i
].
BSSID
,

2437 
ETHER_ADDR_LEN
))

2439 ; 
i
 < 
pmkid_li°
.
pmkids
.
≈mkid
; i++) {

2440 
	`bc›y
(&
pmkid_¨øy
[
i
+1].
BSSID
,

2441 &
pmkid_¨øy
[
i
].
BSSID
,

2442 
ETHER_ADDR_LEN
);

2443 
	`bc›y
(&
pmkid_¨øy
[
i
+1].
PMKID
,

2444 &
pmkid_¨øy
[
i
].
PMKID
,

2445 
WPA2_PMKID_LEN
);

2447 
pmkid_li°
.
pmkids
.
≈mkid
--;

2449 i‡(
iwpmkß
->
cmd
 =
IW_PMKSA_ADD
) {

2450 
	`bc›y
(&
iwpmkß
->
bssid
.
ß_d©a
[0],

2451 &
pmkid_¨øy
[
pmkid_li°
.
pmkids
.
≈mkid
].
BSSID
,

2452 
ETHER_ADDR_LEN
);

2453 
	`bc›y
(&
iwpmkß
->
pmkid
[0], &
pmkid_¨øy
[
pmkid_li°
.
pmkids
.
≈mkid
].
PMKID
,

2454 
WPA2_PMKID_LEN
);

2456 
uöt
 
j
;

2457 
uöt
 
k
;

2458 
k
 = 
pmkid_li°
.
pmkids
.
≈mkid
;

2459 
	`BCM_REFERENCE
(
k
);

2460 
	`WL_TRACE
(("wl_iw_set_pmksa,IW_PMKSA_ADD - PMKID: %s = ",

2461 
	`bcm_ëhî_¡ﬂ
(&
pmkid_¨øy
[
k
].
BSSID
,

2462 
óbuf
)));

2463 
j
 = 0; j < 
WPA2_PMKID_LEN
; j++)

2464 
	`WL_TRACE
(("%02x ", 
pmkid_¨øy
[
k
].
PMKID
[
j
]));

2465 
	`WL_TRACE
(("\n"));

2467 
pmkid_li°
.
pmkids
.
≈mkid
++;

2469 
	`WL_TRACE
(("PRINTINGÖmkid LIST - Nÿo‡ñemít†%d\n", 
pmkid_li°
.
pmkids
.
≈mkid
));

2470 
i
 = 0; i < 
pmkid_li°
.
pmkids
.
≈mkid
; i++) {

2471 
uöt
 
j
;

2472 
	`WL_TRACE
(("PMKID[%d]: %†", 
i
,

2473 
	`bcm_ëhî_¡ﬂ
(&
pmkid_¨øy
[
i
].
BSSID
,

2474 
óbuf
)));

2475 
j
 = 0; j < 
WPA2_PMKID_LEN
; j++)

2476 
	`WL_TRACE
(("%02x ", 
pmkid_¨øy
[
i
].
PMKID
[
j
]));

2477 
	`¥ötf
("\n");

2479 
	`WL_TRACE
(("\n"));

2480 
	`dev_wlc_bufv¨_£t
(
dev
, "pmkid_öfo", (*)&
pmkid_li°
, (pmkid_list));

2482 
	}
}

2486 
	$wl_iw_gë_ícodìxt
(

2487 
√t_devi˚
 *
dev
,

2488 
iw_ªque°_öfo
 *
öfo
,

2489 
iw_∑øm
 *
vwrq
,

2490 *
exåa


2493 
	`WL_TRACE
(("%s: SIOCGIWENCODEEXT\n", 
dev
->
«me
));

2495 
	}
}

2498 
	$wl_iw_£t_w∑auth
(

2499 
√t_devi˚
 *
dev
,

2500 
iw_ªque°_öfo
 *
öfo
,

2501 
iw_∑øm
 *
vwrq
,

2502 *
exåa


2505 
îr‹
 = 0;

2506 
∑ømid
;

2507 
∑ømvÆ
;

2508 
uöt32
 
cùhî_comböed
;

2509 
vÆ
 = 0;

2510 
wl_iw_t
 *
iw
 = 
	`IW_DEV_IF
(
dev
);

2512 
	`WL_TRACE
(("%s: SIOCSIWAUTH\n", 
dev
->
«me
));

2514 
∑ømid
 = 
vwrq
->
Êags
 & 
IW_AUTH_INDEX
;

2515 
∑ømvÆ
 = 
vwrq
->
vÆue
;

2517 
	`WL_TRACE
(("%s: SIOCSIWAUTH,Öaramid = 0x%0x,Öaramval = 0x%0x\n",

2518 
dev
->
«me
, 
∑ømid
, 
∑ømvÆ
));

2520 
∑ømid
) {

2522 
IW_AUTH_WPA_VERSION
:

2524 i‡(
∑ømvÆ
 & 
IW_AUTH_WPA_VERSION_DISABLED
)

2525 
vÆ
 = 
WPA_AUTH_DISABLED
;

2526 i‡(
∑ømvÆ
 & (
IW_AUTH_WPA_VERSION_WPA
))

2527 
vÆ
 = 
WPA_AUTH_PSK
 | 
WPA_AUTH_UNSPECIFIED
;

2528 i‡(
∑ømvÆ
 & 
IW_AUTH_WPA_VERSION_WPA2
)

2529 
vÆ
 = 
WPA2_AUTH_PSK
 | 
WPA2_AUTH_UNSPECIFIED
;

2530 
	`WL_TRACE
(("%s: %d: sëtög w∑_authÅÿ0x%0x\n", 
__FUNCTION__
, 
__LINE__
, 
vÆ
));

2531 i‡((
îr‹
 = 
	`dev_wlc_ötv¨_£t
(
dev
, "w∑_auth", 
vÆ
)))

2532  
îr‹
;

2535 
IW_AUTH_CIPHER_PAIRWISE
:

2536 
IW_AUTH_CIPHER_GROUP
:

2538 i‡(
∑ømid
 =
IW_AUTH_CIPHER_PAIRWISE
) {

2539 
iw
->
pw£c
 = 
∑ømvÆ
;

2542 
iw
->
gw£c
 = 
∑ømvÆ
;

2545 i‡((
îr‹
 = 
	`dev_wlc_ötv¨_gë
(
dev
, "w£c", &
vÆ
)))

2546  
îr‹
;

2548 
cùhî_comböed
 = 
iw
->
gw£c
 | iw->
pw£c
;

2549 
vÆ
 &~(
WEP_ENABLED
 | 
TKIP_ENABLED
 | 
AES_ENABLED
);

2550 i‡(
cùhî_comböed
 & (
IW_AUTH_CIPHER_WEP40
 | 
IW_AUTH_CIPHER_WEP104
))

2551 
vÆ
 |
WEP_ENABLED
;

2552 i‡(
cùhî_comböed
 & 
IW_AUTH_CIPHER_TKIP
)

2553 
vÆ
 |
TKIP_ENABLED
;

2554 i‡(
cùhî_comböed
 & 
IW_AUTH_CIPHER_CCMP
)

2555 
vÆ
 |
AES_ENABLED
;

2557 i‡(
iw
->
¥ivacy_övoked
 && !
vÆ
) {

2558 
	`WL_WSEC
(("%s: %s: 'Privacy invoked' TRUE but clearing wsec,ássuming "

2559 "we'ªá WPSÉƒﬁÀe\n", 
dev
->
«me
, 
__FUNCTION__
));

2560 i‡((
îr‹
 = 
	`dev_wlc_ötv¨_£t
(
dev
, "is_WPS_írﬁÀe", 
TRUE
))) {

2561 
	`WL_WSEC
(("FailedÅo set iovar is_WPS_enrollee\n"));

2562  
îr‹
;

2564 } i‡(
vÆ
) {

2565 i‡((
îr‹
 = 
	`dev_wlc_ötv¨_£t
(
dev
, "is_WPS_írﬁÀe", 
FALSE
))) {

2566 
	`WL_WSEC
(("FailedÅo clear iovar is_WPS_enrollee\n"));

2567  
îr‹
;

2571 i‡((
îr‹
 = 
	`dev_wlc_ötv¨_£t
(
dev
, "w£c", 
vÆ
)))

2572  
îr‹
;

2573 #ifde‡
WLFBT


2574 i‡((
∑ømid
 =
IW_AUTH_CIPHER_PAIRWISE
Ë&& (
vÆ
 | 
AES_ENABLED
)) {

2575 i‡((
îr‹
 = 
	`dev_wlc_ötv¨_£t
(
dev
, "sup_wpa", 1)))

2576  
îr‹
;

2578 i‡(
vÆ
 == 0) {

2579 i‡((
îr‹
 = 
	`dev_wlc_ötv¨_£t
(
dev
, "sup_wpa", 0)))

2580  
îr‹
;

2585 
IW_AUTH_KEY_MGMT
:

2586 i‡((
îr‹
 = 
	`dev_wlc_ötv¨_gë
(
dev
, "w∑_auth", &
vÆ
)))

2587  
îr‹
;

2589 i‡(
vÆ
 & (
WPA_AUTH_PSK
 | 
WPA_AUTH_UNSPECIFIED
)) {

2590 i‡(
∑ømvÆ
 & 
IW_AUTH_KEY_MGMT_PSK
)

2591 
vÆ
 = 
WPA_AUTH_PSK
;

2593 
vÆ
 = 
WPA_AUTH_UNSPECIFIED
;

2595 i‡(
vÆ
 & (
WPA2_AUTH_PSK
 | 
WPA2_AUTH_UNSPECIFIED
)) {

2596 i‡(
∑ømvÆ
 & 
IW_AUTH_KEY_MGMT_PSK
)

2597 
vÆ
 = 
WPA2_AUTH_PSK
;

2599 
vÆ
 = 
WPA2_AUTH_UNSPECIFIED
;

2601 
	`WL_TRACE
(("%s: %d: sëtög w∑_authÅÿ%d\n", 
__FUNCTION__
, 
__LINE__
, 
vÆ
));

2602 i‡((
îr‹
 = 
	`dev_wlc_ötv¨_£t
(
dev
, "w∑_auth", 
vÆ
)))

2603  
îr‹
;

2606 
IW_AUTH_TKIP_COUNTERMEASURES
:

2607 
	`dev_wlc_bufv¨_£t
(
dev
, "tkù_cou¡îmósuªs", (*)&
∑ømvÆ
, 1);

2610 
IW_AUTH_80211_AUTH_ALG
:

2612 
	`WL_ERROR
(("SëtögÅhêD11auth %d\n", 
∑ømvÆ
));

2613 i‡(
∑ømvÆ
 & 
IW_AUTH_ALG_OPEN_SYSTEM
)

2614 
vÆ
 = 0;

2615 i‡(
∑ømvÆ
 & 
IW_AUTH_ALG_SHARED_KEY
)

2616 
vÆ
 = 1;

2618 
îr‹
 = 1;

2619 i‡(!
îr‹
 && (îr‹ = 
	`dev_wlc_ötv¨_£t
(
dev
, "auth", 
vÆ
)))

2620  
îr‹
;

2623 
IW_AUTH_WPA_ENABLED
:

2624 i‡(
∑ømvÆ
 == 0) {

2625 
vÆ
 = 0;

2626 
	`WL_TRACE
(("%s: %d: sëtög w∑_authÅÿ%d\n", 
__FUNCTION__
, 
__LINE__
, 
vÆ
));

2627 
îr‹
 = 
	`dev_wlc_ötv¨_£t
(
dev
, "w∑_auth", 
vÆ
);

2628  
îr‹
;

2635 
IW_AUTH_DROP_UNENCRYPTED
:

2636 
	`dev_wlc_bufv¨_£t
(
dev
, "w£c_ª°ri˘", (*)&
∑ømvÆ
, 1);

2639 
IW_AUTH_RX_UNENCRYPTED_EAPOL
:

2640 
	`dev_wlc_bufv¨_£t
(
dev
, "rx_u√n¸y±ed_ópﬁ", (*)&
∑ømvÆ
, 1);

2643 #i‡
WIRELESS_EXT
 > 17

2645 
IW_AUTH_ROAMING_CONTROL
:

2646 
	`WL_TRACE
(("%s: IW_AUTH_ROAMING_CONTROL\n", 
__FUNCTION__
));

2650 
IW_AUTH_PRIVACY_INVOKED
: {

2651 
w£c
;

2653 i‡(
∑ømvÆ
 == 0) {

2654 
iw
->
¥ivacy_övoked
 = 
FALSE
;

2655 i‡((
îr‹
 = 
	`dev_wlc_ötv¨_£t
(
dev
, "is_WPS_írﬁÀe", 
FALSE
))) {

2656 
	`WL_WSEC
(("FailedÅo clear iovar is_WPS_enrollee\n"));

2657  
îr‹
;

2660 
iw
->
¥ivacy_övoked
 = 
TRUE
;

2661 i‡((
îr‹
 = 
	`dev_wlc_ötv¨_gë
(
dev
, "w£c", &
w£c
)))

2662  
îr‹
;

2664 i‡(!
	`WSEC_ENABLED
(
w£c
)) {

2666 i‡((
îr‹
 = 
	`dev_wlc_ötv¨_£t
(
dev
, "is_WPS_írﬁÀe", 
TRUE
))) {

2667 
	`WL_WSEC
(("FailedÅo set iovar is_WPS_enrollee\n"));

2668  
îr‹
;

2671 i‡((
îr‹
 = 
	`dev_wlc_ötv¨_£t
(
dev
, "is_WPS_írﬁÀe", 
FALSE
))) {

2672 
	`WL_WSEC
(("FailedÅo clear iovar is_WPS_enrollee\n"));

2673  
îr‹
;

2688 
	}
}

2689 
	#VAL_PSK
(
_vÆ
Ë(((_vÆË& 
WPA_AUTH_PSK
Ë|| ((_vÆË& 
WPA2_AUTH_PSK
))

	)

2692 
	$wl_iw_gë_w∑auth
(

2693 
√t_devi˚
 *
dev
,

2694 
iw_ªque°_öfo
 *
öfo
,

2695 
iw_∑øm
 *
vwrq
,

2696 *
exåa


2699 
îr‹
;

2700 
∑ømid
;

2701 
∑ømvÆ
 = 0;

2702 
vÆ
;

2703 
wl_iw_t
 *
iw
 = 
	`IW_DEV_IF
(
dev
);

2705 
	`WL_TRACE
(("%s: SIOCGIWAUTH\n", 
dev
->
«me
));

2707 
∑ømid
 = 
vwrq
->
Êags
 & 
IW_AUTH_INDEX
;

2709 
∑ømid
) {

2710 
IW_AUTH_WPA_VERSION
:

2712 i‡((
îr‹
 = 
	`dev_wlc_ötv¨_gë
(
dev
, "w∑_auth", &
vÆ
)))

2713  
îr‹
;

2714 i‡(
vÆ
 & (
WPA_AUTH_NONE
 | 
WPA_AUTH_DISABLED
))

2715 
∑ømvÆ
 = 
IW_AUTH_WPA_VERSION_DISABLED
;

2716 i‡(
vÆ
 & (
WPA_AUTH_PSK
 | 
WPA_AUTH_UNSPECIFIED
))

2717 
∑ømvÆ
 = 
IW_AUTH_WPA_VERSION_WPA
;

2718 i‡(
vÆ
 & (
WPA2_AUTH_PSK
 | 
WPA2_AUTH_UNSPECIFIED
))

2719 
∑ømvÆ
 = 
IW_AUTH_WPA_VERSION_WPA2
;

2722 
IW_AUTH_CIPHER_PAIRWISE
:

2723 
∑ømvÆ
 = 
iw
->
pw£c
;

2726 
IW_AUTH_CIPHER_GROUP
:

2727 
∑ømvÆ
 = 
iw
->
gw£c
;

2730 
IW_AUTH_KEY_MGMT
:

2732 i‡((
îr‹
 = 
	`dev_wlc_ötv¨_gë
(
dev
, "w∑_auth", &
vÆ
)))

2733  
îr‹
;

2734 i‡(
	`VAL_PSK
(
vÆ
))

2735 
∑ømvÆ
 = 
IW_AUTH_KEY_MGMT_PSK
;

2737 
∑ømvÆ
 = 
IW_AUTH_KEY_MGMT_802_1X
;

2740 
IW_AUTH_TKIP_COUNTERMEASURES
:

2741 
	`dev_wlc_bufv¨_gë
(
dev
, "tkù_cou¡îmósuªs", (*)&
∑ømvÆ
, 1);

2744 
IW_AUTH_DROP_UNENCRYPTED
:

2745 
	`dev_wlc_bufv¨_gë
(
dev
, "w£c_ª°ri˘", (*)&
∑ømvÆ
, 1);

2748 
IW_AUTH_RX_UNENCRYPTED_EAPOL
:

2749 
	`dev_wlc_bufv¨_gë
(
dev
, "rx_u√n¸y±ed_ópﬁ", (*)&
∑ømvÆ
, 1);

2752 
IW_AUTH_80211_AUTH_ALG
:

2754 i‡((
îr‹
 = 
	`dev_wlc_ötv¨_gë
(
dev
, "auth", &
vÆ
)))

2755  
îr‹
;

2756 i‡(!
vÆ
)

2757 
∑ømvÆ
 = 
IW_AUTH_ALG_OPEN_SYSTEM
;

2759 
∑ømvÆ
 = 
IW_AUTH_ALG_SHARED_KEY
;

2761 
IW_AUTH_WPA_ENABLED
:

2762 i‡((
îr‹
 = 
	`dev_wlc_ötv¨_gë
(
dev
, "w∑_auth", &
vÆ
)))

2763  
îr‹
;

2764 i‡(
vÆ
)

2765 
∑ømvÆ
 = 
TRUE
;

2767 
∑ømvÆ
 = 
FALSE
;

2770 #i‡
WIRELESS_EXT
 > 17

2772 
IW_AUTH_ROAMING_CONTROL
:

2773 
	`WL_ERROR
(("%s: IW_AUTH_ROAMING_CONTROL\n", 
__FUNCTION__
));

2777 
IW_AUTH_PRIVACY_INVOKED
:

2778 
∑ømvÆ
 = 
iw
->
¥ivacy_övoked
;

2783 
vwrq
->
vÆue
 = 
∑ømvÆ
;

2785 
	}
}

2788 c⁄° 
iw_h™dÀr
 
	gwl_iw_h™dÀr
[] =

2790 (
iw_h™dÀr
Ë
wl_iw_c⁄fig_commô
,

2791 (
iw_h™dÀr
Ë
wl_iw_gë_«me
,

2792 (
iw_h™dÀr
Ë
NULL
,

2793 (
iw_h™dÀr
Ë
NULL
,

2794 (
iw_h™dÀr
Ë
wl_iw_£t_‰eq
,

2795 (
iw_h™dÀr
Ë
wl_iw_gë_‰eq
,

2796 (
iw_h™dÀr
Ë
wl_iw_£t_mode
,

2797 (
iw_h™dÀr
Ë
wl_iw_gë_mode
,

2798 (
iw_h™dÀr
Ë
NULL
,

2799 (
iw_h™dÀr
Ë
NULL
,

2800 (
iw_h™dÀr
Ë
NULL
,

2801 (
iw_h™dÀr
Ë
wl_iw_gë_ønge
,

2802 (
iw_h™dÀr
Ë
NULL
,

2803 (
iw_h™dÀr
Ë
NULL
,

2804 (
iw_h™dÀr
Ë
NULL
,

2805 (
iw_h™dÀr
Ë
NULL
,

2806 (
iw_h™dÀr
Ë
wl_iw_£t_•y
,

2807 (
iw_h™dÀr
Ë
wl_iw_gë_•y
,

2808 (
iw_h™dÀr
Ë
NULL
,

2809 (
iw_h™dÀr
Ë
NULL
,

2810 (
iw_h™dÀr
Ë
wl_iw_£t_w≠
,

2811 (
iw_h™dÀr
Ë
wl_iw_gë_w≠
,

2812 #i‡
WIRELESS_EXT
 > 17

2813 (
iw_h™dÀr
Ë
wl_iw_mlme
,

2815 (
iw_h™dÀr
Ë
NULL
,

2817 (
iw_h™dÀr
Ë
wl_iw_isˇn_gë_≠li°
,

2818 #i‡
WIRELESS_EXT
 > 13

2819 (
iw_h™dÀr
Ë
wl_iw_isˇn_£t_sˇn
,

2820 (
iw_h™dÀr
Ë
wl_iw_isˇn_gë_sˇn
,

2822 (
iw_h™dÀr
Ë
NULL
,

2823 (
iw_h™dÀr
Ë
NULL
,

2825 (
iw_h™dÀr
Ë
wl_iw_£t_essid
,

2826 (
iw_h™dÀr
Ë
wl_iw_gë_essid
,

2827 (
iw_h™dÀr
Ë
wl_iw_£t_nick
,

2828 (
iw_h™dÀr
Ë
wl_iw_gë_nick
,

2829 (
iw_h™dÀr
Ë
NULL
,

2830 (
iw_h™dÀr
Ë
NULL
,

2831 (
iw_h™dÀr
Ë
wl_iw_£t_øã
,

2832 (
iw_h™dÀr
Ë
wl_iw_gë_øã
,

2833 (
iw_h™dÀr
Ë
wl_iw_£t_πs
,

2834 (
iw_h™dÀr
Ë
wl_iw_gë_πs
,

2835 (
iw_h™dÀr
Ë
wl_iw_£t_‰ag
,

2836 (
iw_h™dÀr
Ë
wl_iw_gë_‰ag
,

2837 (
iw_h™dÀr
Ë
wl_iw_£t_txpow
,

2838 (
iw_h™dÀr
Ë
wl_iw_gë_txpow
,

2839 #i‡
WIRELESS_EXT
 > 10

2840 (
iw_h™dÀr
Ë
wl_iw_£t_ªåy
,

2841 (
iw_h™dÀr
Ë
wl_iw_gë_ªåy
,

2843 (
iw_h™dÀr
Ë
wl_iw_£t_ícode
,

2844 (
iw_h™dÀr
Ë
wl_iw_gë_ícode
,

2845 (
iw_h™dÀr
Ë
wl_iw_£t_powî
,

2846 (
iw_h™dÀr
Ë
wl_iw_gë_powî
,

2847 #i‡
WIRELESS_EXT
 > 17

2848 (
iw_h™dÀr
Ë
NULL
,

2849 (
iw_h™dÀr
Ë
NULL
,

2850 (
iw_h™dÀr
Ë
wl_iw_£t_w∑õ
,

2851 (
iw_h™dÀr
Ë
wl_iw_gë_w∑õ
,

2852 (
iw_h™dÀr
Ë
wl_iw_£t_w∑auth
,

2853 (
iw_h™dÀr
Ë
wl_iw_gë_w∑auth
,

2854 (
iw_h™dÀr
Ë
wl_iw_£t_ícodìxt
,

2855 (
iw_h™dÀr
Ë
wl_iw_gë_ícodìxt
,

2856 (
iw_h™dÀr
Ë
wl_iw_£t_pmkß
,

2860 #i‡
WIRELESS_EXT
 > 12

2862 
	mWL_IW_SET_LEDDC
 = 
SIOCIWFIRSTPRIV
,

2863 
	mWL_IW_SET_VLANMODE
,

2864 
	mWL_IW_SET_PM


2867 
iw_h™dÀr
 
	gwl_iw_¥iv_h™dÀr
[] = {

2868 
wl_iw_£t_Àddc
,

2869 
wl_iw_£t_vœnmode
,

2870 
wl_iw_£t_pm


2873 
iw_¥iv_¨gs
 
	gwl_iw_¥iv_¨gs
[] = {

2875 
WL_IW_SET_LEDDC
,

2876 
IW_PRIV_TYPE_INT
 | 
IW_PRIV_SIZE_FIXED
 | 1,

2881 
WL_IW_SET_VLANMODE
,

2882 
IW_PRIV_TYPE_INT
 | 
IW_PRIV_SIZE_FIXED
 | 1,

2887 
WL_IW_SET_PM
,

2888 
IW_PRIV_TYPE_INT
 | 
IW_PRIV_SIZE_FIXED
 | 1,

2894 c⁄° 
iw_h™dÀr_def
 
	gwl_iw_h™dÀr_def
 =

2896 .
num_°™d¨d
 = 
ARRAYSIZE
(
wl_iw_h™dÀr
),

2897 .
	gnum_¥iv©e
 = 
ARRAY_SIZE
(
wl_iw_¥iv_h™dÀr
),

2898 .
	gnum_¥iv©e_¨gs
 = 
ARRAY_SIZE
(
wl_iw_¥iv_¨gs
),

2899 .
	g°™d¨d
 = (
iw_h™dÀr
 *Ë
wl_iw_h™dÀr
,

2900 .
	g¥iv©e
 = 
wl_iw_¥iv_h™dÀr
,

2901 .
	g¥iv©e_¨gs
 = 
wl_iw_¥iv_¨gs
,

2902 #i‡
WIRELESS_EXT
 >= 19

2903 
	ggë_wúñess_°©s
: 
dhd_gë_wúñess_°©s
,

2909 
	$wl_iw_io˘l
(

2910 
√t_devi˚
 *
dev
,

2911 
i‰eq
 *
rq
,

2912 
cmd


2915 
iwªq
 *
wrq
 = (iwªq *Ë
rq
;

2916 
iw_ªque°_öfo
 
öfo
;

2917 
iw_h™dÀr
 
h™dÀr
;

2918 *
exåa
 = 
NULL
;

2919 
size_t
 
tokí_size
 = 1;

2920 
max_tokís
 = 0, 
ªt
 = 0;

2922 i‡(
cmd
 < 
SIOCIWFIRST
 ||

2923 
	`IW_IOCTL_IDX
(
cmd
Ë>
	`ARRAYSIZE
(
wl_iw_h™dÀr
) ||

2924 !(
h™dÀr
 = 
wl_iw_h™dÀr
[
	`IW_IOCTL_IDX
(
cmd
)]))

2925  -
EOPNOTSUPP
;

2927 
cmd
) {

2929 
SIOCSIWESSID
:

2930 
SIOCGIWESSID
:

2931 
SIOCSIWNICKN
:

2932 
SIOCGIWNICKN
:

2933 
max_tokís
 = 
IW_ESSID_MAX_SIZE
 + 1;

2936 
SIOCSIWENCODE
:

2937 
SIOCGIWENCODE
:

2938 #i‡
WIRELESS_EXT
 > 17

2939 
SIOCSIWENCODEEXT
:

2940 
SIOCGIWENCODEEXT
:

2942 
max_tokís
 = 
IW_ENCODING_TOKEN_MAX
;

2945 
SIOCGIWRANGE
:

2946 
max_tokís
 = (
iw_ønge
);

2949 
SIOCGIWAPLIST
:

2950 
tokí_size
 = (
sockaddr
Ë+ (
iw_quÆôy
);

2951 
max_tokís
 = 
IW_MAX_AP
;

2954 #i‡
WIRELESS_EXT
 > 13

2955 
SIOCGIWSCAN
:

2956 i‡(
g_isˇn
)

2957 
max_tokís
 = 
wrq
->
u
.
d©a
.
Àngth
;

2959 
max_tokís
 = 
IW_SCAN_MAX_DATA
;

2963 
SIOCSIWSPY
:

2964 
tokí_size
 = (
sockaddr
);

2965 
max_tokís
 = 
IW_MAX_SPY
;

2968 
SIOCGIWSPY
:

2969 
tokí_size
 = (
sockaddr
Ë+ (
iw_quÆôy
);

2970 
max_tokís
 = 
IW_MAX_SPY
;

2976 i‡(
max_tokís
 && 
wrq
->
u
.
d©a
.
poöãr
) {

2977 i‡(
wrq
->
u
.
d©a
.
Àngth
 > 
max_tokís
)

2978  -
E2BIG
;

2980 i‡(!(
exåa
 = 
	`kmÆloc
(
max_tokís
 * 
tokí_size
, 
GFP_KERNEL
)))

2981  -
ENOMEM
;

2983 i‡(
	`c›y_‰om_u£r
(
exåa
, 
wrq
->
u
.
d©a
.
poöãr
, wrq->u.d©a.
Àngth
 * 
tokí_size
)) {

2984 
	`k‰ì
(
exåa
);

2985  -
EFAULT
;

2989 
öfo
.
cmd
 = cmd;

2990 
öfo
.
Êags
 = 0;

2992 
ªt
 = 
	`h™dÀr
(
dev
, &
öfo
, &
wrq
->
u
, 
exåa
);

2994 i‡(
exåa
) {

2995 i‡(
	`c›y_to_u£r
(
wrq
->
u
.
d©a
.
poöãr
, 
exåa
, wrq->u.d©a.
Àngth
 * 
tokí_size
)) {

2996 
	`k‰ì
(
exåa
);

2997  -
EFAULT
;

3000 
	`k‰ì
(
exåa
);

3003  
ªt
;

3004 
	}
}

3009 
boﬁ


3010 
	$wl_iw_c⁄n_°©us_°r
(
uöt32
 
evít_ty≥
, uöt32 
°©us
, uöt32 
ªas⁄
,

3011 * 
°rögBuf
, 
uöt
 
buÊí
)

3013 
	sc⁄n_Áû_evít_m≠_t
 {

3014 
uöt32
 
öEvít
;

3015 
uöt32
 
öSètus
;

3016 
uöt32
 
öRós⁄
;

3017 c⁄° * 
outName
;

3018 c⁄° * 
outCau£
;

3019 } 
	tc⁄n_Áû_evít_m≠_t
;

3022 
	#WL_IW_DONT_CARE
 9999

	)

3023 c⁄° 
c⁄n_Áû_evít_m≠_t
 
evít_m≠
 [] = {

3026 {
WLC_E_SET_SSID
, 
WLC_E_STATUS_SUCCESS
, 
WL_IW_DONT_CARE
,

3028 {
WLC_E_SET_SSID
, 
WLC_E_STATUS_NO_NETWORKS
, 
WL_IW_DONT_CARE
,

3030 {
WLC_E_SET_SSID
, 
WLC_E_STATUS_FAIL
, 
WL_IW_DONT_CARE
,

3032 {
WLC_E_PRUNE
, 
WL_IW_DONT_CARE
, 
WLC_E_PRUNE_ENCR_MISMATCH
,

3034 {
WLC_E_PRUNE
, 
WL_IW_DONT_CARE
, 
WLC_E_RSN_MISMATCH
,

3036 {
WLC_E_AUTH
, 
WLC_E_STATUS_TIMEOUT
, 
WL_IW_DONT_CARE
,

3038 {
WLC_E_AUTH
, 
WLC_E_STATUS_FAIL
, 
WL_IW_DONT_CARE
,

3040 {
WLC_E_AUTH
, 
WLC_E_STATUS_NO_ACK
, 
WL_IW_DONT_CARE
,

3042 {
WLC_E_REASSOC
, 
WLC_E_STATUS_FAIL
, 
WL_IW_DONT_CARE
,

3044 {
WLC_E_REASSOC
, 
WLC_E_STATUS_TIMEOUT
, 
WL_IW_DONT_CARE
,

3046 {
WLC_E_REASSOC
, 
WLC_E_STATUS_ABORT
, 
WL_IW_DONT_CARE
,

3048 {
WLC_E_PSK_SUP
, 
WLC_SUP_KEYED
, 
WL_IW_DONT_CARE
,

3050 {
WLC_E_PSK_SUP
, 
WL_IW_DONT_CARE
, WL_IW_DONT_CARE,

3052 {
WLC_E_DEAUTH_IND
, 
WL_IW_DONT_CARE
, WL_IW_DONT_CARE,

3054 {
WLC_E_DISASSOC_IND
, 
WL_IW_DONT_CARE
, WL_IW_DONT_CARE,

3056 {
WLC_E_DISASSOC
, 
WL_IW_DONT_CARE
, WL_IW_DONT_CARE,

3060 c⁄° * 
«me
 = "";

3061 c⁄° * 
ˇu£
 = 
NULL
;

3062 
i
;

3065 
i
 = 0; i < (
evít_m≠
)/(event_map[0]); i++) {

3066 c⁄° 
c⁄n_Áû_evít_m≠_t
* 
row
 = &
evít_m≠
[
i
];

3067 i‡(
row
->
öEvít
 =
evít_ty≥
 &&

3068 (
row
->
öSètus
 =
°©us
 ||Ñow->öSètu†=
WL_IW_DONT_CARE
) &&

3069 (
row
->
öRós⁄
 =
ªas⁄
 ||Ñow->öRós⁄ =
WL_IW_DONT_CARE
)) {

3070 
«me
 = 
row
->
outName
;

3071 
ˇu£
 = 
row
->
outCau£
;

3077 i‡(
ˇu£
) {

3078 
	`mem£t
(
°rögBuf
, 0, 
buÊí
);

3079 
	`¢¥ötf
(
°rögBuf
, 
buÊí
, "%s %s %02d %02d",

3080 
«me
, 
ˇu£
, 
°©us
, 
ªas⁄
);

3081 
	`WL_TRACE
(("C⁄√˘i⁄ sètus: %s\n", 
°rögBuf
));

3082  
TRUE
;

3084  
FALSE
;

3086 
	}
}

3088 #i‡(
WIRELESS_EXT
 > 14)

3093 
boﬁ


3094 
	$wl_iw_check_c⁄n_Áû
(
wl_evít_msg_t
 *
e
, * 
°rögBuf
, 
uöt
 
buÊí
)

3096 
uöt32
 
evít
 = 
	`¡oh32
(
e
->
evít_ty≥
);

3097 
uöt32
 
°©us
 = 
	`¡oh32
(
e
->status);

3098 
uöt32
 
ªas⁄
 = 
	`¡oh32
(
e
->reason);

3100 i‡(
	`wl_iw_c⁄n_°©us_°r
(
evít
, 
°©us
, 
ªas⁄
, 
°rögBuf
, 
buÊí
)) {

3101  
TRUE
;

3104  
FALSE
;

3106 
	}
}

3109 #i‚de‡
IW_CUSTOM_MAX


3110 
	#IW_CUSTOM_MAX
 256

	)

3114 
	$wl_iw_evít
(
√t_devi˚
 *
dev
, 
wl_evít_msg_t
 *
e
, * 
d©a
)

3116 #i‡
WIRELESS_EXT
 > 13

3117 
iwªq_d©a
 
wrqu
;

3118 
exåa
[
IW_CUSTOM_MAX
 + 1];

3119 
cmd
 = 0;

3120 
uöt32
 
evít_ty≥
 = 
	`¡oh32
(
e
->event_type);

3121 
uöt16
 
Êags
 = 
	`¡oh16
(
e
->flags);

3122 
uöt32
 
d©Æí
 = 
	`¡oh32
(
e
->datalen);

3123 
uöt32
 
°©us
 = 
	`¡oh32
(
e
->status);

3125 
	`mem£t
(&
wrqu
, 0, (wrqu));

3126 
	`mem£t
(
exåa
, 0, (extra));

3128 
	`mem˝y
(
wrqu
.
addr
.
ß_d©a
, &
e
->addr, 
ETHER_ADDR_LEN
);

3129 
wrqu
.
addr
.
ß_Ámûy
 = 
ARPHRD_ETHER
;

3131 
evít_ty≥
) {

3132 
WLC_E_TXFAIL
:

3133 
cmd
 = 
IWEVTXDROP
;

3135 #i‡
WIRELESS_EXT
 > 14

3136 
WLC_E_JOIN
:

3137 
WLC_E_ASSOC_IND
:

3138 
WLC_E_REASSOC_IND
:

3139 
cmd
 = 
IWEVREGISTERED
;

3141 
WLC_E_DEAUTH_IND
:

3142 
WLC_E_DISASSOC_IND
:

3143 
cmd
 = 
SIOCGIWAP
;

3144 
wrqu
.
d©a
.
Àngth
 = 
	`°æí
(
exåa
);

3145 
	`bzîo
(
wrqu
.
addr
.
ß_d©a
, 
ETHER_ADDR_LEN
);

3146 
	`bzîo
(&
exåa
, 
ETHER_ADDR_LEN
);

3149 
WLC_E_LINK
:

3150 
WLC_E_NDIS_LINK
:

3151 
cmd
 = 
SIOCGIWAP
;

3152 
wrqu
.
d©a
.
Àngth
 = 
	`°æí
(
exåa
);

3153 i‡(!(
Êags
 & 
WLC_EVENT_MSG_LINK
)) {

3154 
	`bzîo
(
wrqu
.
addr
.
ß_d©a
, 
ETHER_ADDR_LEN
);

3155 
	`bzîo
(&
exåa
, 
ETHER_ADDR_LEN
);

3158 
WLC_E_ACTION_FRAME
:

3159 
cmd
 = 
IWEVCUSTOM
;

3160 i‡(
d©Æí
 + 1 <(
exåa
)) {

3161 
wrqu
.
d©a
.
Àngth
 = 
d©Æí
 + 1;

3162 
exåa
[0] = 
WLC_E_ACTION_FRAME
;

3163 
	`mem˝y
(&
exåa
[1], 
d©a
, 
d©Æí
);

3164 
	`WL_TRACE
(("WLC_E_ACTION_FRAMEÜí %d \n", 
wrqu
.
d©a
.
Àngth
));

3168 
WLC_E_ACTION_FRAME_COMPLETE
:

3169 
cmd
 = 
IWEVCUSTOM
;

3170 i‡((
°©us
Ë+ 1 <(
exåa
)) {

3171 
wrqu
.
d©a
.
Àngth
 = (
°©us
) + 1;

3172 
exåa
[0] = 
WLC_E_ACTION_FRAME_COMPLETE
;

3173 
	`mem˝y
(&
exåa
[1], &
°©us
, (status));

3174 
	`WL_TRACE
(("wl_iw_evíà°©u†%d \n", 
°©us
));

3178 #i‡
WIRELESS_EXT
 > 17

3179 
WLC_E_MIC_ERROR
: {

3180 
iw_mich´lmicÁûuª
 *
mi˚ºevt
 = (iw_mich´lmicÁûuª *)&
exåa
;

3181 
cmd
 = 
IWEVMICHAELMICFAILURE
;

3182 
wrqu
.
d©a
.
Àngth
 = (
iw_mich´lmicÁûuª
);

3183 i‡(
Êags
 & 
WLC_EVENT_MSG_GROUP
)

3184 
mi˚ºevt
->
Êags
 |
IW_MICFAILURE_GROUP
;

3186 
mi˚ºevt
->
Êags
 |
IW_MICFAILURE_PAIRWISE
;

3187 
	`mem˝y
(
mi˚ºevt
->
§c_addr
.
ß_d©a
, &
e
->
addr
, 
ETHER_ADDR_LEN
);

3188 
mi˚ºevt
->
§c_addr
.
ß_Ámûy
 = 
ARPHRD_ETHER
;

3193 
WLC_E_ASSOC_REQ_IE
:

3194 
cmd
 = 
IWEVASSOCREQIE
;

3195 
wrqu
.
d©a
.
Àngth
 = 
d©Æí
;

3196 i‡(
d©Æí
 < (
exåa
))

3197 
	`mem˝y
(
exåa
, 
d©a
, 
d©Æí
);

3200 
WLC_E_ASSOC_RESP_IE
:

3201 
cmd
 = 
IWEVASSOCRESPIE
;

3202 
wrqu
.
d©a
.
Àngth
 = 
d©Æí
;

3203 i‡(
d©Æí
 < (
exåa
))

3204 
	`mem˝y
(
exåa
, 
d©a
, 
d©Æí
);

3207 
WLC_E_PMKID_CACHE
: {

3208 
iw_pmkid_ˇnd
 *
iwpmkidˇnd
 = (iw_pmkid_ˇnd *)&
exåa
;

3209 
pmkid_ˇnd_li°_t
 *
pmkˇndli°
;

3210 
pmkid_ˇnd_t
 *
pmkidˇnd
;

3211 
cou¡
;

3213 i‡(
d©a
 =
NULL
)

3216 
cmd
 = 
IWEVPMKIDCAND
;

3217 
pmkˇndli°
 = 
d©a
;

3218 
cou¡
 = 
	`¡oh32_ua
((
uöt8
 *)&
pmkˇndli°
->
≈mkid_ˇnd
);

3219 
wrqu
.
d©a
.
Àngth
 = (
iw_pmkid_ˇnd
);

3220 
pmkidˇnd
 = 
pmkˇndli°
->
pmkid_ˇnd
;

3221 
cou¡
) {

3222 
	`bzîo
(
iwpmkidˇnd
, (
iw_pmkid_ˇnd
));

3223 i‡(
pmkidˇnd
->
¥óuth
)

3224 
iwpmkidˇnd
->
Êags
 |
IW_PMKID_CAND_PREAUTH
;

3225 
	`bc›y
(&
pmkidˇnd
->
BSSID
, &
iwpmkidˇnd
->
bssid
.
ß_d©a
,

3226 
ETHER_ADDR_LEN
);

3227 
	`wúñess_£nd_evít
(
dev
, 
cmd
, &
wrqu
, 
exåa
);

3228 
pmkidˇnd
++;

3229 
cou¡
--;

3235 
WLC_E_SCAN_COMPLETE
:

3236 #i‡
WIRELESS_EXT
 > 14

3237 
cmd
 = 
SIOCGIWSCAN
;

3239 
	`WL_TRACE
(("event WLC_E_SCAN_COMPLETE\n"));

3240 i‡((
g_isˇn
Ë&& (g_isˇn->
sysioc_pid
 >= 0) &&

3241 (
g_isˇn
->
isˇn_°©e
 !
ISCAN_STATE_IDLE
))

3242 
	`up
(&
g_isˇn
->
sysioc_£m
);

3250 i‡(
cmd
) {

3251 i‡(
cmd
 =
SIOCGIWSCAN
)

3252 
	`wúñess_£nd_evít
(
dev
, 
cmd
, &
wrqu
, 
NULL
);

3254 
	`wúñess_£nd_evít
(
dev
, 
cmd
, &
wrqu
, 
exåa
);

3257 #i‡
WIRELESS_EXT
 > 14

3261 
	`mem£t
(
exåa
, 0, (extra));

3262 i‡(
	`wl_iw_check_c⁄n_Áû
(
e
, 
exåa
, (extra))) {

3263 
cmd
 = 
IWEVCUSTOM
;

3264 
wrqu
.
d©a
.
Àngth
 = 
	`°æí
(
exåa
);

3265 
	`wúñess_£nd_evít
(
dev
, 
cmd
, &
wrqu
, 
exåa
);

3270 
	}
}

3272 
	$wl_iw_gë_wúñess_°©s
(
√t_devi˚
 *
dev
, 
iw_°©i°ics
 *
w°©s
)

3274 
ªs
 = 0;

3275 
wl_˙t_t
 
˙t
;

3276 
phy_noi£
;

3277 
rssi
;

3278 
scb_vÆ_t
 
scb_vÆ
;

3280 
phy_noi£
 = 0;

3281 i‡((
ªs
 = 
	`dev_wlc_io˘l
(
dev
, 
WLC_GET_PHY_NOISE
, &
phy_noi£
, (phy_noise))))

3282 
d⁄e
;

3284 
phy_noi£
 = 
	`dtoh32
(phy_noise);

3285 
	`WL_TRACE
(("wl_iw_gë_wúñess_°©†phyÇoi£=%d\¿*****", 
phy_noi£
));

3287 
scb_vÆ
.
vÆ
 = 0;

3288 i‡((
ªs
 = 
	`dev_wlc_io˘l
(
dev
, 
WLC_GET_RSSI
, &
scb_vÆ
, (
scb_vÆ_t
))))

3289 
d⁄e
;

3291 
rssi
 = 
	`dtoh32
(
scb_vÆ
.
vÆ
);

3292 
	`WL_TRACE
(("wl_iw_gë_wúñess_°©†rssi=%d ****** \n", 
rssi
));

3293 i‡(
rssi
 <
WL_IW_RSSI_NO_SIGNAL
)

3294 
w°©s
->
quÆ
.qual = 0;

3295 i‡(
rssi
 <
WL_IW_RSSI_VERY_LOW
)

3296 
w°©s
->
quÆ
.qual = 1;

3297 i‡(
rssi
 <
WL_IW_RSSI_LOW
)

3298 
w°©s
->
quÆ
.qual = 2;

3299 i‡(
rssi
 <
WL_IW_RSSI_GOOD
)

3300 
w°©s
->
quÆ
.qual = 3;

3301 i‡(
rssi
 <
WL_IW_RSSI_VERY_GOOD
)

3302 
w°©s
->
quÆ
.qual = 4;

3304 
w°©s
->
quÆ
.qual = 5;

3307 
w°©s
->
quÆ
.
Àvñ
 = 0x100 + 
rssi
;

3308 
w°©s
->
quÆ
.
noi£
 = 0x100 + 
phy_noi£
;

3309 #i‡
WIRELESS_EXT
 > 18

3310 
w°©s
->
quÆ
.
upd©ed
 |(
IW_QUAL_ALL_UPDATED
 | 
IW_QUAL_DBM
);

3312 
w°©s
->
quÆ
.
upd©ed
 |= 7;

3315 #i‡
WIRELESS_EXT
 > 11

3316 
	`WL_TRACE
(("wl_iw_gë_wúñess_°©†cou¡îs=%d\¿*****", ()(
wl_˙t_t
)));

3318 
	`mem£t
(&
˙t
, 0, (
wl_˙t_t
));

3319 
ªs
 = 
	`dev_wlc_bufv¨_gë
(
dev
, "cou¡îs", (*)&
˙t
, (
wl_˙t_t
));

3320 i‡(
ªs
)

3322 
	`WL_ERROR
(("wl_iw_gë_wúñess_°©†cou¡î†ÁûedÉº‹=%d ****** \n", 
ªs
));

3323 
d⁄e
;

3326 
˙t
.
vîsi⁄
 = 
	`dtoh16
(cnt.version);

3327 i‡(
˙t
.
vîsi⁄
 !
WL_CNT_T_VERSION
) {

3328 
	`WL_TRACE
(("\tIncorrect version of counters struct:Éxpected %d; got %d\n",

3329 
WL_CNT_T_VERSION
, 
˙t
.
vîsi⁄
));

3330 
d⁄e
;

3333 
w°©s
->
disˇrd
.
nwid
 = 0;

3334 
w°©s
->
disˇrd
.
code
 = 
	`dtoh32
(
˙t
.
rxundec
);

3335 
w°©s
->
disˇrd
.
‰agmít
 = 
	`dtoh32
(
˙t
.
rx‰agîr
);

3336 
w°©s
->
disˇrd
.
ªåõs
 = 
	`dtoh32
(
˙t
.
txÁû
);

3337 
w°©s
->
disˇrd
.
misc
 = 
	`dtoh32
(
˙t
.
rxru¡
Ë+ dtoh32(˙t.
rxgü¡
);

3338 
w°©s
->
miss
.
bóc⁄
 = 0;

3340 
	`WL_TRACE
(("wl_iw_get_wireless_stats countersÅxframe=%dÅxbyte=%d\n",

3341 
	`dtoh32
(
˙t
.
tx‰ame
), dtoh32(˙t.
txbyã
)));

3342 
	`WL_TRACE
(("wl_iw_gë_wúñess_°©†cou¡î†rx‰mtoﬁ⁄g=%d\n", 
	`dtoh32
(
˙t
.
rx‰mtoﬁ⁄g
)));

3343 
	`WL_TRACE
(("wl_iw_gë_wúñess_°©†cou¡î†rxbad∂˝=%d\n", 
	`dtoh32
(
˙t
.
rxbad∂˝
)));

3344 
	`WL_TRACE
(("wl_iw_gë_wúñess_°©†cou¡î†rxundec=%d\n", 
	`dtoh32
(
˙t
.
rxundec
)));

3345 
	`WL_TRACE
(("wl_iw_gë_wúñess_°©†cou¡î†rx‰agîr=%d\n", 
	`dtoh32
(
˙t
.
rx‰agîr
)));

3346 
	`WL_TRACE
(("wl_iw_gë_wúñess_°©†cou¡î†txÁû=%d\n", 
	`dtoh32
(
˙t
.
txÁû
)));

3347 
	`WL_TRACE
(("wl_iw_gë_wúñess_°©†cou¡î†rxru¡=%d\n", 
	`dtoh32
(
˙t
.
rxru¡
)));

3348 
	`WL_TRACE
(("wl_iw_gë_wúñess_°©†cou¡î†rxgü¡=%d\n", 
	`dtoh32
(
˙t
.
rxgü¡
)));

3352 
d⁄e
:

3353  
ªs
;

3354 
	}
}

3357 
	$wl_iw_timîfunc
(
ul⁄g
 
d©a
)

3359 
isˇn_öfo_t
 *
isˇn
 = (isˇn_öfo_à*)
d©a
;

3360 
isˇn
->
timî_⁄
 = 0;

3361 i‡(
isˇn
->
isˇn_°©e
 !
ISCAN_STATE_IDLE
) {

3362 
	`WL_TRACE
(("timerÅrigger\n"));

3363 
	`up
(&
isˇn
->
sysioc_£m
);

3365 
	}
}

3368 
	$wl_iw_£t_evít_mask
(
√t_devi˚
 *
dev
)

3370 
evítmask
[
WL_EVENTING_MASK_LEN
];

3371 
iovbuf
[
WL_EVENTING_MASK_LEN
 + 12];

3373 
	`dev_iw_iov¨_gëbuf
(
dev
, "evít_msgs", "", 0, 
iovbuf
, (iovbuf));

3374 
	`bc›y
(
iovbuf
, 
evítmask
, 
WL_EVENTING_MASK_LEN
);

3375 
	`£tbô
(
evítmask
, 
WLC_E_SCAN_COMPLETE
);

3376 
	`dev_iw_iov¨_£tbuf
(
dev
, "evít_msgs", 
evítmask
, 
WL_EVENTING_MASK_LEN
,

3377 
iovbuf
, (iovbuf));

3379 
	}
}

3382 
	$wl_iw_isˇn_¥ï
(
wl_sˇn_∑øms_t
 *
∑øms
, 
wlc_ssid_t
 *
ssid
)

3384 
îr
 = 0;

3386 
	`mem˝y
(&
∑øms
->
bssid
, &
ëhî_bˇ°
, 
ETHER_ADDR_LEN
);

3387 
∑øms
->
bss_ty≥
 = 
DOT11_BSSTYPE_ANY
;

3388 
∑øms
->
sˇn_ty≥
 = 0;

3389 
∑øms
->
≈robes
 = -1;

3390 
∑øms
->
a˘ive_time
 = -1;

3391 
∑øms
->
∑ssive_time
 = -1;

3392 
∑øms
->
home_time
 = -1;

3393 
∑øms
->
ch™√l_num
 = 0;

3395 
∑øms
->
≈robes
 = 
	`htod32
(params->nprobes);

3396 
∑øms
->
a˘ive_time
 = 
	`htod32
(params->active_time);

3397 
∑øms
->
∑ssive_time
 = 
	`htod32
(params->passive_time);

3398 
∑øms
->
home_time
 = 
	`htod32
(params->home_time);

3399 i‡(
ssid
 && ssid->
SSID_Àn
)

3400 
	`mem˝y
(&
∑øms
->
ssid
, ssid, (
wlc_ssid_t
));

3402  
îr
;

3403 
	}
}

3406 
	$wl_iw_isˇn
(
isˇn_öfo_t
 *
isˇn
, 
wlc_ssid_t
 *
ssid
, 
uöt16
 
a˘i⁄
)

3408 
∑øms_size
 = (
WL_SCAN_PARAMS_FIXED_SIZE
 + 
	`OFFSETOF
(
wl_isˇn_∑øms_t
, 
∑øms
));

3409 
wl_isˇn_∑øms_t
 *
∑øms
;

3410 
îr
 = 0;

3412 i‡(
ssid
 && ssid->
SSID_Àn
) {

3413 
∑øms_size
 +(
wlc_ssid_t
);

3415 
∑øms
 = (
wl_isˇn_∑øms_t
*)
	`kmÆloc
(
∑øms_size
, 
GFP_KERNEL
);

3416 i‡(
∑øms
 =
NULL
) {

3417  -
ENOMEM
;

3419 
	`mem£t
(
∑øms
, 0, 
∑øms_size
);

3420 
	`ASSERT
(
∑øms_size
 < 
WLC_IOCTL_SMLEN
);

3422 
îr
 = 
	`wl_iw_isˇn_¥ï
(&
∑øms
->∑øms, 
ssid
);

3424 i‡(!
îr
) {

3425 
∑øms
->
vîsi⁄
 = 
	`htod32
(
ISCAN_REQ_VERSION
);

3426 
∑øms
->
a˘i⁄
 = 
	`htod16
(action);

3427 
∑øms
->
sˇn_duøti⁄
 = 
	`htod16
(0);

3430 (Ë
	`dev_iw_iov¨_£tbuf
(
isˇn
->
dev
, "isˇn", 
∑øms
, 
∑øms_size
,

3431 
isˇn
->
io˘lbuf
, 
WLC_IOCTL_SMLEN
);

3434 
	`k‰ì
(
∑øms
);

3435  
îr
;

3436 
	}
}

3438 
uöt32


3439 
	$wl_iw_isˇn_gë
(
isˇn_öfo_t
 *
isˇn
)

3441 
isˇn_buf_t
 * 
buf
;

3442 
isˇn_buf_t
 * 
±r
;

3443 
wl_isˇn_ªsu…s_t
 * 
li°_buf
;

3444 
wl_isˇn_ªsu…s_t
 
li°
;

3445 
wl_sˇn_ªsu…s_t
 *
ªsu…s
;

3446 
uöt32
 
°©us
;

3449 i‡(
isˇn
->
li°_cur
) {

3450 
buf
 = 
isˇn
->
li°_cur
;

3451 
isˇn
->
li°_cur
 = 
buf
->
√xt
;

3454 
buf
 = 
	`kmÆloc
((
isˇn_buf_t
), 
GFP_KERNEL
);

3455 i‡(!
buf
)

3456  
WL_SCAN_RESULTS_ABORTED
;

3457 
buf
->
√xt
 = 
NULL
;

3458 i‡(!
isˇn
->
li°_hdr
)

3459 
isˇn
->
li°_hdr
 = 
buf
;

3461 
±r
 = 
isˇn
->
li°_hdr
;

3462 
±r
->
√xt
) {

3463 
±r
 =Öå->
√xt
;

3465 
±r
->
√xt
 = 
buf
;

3468 
	`mem£t
(
buf
->
isˇn_buf
, 0, 
WLC_IW_ISCAN_MAXLEN
);

3469 
li°_buf
 = (
wl_isˇn_ªsu…s_t
*)
buf
->
isˇn_buf
;

3470 
ªsu…s
 = &
li°_buf
->results;

3471 
ªsu…s
->
buÊí
 = 
WL_ISCAN_RESULTS_FIXED_SIZE
;

3472 
ªsu…s
->
vîsi⁄
 = 0;

3473 
ªsu…s
->
cou¡
 = 0;

3475 
	`mem£t
(&
li°
, 0, (list));

3476 
li°
.
ªsu…s
.
buÊí
 = 
	`htod32
(
WLC_IW_ISCAN_MAXLEN
);

3477 (Ë
	`dev_iw_iov¨_gëbuf
(

3478 
isˇn
->
dev
,

3480 &
li°
,

3481 
WL_ISCAN_RESULTS_FIXED_SIZE
,

3482 
buf
->
isˇn_buf
,

3483 
WLC_IW_ISCAN_MAXLEN
);

3484 
ªsu…s
->
buÊí
 = 
	`dtoh32
(results->buflen);

3485 
ªsu…s
->
vîsi⁄
 = 
	`dtoh32
(results->version);

3486 
ªsu…s
->
cou¡
 = 
	`dtoh32
(results->count);

3487 
	`WL_TRACE
(("ªsu…s->cou¡ = %d\n", 
ªsu…s
->
cou¡
));

3489 
	`WL_TRACE
(("ªsu…s->buÊí = %d\n", 
ªsu…s
->
buÊí
));

3490 
°©us
 = 
	`dtoh32
(
li°_buf
->status);

3491  
°©us
;

3492 
	}
}

3494 
	$wl_iw_£nd_sˇn_com∂ëe
(
isˇn_öfo_t
 *
isˇn
)

3496 
iwªq_d©a
 
wrqu
;

3498 
	`mem£t
(&
wrqu
, 0, (wrqu));

3501 
	`wúñess_£nd_evít
(
isˇn
->
dev
, 
SIOCGIWSCAN
, &
wrqu
, 
NULL
);

3502 
	}
}

3505 
	$_isˇn_sysioc_thªad
(*
d©a
)

3507 
uöt32
 
°©us
;

3508 
isˇn_öfo_t
 *
isˇn
 = (isˇn_öfo_à*)
d©a
;

3510 
	`DAEMONIZE
("iscan_sysioc");

3512 
°©us
 = 
WL_SCAN_RESULTS_PARTIAL
;

3513 
	`down_öãºu±ibÀ
(&
isˇn
->
sysioc_£m
) == 0) {

3514 i‡(
isˇn
->
timî_⁄
) {

3515 
	`dñ_timî
(&
isˇn
->
timî
);

3516 
isˇn
->
timî_⁄
 = 0;

3519 #i‡(
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 27))

3520 
	`π∆_lock
();

3522 
°©us
 = 
	`wl_iw_isˇn_gë
(
isˇn
);

3523 #i‡(
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 27))

3524 
	`π∆_u∆ock
();

3527 
°©us
) {

3528 
WL_SCAN_RESULTS_PARTIAL
:

3529 
	`WL_TRACE
(("iscanresults incomplete\n"));

3530 #i‡(
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 27))

3531 
	`π∆_lock
();

3534 
	`wl_iw_isˇn
(
isˇn
, 
NULL
, 
WL_SCAN_ACTION_CONTINUE
);

3535 #i‡(
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 27))

3536 
	`π∆_u∆ock
();

3539 
isˇn
->
timî
.
expúes
 = 
jiffõs
 + 
	`m£cs_to_jiffõs
(isˇn->
timî_ms
);

3540 
	`add_timî
(&
isˇn
->
timî
);

3541 
isˇn
->
timî_⁄
 = 1;

3543 
WL_SCAN_RESULTS_SUCCESS
:

3544 
	`WL_TRACE
(("iscanresults complete\n"));

3545 
isˇn
->
isˇn_°©e
 = 
ISCAN_STATE_IDLE
;

3546 
	`wl_iw_£nd_sˇn_com∂ëe
(
isˇn
);

3548 
WL_SCAN_RESULTS_PENDING
:

3549 
	`WL_TRACE
(("iscanresultsÖending\n"));

3551 
isˇn
->
timî
.
expúes
 = 
jiffõs
 + 
	`m£cs_to_jiffõs
(isˇn->
timî_ms
);

3552 
	`add_timî
(&
isˇn
->
timî
);

3553 
isˇn
->
timî_⁄
 = 1;

3555 
WL_SCAN_RESULTS_ABORTED
:

3556 
	`WL_TRACE
(("iscanresultsáborted\n"));

3557 
isˇn
->
isˇn_°©e
 = 
ISCAN_STATE_IDLE
;

3558 
	`wl_iw_£nd_sˇn_com∂ëe
(
isˇn
);

3561 
	`WL_TRACE
(("isˇƒesu…†ªtu∫ed unknow¿°©u†%d\n", 
°©us
));

3565 
	`com∂ëe_™d_exô
(&
isˇn
->
sysioc_exôed
, 0);

3566 
	}
}

3569 
	$wl_iw_©èch
(
√t_devi˚
 *
dev
, * 
dhdp
)

3571 
isˇn_öfo_t
 *
isˇn
 = 
NULL
;

3573 i‡(!
dev
)

3576 
isˇn
 = 
	`kmÆloc
((
isˇn_öfo_t
), 
GFP_KERNEL
);

3577 i‡(!
isˇn
)

3578  -
ENOMEM
;

3579 
	`mem£t
(
isˇn
, 0, (
isˇn_öfo_t
));

3580 
isˇn
->
sysioc_pid
 = -1;

3582 
g_isˇn
 = 
isˇn
;

3583 
isˇn
->
dev
 = dev;

3584 
isˇn
->
isˇn_°©e
 = 
ISCAN_STATE_IDLE
;

3588 
isˇn
->
timî_ms
 = 2000;

3589 
	`öô_timî
(&
isˇn
->
timî
);

3590 
isˇn
->
timî
.
d©a
 = (
ul⁄g
)iscan;

3591 
isˇn
->
timî
.
fun˘i⁄
 = 
wl_iw_timîfunc
;

3593 
	`£ma_öô
(&
isˇn
->
sysioc_£m
, 0);

3594 
	`öô_com∂ëi⁄
(&
isˇn
->
sysioc_exôed
);

3595 
isˇn
->
sysioc_pid
 = 
	`kî√l_thªad
(
_isˇn_sysioc_thªad
, iscan, 0);

3596 i‡(
isˇn
->
sysioc_pid
 < 0)

3597  -
ENOMEM
;

3599 
	}
}

3601 
	$wl_iw_dëach
()

3603 
isˇn_buf_t
 *
buf
;

3604 
isˇn_öfo_t
 *
isˇn
 = 
g_isˇn
;

3605 i‡(!
isˇn
)

3607 i‡(
isˇn
->
sysioc_pid
 >= 0) {

3608 
	`KILL_PROC
(
isˇn
->
sysioc_pid
, 
SIGTERM
);

3609 
	`waô_f‹_com∂ëi⁄
(&
isˇn
->
sysioc_exôed
);

3612 
isˇn
->
li°_hdr
) {

3613 
buf
 = 
isˇn
->
li°_hdr
->
√xt
;

3614 
	`k‰ì
(
isˇn
->
li°_hdr
);

3615 
isˇn
->
li°_hdr
 = 
buf
;

3617 
	`k‰ì
(
isˇn
);

3618 
g_isˇn
 = 
NULL
;

3619 
	}
}

	@wl_linux_mon.c

27 
	~<o¶.h
>

28 
	~<löux/°rög.h
>

29 
	~<löux/moduÀ.h
>

30 
	~<löux/√tdevi˚.h
>

31 
	~<löux/ëhîdevi˚.h
>

32 
	~<löux/if_¨p.h
>

33 
	~<löux/õì80211.h
>

34 
	~<löux/π√éök.h
>

35 
	~<√t/õì80211_ødiŸ≠.h
>

37 
	~<wlio˘l.h
>

38 
	~<bcmutûs.h
>

39 
	~<dhd_dbg.h
>

40 
	~<dngl_°©s.h
>

41 
	~<dhd.h
>

43 
	em⁄ô‹_°©es


45 
	mMONITOR_STATE_DEINIT
 = 0x0,

46 
	mMONITOR_STATE_INIT
 = 0x1,

47 
	mMONITOR_STATE_INTERFACE_ADDED
 = 0x2,

48 
	mMONITOR_STATE_INTERFACE_DELETED
 = 0x4

49 } 
	tm⁄ô‹_°©es_t
;

50 
dhd_add_m⁄ô‹
(*
«me
, 
√t_devi˚
 **
√w_ndev
);

51 
dhd_°¨t_xmô
(
sk_buff
 *
skb
, 
√t_devi˚
 *
√t
);

52 
dhd_dñ_m⁄ô‹
(
√t_devi˚
 *
ndev
);

53 
dhd_m⁄ô‹_öô
(*
dhd_pub
);

54 
dhd_m⁄ô‹_unöô
();

59 #i‚de‡
DHD_MAX_IFS


60 
	#DHD_MAX_IFS
 16

	)

62 
	#MON_PRINT
(
f‹m©
, ...Ë
	`¥ötk
("DHD-MON: %†" f‹m©, 
__func__
, ##
__VA_ARGS__
)

	)

63 
	#MON_TRACE
 
MON_PRINT


	)

65 
	sm⁄ô‹_öãrÁ˚
 {

66 
	mødiŸ≠_íabÀd
;

67 
√t_devi˚
* 
	mªÆ_ndev
;

68 
√t_devi˚
* 
	mm⁄_ndev
;

69 } 
	tm⁄ô‹_öãrÁ˚
;

71 
	sdhd_löux_m⁄ô‹
 {

72 *
	mdhd_pub
;

73 
m⁄ô‹_°©es_t
 
	mm⁄ô‹_°©e
;

74 
m⁄ô‹_öãrÁ˚
 
	mm⁄_if
[
DHD_MAX_IFS
];

75 
muãx
 
	mlock
;

76 } 
	tdhd_löux_m⁄ô‹_t
;

78 
dhd_löux_m⁄ô‹_t
 
	gg_m⁄ô‹
;

80 
√t_devi˚
* 
lookup_ªÆ_√tdev
(*
«me
);

81 
m⁄ô‹_öãrÁ˚
* 
ndev_to_m⁄if
(
√t_devi˚
 *
ndev
);

82 
dhd_m⁄_if_›í
(
√t_devi˚
 *
ndev
);

83 
dhd_m⁄_if_°›
(
√t_devi˚
 *
ndev
);

84 
dhd_m⁄_if_subif_°¨t_xmô
(
sk_buff
 *
skb
, 
√t_devi˚
 *
ndev
);

85 
dhd_m⁄_if_£t_mu…iˇ°_li°
(
√t_devi˚
 *
ndev
);

86 
dhd_m⁄_if_ch™ge_mac
(
√t_devi˚
 *
ndev
, *
addr
);

88 c⁄° 
√t_devi˚_›s
 
	gdhd_m⁄_if_›s
 = {

89 .
ndo_›í
 = 
dhd_m⁄_if_›í
,

90 .
	gndo_°›
 = 
dhd_m⁄_if_°›
,

91 .
	gndo_°¨t_xmô
 = 
dhd_m⁄_if_subif_°¨t_xmô
,

92 #i‡(
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(3, 2, 0))

93 .
	gndo_£t_rx_mode
 = 
dhd_m⁄_if_£t_mu…iˇ°_li°
,

95 .
	gndo_£t_mu…iˇ°_li°
 = 
dhd_m⁄_if_£t_mu…iˇ°_li°
,

97 .
	gndo_£t_mac_addªss
 = 
dhd_m⁄_if_ch™ge_mac
,

107 
√t_devi˚
* 
	$lookup_ªÆ_√tdev
(*
«me
)

109 
√t_devi˚
 *
ndev_found
 = 
NULL
;

111 
i
;

112 
Àn
 = 0;

113 
œ°_«me_Àn
 = 0;

114 
√t_devi˚
 *
ndev
;

120 
i
 = 0; i < 
DHD_MAX_IFS
; i++) {

121 
ndev
 = 
	`dhd_idx2√t
(
g_m⁄ô‹
.
dhd_pub
, 
i
);

126 i‡(
ndev
 && 
	`°r°r
“dev->
«me
, "p2p-p2p0")) {

127 
Àn
 = 
	`°æí
("p2p");

132 
Àn
 = 0;

134 i‡(
ndev
 && 
	`°r°r
(
«me
, (ndev->«mê+ 
Àn
))) {

135 i‡(
	`°æí
(
ndev
->
«me
Ë> 
œ°_«me_Àn
) {

136 
ndev_found
 = 
ndev
;

137 
œ°_«me_Àn
 = 
	`°æí
(
ndev
->
«me
);

142  
ndev_found
;

143 
	}
}

145 
m⁄ô‹_öãrÁ˚
* 
	$ndev_to_m⁄if
(
√t_devi˚
 *
ndev
)

147 
i
;

149 
i
 = 0; i < 
DHD_MAX_IFS
; i++) {

150 i‡(
g_m⁄ô‹
.
m⁄_if
[
i
].
m⁄_ndev
 =
ndev
)

151  &
g_m⁄ô‹
.
m⁄_if
[
i
];

154  
NULL
;

155 
	}
}

157 
	$dhd_m⁄_if_›í
(
√t_devi˚
 *
ndev
)

159 
ªt
 = 0;

161 
	`MON_PRINT
("enter\n");

162  
ªt
;

163 
	}
}

165 
	$dhd_m⁄_if_°›
(
√t_devi˚
 *
ndev
)

167 
ªt
 = 0;

169 
	`MON_PRINT
("enter\n");

170  
ªt
;

171 
	}
}

173 
	$dhd_m⁄_if_subif_°¨t_xmô
(
sk_buff
 *
skb
, 
√t_devi˚
 *
ndev
)

175 
ªt
 = 0;

176 
π≠_Àn
;

177 
qos_Àn
 = 0;

178 
dŸ11_hdr_Àn
 = 24;

179 
¢≠_Àn
 = 6;

180 *
pd©a
;

181 
‰ame_˘l
;

182 
§c_mac_addr
[6];

183 
d°_mac_addr
[6];

184 
õì80211_hdr
 *
dŸ11_hdr
;

185 
õì80211_ødiŸ≠_hódî
 *
π≠_hdr
;

186 
m⁄ô‹_öãrÁ˚
* 
m⁄_if
;

188 
	`MON_PRINT
("enter\n");

190 
m⁄_if
 = 
	`ndev_to_m⁄if
(
ndev
);

191 i‡(
m⁄_if
 =
NULL
 || m⁄_if->
ªÆ_ndev
 == NULL) {

192 
	`MON_PRINT
(" cannot find matchedÇet dev, skipÅheÖacket\n");

193 
Áû
;

196 i‡(
	`u∆ikñy
(
skb
->
Àn
 < (
õì80211_ødiŸ≠_hódî
)))

197 
Áû
;

199 
π≠_hdr
 = (
õì80211_ødiŸ≠_hódî
 *)
skb
->
d©a
;

200 i‡(
	`u∆ikñy
(
π≠_hdr
->
ô_vîsi⁄
))

201 
Áû
;

203 
π≠_Àn
 = 
	`õì80211_gë_ødiŸ≠_Àn
(
skb
->
d©a
);

204 i‡(
	`u∆ikñy
(
skb
->
Àn
 < 
π≠_Àn
))

205 
Áû
;

207 
	`MON_PRINT
("ødiŸ≠Üí (should bê14): %d\n", 
π≠_Àn
);

210 
	`skb_puŒ
(
skb
, 
π≠_Àn
);

212 
dŸ11_hdr
 = (
õì80211_hdr
 *)
skb
->
d©a
;

213 
‰ame_˘l
 = 
	`À16_to_˝u
(
dŸ11_hdr
->
‰ame_c⁄åﬁ
);

215 i‡((
‰ame_˘l
 & 
IEEE80211_FCTL_FTYPE
Ë=
IEEE80211_FTYPE_DATA
) {

219 i‡(
dŸ11_hdr
->
‰ame_c⁄åﬁ
 & 0x0080)

220 
qos_Àn
 = 2;

221 i‡((
dŸ11_hdr
->
‰ame_c⁄åﬁ
 & 0x0300) == 0x0300)

222 
dŸ11_hdr_Àn
 += 6;

224 
	`mem˝y
(
d°_mac_addr
, 
dŸ11_hdr
->
addr1
, (dst_mac_addr));

225 
	`mem˝y
(
§c_mac_addr
, 
dŸ11_hdr
->
addr2
, (src_mac_addr));

230 
	`skb_puŒ
(
skb
, 
dŸ11_hdr_Àn
 + 
qos_Àn
 + 
¢≠_Àn
 - (
§c_mac_addr
) * 2);

231 
pd©a
 = (*)
skb
->
d©a
;

232 
	`mem˝y
(
pd©a
, 
d°_mac_addr
, (dst_mac_addr));

233 
	`mem˝y
(
pd©a
 + (
d°_mac_addr
), 
§c_mac_addr
, (src_mac_addr));

234 
	`PKTSETPRIO
(
skb
, 0);

236 
	`MON_PRINT
("i‡«me: %s, m©ched i‡«mê%s\n", 
ndev
->
«me
, 
m⁄_if
->
ªÆ_ndev
->name);

239 
ªt
 = 
	`dhd_°¨t_xmô
(
skb
, 
m⁄_if
->
ªÆ_ndev
);

241  
ªt
;

243 
Áû
:

244 
	`dev_k‰ì_skb
(
skb
);

246 
	}
}

248 
	$dhd_m⁄_if_£t_mu…iˇ°_li°
(
√t_devi˚
 *
ndev
)

250 
m⁄ô‹_öãrÁ˚
* 
m⁄_if
;

252 
m⁄_if
 = 
	`ndev_to_m⁄if
(
ndev
);

253 i‡(
m⁄_if
 =
NULL
 || m⁄_if->
ªÆ_ndev
 == NULL) {

254 
	`MON_PRINT
(" cannot find matchedÇet dev, skipÅheÖacket\n");

256 
	`MON_PRINT
("enter, ifÇame: %s, matched ifÇame %s\n",

257 
ndev
->
«me
, 
m⁄_if
->
ªÆ_ndev
->name);

259 
	}
}

261 
	$dhd_m⁄_if_ch™ge_mac
(
√t_devi˚
 *
ndev
, *
addr
)

263 
ªt
 = 0;

264 
m⁄ô‹_öãrÁ˚
* 
m⁄_if
;

266 
m⁄_if
 = 
	`ndev_to_m⁄if
(
ndev
);

267 i‡(
m⁄_if
 =
NULL
 || m⁄_if->
ªÆ_ndev
 == NULL) {

268 
	`MON_PRINT
(" cannot find matchedÇet dev, skipÅheÖacket\n");

270 
	`MON_PRINT
("enter, ifÇame: %s, matched ifÇame %s\n",

271 
ndev
->
«me
, 
m⁄_if
->
ªÆ_ndev
->name);

273  
ªt
;

274 
	}
}

280 
	$dhd_add_m⁄ô‹
(*
«me
, 
√t_devi˚
 **
√w_ndev
)

282 
i
;

283 
idx
 = -1;

284 
ªt
 = 0;

285 
√t_devi˚
* 
ndev
 = 
NULL
;

286 
dhd_löux_m⁄ô‹_t
 **
dhd_m⁄
;

288 
	`muãx_lock
(&
g_m⁄ô‹
.
lock
);

290 
	`MON_TRACE
("íãr, i‡«me: %s\n", 
«me
);

291 i‡(!
«me
 || !
√w_ndev
) {

292 
	`MON_PRINT
("invalidÖarameters\n");

293 
ªt
 = -
EINVAL
;

294 
out
;

300 
i
 = 0; i < 
DHD_MAX_IFS
; i++)

301 i‡(
g_m⁄ô‹
.
m⁄_if
[
i
].
m⁄_ndev
 =
NULL
) {

302 
idx
 = 
i
;

305 i‡(
idx
 == -1) {

306 
	`MON_PRINT
("exceeds maximum interfaces\n");

307 
ªt
 = -
EFAULT
;

308 
out
;

311 
ndev
 = 
	`Æloc_ëhîdev
((
dhd_löux_m⁄ô‹_t
*));

312 i‡(!
ndev
) {

313 
	`MON_PRINT
("failedÅoállocate memory\n");

314 
ªt
 = -
ENOMEM
;

315 
out
;

318 
ndev
->
ty≥
 = 
ARPHRD_IEEE80211_RADIOTAP
;

319 
	`°∫˝y
(
ndev
->
«me
,Çame, 
IFNAMSIZ
);

320 
ndev
->
«me
[
IFNAMSIZ
 - 1] = 0;

321 
ndev
->
√tdev_›s
 = &
dhd_m⁄_if_›s
;

323 
ªt
 = 
	`ªgi°î_√tdevi˚
(
ndev
);

324 i‡(
ªt
) {

325 
	`MON_PRINT
("Ñegi°î_√tdevi˚ faûed (%d)\n", 
ªt
);

326 
out
;

329 *
√w_ndev
 = 
ndev
;

330 
g_m⁄ô‹
.
m⁄_if
[
idx
].
ødiŸ≠_íabÀd
 = 
TRUE
;

331 
g_m⁄ô‹
.
m⁄_if
[
idx
].
m⁄_ndev
 = 
ndev
;

332 
g_m⁄ô‹
.
m⁄_if
[
idx
].
ªÆ_ndev
 = 
	`lookup_ªÆ_√tdev
(
«me
);

333 
dhd_m⁄
 = (
dhd_löux_m⁄ô‹_t
 **)
	`√tdev_¥iv
(
ndev
);

334 *
dhd_m⁄
 = &
g_m⁄ô‹
;

335 
g_m⁄ô‹
.
m⁄ô‹_°©e
 = 
MONITOR_STATE_INTERFACE_ADDED
;

336 
	`MON_PRINT
("√àdevi˚Ñëu∫ed: 0x%p\n", 
ndev
);

337 
	`MON_PRINT
("foundá m©chedÇë devi˚,Çamê%s\n", 
g_m⁄ô‹
.
m⁄_if
[
idx
].
ªÆ_ndev
->
«me
);

339 
out
:

340 i‡(
ªt
 && 
ndev
)

341 
	`‰ì_√tdev
(
ndev
);

343 
	`muãx_u∆ock
(&
g_m⁄ô‹
.
lock
);

344  
ªt
;

346 
	}
}

348 
	$dhd_dñ_m⁄ô‹
(
√t_devi˚
 *
ndev
)

350 
i
;

351 
boﬁ
 
rﬁlback_lock
 = 
Ál£
;

352 i‡(!
ndev
)

353  -
EINVAL
;

354 
	`muãx_lock
(&
g_m⁄ô‹
.
lock
);

355 
i
 = 0; i < 
DHD_MAX_IFS
; i++) {

356 i‡(
g_m⁄ô‹
.
m⁄_if
[
i
].
m⁄_ndev
 =
ndev
 ||

357 
g_m⁄ô‹
.
m⁄_if
[
i
].
ªÆ_ndev
 =
ndev
) {

358 
g_m⁄ô‹
.
m⁄_if
[
i
].
ªÆ_ndev
 = 
NULL
;

359 i‡(
	`π∆_is_locked
()) {

360 
	`π∆_u∆ock
();

361 
rﬁlback_lock
 = 
åue
;

363 
	`uƒegi°î_√tdev
(
g_m⁄ô‹
.
m⁄_if
[
i
].
m⁄_ndev
);

364 
	`‰ì_√tdev
(
g_m⁄ô‹
.
m⁄_if
[
i
].
m⁄_ndev
);

365 
g_m⁄ô‹
.
m⁄_if
[
i
].
m⁄_ndev
 = 
NULL
;

366 
g_m⁄ô‹
.
m⁄ô‹_°©e
 = 
MONITOR_STATE_INTERFACE_DELETED
;

370 i‡(
rﬁlback_lock
) {

371 
	`π∆_lock
();

372 
rﬁlback_lock
 = 
Ál£
;

375 i‡(
g_m⁄ô‹
.
m⁄ô‹_°©e
 !=

376 
MONITOR_STATE_INTERFACE_DELETED
)

377 
	`MON_PRINT
("interfaceÇot found in monitor IFárray, isÅhisá monitor IF? 0x%p\n",

378 
ndev
);

379 
	`muãx_u∆ock
(&
g_m⁄ô‹
.
lock
);

382 
	}
}

384 
	$dhd_m⁄ô‹_öô
(*
dhd_pub
)

386 i‡(
g_m⁄ô‹
.
m⁄ô‹_°©e
 =
MONITOR_STATE_DEINIT
) {

387 
g_m⁄ô‹
.
dhd_pub
 = dhd_pub;

388 
	`muãx_öô
(&
g_m⁄ô‹
.
lock
);

389 
g_m⁄ô‹
.
m⁄ô‹_°©e
 = 
MONITOR_STATE_INIT
;

392 
	}
}

394 
	$dhd_m⁄ô‹_unöô
()

396 
i
;

397 
√t_devi˚
 *
ndev
;

398 
boﬁ
 
rﬁlback_lock
 = 
Ál£
;

399 
	`muãx_lock
(&
g_m⁄ô‹
.
lock
);

400 i‡(
g_m⁄ô‹
.
m⁄ô‹_°©e
 !
MONITOR_STATE_DEINIT
) {

401 
i
 = 0; i < 
DHD_MAX_IFS
; i++) {

402 
ndev
 = 
g_m⁄ô‹
.
m⁄_if
[
i
].
m⁄_ndev
;

403 i‡(
ndev
) {

404 i‡(
	`π∆_is_locked
()) {

405 
	`π∆_u∆ock
();

406 
rﬁlback_lock
 = 
åue
;

408 
	`uƒegi°î_√tdev
(
ndev
);

409 
	`‰ì_√tdev
(
ndev
);

410 
g_m⁄ô‹
.
m⁄_if
[
i
].
ªÆ_ndev
 = 
NULL
;

411 
g_m⁄ô‹
.
m⁄_if
[
i
].
m⁄_ndev
 = 
NULL
;

412 i‡(
rﬁlback_lock
) {

413 
	`π∆_lock
();

414 
rﬁlback_lock
 = 
Ál£
;

418 
g_m⁄ô‹
.
m⁄ô‹_°©e
 = 
MONITOR_STATE_DEINIT
;

420 
	`muãx_u∆ock
(&
g_m⁄ô‹
.
lock
);

422 
	}
}

	@wldev_common.c

27 
	~<o¶.h
>

28 
	~<löux/kî√l.h
>

29 
	~<löux/kthªad.h
>

30 
	~<löux/√tdevi˚.h
>

32 
	~<wldev_comm⁄.h
>

33 
	~<bcmutûs.h
>

35 
	#htod32
(
i
Ë
	)
i

36 
	#htod16
(
i
Ë
	)
i

37 
	#dtoh32
(
i
Ë
	)
i

38 
	#dtoh16
(
i
Ë
	)
i

39 
	#htodch™•ec
(
i
Ë
	)
i

40 
	#dtohch™•ec
(
i
Ë
	)
i

42 
	#WLDEV_ERROR
(
¨gs
) \

44 
	`¥ötk
(
KERN_ERR
 "WLDEV-ERRORË%†: ", 
__func__
); \

45 
¥ötk
 
¨gs
; \

46 } 0)

	)

48 
dhd_io˘l_íåy_loˇl
(
√t_devi˚
 *
√t
, 
wl_io˘l_t
 *
ioc
, 
cmd
);

50 
s32
 
	$wldev_io˘l
(

51 
√t_devi˚
 *
dev
, 
u32
 
cmd
, *
¨g
, u32 
Àn
, u32 
£t
)

53 
s32
 
ªt
 = 0;

54 
wl_io˘l
 
ioc
;

57 
	`mem£t
(&
ioc
, 0, (ioc));

58 
ioc
.
cmd
 = cmd;

59 
ioc
.
buf
 = 
¨g
;

60 
ioc
.
Àn
 =Üen;

61 
ioc
.
£t
 = set;

63 
ªt
 = 
	`dhd_io˘l_íåy_loˇl
(
dev
, &
ioc
, 
cmd
);

65  
ªt
;

66 
	}
}

72 
s32
 
	$wldev_mkiov¨
(

73 
s8
 *
iov¨_«me
, s8 *
∑øm
, 
s32
 
∑ømÀn
,

74 
s8
 *
iov¨_buf
, 
u32
 
buÊí
)

76 
s32
 
iﬁí
 = 0;

78 
iﬁí
 = 
	`bcm_mkiov¨
(
iov¨_«me
, 
∑øm
, 
∑ømÀn
, 
iov¨_buf
, 
buÊí
);

79  
iﬁí
;

80 
	}
}

82 
s32
 
	$wldev_iov¨_gëbuf
(

83 
√t_devi˚
 *
dev
, 
s8
 *
iov¨_«me
,

84 *
∑øm
, 
s32
 
∑ømÀn
, *
buf
, s32 
buÊí
, 
muãx
* 
buf_sync
)

86 
s32
 
ªt
 = 0;

87 i‡(
buf_sync
) {

88 
	`muãx_lock
(
buf_sync
);

90 
	`wldev_mkiov¨
(
iov¨_«me
, 
∑øm
, 
∑ømÀn
, 
buf
, 
buÊí
);

91 
ªt
 = 
	`wldev_io˘l
(
dev
, 
WLC_GET_VAR
, 
buf
, 
buÊí
, 
FALSE
);

92 i‡(
buf_sync
)

93 
	`muãx_u∆ock
(
buf_sync
);

94  
ªt
;

95 
	}
}

98 
s32
 
	$wldev_iov¨_£tbuf
(

99 
√t_devi˚
 *
dev
, 
s8
 *
iov¨_«me
,

100 *
∑øm
, 
s32
 
∑ømÀn
, *
buf
, s32 
buÊí
, 
muãx
* 
buf_sync
)

102 
s32
 
ªt
 = 0;

103 
s32
 
iov¨_Àn
;

104 i‡(
buf_sync
) {

105 
	`muãx_lock
(
buf_sync
);

107 
iov¨_Àn
 = 
	`wldev_mkiov¨
(
iov¨_«me
, 
∑øm
, 
∑ømÀn
, 
buf
, 
buÊí
);

108 i‡(
iov¨_Àn
 > 0)

109 
ªt
 = 
	`wldev_io˘l
(
dev
, 
WLC_SET_VAR
, 
buf
, 
iov¨_Àn
, 
TRUE
);

111 
ªt
 = 
BCME_BUFTOOSHORT
;

112 i‡(
buf_sync
)

113 
	`muãx_u∆ock
(
buf_sync
);

114  
ªt
;

115 
	}
}

117 
s32
 
	$wldev_iov¨_£töt
(

118 
√t_devi˚
 *
dev
, 
s8
 *
iov¨
, 
s32
 
vÆ
)

120 
s8
 
iov¨_buf
[
WLC_IOCTL_SMLEN
];

122 
vÆ
 = 
	`htod32
(val);

123 
	`mem£t
(
iov¨_buf
, 0, (iovar_buf));

124  
	`wldev_iov¨_£tbuf
(
dev
, 
iov¨
, &
vÆ
, (vÆ), 
iov¨_buf
,

125 (
iov¨_buf
), 
NULL
);

126 
	}
}

129 
s32
 
	$wldev_iov¨_gëöt
(

130 
√t_devi˚
 *
dev
, 
s8
 *
iov¨
, 
s32
 *
pvÆ
)

132 
s8
 
iov¨_buf
[
WLC_IOCTL_SMLEN
];

133 
s32
 
îr
;

135 
	`mem£t
(
iov¨_buf
, 0, (iovar_buf));

136 
îr
 = 
	`wldev_iov¨_gëbuf
(
dev
, 
iov¨
, 
pvÆ
, (*pvÆ), 
iov¨_buf
,

137 (
iov¨_buf
), 
NULL
);

138 i‡(
îr
 == 0)

140 
	`mem˝y
(
pvÆ
, 
iov¨_buf
, (*pval));

141 *
pvÆ
 = 
	`dtoh32
(*pval);

143  
îr
;

144 
	}
}

150 
s32
 
	$wldev_mkiov¨_bsscfg
(

151 c⁄° 
s8
 *
iov¨_«me
, s8 *
∑øm
, 
s32
 
∑ømÀn
,

152 
s8
 *
iov¨_buf
, 
s32
 
buÊí
, s32 
bssidx
)

154 c⁄° 
s8
 *
¥efix
 = "bsscfg:";

155 
s8
 *
p
;

156 
u32
 
¥efixÀn
;

157 
u32
 
«mñí
;

158 
u32
 
iﬁí
;

160 i‡(
bssidx
 == 0) {

161  
	`wldev_mkiov¨
((
s8
*)
iov¨_«me
, (s8 *)
∑øm
, 
∑ømÀn
,

162 (
s8
 *Ë
iov¨_buf
, 
buÊí
);

165 
¥efixÀn
 = (
u32
Ë
	`°æí
(
¥efix
);

166 
«mñí
 = (
u32
Ë
	`°æí
(
iov¨_«me
) + 1;

167 
iﬁí
 = 
¥efixÀn
 + 
«mñí
 + (
u32
Ë+ 
∑ømÀn
;

169 i‡(
buÊí
 < 0 || 
iﬁí
 > (
u32
)buflen)

171 
	`WLDEV_ERROR
(("%s: buf„∏i†toÿsh‹t\n", 
__FUNCTION__
));

172  
BCME_BUFTOOSHORT
;

175 
p
 = (
s8
 *)
iov¨_buf
;

178 
	`mem˝y
(
p
, 
¥efix
, 
¥efixÀn
);

179 
p
 +
¥efixÀn
;

182 
	`mem˝y
(
p
, 
iov¨_«me
, 
«mñí
);

183 
p
 +
«mñí
;

186 
bssidx
 = 
	`htod32
(bssidx);

187 
	`mem˝y
(
p
, &
bssidx
, (
u32
));

188 
p
 +(
u32
);

191 i‡(
∑ømÀn
)

192 
	`mem˝y
(
p
, 
∑øm
, 
∑ømÀn
);

194  
iﬁí
;

196 
	}
}

198 
s32
 
	$wldev_iov¨_gëbuf_bsscfg
(

199 
√t_devi˚
 *
dev
, 
s8
 *
iov¨_«me
,

200 *
∑øm
, 
s32
 
∑ømÀn
, *
buf
, s32 
buÊí
, s32 
bsscfg_idx
, 
muãx
* 
buf_sync
)

202 
s32
 
ªt
 = 0;

203 i‡(
buf_sync
) {

204 
	`muãx_lock
(
buf_sync
);

207 
	`wldev_mkiov¨_bsscfg
(
iov¨_«me
, 
∑øm
, 
∑ømÀn
, 
buf
, 
buÊí
, 
bsscfg_idx
);

208 
ªt
 = 
	`wldev_io˘l
(
dev
, 
WLC_GET_VAR
, 
buf
, 
buÊí
, 
FALSE
);

209 i‡(
buf_sync
) {

210 
	`muãx_u∆ock
(
buf_sync
);

212  
ªt
;

214 
	}
}

216 
s32
 
	$wldev_iov¨_£tbuf_bsscfg
(

217 
√t_devi˚
 *
dev
, 
s8
 *
iov¨_«me
,

218 *
∑øm
, 
s32
 
∑ømÀn
, *
buf
, s32 
buÊí
, s32 
bsscfg_idx
, 
muãx
* 
buf_sync
)

220 
s32
 
ªt
 = 0;

221 
s32
 
iov¨_Àn
;

222 i‡(
buf_sync
) {

223 
	`muãx_lock
(
buf_sync
);

225 
iov¨_Àn
 = 
	`wldev_mkiov¨_bsscfg
(
iov¨_«me
, 
∑øm
, 
∑ømÀn
, 
buf
, 
buÊí
, 
bsscfg_idx
);

226 i‡(
iov¨_Àn
 > 0)

227 
ªt
 = 
	`wldev_io˘l
(
dev
, 
WLC_SET_VAR
, 
buf
, 
iov¨_Àn
, 
TRUE
);

229 
ªt
 = 
BCME_BUFTOOSHORT
;

232 i‡(
buf_sync
) {

233 
	`muãx_u∆ock
(
buf_sync
);

235  
ªt
;

236 
	}
}

238 
s32
 
	$wldev_iov¨_£töt_bsscfg
(

239 
√t_devi˚
 *
dev
, 
s8
 *
iov¨
, 
s32
 
vÆ
, s32 
bssidx
)

241 
s8
 
iov¨_buf
[
WLC_IOCTL_SMLEN
];

243 
vÆ
 = 
	`htod32
(val);

244 
	`mem£t
(
iov¨_buf
, 0, (iovar_buf));

245  
	`wldev_iov¨_£tbuf_bsscfg
(
dev
, 
iov¨
, &
vÆ
, (vÆ), 
iov¨_buf
,

246 (
iov¨_buf
), 
bssidx
, 
NULL
);

247 
	}
}

250 
s32
 
	$wldev_iov¨_gëöt_bsscfg
(

251 
√t_devi˚
 *
dev
, 
s8
 *
iov¨
, 
s32
 *
pvÆ
, s32 
bssidx
)

253 
s8
 
iov¨_buf
[
WLC_IOCTL_SMLEN
];

254 
s32
 
îr
;

256 
	`mem£t
(
iov¨_buf
, 0, (iovar_buf));

257 
îr
 = 
	`wldev_iov¨_gëbuf_bsscfg
(
dev
, 
iov¨
, 
pvÆ
, (*pvÆ), 
iov¨_buf
,

258 (
iov¨_buf
), 
bssidx
, 
NULL
);

259 i‡(
îr
 == 0)

261 
	`mem˝y
(
pvÆ
, 
iov¨_buf
, (*pval));

262 *
pvÆ
 = 
	`dtoh32
(*pval);

264  
îr
;

265 
	}
}

267 
	$wldev_gë_lök_•ìd
(

268 
√t_devi˚
 *
dev
, *
∂ök_•ìd
)

270 
îr‹
;

272 i‡(!
∂ök_•ìd
)

273  -
ENOMEM
;

274 
îr‹
 = 
	`wldev_io˘l
(
dev
, 
WLC_GET_RATE
, 
∂ök_•ìd
, (), 0);

275 i‡(
	`u∆ikñy
(
îr‹
))

276  
îr‹
;

279 *
∂ök_•ìd
 *= 500;

280  
îr‹
;

281 
	}
}

283 
	$wldev_gë_rssi
(

284 
√t_devi˚
 *
dev
, *
¥ssi
)

286 
scb_vÆ_t
 
scb_vÆ
;

287 
îr‹
;

289 i‡(!
¥ssi
)

290  -
ENOMEM
;

291 
	`bzîo
(&
scb_vÆ
, (
scb_vÆ_t
));

293 
îr‹
 = 
	`wldev_io˘l
(
dev
, 
WLC_GET_RSSI
, &
scb_vÆ
, (
scb_vÆ_t
), 0);

294 i‡(
	`u∆ikñy
(
îr‹
))

295  
îr‹
;

297 *
¥ssi
 = 
	`dtoh32
(
scb_vÆ
.
vÆ
);

298  
îr‹
;

299 
	}
}

301 
	$wldev_gë_ssid
(

302 
√t_devi˚
 *
dev
, 
wlc_ssid_t
 *
pssid
)

304 
îr‹
;

306 i‡(!
pssid
)

307  -
ENOMEM
;

308 
îr‹
 = 
	`wldev_io˘l
(
dev
, 
WLC_GET_SSID
, 
pssid
, (
wlc_ssid_t
), 0);

309 i‡(
	`u∆ikñy
(
îr‹
))

310  
îr‹
;

311 
pssid
->
SSID_Àn
 = 
	`dtoh32
(pssid->SSID_len);

312  
îr‹
;

313 
	}
}

315 
	$wldev_gë_b™d
(

316 
√t_devi˚
 *
dev
, 
uöt
 *
pb™d
)

318 
îr‹
;

320 
îr‹
 = 
	`wldev_io˘l
(
dev
, 
WLC_GET_BAND
, 
pb™d
, (
uöt
), 0);

321  
îr‹
;

322 
	}
}

324 
	$wldev_£t_b™d
(

325 
√t_devi˚
 *
dev
, 
uöt
 
b™d
)

327 
îr‹
 = -1;

329 i‡((
b™d
 =
WLC_BAND_AUTO
Ë|| (b™d =
WLC_BAND_5G
Ë|| (b™d =
WLC_BAND_2G
)) {

330 
îr‹
 = 
	`wldev_io˘l
(
dev
, 
WLC_SET_BAND
, &
b™d
, (b™d), 
åue
);

331 i‡(!
îr‹
)

332 
	`dhd_bus_b™d_£t
(
dev
, 
b™d
);

334  
îr‹
;

335 
	}
}

337 
	$wldev_£t_cou¡ry
(

338 
√t_devi˚
 *
dev
, *
cou¡ry_code
)

340 
îr‹
 = -1;

341 
wl_cou¡ry_t
 
c•ec
 = {{0}, 0, {0}};

342 
scb_vÆ_t
 
scbvÆ
;

343 
smbuf
[
WLC_IOCTL_SMLEN
];

345 i‡(!
cou¡ry_code
)

346  
îr‹
;

348 
îr‹
 = 
	`wldev_iov¨_gëbuf
(
dev
, "cou¡ry", &
c•ec
, (cspec),

349 
smbuf
, (smbuf), 
NULL
);

350 i‡(
îr‹
 < 0)

351 
	`WLDEV_ERROR
(("%s: gë cou¡ry faûed = %d\n", 
__FUNCTION__
, 
îr‹
));

353 i‡((
îr‹
 < 0) ||

354 (
	`°∫cmp
(
cou¡ry_code
, 
smbuf
, 
WLC_CNTRY_BUF_SZ
) != 0)) {

355 
	`bzîo
(&
scbvÆ
, (
scb_vÆ_t
));

356 
îr‹
 = 
	`wldev_io˘l
(
dev
, 
WLC_DISASSOC
, &
scbvÆ
, (
scb_vÆ_t
), 
åue
);

357 i‡(
îr‹
 < 0) {

358 
	`WLDEV_ERROR
(("%s: set country failed dueÅo DisassocÉrror %d\n",

359 
__FUNCTION__
, 
îr‹
));

360  
îr‹
;

362 
c•ec
.
ªv
 = -1;

363 
	`mem˝y
(
c•ec
.
cou¡ry_abbªv
, 
cou¡ry_code
, 
WLC_CNTRY_BUF_SZ
);

364 
	`mem˝y
(
c•ec
.
ccode
, 
cou¡ry_code
, 
WLC_CNTRY_BUF_SZ
);

365 
	`gë_cu°omized_cou¡ry_code
((*)&
c•ec
.
cou¡ry_abbªv
, &cspec);

366 
îr‹
 = 
	`wldev_iov¨_£tbuf
(
dev
, "cou¡ry", &
c•ec
, (cspec),

367 
smbuf
, (smbuf), 
NULL
);

368 i‡(
îr‹
 < 0) {

369 
	`WLDEV_ERROR
(("%s: set country for %sás %sÑev %d failed\n",

370 
__FUNCTION__
, 
cou¡ry_code
, 
c•ec
.
ccode
, c•ec.
ªv
));

371  
îr‹
;

373 
	`dhd_bus_cou¡ry_£t
(
dev
, &
c•ec
);

374 
	`WLDEV_ERROR
(("%s: set country for %sás %sÑev %d\n",

375 
__FUNCTION__
, 
cou¡ry_code
, 
c•ec
.
ccode
, c•ec.
ªv
));

378 
	}
}

	@siutils_priv.h

27 #i‚def 
_siutûs_¥iv_h_


28 
	#_siutûs_¥iv_h_


	)

30 
	#SI_ERROR
(
¨gs
Ë
¥ötf
 
	)
args

32 
	#SI_MSG
(
¨gs
)

	)

34 #ifde‡
BCMDBG_SI


35 
	#SI_VMSG
(
¨gs
Ë
¥ötf
 
	)
args

37 
	#SI_VMSG
(
¨gs
)

	)

40 
	#IS_SIM
(
chùpkg
Ë((chùpkg =
HDLSIM_PKG_ID
Ë|| (chùpkg =
HWSIM_PKG_ID
))

	)

42 
	$uöt32
 (*
	tsi_öåsoff_t
)(*
	töå_¨g
);

43 (*
	tsi_öå§e°‹e_t
)(*
	töå_¨g
, 
	tuöt32
 
	t¨g
);

44 
	$boﬁ
 (*
	tsi_öå£«bÀd_t
)(*
	töå_¨g
);

46 
	sgpioh_ôem
 {

47 *
¨g
;

48 
boﬁ
 
Àvñ
;

49 
gpio_h™dÀr_t
 
h™dÀr
;

50 
uöt32
 
evít
;

51 
gpioh_ôem
 *
√xt
;

52 } 
	tgpioh_ôem_t
;

55 
	ssi_öfo
 {

56 
si_pub
 
pub
;

58 *
osh
;

59 *
sdh
;

61 
uöt
 
dev_c‹eid
;

62 *
öå_¨g
;

63 
si_öåsoff_t
 
öåsoff_‚
;

64 
si_öå§e°‹e_t
 
öå§e°‹e_‚
;

65 
si_öå£«bÀd_t
 
öå£«bÀd_‚
;

67 *
pch
;

69 
gpioh_ôem_t
 *
gpioh_hód
;

71 
boﬁ
 
mem£g
;

73 *
v¨s
;

74 
uöt
 
v¨sz
;

76 *
curm≠
;

77 *
ªgs
[
SI_MAXCORES
];

79 
uöt
 
curidx
;

80 
uöt
 
numc‹es
;

81 
uöt
 
c‹eid
[
SI_MAXCORES
];

82 
uöt32
 
c‹esba
[
SI_MAXCORES
];

83 *
ªgs2
[
SI_MAXCORES
];

84 
uöt32
 
c‹esba2
[
SI_MAXCORES
];

85 
uöt32
 
c‹esba_size
[
SI_MAXCORES
];

86 
uöt32
 
c‹esba2_size
[
SI_MAXCORES
];

88 *
curwøp
;

89 *
wøµîs
[
SI_MAXCORES
];

90 
uöt32
 
wøpba
[
SI_MAXCORES
];

92 
uöt32
 
cü
[
SI_MAXCORES
];

93 
uöt32
 
cib
[
SI_MAXCORES
];

94 
uöt32
 
oob_rouãr
;

95 } 
	tsi_öfo_t
;

97 
	#SI_INFO
(
sih
Ë(
si_öfo_t
 *)(
uöçå
)
	)
sih

99 
	#GOODCOREADDR
(
x
, 
b
Ë(((xË>(b)Ë&& ((xË< ((bË+ 
SI_MAXCORES
 * 
SI_CORE_SIZE
)) && \

100 
	`ISALIGNED
((
x
), 
SI_CORE_SIZE
))

	)

101 
	#GOODREGS
(
ªgs
Ë(‘egsË!
NULL
 && 
	`ISALIGNED
((
uöçå
)‘egs), 
SI_CORE_SIZE
))

	)

102 
	#BADCOREADDR
 0

	)

103 
	#GOODIDX
(
idx
Ë(((
uöt
)idxË< 
SI_MAXCORES
)

	)

104 
	#NOREV
 -1

	)

106 
	#PCI
(
si
Ë((
	`BUSTYPE
((si)->
pub
.
bu°y≥
Ë=
PCI_BUS
) && \

107 ((
si
)->
pub
.
busc‹ëy≥
 =
PCI_CORE_ID
))

	)

109 
	#PCIE_GEN1
(
si
Ë((
	`BUSTYPE
((si)->
pub
.
bu°y≥
Ë=
PCI_BUS
) && \

110 ((
si
)->
pub
.
busc‹ëy≥
 =
PCIE_CORE_ID
))

	)

112 
	#PCIE_GEN2
(
si
Ë((
	`BUSTYPE
((si)->
pub
.
bu°y≥
Ë=
PCI_BUS
) && \

113 ((
si
)->
pub
.
busc‹ëy≥
 =
PCIE2_CORE_ID
))

	)

115 
	#PCIE
(
si
Ë(
	`PCIE_GEN1
(siË|| 
	`PCIE_GEN2
(si))

	)

117 
	#PCMCIA
(
si
Ë((
	`BUSTYPE
((si)->
pub
.
bu°y≥
Ë=
PCMCIA_BUS
Ë&& ((si)->
mem£g
 =
TRUE
))

	)

122 
	#SI_FAST
(
si
Ë(
	`PCIE
(siË|| (
	`PCI
(siË&& ((si)->
pub
.
busc‹îev
 >13)))

	)

124 
	#PCIEREGS
(
si
Ë(((*)((si)->
curm≠
Ë+ 
PCI_16KB0_PCIREGS_OFFSET
))

	)

125 
	#CCREGS_FAST
(
si
Ë(((*)((si)->
curm≠
Ë+ 
PCI_16KB0_CCREGS_OFFSET
))

	)

131 
	#INTR_OFF
(
si
, 
öå_vÆ
) \

132 i‡((
si
)->
öåsoff_‚
 && (si)->
c‹eid
[(si)->
curidx
] =(si)->
dev_c‹eid
) { \

133 
öå_vÆ
 = (*(
si
)->
öåsoff_‚
)((si)->
öå_¨g
); 
	}

	)
}

134 
	#INTR_RESTORE
(
si
, 
öå_vÆ
) \

135 i‡((
si
)->
öå§e°‹e_‚
 && (si)->
c‹eid
[(si)->
curidx
] =(si)->
dev_c‹eid
) { \

136 (*(
si
)->
öå§e°‹e_‚
)((si)->
öå_¨g
, 
öå_vÆ
); }

	)

139 
	#LPOMINFREQ
 25000

	)

140 
	#LPOMAXFREQ
 43000

	)

141 
	#XTALMINFREQ
 19800000

	)

142 
	#XTALMAXFREQ
 20200000

	)

143 
	#PCIMINFREQ
 25000000

	)

144 
	#PCIMAXFREQ
 34000000

	)

146 
	#ILP_DIV_5MHZ
 0

	)

147 
	#ILP_DIV_1MHZ
 4

	)

149 
	#PCI_FORCEHT
(
si
) \

150 (((
	`PCIE_GEN1
(
si
)Ë&& (si->
pub
.
chù
 =
BCM4311_CHIP_ID
Ë&& ((si->pub.
chùªv
 <= 1))) || \

151 ((
	`PCI
(
si
Ë|| 
	`PCIE_GEN1
(si)Ë&& (si->
pub
.
chù
 =
BCM4321_CHIP_ID
)) || \

152 (
	`PCIE_GEN1
(
si
Ë&& (si->
pub
.
chù
 =
BCM4716_CHIP_ID
)) || \

153 (
	`PCIE_GEN1
(
si
Ë&& (si->
pub
.
chù
 =
BCM4748_CHIP_ID
)))

	)

156 
	#DEFAULT_GPIO_ONTIME
 10

	)

157 
	#DEFAULT_GPIO_OFFTIME
 90

	)

159 #i‚de‡
DEFAULT_GPIOTIMERVAL


160 
	#DEFAULT_GPIOTIMERVAL
 ((
DEFAULT_GPIO_ONTIME
 << 
GPIO_ONTIME_SHIFT
Ë| 
DEFAULT_GPIO_OFFTIME
)

	)

164 
sb_sˇn
(
si_t
 *
sih
, *
ªgs
, 
uöt
 
devid
);

165 
uöt
 
sb_c‹eid
(
si_t
 *
sih
);

166 
uöt
 
sb_ötÊag
(
si_t
 *
sih
);

167 
uöt
 
sb_Êag
(
si_t
 *
sih
);

168 
sb_£töt
(
si_t
 *
sih
, 
siÊag
);

169 
uöt
 
sb_c‹evíd‹
(
si_t
 *
sih
);

170 
uöt
 
sb_c‹îev
(
si_t
 *
sih
);

171 
uöt
 
sb_c‹îeg
(
si_t
 *
sih
, uöà
c‹eidx
, uöà
ªgoff
, uöà
mask
, uöà
vÆ
);

172 
boﬁ
 
sb_isc‹eup
(
si_t
 *
sih
);

173 *
sb_£tc‹eidx
(
si_t
 *
sih
, 
uöt
 
c‹eidx
);

174 
uöt32
 
sb_c‹e_cÊags
(
si_t
 *
sih
, uöt32 
mask
, uöt32 
vÆ
);

175 
sb_c‹e_cÊags_wo
(
si_t
 *
sih
, 
uöt32
 
mask
, uöt32 
vÆ
);

176 
uöt32
 
sb_c‹e_sÊags
(
si_t
 *
sih
, uöt32 
mask
, uöt32 
vÆ
);

177 
sb_commô
(
si_t
 *
sih
);

178 
uöt32
 
sb_ba£
(uöt32 
adm©ch
);

179 
uöt32
 
sb_size
(uöt32 
adm©ch
);

180 
sb_c‹e_ª£t
(
si_t
 *
sih
, 
uöt32
 
bôs
, uöt32 
ª£tbôs
);

181 
sb_c‹e_dißbÀ
(
si_t
 *
sih
, 
uöt32
 
bôs
);

182 
uöt32
 
sb_addr•a˚
(
si_t
 *
sih
, 
uöt
 
asidx
);

183 
uöt32
 
sb_addr•a˚size
(
si_t
 *
sih
, 
uöt
 
asidx
);

184 
sb_numaddr•a˚s
(
si_t
 *
sih
);

186 
uöt32
 
sb_£t_öôüt‹_to
(
si_t
 *
sih
, uöt32 
to
, 
uöt
 
idx
);

188 
boﬁ
 
sb_è˛ór
(
si_t
 *
sih
, boﬁ 
dëaûs
);

192 
boﬁ
 
sb_pci_pmeˇp
(
si_t
 *
sih
);

193 
	go¶_öfo
;

194 
boﬁ
 
sb_pci_Á°pmeˇp
(
o¶_öfo
 *
osh
);

195 
boﬁ
 
sb_pci_pme˛r
(
si_t
 *
sih
);

196 
sb_pci_pmìn
(
si_t
 *
sih
);

197 
uöt
 
sb_pcõ_ªadªg
(*
sih
, uöà
addπy≥
, uöà
off£t
);

200 
si_t
 *
ai_©èch
(
uöt
 
pcidev
, 
o¶_t
 *
osh
, *
ªgs
, uöà
bu°y≥
,

201 *
sdh
, **
v¨s
, 
uöt
 *
v¨sz
);

202 
si_t
 *
ai_k©èch
(
o¶_t
 *
osh
);

203 
ai_sˇn
(
si_t
 *
sih
, *
ªgs
, 
uöt
 
devid
);

205 
uöt
 
ai_Êag
(
si_t
 *
sih
);

206 
ai_£töt
(
si_t
 *
sih
, 
siÊag
);

207 
uöt
 
ai_c‹eidx
(
si_t
 *
sih
);

208 
uöt
 
ai_c‹evíd‹
(
si_t
 *
sih
);

209 
uöt
 
ai_c‹îev
(
si_t
 *
sih
);

210 
boﬁ
 
ai_isc‹eup
(
si_t
 *
sih
);

211 *
ai_£tc‹eidx
(
si_t
 *
sih
, 
uöt
 
c‹eidx
);

212 
uöt32
 
ai_c‹e_cÊags
(
si_t
 *
sih
, uöt32 
mask
, uöt32 
vÆ
);

213 
ai_c‹e_cÊags_wo
(
si_t
 *
sih
, 
uöt32
 
mask
, uöt32 
vÆ
);

214 
uöt32
 
ai_c‹e_sÊags
(
si_t
 *
sih
, uöt32 
mask
, uöt32 
vÆ
);

215 
uöt
 
ai_c‹îeg
(
si_t
 *
sih
, uöà
c‹eidx
, uöà
ªgoff
, uöà
mask
, uöà
vÆ
);

216 
ai_c‹e_ª£t
(
si_t
 *
sih
, 
uöt32
 
bôs
, uöt32 
ª£tbôs
);

217 
ai_c‹e_dißbÀ
(
si_t
 *
sih
, 
uöt32
 
bôs
);

218 
ai_numaddr•a˚s
(
si_t
 *
sih
);

219 
uöt32
 
ai_addr•a˚
(
si_t
 *
sih
, 
uöt
 
asidx
);

220 
uöt32
 
ai_addr•a˚size
(
si_t
 *
sih
, 
uöt
 
asidx
);

221 
ai_c‹óddr•a˚X
(
si_t
 *
sih
, 
uöt
 
asidx
, 
uöt32
 *
addr
, uöt32 *
size
);

222 
uöt
 
ai_wøp_ªg
(
si_t
 *
sih
, 
uöt32
 
off£t
, uöt32 
mask
, uöt32 
vÆ
);

226 
	#ub_sˇn
(
a
, 
b
, 
c
Ëdÿ{} 0)

	)

227 
	#ub_Êag
(
a
Ë(0)

	)

228 
	#ub_£töt
(
a
, 
b
Ëdÿ{} 0)

	)

229 
	#ub_c‹eidx
(
a
Ë(0)

	)

230 
	#ub_c‹evíd‹
(
a
Ë(0)

	)

231 
	#ub_c‹îev
(
a
Ë(0)

	)

232 
	#ub_isc‹eup
(
a
Ë(0)

	)

233 
	#ub_£tc‹eidx
(
a
, 
b
Ë(0)

	)

234 
	#ub_c‹e_cÊags
(
a
, 
b
, 
c
Ë(0)

	)

235 
	#ub_c‹e_cÊags_wo
(
a
, 
b
, 
c
Ëdÿ{} 0)

	)

236 
	#ub_c‹e_sÊags
(
a
, 
b
, 
c
Ë(0)

	)

237 
	#ub_c‹îeg
(
a
, 
b
, 
c
, 
d
, 
e
Ë(0)

	)

238 
	#ub_c‹e_ª£t
(
a
, 
b
, 
c
Ëdÿ{} 0)

	)

239 
	#ub_c‹e_dißbÀ
(
a
, 
b
Ëdÿ{} 0)

	)

240 
	#ub_numaddr•a˚s
(
a
Ë(0)

	)

241 
	#ub_addr•a˚
(
a
, 
b
Ë(0)

	)

242 
	#ub_addr•a˚size
(
a
, 
b
Ë(0)

	)

243 
	#ub_võw
(
a
, 
b
Ëdÿ{} 0)

	)

244 
	#ub_dum¥egs
(
a
, 
b
Ëdÿ{} 0)

	)

	@
1
.
0
28
362
aiutils.c
bcmevent.c
bcmsdh.c
bcmsdh_linux.c
bcmsdh_sdmmc.c
bcmsdh_sdmmc_linux.c
bcmutils.c
bcmwifi_channels.c
dhd_bta.c
dhd_cdc.c
dhd_cfg80211.c
dhd_common.c
dhd_custom_gpio.c
dhd_gpio.c
dhd_linux.c
dhd_linux_sched.c
dhd_sdio.c
hndpmu.c
linux_osl.c
sbutils.c
siutils.c
wl_android.c
wl_cfg80211.c
wl_cfgp2p.c
wl_iw.c
wl_linux_mon.c
wldev_common.c
siutils_priv.h
