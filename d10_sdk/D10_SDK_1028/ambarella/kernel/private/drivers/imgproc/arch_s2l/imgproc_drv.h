/*
 * imgproc_drv.h
 *
 * History:
 *	2008/04/02 - [Andrew Lu] created file
 *	2014/07/14 - [Jian Tang] modified file
 *
 *
 * Copyright (c) 2015 Ambarella, Inc.
 *
 * This file and its contents ("Software") are protected by intellectual
 * property rights including, without limitation, U.S. and/or foreign
 * copyrights. This Software is also the confidential and proprietary
 * information of Ambarella, Inc. and its licensors. You may not use, reproduce,
 * disclose, distribute, modify, or otherwise prepare derivative works of this
 * Software or any portion thereof except pursuant to a signed license agreement
 * or nondisclosure agreement with Ambarella, Inc. or its authorized affiliates.
 * In the absence of such an agreement, you agree to promptly notify and return
 * this Software to Ambarella, Inc.
 *
 * THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF NON-INFRINGEMENT,
 * MERCHANTABILITY, AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL AMBARELLA, INC. OR ITS AFFILIATES BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; COMPUTER FAILURE OR MALFUNCTION; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 */

#ifndef _IMGPROC_DRV_H
#define  _IMGPROC_DRV_H


/* For debug */
#define	DEBUG_PRINT_IMGPROC		(0)

/* 3A structure size */
#define	FLOAT_TILE_CONFIG_SIZE			(320)
#define	LS_THREE_D_TABLE_SIZE			(4096)
#define	PIXEL_MAP_MAX_SIZE				(4096*3008/8)	//width & height round of 16
/*input lookup tabel for color correction 192*3 */
#define	NUM_IN_LOOKUP				(192 * 3)
/*matrix tabel for color correction 16*16*16 */
#define	NUM_MATRIX					(16 * 16 * 16)
#define	NUM_OUT_LOOKUP				(256)
#define	NUM_CHROMA_GAIN_CURVE		(128)
#define	NUM_K0123_TABLE				(24)
#define	MCTF_CFG_SIZE					(528)
#define	MAX_TILES_H					(33)
#define	MAX_TILES_V						(33)
#define	NUM_MAX_VIGNETTE				(MAX_TILES_H * MAX_TILES_V * (2))
#define	DYN_BPC_THD_TABLE_SIZE		((3)*(128)*(2))
#define	NUM_EXPOSURE_CURVE			(256)
#define	NUM_ALPHA_TABLE				(512)
#define	NUM_COEFF_FIR					(256)
#define	NUM_CORING_TABLE				(256)
#define	NUM_FPN_REG					(1024)
#define	NUM_LNL_TONE_CURVE			(256)
#define	LISO_CFG_DATA_SIZE				(1024)

#define	MAX_SLICE_FOR_FRAME			(2)		/* Check this macro in "iav_config.h" */
#define	MAX_HDR_SLICE_FOR_FRAME		(MAX_SLICE_FOR_FRAME * (MAX_EXPOSURE_NUM - 1))

typedef enum {
	IMB_RGB_FIFO_BASE = 0x00,
	IMB_CFA_FIFO_BASE = 0x01,
	IMB_HDR_BLEND_FIFO_BASE = 0x02,
	IMB_HDR_SHORT_FIFO_BASE = 0x03,
	IMB_INPUT_LUT = 0x04,
	IMB_MATRIX_DRAM = 0x05,
	IMB_OUTPUT_LUT = 0x06,
	IMB_CHROMA_GAIN_CURVE = 0x07,
	IMB_HOT_PIXEL_THD_TABLE = 0x08,
	IMB_DARK_PIXEL_THD_TABLE = 0x09,
	IMB_MCTF_CFG = 0x0A,
	IMB_K0123_TABLE = 0x0B,
	IMB_EXPOSURE_GAIN_CURVE = 0x0C,
	IMB_LUMA_SHARPEN_ALPHA_TABLE = 0x0D,
	IMB_COEFF_FIR_0 = 0x0E,
	IMB_COEFF_FIR_1 = 0x0F,
	IMB_CORING_TABLE = 0x10,
	IMB_VIGNETTE_R_GAIN = 0x11,
	IMB_VIGNETTE_GO_GAIN = 0x12,
	IMB_VIGNETTE_GE_GAIN = 0x13,
	IMB_VIGNETTE_B_GAIN = 0x14,
	IMB_PIXEL_MAP = 0x15,
	IMB_FPN_REG = 0x16,
	IMB_LNL_TONE_CURVE = 0x17,
	IMB_FLOAT_TILE_CONFIG = 0x18,
	IMB_LUMA_3D_TABLE = 0x19,

	IMB_NUM,
	IMB_FIRST = 0,
	IMB_LAST = IMB_NUM,
} IMGPROC_MEM_BLOCK;


/* DO NOT change the order of this enumeration */
typedef enum {
	/* IMGPROC memory block size */
	IMS_RGB_FIFO_BASE = RGB_AAA_DATA_BLOCK_ARRAY,
	IMS_CFA_FIFO_BASE = CFA_AAA_DATA_BLOCK_ARRAY,
	IMS_HDR_BLEND_FIFO_BASE = CFA_PRE_HDR_BLOCK_ARRAY,
	IMS_HDR_SHORT_FIFO_BASE = CFA_PRE_HDR_BLOCK_ARRAY,
	IMS_INPUT_LUT = NUM_IN_LOOKUP * sizeof(u32),
	IMS_MATRIX_DRAM = NUM_MATRIX * sizeof(u32),
	IMS_OUTPUT_LUT = NUM_OUT_LOOKUP * sizeof(u32),
	IMS_CHROMA_GAIN_CURVE = NUM_CHROMA_GAIN_CURVE * sizeof(u16),
	IMS_HOT_PIXEL_THD_TABLE = DYN_BPC_THD_TABLE_SIZE,
	IMS_DARK_PIXEL_THD_TABLE = DYN_BPC_THD_TABLE_SIZE,
	IMS_MCTF_CFG = MCTF_CFG_SIZE,
	IMS_K0123_TABLE = NUM_K0123_TABLE * sizeof(u16),
	IMS_EXPOSURE_GAIN_CURVE = NUM_EXPOSURE_CURVE * sizeof(u16),
	IMS_LUMA_SHARPEN_ALPHA_TABLE = NUM_ALPHA_TABLE,
	IMS_COEFF_FIR_0 = NUM_COEFF_FIR,
	IMS_COEFF_FIR_1 = NUM_COEFF_FIR,
	IMS_CORING_TABLE = NUM_CORING_TABLE,
	IMS_VIGNETTE_R_GAIN = NUM_MAX_VIGNETTE,
	IMS_VIGNETTE_GO_GAIN = NUM_MAX_VIGNETTE,
	IMS_VIGNETTE_GE_GAIN = NUM_MAX_VIGNETTE,
	IMS_VIGNETTE_B_GAIN = NUM_MAX_VIGNETTE,
	IMS_PIXEL_MAP = 0,		// PIXEL_MAP_MAX_SIZE,
	IMS_FPN_REG = NUM_FPN_REG,
	IMS_LNL_TONE_CURVE = NUM_LNL_TONE_CURVE * sizeof(u16),
	IMS_FLOAT_TILE_CONFIG = FLOAT_TILE_CONFIG_SIZE,
	IMS_LUMA_3D_TABLE = (LS_THREE_D_TABLE_SIZE >> 1),

	/* IMGPROC memory block offset */
	IMO_RGB_FIFO_BASE = 0x0,
	IMO_CFA_FIFO_BASE = IMO_RGB_FIFO_BASE + IMS_RGB_FIFO_BASE,
	IMO_HDR_BLEND_FIFO_BASE = IMO_CFA_FIFO_BASE + IMS_CFA_FIFO_BASE,
	IMO_HDR_SHORT_FIFO_BASE = IMO_HDR_BLEND_FIFO_BASE + IMS_HDR_BLEND_FIFO_BASE,

	IMO_INPUT_LUT = 0x0,
	IMO_MATRIX_DRAM = IMO_INPUT_LUT + IMS_INPUT_LUT,
	IMO_OUTPUT_LUT = IMO_MATRIX_DRAM + IMS_MATRIX_DRAM,
	IMO_CHROMA_GAIN_CURVE = IMO_OUTPUT_LUT + IMS_OUTPUT_LUT,
	IMO_HOT_PIXEL_THD_TABLE = IMO_CHROMA_GAIN_CURVE + IMS_CHROMA_GAIN_CURVE,
	IMO_DARK_PIXEL_THD_TABLE = IMO_HOT_PIXEL_THD_TABLE + IMS_HOT_PIXEL_THD_TABLE,
	IMO_MCTF_CFG = IMO_DARK_PIXEL_THD_TABLE + IMS_DARK_PIXEL_THD_TABLE,
	IMO_K0123_TABLE = IMO_MCTF_CFG + IMS_MCTF_CFG,
	IMO_EXPOSURE_GAIN_CURVE = IMO_K0123_TABLE + IMS_K0123_TABLE,
	IMO_LUMA_SHARPEN_ALPHA_TABLE = IMO_EXPOSURE_GAIN_CURVE + IMS_EXPOSURE_GAIN_CURVE,
	IMO_COEFF_FIR_0 = IMO_LUMA_SHARPEN_ALPHA_TABLE + IMS_LUMA_SHARPEN_ALPHA_TABLE,
	IMO_COEFF_FIR_1 = IMO_COEFF_FIR_0 + IMS_COEFF_FIR_0,
	IMO_CORING_TABLE = IMO_COEFF_FIR_1 + IMS_COEFF_FIR_1,
	IMO_VIGNETTE_R_GAIN = IMO_CORING_TABLE + IMS_CORING_TABLE,
	IMO_VIGNETTE_GO_GAIN = IMO_VIGNETTE_R_GAIN + IMS_VIGNETTE_R_GAIN,
	IMO_VIGNETTE_GE_GAIN = IMO_VIGNETTE_GO_GAIN + IMS_VIGNETTE_GO_GAIN,
	IMO_VIGNETTE_B_GAIN = IMO_VIGNETTE_GE_GAIN + IMS_VIGNETTE_GE_GAIN,
	IMO_PIXEL_MAP = IMO_VIGNETTE_B_GAIN + IMS_VIGNETTE_B_GAIN,
	IMO_FPN_REG = IMO_PIXEL_MAP + IMS_PIXEL_MAP,
	IMO_LNL_TONE_CURVE = IMO_FPN_REG + IMS_FPN_REG,
	IMO_FLOAT_TILE_CONFIG = IMO_LNL_TONE_CURVE + IMS_LNL_TONE_CURVE,
	IMO_LUMA_3D_TABLE = IMO_FLOAT_TILE_CONFIG + IMS_FLOAT_TILE_CONFIG,

	/* IMGPROC memory total size */
	IMS_READ_TOTAL_SIZE = PAGE_ALIGN(IMO_HDR_SHORT_FIFO_BASE + IMS_HDR_SHORT_FIFO_BASE),
	IMS_WRITE_TOTAL_SIZE = PAGE_ALIGN(IMO_LUMA_3D_TABLE + IMS_LUMA_3D_TABLE),
} IMGPROC_MEM;

typedef enum {
	IMG_CMD_AAA_STATISTICS_SETUP = 0,
	IMG_CMD_AAA_HISTORGRAM_SETUP = 1,
	IMG_CMD_AAA_STATISTICS_SETUP1 = 2,
	IMG_CMD_AAA_STATISTICS_SETUP2 = 3,
	IMG_CMD_VIDEO_HISO_CONFIG_UPDATE = 4,
	IMG_CMD_VIN_STATISTICS_SETUP = 5,
	IMG_CMD_SET_HDR_PROC_CONTROL = 6,
	IMG_CMD_VIGNETTE_COMPENSATION = 7,
	IMG_CMD_RGB_GAIN_ADJUSTMENT = 8,
	IMG_CMD_DIGITAL_GAIN_SATURATION_LEVEL = 9,
	IMG_CMD_LOCAL_EXPOSURE = 10,
	IMG_CMD_BLACK_LEVEL_GLOBAL_OFFSET = 11,
	IMG_CMD_NUM,
} IMG_CMDS;

struct imgproc_private_info {
	dma_addr_t	rd_phys;
	u8	* rd_virt;
	u8	* wr_virt;
	u8	* addr[IMB_NUM];
	u64	statis_3a_cnt;
	u8	dsp_enc_mode;
	u8	hdr_buf_id;
	u8	expo_num_minus_1 : 2;
	u8	save_cmd : 1;			/* flag to save image command for resume case */
	u8	reserved1 : 5;
	u8	cfa_next;
	u8	rgb_next;
	u8	hdr_next;
	u8	cfa_entry[MAX_SLICE_FOR_FRAME];
	u8	rgb_entry[MAX_SLICE_FOR_FRAME];
	u8	hdr_entry[MAX_HDR_SLICE_FOR_FRAME];
	u32	raw_hist_addr;
	u16	raw_pitch;
	u16	reserved2;
	u32	dsp_pts;
	u32	reserved3;
	u64	mono_pts;

	spinlock_t			lock;
	wait_queue_head_t		statis_wq;
	wait_queue_head_t		dsp_wq;

#ifdef CONFIG_IMGPROC_MEM_LARGE
	u32		prev_addr;
	u32		proc_count;
	u32		raw_batch_num;
#endif
};


#endif	// _IMGPROC_DRV_H

